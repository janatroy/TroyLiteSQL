using System;
using System.Data;
using System.Configuration;
using DataAccessLayer;
using System.Text;
using System.Collections;
using System.Globalization;
using System.IO;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Threading.Tasks;
/// <summary>
/// Summary description for BusinessLogic
/// </summary>
public class BusinessLogic
{
    public BusinessLogic()
    {
        //
        // TODO: Add constructor logic here
        //
    }

    public BusinessLogic(string con)
    {
        //
        // TODO: Add constructor logic here
        this.ConnectionString = con;
        //
    }


    private string _connectionstring = string.Empty;
    private string _user = string.Empty;
    private string StartDt;
    private string EndDt;
    private string Brand;
    private int Category;
    private string Model;
    private string PrdctNme;
    private int Stock;
    private int Catid;
    private int Custid;
    private int Suppid;



    private string rate;
    private string Nlc;
    private string Buyrate;
    private string Vat;
    private string StockValue1;
    private string Itemcode;
    private string savename;
    private string chkCat;
    private string chko;

    private string chkBran;
    private string chkProd;
    private string chkMod;
    private string chkitem;
    private string chkstoc;
    private string chksNlc;
    private string chksVat;
    private string chksBuyrate;
    private string chksrate;


    private string chksbuy;
    private string chksnlc;
    private string chkspur;
    private string chksnlp;


    private string chksAll;
    private string sdBrand;
    private string sdCat;
    private string chkpaymod;

    private string sdProd;
    private string sdMod;
    private string sditem;
    private string sdstoc;
    private string sdVat;
    private string sdBuyrate;
    private string sdNlc;
    private string sdrate;
    private string sdfirstlvl;
    private string sdsecondlvl;
    private string sdthirdlvl;
    private string sdfourlvl;
    private string sdfifthlvl;
    private string sodfirstlvl;
    private string sodsecondlvl;
    private string sodthirdlvl;
    private string sodfourlvl;
    private string sodfifthlvl;


    private string subfifthlvl;
    private string subfourlvl;
    private string subsixthlvl;
    private string subseventhlvl;
    private string subfirstlvl;
    private string subsecondlvl;
    private string subthirdlvl;
    private string subeighthlvl;

    private string subfifthlevel;
    private string subfourlevel;
    private string subsixthlevel;
    private string subseventhlevel;
    private string subfirstlevel;
    private string subsecondlevel;
    private string subthirdlevel;
    private string subeighthlevel;

    private string sdFirstSub;
    private string sdSecondSub;
    private string sdThirdSub;
    private string sdFourSub;
    private string sdFiveSub;

    private string stype;
    private string stblenme;
    private string desc;
    private string qname;
    private string qnamed;
    private string qry;
    private string qrydesc;


    private string sdpay = "";
    private string sdcust = "";
    private string sdsixthlvl = "";
    private string sdseventhlvl = "";
    private string sodsixthlvl = "";
    private string sodseventhlvl = "";
    private string chkcustnme = "";
    private string chkcustaddr = "";
    private string chkcustphone = "";
    private string chkpur = "";
    private string chkint = "";
    private string chkbilln = "";
    private string chkbilldt = "";
    private string chkpay = "";
    private string chkemp = "";
    //    string chksAll = "";


    private string rblpur = "";
    private string rblint = "";
    private string stdt = "";
    private string endt = "";
    public string stdts
    {
        get { return stdt; }
        set { stdt = value; }
    }
    public string endts
    {
        get { return endt; }
        set { endt = value; }
    }
    public string rblpurs
    {
        get { return rblpur; }
        set { rblpur = value; }
    }
    public string rblints
    {
        get { return rblint; }
        set { rblint = value; }
    }


    ///// 4-10-2012 Kanna Mam

    private string txtst = "";
    private string txtva = "";
    private string txtnl = "";
    private string txtra = "";
    private string txtbu = "";
    private string dat = "";
    public string txtnls
    {
        get { return txtnl; }
        set { txtnl = value; }
    }
    public string txtras
    {
        get { return txtra; }
        set { txtra = value; }
    }
    public string txtbus
    {
        get { return txtbu; }
        set { txtbu = value; }
    }
    public string dats
    {
        get { return dat; }
        set { dat = value; }
    }

    public string txtsts
    {
        get { return txtst; }
        set { txtst = value; }

    }
    public string txtvas
    {
        get { return txtva; }
        set { txtva = value; }
    }


    //19-09-2012(Sales)

    private string chkdiscount = "";
    private string chkfreight = "";
    public string chkdiscounts
    {
        get { return chkdiscount; }
        set { chkdiscount = value; }
    }
    public string chkfreights
    {
        get { return chkfreight; }
        set { chkfreight = value; }
    }

    //


    public string chkbilldts
    {
        get { return chkbilldt; }
        set { chkbilldt = value; }
    }
    public string chkpays
    {
        get { return chkpay; }
        set { chkpay = value; }
    }
    public string chkemps
    {
        get { return chkemp; }
        set { chkemp = value; }
    }
    public string chkbillns
    {
        get { return chkbilln; }
        set { chkbilln = value; }
    }
    public string chkints
    {
        get { return chkint; }
        set { chkint = value; }
    }

    public string chkcustphones
    {
        get { return chkcustphone; }
        set { chkcustphone = value; }
    }
    public string chkpurs
    {
        get { return chkpur; }
        set { chkpur = value; }
    }
    public string chkcustnmes
    {
        get { return chkcustnme; }
        set { chkcustnme = value; }
    }
    public string chkcustaddrs
    {
        get { return chkcustaddr; }
        set { chkcustaddr = value; }
    }
    public string sdpays
    {
        get { return sdpay; }
        set { sdpay = value; }
    }
    public string sdcusts
    {
        get { return sdcust; }
        set { sdcust = value; }
    }
    public string sdsixthlvls
    {
        get { return sdsixthlvl; }
        set { sdsixthlvl = value; }
    }
    public string sdseventhlvls
    {
        get { return sdseventhlvl; }
        set { sdseventhlvl = value; }
    }
    public string sodsixthlvls
    {
        get { return sodsixthlvl; }
        set { sodsixthlvl = value; }
    }
    public string sodseventhlvls
    {
        get { return sodseventhlvl; }
        set { sodseventhlvl = value; }
    }


    public string subseventhlevels
    {
        get { return subseventhlevel; }
        set { subseventhlevel = value; }
    }
    public string subfirstlevels
    {
        get { return subfirstlevel; }
        set { subfirstlevel = value; }
    }
    public string subthirdlevels
    {
        get { return subthirdlevel; }
        set { subthirdlevel = value; }
    }
    public string subsecondlevels
    {
        get { return subsecondlevel; }
        set { subsecondlevel = value; }
    }
    public string subfourlevels
    {
        get { return subfourlevel; }
        set { subfourlevel = value; }
    }
    public string subfifthlevels
    {
        get { return subfifthlevel; }
        set { subfifthlevel = value; }
    }
    public string subsixthlevels
    {
        get { return subsixthlevel; }
        set { subsixthlevel = value; }
    }
    public string subeighthlevels
    {
        get { return subeighthlevel; }
        set { subeighthlevel = value; }
    }


    public string qnames
    {
        get { return qname; }
        set { qname = value; }
    }
    public string qnameds
    {
        get { return qnamed; }
        set { qnamed = value; }
    }
    public string qrys
    {
        get { return qry; }
        set { qry = value; }
    }
    public string qrydescs
    {
        get { return qrydesc; }
        set { qrydesc = value; }
    }
    public string descs
    {
        get { return desc; }
        set { desc = value; }
    }
    public string stypes
    {
        get { return stype; }
        set { stype = value; }

    }
    public string stblenmes
    {
        get { return stblenme; }
        set { stblenme = value; }
    }


    public string chkitems
    {
        get { return chkitem; }
        set { chkitem = value; }
    }

    public string chkstocs
    {
        get { return chkstoc; }
        set { chkstoc = value; }
    }
    public string chksNlcs
    {
        get { return chksNlc; }
        set { chksNlc = value; }
    }
    public string chksVats
    {
        get { return chksVat; }
        set { chksVat = value; }
    }
    public string chksBuyrates
    {
        get { return chksBuyrate; }
        set { chksBuyrate = value; }
    }

    public string chksrates
    {
        get { return chksrate; }
        set { chksrate = value; }
    }




    public string chksbuys
    {
        get { return chksbuy; }
        set { chksbuy = value; }
    }
    public string chksnlps
    {
        get { return chksnlp; }
        set { chksnlp = value; }
    }
    public string chkspurs
    {
        get { return chkspur; }
        set { chkspur = value; }
    }
    public string chksnlcs
    {
        get { return chksnlc; }
        set { chksnlc = value; }
    }






    public string chksAlls
    {
        get { return chksAll; }
        set { chksAll = value; }
    }

    public string chkpaymods
    {
        get { return chkpaymod; }
        set { chkpaymod = value; }
    }

    public string sdBrands
    {
        get { return sdBrand; }
        set { sdBrand = value; }
    }
    public string sdCats
    {
        get { return sdCat; }
        set { sdCat = value; }
    }
    public string sdProds
    {
        get { return sdProd; }
        set { sdProd = value; }
    }
    public string sdMods
    {
        get { return sdMod; }
        set { sdMod = value; }
    }
    public string sditems
    {
        get { return sditem; }
        set { sditem = value; }
    }
    public string sdstocs
    {
        get { return sdstoc; }
        set { sdstoc = value; }
    }
    public string sdVats
    {
        get { return sdVat; }
        set { sdVat = value; }
    }
    public string sdNlcs
    {
        get { return sdNlc; }
        set { sdNlc = value; }
    }
    public string sdBuyrates
    {
        get { return sdBuyrate; }
        set { sdBuyrate = value; }
    }
    public string sdrates
    {
        get { return sdrate; }
        set { sdrate = value; }
    }
    public string sdfirstlvls
    {
        get { return sdfirstlvl; }
        set { sdfirstlvl = value; }
    }
    public string sdsecondlvls
    {
        get { return sdsecondlvl; }
        set { sdsecondlvl = value; }
    }
    public string sdthirdlvls
    {
        get { return sdthirdlvl; }
        set { sdthirdlvl = value; }
    }
    public string sdfourlvls
    {
        get { return sdfourlvl; }
        set { sdfourlvl = value; }
    }
    public string sdfifthlvls
    {
        get { return sdfifthlvl; }
        set { sdfifthlvl = value; }
    }

    public string sodfirstlvls
    {
        get { return sodfirstlvl; }
        set { sodfirstlvl = value; }
    }
    public string sodsecondlvls
    {
        get { return sodsecondlvl; }
        set { sodsecondlvl = value; }
    }
    public string sodthirdlvls
    {
        get { return sodthirdlvl; }
        set { sodthirdlvl = value; }
    }
    public string sodfourlvls
    {
        get { return sodfourlvl; }
        set { sodfourlvl = value; }
    }
    public string sodfifthlvls
    {
        get { return sodfifthlvl; }
        set { sodfifthlvl = value; }
    }



    public string subfifthlvlst
    {
        get { return subfifthlvl; }
        set { subfifthlvl = value; }
    }
    public string subfourlvlst
    {
        get { return subfourlvl; }
        set { subfourlvl = value; }
    }
    public string subthirdlvlst
    {
        get { return subthirdlvl; }
        set { subthirdlvl = value; }
    }
    public string subsecondlvlst
    {
        get { return subsecondlvl; }
        set { subsecondlvl = value; }
    }
    public string subfirstlvlst
    {
        get { return subfirstlvl; }
        set { subfirstlvl = value; }
    }



    public string subfifthlvls
    {
        get { return subfifthlvl; }
        set { subfifthlvl = value; }
    }
    public string subfourlvls
    {
        get { return subfourlvl; }
        set { subfourlvl = value; }
    }
    public string subthirdlvls
    {
        get { return subthirdlvl; }
        set { subthirdlvl = value; }
    }
    public string subsecondlvls
    {
        get { return subsecondlvl; }
        set { subsecondlvl = value; }
    }
    public string subfirstlvls
    {
        get { return subfirstlvl; }
        set { subfirstlvl = value; }
    }
    public string subsixthlvls
    {
        get { return subsixthlvl; }
        set { subsixthlvl = value; }
    }
    public string subseventhlvls
    {
        get { return subseventhlvl; }
        set { subseventhlvl = value; }
    }
    public string subeighthlvls
    {
        get { return subeighthlvl; }
        set { subeighthlvl = value; }
    }




    //public string sdfirstsubl
    //{
    //    get { return sdFirstSub; }
    //    set { sdFirstSub = value; }
    //}

    //public string sdsecondsubl
    //{
    //    get { return sdSecondSub; }
    //    set { sdSecondSub = value; }
    //}

    //public string sdthirdsubl
    //{
    //    get { return sdThirdSub; }
    //    set { sdThirdSub = value; }
    //}

    //public string sdfoursubl
    //{
    //    get { return sdFourSub; }
    //    set { sdFourSub = value; }
    //}

    //public string sdfivesubl
    //{
    //    get { return sdFiveSub; }
    //    set { sdFiveSub = value; }
    //}



    public string chkBrans
    {
        get { return chkBran; }
        set { chkBran = value; }
    }
    public string chkProds
    {
        get { return chkProd; }
        set { chkProd = value; }
    }
    public string chkMods
    {
        get { return chkMod; }
        set { chkMod = value; }
    }
    public string chkCats
    {
        get { return chkCat; }
        set { chkCat = value; }
    }

    public string chkos
    {
        get { return chko; }
        set { chko = value; }
    }
    public string StockValues
    {
        get { return StockValue1; }
        set { StockValue1 = value; }
    }
    public string savenames
    {
        get { return savename; }
        set { savename = value; }
    }
    public string Rated
    {
        get { return rate; }
        set { rate = value; }
    }
    public string Nlcs
    {
        get { return Nlc; }
        set { Nlc = value; }
    }
    public string Buyrates
    {
        get { return Buyrate; }
        set { Buyrate = value; }
    }
    public string Vats
    {
        get { return Vat; }
        set { Vat = value; }
    }
    public string Itemcodes
    {
        get { return Itemcode; }
        set { Itemcode = value; }
    }












    private string Internal;
    private string Productcode;
    private string test;
    public string ssdbQry = string.Empty;
    public string connStr = string.Empty;

    protected string ConnectionString
    {
        get { return _connectionstring; }
        set { _connectionstring = value; }
    }

    protected string User
    {
        get { return _user; }
        set { _user = value; }
    }

    public String StartDate
    {
        get { return StartDt; }
        set { StartDt = value; }
    }
    public String EndDate
    {
        get { return EndDt; }
        set { EndDt = value; }
    }

    public string Brands
    {
        get { return Brand; }
        set { Brand = value; }
    }

    public int Categorys
    {
        get { return Category; }
        set { Category = value; }
    }

    public string Models
    {
        get { return Model; }
        set { Model = value; }
    }

    public string PrdctNmes
    {
        get { return PrdctNme; }
        set { PrdctNme = value; }
    }

    public int Stocks
    {
        get { return Stock; }
        set { Stock = value; }
    }

    public int Catids
    {
        get { return Catid; }
        set { Catid = value; }
    }

    public int Custids
    {
        get { return Custid; }
        set { Custid = value; }
    }

    public int Suppids
    {
        get { return Suppid; }
        set { Suppid = value; }
    }

    public string Internals
    {
        get { return Internal; }
        set { Internal = value; }
    }
    public string Productcd
    {
        get { return Productcode; }
        set { Productcode = value; }
    }

    public bool CheckForOffline(string filePath)
    {

        if (File.Exists(filePath) && (ConfigurationManager.AppSettings["InstallationType"] == "ONLINE-OFFLINE-CLIENT"))
        {
            return false;
        }
        else if (!File.Exists(filePath) && (ConfigurationManager.AppSettings["InstallationType"] == "ONLINE-OFFLINE-CLIENT"))
        {
            return true;
        }
        else if (File.Exists(filePath) && (ConfigurationManager.AppSettings["InstallationType"] == "ONLINE-OFFLINE-SERVER"))
        {
            return true;
        }
        else if (!File.Exists(filePath) && (ConfigurationManager.AppSettings["InstallationType"] == "ONLINE-OFFLINE-SERVER"))
        {
            return false;
        }
        else
        {
            return false;
        }

    }

    public string CreateConnectionString(string connStr)
    {
        string connectionString = string.Empty;
        string newConnection = string.Empty;

        if (connStr.IndexOf("Data Source") > -1)
            connectionString = connStr;
        else
            connectionString = System.Configuration.ConfigurationManager.ConnectionStrings[connStr].ConnectionString;

        newConnection = connectionString.Remove(connectionString.LastIndexOf("Password=") + 9);

        newConnection = newConnection + Helper.GetPasswordForDB(connectionString);
        //if (connectionString.ToUpper().Contains("ATTACHDBFILENAME"))
        //{
        //    return connectionString;
        //}
        //return connectionString;
        return newConnection;

    }

    private string GetPasswordForDB(string connStr)
    {
        string connection = string.Empty;

        string encrptedString = connStr.Remove(0, connStr.Remove(connStr.LastIndexOf("Password=") + 9).Length);

        connection = EncryptDecrypt.DecryptString(encrptedString, "Q£PW&*M");

        return connection;

    }

    public string GetReconDate()
    {

        using (DBManager manager = new DBManager(DataProvider.SqlServer))
        {
            manager.ConnectionString = CreateConnectionString(this.ConnectionString);

            try
            {

                manager.Open();
                object reconDate = manager.ExecuteScalar(CommandType.Text, "Select recon_date from last_recon");

                return DateTime.Parse(reconDate.ToString()).ToString("dd/MM/yyyy");


            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                manager.Dispose();
            }
        }

    }

    public DataSet GetBranch(string connection, string username)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = " SELECT distinct tblUserbranch.DefaultBranchCode, tblUserInfo.UserName,  tblUserInfo.BranchCheck " +
                    " FROM tblUserInfo INNER JOIN tblUserbranch ON tblUserInfo.UserID = tblUserbranch.UserID" +
                    " where UserName='" + username + "'";

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetAppSettings(string connection)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "Select KEYNAME,KEYVALUE From tblSettings";

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetIPAddresses(string connection)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        try
        {
            dbQry = "Select IP From tblIPAddress";

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public void AddIPAddresses(string connection, string IP)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        try
        {
            dbQry = "Insert Into tblIPAddress(IP) Values('" + IP + "')";

            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void DelIPAddresses(string connection, string IP)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        try
        {
            dbQry = "Delete From tblIPAddress Where IP = '" + IP + "'";

            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }
    public DataSet GetUserbranch(string userId, string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        try
        {
            //dbQry = "select username,userpwd,locked,count,Email,DateLock,EmpNo,UserGroup,HideDeviation,BranchCheck from tblUserInfo where LOWER(username) like '" + userId.ToLower() + "'";
            dbQry = "select distinct DefaultBranchCode from tblUserBranch where LOWER(UserID) = '" + userId.ToLower() + "'";

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count == 1)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetUserInfo(string userId, string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        try
        {
            dbQry = "select username,userpwd,locked,count,Email,DateLock,EmpNo,UserGroup,HideDeviation,BranchCheck from tblUserInfo where LOWER(username) like '" + userId.ToLower() + "'";
            //dbQry = " SELECT tblUserInfo.UserName, tblUserInfo.Userpwd, tblUserInfo.Locked, tblUserInfo.Count, tblUserInfo.Email, tblUserInfo.DateLock, tblUserInfo.Empno, " +
            //       " tblUserInfo.UserGroup, tblUserInfo.HideDeviation, tblUserInfo.BranchCheck, tblUserbranch.BranchCode, tblUserbranch.DefaultBranchCode " +
            //       " FROM tblUserInfo INNER JOIN tblUserbranch ON tblUserInfo.UserID = tblUserbranch.UserID " +
            //       " where LOWER(username) like '" + userId.ToLower() + "%'";


            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count == 1)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListUsers(string txtSearch, string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        if (txtSearch == null || txtSearch == "")
            txtSearch = "";
        else
            txtSearch = "%" + txtSearch + "%";

        try
        {
            if ((txtSearch != "") && (txtSearch != null))
            {
                dbQry = "select username,userpwd,locked,count,Email,BranchCheck from tblUserInfo where username like '" + txtSearch.ToLower() + "'";
                //dbQry = " SELECT tblUserInfo.UserName, tblUserInfo.Userpwd, tblUserInfo.Locked, tblUserInfo.Count, tblUserInfo.Email, tblUserInfo.DateLock, tblUserInfo.Empno, " +
                //  " tblUserInfo.UserGroup, tblUserInfo.HideDeviation, tblUserInfo.BranchCheck, tblUserbranch.BranchCode, tblUserbranch.DefaultBranchCode " +
                //  " FROM tblUserInfo INNER JOIN tblUserbranch ON tblUserInfo.UserID = tblUserbranch.UserID " +
                //  " where username like '" + txtSearch.ToLower() + "%'";
            }
            else
            {
                dbQry = "select username,userpwd,locked,count,Email,BranchCheck from tblUserInfo ";
                //dbQry = " SELECT tblUserInfo.UserName, tblUserInfo.Userpwd, tblUserInfo.Locked, tblUserInfo.Count, tblUserInfo.Email, tblUserInfo.DateLock, tblUserInfo.Empno, " +
                //  " tblUserInfo.UserGroup, tblUserInfo.HideDeviation, tblUserInfo.BranchCheck, tblUserbranch.BranchCode, tblUserbranch.DefaultBranchCode " +
                //  " FROM tblUserInfo INNER JOIN tblUserbranch ON tblUserInfo.UserID = tblUserbranch.UserID ";                  
            }

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool IsValidDate(string connection, DateTime datetime)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        try
        {
            dbQry = "Select recon_date from last_recon";

            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                if (DateTime.Parse(retVal.ToString()) < datetime)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }

        }
        catch (Exception ex)
        {
            return false;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public string IsAmountPaidForBill(string billNo)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;

        try
        {
            dbQry = "Select ReceiptNo from tblReceivedAmount Where BillNo=" + billNo;

            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retVal != null) && (retVal != DBNull.Value) && (retVal.ToString() != ""))
            {
                if (int.Parse(retVal.ToString()) > 0)
                    return retVal.ToString();
                else
                    return string.Empty;
            }
            else
            {
                return string.Empty;
            }

        }
        catch (Exception ex)
        {
            return string.Empty;
        }
        finally
        {
            manager.Dispose();
        }

    }

    private DataSet GetOldValues(string connection, string sql)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, sql);
            return ds;
        }
        catch (Exception ex)
        {
            return null;
        }
        finally
        {
            manager.Dispose();
        }
    }

    private string GetAuditString(DataSet ds)
    {
        StringBuilder AuditString = new StringBuilder();

        if (ds.Tables[0].Rows.Count == 2)
        {
            for (int i = 0; i < ds.Tables[0].Columns.Count; i++)
            {
                if (ds.Tables[0].Rows[0][i].ToString() != ds.Tables[0].Rows[1][i].ToString())
                    AuditString.AppendFormat("{0}:{1}->{2},", ds.Tables[0].Columns[i].ColumnName.ToString(), ds.Tables[0].Rows[0][i].ToString(), ds.Tables[0].Rows[1][i].ToString());
            }
        }

        return AuditString.ToString();
    }

    private DataSet GetNewValues(string connection, string sql, DataSet dsAudit)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, sql);

            if (ds.Tables[0].Rows.Count == 1)
            {
                DataRow dr = dsAudit.Tables[0].NewRow();
                dsAudit.Tables[0].Rows.Add(dr);
                for (int i = 0; i < dsAudit.Tables[0].Columns.Count; i++)
                {
                    if (ds.Tables[0].Columns[i].ColumnName.ToString() == dsAudit.Tables[0].Columns[i].ColumnName.ToString())
                    {
                        dsAudit.Tables[0].Rows[1][i] = ds.Tables[0].Rows[0][i].ToString();
                    }

                }
            }

            return dsAudit;

        }
        catch (Exception ex)
        {
            return null;
        }
        finally
        {
            manager.Dispose();
        }
    }

    private string GetNewValues(string connection, string sql)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string retValue = "New Values: ";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, sql);

            if (ds.Tables[0].Rows.Count == 1)
            {
                for (int i = 0; i < ds.Tables[0].Columns.Count; i++)
                {
                    retValue = retValue + ds.Tables[0].Columns[i].ColumnName.ToString();
                    retValue = retValue + ":" + ds.Tables[0].Rows[0][i].ToString();
                    retValue = retValue + " , ";
                }
            }
            else
                return retValue + "Too Many rows returned.";

            return retValue;
        }
        catch (Exception ex)
        {
            return "SYSTEM";
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetNextBillNo(string connection, int BookID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select BookID, BookName,NextEntry from tblBook Where BookStatus='Open' And BookID=" + BookID.ToString();
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListBooks(string txtSearch, string connection, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        if (txtSearch == null || txtSearch == "")
            txtSearch = "%%";
        else
            txtSearch = "%" + txtSearch + "%";

        try
        {
            if (dropDown == "BookRef")
                dbQry = "select BookID,BookRef,BookName,StartEntry,EndEntry,BookStatus,Amount from tblBook where StrConv(BookRef,3) like '" + txtSearch.ToLower() + "'";
            else if (dropDown == "BookName")
                dbQry = "select BookID,BookRef,BookName,StartEntry,EndEntry,BookStatus,Amount from tblBook where StrConv(BookName,3) like '" + txtSearch.ToLower() + "'";
            else
                dbQry = "select BookID,BookRef,BookName,StartEntry,EndEntry,BookStatus,Amount from tblBook";

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet checkUserCredentials(string connection, string username, string password)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select UserID, UserName, UserGroup from tblUserInfo where UserName = '" + username.ToLower()
                + "' and Userpwd = '" + password + "' ";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void DeleteUserInfo(string connection, string username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("Delete from tblUserInfo Where UserName = '{0}' ", username);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblUserRole Where UserName = '{0}' ", username);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }


    public DataSet GetCategoryData(string connection)
    {
        if (connection == null)
        {
            throw new Exception("Connection Expired");
        }

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "Select '' as CategoryID, ''as CategoryName From tblCategories Where 1=0 Union select * from tblCategories Order by CategoryName Asc";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            /*if (ds.Tables[0].Rows.Count > 0)
            {
                return ds;
            }
            else
            {*/

            //DataSet dsRet = new DataSet();
            DataTable dt = new DataTable();
            DataColumn dc;

            dc = new DataColumn("CategoryID");
            dt.Columns.Add(dc);

            dc = new DataColumn("CategoryName");
            dt.Columns.Add(dc);

            ds.Tables.Add(dt);

            DataRow dr = ds.Tables[0].NewRow();

            dr["CategoryID"] = "0";
            dr["CategoryName"] = string.Empty;
            ds.Tables[0].Rows.InsertAt(dr, 0);

            return ds;

            //return ds;

            //}
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListHeading(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select HeadingID, Heading from tblAccHeading";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public int GetNextSequence(string connection, string sql)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        try
        {
            dbQry = sql;
            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retVal != null) && (retVal != DBNull.Value))
                return int.Parse(retVal.ToString());
            else if (retVal == DBNull.Value)
                return 1;
            else
                return -1;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void InsertRecord(string connection, string sQl, string Usernam, string CategoryName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        int retValue = 0;

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string dbQ = string.Empty;

        try
        {
            dbQry = sQl;
            manager.Open();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblCategories Where CategoryName='" + CategoryName + "'");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Category Exists");
                }
            }


            retValue = manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQ = "SELECT KeyValue From tblSettings WHERE key='SAVELOG'";
            //dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            //if (dsd.Tables[0].Rows.Count > 0)
            //    Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            //if (Logsave == "YES")
            //{
            //    logdescription = sQl;
            //    logdescription = logdescription.Trim();
            //    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
            //         DateTime.Now.ToString(), logdescription.ToString(), usernam, "", "InsertSalesNewSeries");
            //    manager.ExecuteNonQuery(CommandType.Text, description);
            //}

            sAuditStr = "Category " + CategoryName + " added. Record Details : User = " + Usernam + " DateTime : " + DateTime.Now.ToString();

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Add New", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public int GetRecord(string connection, string sQl)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        int retValue = 0;
        string dbQry = string.Empty;

        try
        {
            dbQry = sQl;
            manager.Open();
            retValue = (int)manager.ExecuteScalar(CommandType.Text, dbQry);
            return retValue;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void UpdateRecord(string connection, string sQl)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        int retValue = 0;
        string dbQry = string.Empty;

        try
        {
            dbQry = sQl;
            manager.Open();
            retValue = manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetUnitData(string connection)
    {
        if (connection == null)
        {
            throw new Exception("Connection Expired");
        }

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select * from tblUnitMnt Order by Unit Asc";
            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public void UpdateCategory(string connection, string CategoryName, int CategoryID, int CategoryLevel, string Usernam)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        int retValue = 0;
        string dbQry = string.Format("Update tblCategories Set CategoryName = '{0}', CategoryLevel = {2} Where CategoryID = {1}", CategoryName, CategoryID, CategoryLevel);
        string AuditLog = string.Empty;
        DataSet dsAudit = GetOldValues(connection, "Select CategoryName from tblCategories Where CategoryID = " + CategoryID.ToString());

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblCategories Where CategoryName='" + CategoryName + "'");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Category Exists");
                }
            }

            retValue = manager.ExecuteNonQuery(CommandType.Text, dbQry);

            if (dsAudit != null)
            {
                System.Threading.Thread.Sleep(1000);

                dbQ = "SELECT KeyValue From tblSettings WHERE key='SAVELOG'";
                dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
                if (dsd.Tables[0].Rows.Count > 0)
                    Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

                if (Logsave == "YES")
                {
                    logdescription = string.Format("Select CategoryName from tblCategories Where CategoryID = " + CategoryID.ToString());
                    logdescription = logdescription.Trim();
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                         DateTime.Now.ToString(), logdescription.ToString(), Usernam, "", "UpdateCategory");
                    manager.ExecuteNonQuery(CommandType.Text, description);
                }

                dsAudit = GetNewValues(connection, "Select CategoryName from tblCategories Where CategoryID = " + CategoryID.ToString(), dsAudit);
                AuditLog = GetAuditString(dsAudit);
                AuditLog = AuditLog + " User :" + Usernam + " :" + DateTime.Now.ToString();
                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", AuditLog, "Update Category", DateTime.Now.ToString());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void UpdateUnitMnt(string connection, string Unit, int ID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        string dbQry = string.Format("Update tblUnitMnt Set Unit = '{0}' Where ID = {1}", Unit, ID);

        try
        {
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public string GetPassword(string userName, string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.AppendFormat("select Userpwd from tblUserInfo Where UserName = '{0}'", userName);
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds.Tables[0].Rows[0]["Userpwd"].ToString();
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void ResetPassword(string userName, string password, string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        int retValue = 0;
        string dbQry = string.Format("Update tblUserInfo Set Userpwd = '{0}' Where UserName = '{1}'", password, userName);

        try
        {
            manager.Open();
            retValue = manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void ChangePassword(string userName, string password, string connection, DateTime ts)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        int retValue = 0;
        string dbQry = string.Format("Update tblUserInfo Set Userpwd = '{0}', ExpiryDate = '{2}' Where UserName = '{1}'", password, userName, ts.ToString("yyyy-MM-dd"));

        try
        {
            manager.Open();
            retValue = manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListChequeNo(int bnkid)
    {
        //SELECT tblCheque.ChequeBookID, tblCheque.AccountNo, tblCheque.BankID, tblCheque.BankName, tblCheque.FromChequeNo, tblCheque.ToChequeNo, tblChequeitems.ChequeBookID, tblChequeitems.ChequeNo, tblChequeitems.Status
        //FROM tblCheque INNER JOIN tblChequeitems ON tblCheque.ChequeBookID = tblChequeitems.ChequeBookID;
        DBManager manager = new DBManager(DataProvider.SqlServer);
        //manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format(" SELECT tblCheque.ChequeBookID, tblCheque.AccountNo, tblCheque.BankID, tblCheque.BankName, " +
                                  " tblCheque.FromChequeNo, tblCheque.ToChequeNo, tblChequeitems.ChequeBookID, tblChequeitems.ChequeNo, tblChequeitems.Status " +
                                  " FROM tblCheque INNER JOIN tblChequeitems ON tblCheque.ChequeBookID = tblChequeitems.ChequeBookID where tblCheque.BankID=" + bnkid + " and tblChequeitems.Status='N' and tblChequeitems.DamageCheque='N'");
            //dbQry = string.Format(" SELECT tblCheque.ChequeBookID, tblCheque.AccountNo, tblCheque.BankID, tblCheque.BankName, " +
            //                     " tblCheque.FromChequeNo, tblCheque.ToChequeNo, tblChequeitems.ChequeBookID, tblChequeitems.ChequeNo, tblChequeitems.Status " +
            //                     " FROM tblCheque INNER JOIN tblChequeitems ON tblCheque.ChequeBookID = tblChequeitems.ChequeBookID where tblChequeitems.Status='N'"); 
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListBanks()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        //manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName = '{0}' ", "Bank Accounts");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public DataSet ListAccountnumber(string connection, int bankid)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        //manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        int managerid = 0;

        try
        {

            //if (ds.Tables[0].Rows.Count > 0)
            //    managerid = Convert.ToInt32(ds.Tables[0].Rows[0]["BankID"].ToString());


            dbQry = string.Format("select tblCheque.AccountNo,tblCheque.ChequeBookID from tblCheque where tblCheque.BankID= " + bankid + "  ");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListBanksIsActive()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        //manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName = '{0}' and tblLedger.Unuse = 'YES' ", "Bank Accounts");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public DataSet ListBanks(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName = '{0}' ", "Bank Accounts");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListBanksIsActive(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName = '{0}'  and tblLedger.Unuse = 'YES' ", "Bank Accounts");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListTransporters(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select TransporterID,Transporter from tblTransporter ");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet LitsOpenBilts(string ID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            if (ID == "0")
                dbQry = string.Format("select ID, ChalanNo+ ' - ' +BiltiNo as Bilt From tblBilti Where Status = 'Open' Order By 2");
            else
                dbQry = string.Format("select ID, ChalanNo+ ' - ' +BiltiNo as Bilt From tblBilti Where (Status = 'Open' OR ID = " + ID + ") Order By 2");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListExpenses(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName = '{0}'", "General Expenses");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }



    public DataSet ListMeasurementUnits(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select ID, Unit from tblUnitMnt Order By Unit Asc");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListSundryCreditors1(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}') Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors");
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName='Sundry Creditors' Order By ledgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListSundryDebtors(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}') Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors");
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName='Sundry Debtors' Order By ledgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataTable ListCreditorDebitor_LvSearch(string connection, string search)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        DataTable dt = new DataTable();
        string dbQry = string.Empty;

        try
        {
            // ProductName + ' - ' + ItemCode + ' - ' + Model  As ProductName,
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}') Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors");
            dbQry = string.Format("select LedgerId,LedgerName,Add1,Add2, Add3,Mobile from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID where LedgerName like '%" + search + "%' or Add1 like '%" + search + "%' or Add2 like '%" + search + "%' or Add3 like '%" + search + "%' or Mobile like '%" + search + "%' Order By ledgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            dt = ds.Tables[0];

            if (ds.Tables[0].Rows.Count > 0)
                return dt;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataTable ListCreditorDebitor_Lv(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        DataTable dt = new DataTable();
        string dbQry = string.Empty;

        try
        {
            // ProductName + ' - ' + ItemCode + ' - ' + Model  As ProductName,
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}') Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors");
            dbQry = string.Format("select LedgerId,LedgerName,Add1,Add2, Add3,Mobile from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Order By ledgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            dt = ds.Tables[0];

            if (ds.Tables[0].Rows.Count > 0)
                return dt;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListCreditorDebitor_DrptxtCheck(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            // ProductName + ' - ' + ItemCode + ' - ' + Model  As ProductName,
            //dbQry = string.Format("select LedgerId, LedgerName,Add1 from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}') Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors");
            dbQry = string.Format("select LedgerId,LedgerName + ' - ' + Add1 + ' - ' + Add2 + ' - ' + Add3 + ' - '  + Mobile as LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Order By ledgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListUserName(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            // ProductName + ' - ' + ItemCode + ' - ' + Model  As ProductName,
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}') Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors");
            dbQry = string.Format("select UserID,UserName from tblUserInfo Order By UserName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListCreditorDebitor(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            // ProductName + ' - ' + ItemCode + ' - ' + Model  As ProductName,
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}') Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors");
            dbQry = string.Format("select LedgerId,LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Order By ledgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListCustomersDealers(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}') Order By LedgerName Asc ", "Sundry Debtors");
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Order By ledgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListCreditSales(string connection, string CustomerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "Select BillNo,BillDate,CustomerName,Amount as BillAmount, Amount as PendingAmount from tblSales inner join tblDayBook on tblSales.JournalID = tblDayBook.TransNo Where PayMode = 3 AND CustomerID=" + CustomerID;

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListCreditorDebitorForSMS(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}') Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors");
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where LedgerID NOT IN (1,2,3) Order By ledgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListCreditorDebitorSuppliers(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}') Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors");
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblLedger.GroupID IN (1,2) Order By ledgerName");

            dbQry = string.Format("select LedgerId, LedgerName from (tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID) inner join tblAccHeading on tblAccHeading.HeadingId = tblGroups.HeadingId Where (tblLedger.GroupID IN (1) or tblAccHeading.Heading = 'Current Liabilities') Order By ledgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListCreditorDebitorSuppliersIsActive(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}') Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors");
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblLedger.GroupID IN (1,2) Order By ledgerName");

            dbQry = string.Format("select LedgerId, LedgerName from (tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID) inner join tblAccHeading on tblAccHeading.HeadingId = tblGroups.HeadingId Where (tblLedger.GroupID IN (1) or tblAccHeading.Heading = 'Current Liabilities')  and tblLedger.Unuse = 'YES' Order By ledgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListCreditorDebitor()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);

        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select GroupID, GroupName from  tblGroups Where tblGroups.GroupName IN ('{0}','{1}')", "Sundry Debtors", "Sundry Creditors");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListAccHeading()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select HeadingID,Heading From tblAccHeading Order By Heading";

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public DataSet ListGroupForHeading(string HeadingID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select GroupID,GroupName From tblGroups Where HeadingID = " + HeadingID + " Order By GroupName";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListLedgerForGroup(string GroupID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select LedgerID,LedgerName From tblLedger Where GroupID = " + GroupID + " Order By LedgerName";

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListLedgerForGroupIsActive(string GroupID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select LedgerID,LedgerName From tblLedger Where GroupID = " + GroupID + " and tblLedger.Unuse = 'YES' Order By LedgerName";

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListLedger()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName, IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit, Phone,LedgerCategory,tblLedger.BranchCode from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID ";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    #region Group Information

    public DataSet ListGroupInfo(string connection, string txtSearch, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        if (dropDown == "GroupName")
        {
            dbQry = "select GroupID, GroupName, Heading, tblGroups.[Order] from tblGroups inner join tblAccHeading on tblGroups.HeadingID = tblAccHeading.HeadingID Where GroupName like '" + txtSearch + "'" + " Order By GroupName";
        }
        else if (dropDown == "Heading")
        {
            dbQry = "select GroupID, GroupName, Heading, tblGroups.[Order] from tblGroups inner join tblAccHeading on tblGroups.HeadingID = tblAccHeading.HeadingID Where Heading like '" + txtSearch + "'" + " Order By GroupName";
        }
        else
        {
            dbQry = string.Format("select Task_Status_Name,Task_Status_Id from tblTaskStatus Where (Task_Status_Name like '{0}') Order By Task_Status_Name", txtSearch);
        }


        try
        {
            //dbQry = "select GroupID, GroupName, Heading, tblGroups.Order from tblGroups inner join tblAccHeading on tblGroups.HeadingID = tblAccHeading.HeadingID Order by GroupName Asc ";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListGroupInfoExp(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select GroupID, GroupName, Heading, tblGroups.[Order] from tblGroups inner join tblAccHeading on tblGroups.HeadingID = tblAccHeading.HeadingID where GroupName = 'General Expenses' Order by GroupName Asc ";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListGroupInfoBank(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select GroupID, GroupName, Heading, tblGroups.[Order] from tblGroups inner join tblAccHeading on tblGroups.HeadingID = tblAccHeading.HeadingID where GroupName = 'Bank Accounts' Order by GroupName Asc ";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListGroupInfoCust(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select GroupID, GroupName, Heading, tblGroups.[Order] from tblGroups inner join tblAccHeading on tblGroups.HeadingID = tblAccHeading.HeadingID where GroupName = 'Sundry Debtors' Order by GroupName Asc ";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListGroupInfoSupp(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select GroupID, GroupName, Heading, tblGroups.[Order] from tblGroups inner join tblAccHeading on tblGroups.HeadingID = tblAccHeading.HeadingID where GroupName = 'Sundry Creditors' Order by GroupName Asc ";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListGroupForLedInfo(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //Where GroupName NOT IN ('Sundry Creditors','Sundry Debtors','Bank Accounts','General Expenses')
            dbQry = "select GroupID, GroupName, Heading, tblGroups.[Order] from tblGroups inner join tblAccHeading on tblGroups.HeadingID = tblAccHeading.HeadingID Order by GroupName Asc ";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void UpdateGroupInfo(string connection, int HeadingID, string GroupName, int GroupID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string AuditLog = "";
        DataSet dsAudit = GetOldValues(manager.ConnectionString, "Select GroupName,HeadingID from tblGroups Where GroupID = " + GroupID.ToString());

        try
        {
            dbQry = string.Format("Update tblGroups Set GroupName = '{0}', HeadingID = {1} Where GroupID = {2}", GroupName, HeadingID, GroupID);
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            /*Audit Log */

            if (dsAudit != null)
            {
                System.Threading.Thread.Sleep(1000);
                dsAudit = GetNewValues(manager.ConnectionString, "Select GroupName,HeadingID from tblGroups Where GroupID = " + GroupID.ToString(), dsAudit);
                AuditLog = GetAuditString(dsAudit);
                AuditLog = AuditLog + " User :" + this.User + " :" + DateTime.Now.ToString();
                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", AuditLog, "Update GroupInfo", DateTime.Now.ToString());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void InsertGroupInfo(string connection, int HeadingID, string GroupName, int GroupID, int Order)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("Insert Into tblGroups Values ({0},'{1}',{2},{3})", GroupID, GroupName, HeadingID, Order);
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    #endregion

    #region Book

    public void InsertBook(string connection, string BookRef, string BookName, int StartEntry, int EndEntry, decimal Amount)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("Insert Into tblBook(BookRef,BookName,StartEntry,EndEntry,NextEntry,BookStatus,Amount,DateCreated) Values ('{0}','{1}',{2},{3},{4},'{5}',{6},'{7}')", BookRef, BookName, StartEntry, EndEntry, StartEntry, "Open", Amount, DateTime.Now.ToShortDateString());
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void UpdateBook(string connection, string BookRef, string BookName, int StartEntry, int EndEntry, decimal Amount, int BookID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("Update tblBook Set BookRef='{0}',BookName='{1}',StartEntry={2},EndEntry={3},Amount={4} Where BookID={5}", BookRef, BookName, StartEntry, EndEntry, Amount, BookID);
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    #endregion

    public DataSet ListShareHolder()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select LedgerID,LedgerName FROM tblLedger WHERE GroupID IN (SELECT GroupID From tblGroups WHERE HeadingID=1)  Order By LedgerName";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public double GetShareAmount(int LedgerID)
    {
        double debitSum = 0;
        double oB = 0;
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        manager.BeginTransaction();

        dbQry = string.Format("Select Sum(OpenBalanceCR) As OB FROM tblLedger WHERE  LedgerID={0}", LedgerID);
        object retOB = manager.ExecuteScalar(CommandType.Text, dbQry);

        if (retOB != null && retOB != DBNull.Value)
        {
            oB = Convert.ToDouble(manager.ExecuteScalar(CommandType.Text, dbQry));
        }

        dbQry = string.Format("Select SUM(Amount) As Amount FROM tblDayBook WHERE  CreditorID IN (Select LedgerID FROM tblLedger Where LedgerID={0})", LedgerID);
        object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

        if (retVal != null && retVal != DBNull.Value)
        {
            debitSum = Convert.ToDouble(manager.ExecuteScalar(CommandType.Text, dbQry));
        }
        manager.CommitTransaction();

        debitSum = debitSum + oB;

        manager.Dispose();
        return debitSum;

    }

    public void DeletePayment(string connection, int TransNo, bool requireValidation, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        DataSet dsOldRec = new DataSet();
        string dbQry = string.Empty;
        string dbQry123 = string.Empty;
        string State = "N";
        DataSet dsOld = new DataSet();
        string sAuditStr = string.Empty;

        int TTransNo = 0;
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;
        int CheNo=0;
        string oldtrandate = string.Empty;
        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            ds = manager.ExecuteDataSet(CommandType.Text, "Select Amount,DebtorID,CreditorID,TransDate,ChequeNo from tblDayBook Where TransNo=" + TransNo);

            int DebitorID = Convert.ToInt32(ds.Tables[0].Rows[0]["DebtorID"].ToString());
            int CreditorID = Convert.ToInt32(ds.Tables[0].Rows[0]["CreditorID"].ToString());
            if (ds.Tables[0].Rows[0]["ChequeNo"].ToString() != "")
            {
                 CheNo = Convert.ToInt32(ds.Tables[0].Rows[0]["ChequeNo"].ToString());
            }
            double Amount = Convert.ToDouble(ds.Tables[0].Rows[0]["Amount"].ToString());
            DateTime TransDate = Convert.ToDateTime(ds.Tables[0].Rows[0]["TransDate"].ToString());

            if (requireValidation)
            {
                if (!IsValidDate(connection, TransDate))
                {
                    throw new Exception("Invalid Date");
                }
            }

            dbQry = string.Format("Select DebtorID,CreditorID,Amount,Transdate,RefNo from tblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                    oldtrandate = Convert.ToString(dsOld.Tables[0].Rows[0]["transdate"]);
                    oldBillNo = dsOld.Tables[0].Rows[0]["RefNo"].ToString();
                }

            }

            //dbQry = string.Format("Update tblLedger SET Debit = Debit - {0} Where LedgerID={1}", Amount, DebitorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Update tblLedger SET Credit = Credit - {0} Where LedgerID={1}", Amount, CreditorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);


            //Start Save in Log table

            dbQry2 = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, TransNo, "DeletePayment");
                manager.ExecuteNonQuery(CommandType.Text, description);

                logdescription = string.Format("Delete From tblPayment Where JournalID = {0}", TransNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, TransNo, "DeletePayment");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            //End Save in Log table

            dbQry = string.Format("INSERT INTO tblAuditDayBook Select * From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("INSERT INTO tblAuditPayment Select * From tblPayment Where JournalID={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblPayment Where JournalID = {0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            if (requireValidation)
            {

                dbQry123 = string.Format("Select TransNo from tblBankRecon Where TransNo={0}", TransNo);
                dsOldRec = manager.ExecuteDataSet(CommandType.Text, dbQry123);
                if (dsOldRec != null)
                {
                    if (dsOldRec.Tables.Count > 0)
                    {
                        dbQry = string.Format("Delete From tblBankRecon Where TransNo = {0}", TransNo);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }

                if (ds.Tables[0].Rows[0]["ChequeNo"].ToString() != "")
                {
                    dbQry = string.Format("Update tblChequeitems Set DamageCheque='Y' Where ChequeNo='" + CheNo + "' and BankID=" + CreditorID + "");
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                }

                sAuditStr = "Payment Transaction: " + TransNo + " got deleted old Record Details : User=" + Username + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + Amount;

                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {

            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void DeleteReceipt(string connection, int TransNo, bool requireValidation, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        DataSet dsOldRec = new DataSet();
        string dbQry = string.Empty;
        string dbQry123 = string.Empty;
        string State = "N";
        DataSet dsOld = new DataSet();
        string sAuditStr = string.Empty;

        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;

        int TTransNo = 0;
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;

        string oldtrandate = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            ds = manager.ExecuteDataSet(CommandType.Text, "Select Amount,DebtorID,CreditorID,TransDate from tblDayBook Where TransNo=" + TransNo);

            int DebitorID = Convert.ToInt32(ds.Tables[0].Rows[0]["DebtorID"].ToString());
            int CreditorID = Convert.ToInt32(ds.Tables[0].Rows[0]["CreditorID"].ToString());
            double Amount = Convert.ToDouble(ds.Tables[0].Rows[0]["Amount"].ToString());
            DateTime TransDate = Convert.ToDateTime(ds.Tables[0].Rows[0]["TransDate"].ToString());

            if (requireValidation)
            {
                if (!IsValidDate(connection, TransDate))
                {
                    throw new Exception("Invalid Date");
                }
            }


            dbQry = string.Format("Select DebtorID,CreditorID,Amount,Transdate,RefNo from tblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                    oldtrandate = Convert.ToString(dsOld.Tables[0].Rows[0]["transdate"]);
                    oldBillNo = dsOld.Tables[0].Rows[0]["RefNo"].ToString();
                }

            }


            //dbQry = string.Format("Update tblLedger SET Debit = Debit - {0} Where LedgerID={1}", Amount, DebitorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Update tblLedger SET Credit = Credit - {0} Where LedgerID={1}", Amount, CreditorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry2 = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, TransNo, "DeleteReceipt");
                manager.ExecuteNonQuery(CommandType.Text, description);

                logdescription = string.Format("Delete From tblReceipt Where JournalID = {0}", TransNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, TransNo, "DeleteReceipt");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblAuditDayBook Select * From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("INSERT INTO tblAuditReceipt Select * From tblReceipt Where JournalID={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblReceipt Where JournalID = {0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            if (requireValidation)
            {

                dbQry123 = string.Format("Select TransNo from tblBankRecon Where TransNo={0}", TransNo);
                dsOldRec = manager.ExecuteDataSet(CommandType.Text, dbQry123);
                if (dsOldRec != null)
                {
                    if (dsOldRec.Tables.Count > 0)
                    {
                        dbQry = string.Format("Delete From tblBankRecon Where TransNo = {0}", TransNo);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }


                sAuditStr = "Receipt Transaction: " + TransNo + " got deleted old Record Details : User = " + Username + "DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + Amount;

                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    /*
    public void DeleteCustReceipt(string connection, int TransNo, bool requireValidation)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            ds = manager.ExecuteDataSet(CommandType.Text, "Select Amount,DebtorID,CreditorID,TransDate from tblDayBook Where TransNo=" + TransNo);

            int DebitorID = Convert.ToInt32(ds.Tables[0].Rows[0]["DebtorID"].ToString());
            int CreditorID = Convert.ToInt32(ds.Tables[0].Rows[0]["CreditorID"].ToString());
            double Amount = Convert.ToDouble(ds.Tables[0].Rows[0]["Amount"].ToString());
            DateTime TransDate = Convert.ToDateTime(ds.Tables[0].Rows[0]["TransDate"].ToString());

            if (requireValidation)
            {
                if (!IsValidDate(connection, TransDate))
                {
                    throw new Exception("Invalid Date");
                }
            }

            dbQry = string.Format("Update tblLedger SET Debit = Debit - {0} Where LedgerID={1}", Amount, DebitorID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Update tblLedger SET Credit = Credit - {0} Where LedgerID={1}", Amount, CreditorID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblReceipt Where JournalID = {0}", TransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblReceivedAmount Where ReceiptNo = {0}", TransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }*/

    public void DeleteLedger(string connection, int LedgerID, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        DataSet dsOld = new DataSet();

        string dbQry = string.Empty;
        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;
        string sAuditStr = string.Empty;

        int oldLedgerID = 0;
        string oldLedgerName = string.Empty;
        string oldmobile = string.Empty;
        int oldgroup = 0;
        string oldphone = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry2 = string.Format("Select LedgerName,LedgerID,phone,mobile,GroupID from tblledger Where LedgerID={0}", LedgerID);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry2);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldLedgerID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["LedgerID"]);
                    oldLedgerName = Convert.ToString(dsOld.Tables[0].Rows[0]["LedgerName"]);
                    oldphone = Convert.ToString(dsOld.Tables[0].Rows[0]["phone"]);
                    oldgroup = Convert.ToInt32(dsOld.Tables[0].Rows[0]["GroupID"]);
                    oldmobile = Convert.ToString(dsOld.Tables[0].Rows[0]["mobile"]);
                }

            }

            dbQry2 = "SELECT KeyValue From tblSettings WHERE keyName='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Delete From tblLedger Where LedgerID = {0}", LedgerID);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), "", LedgerID, "DeleteLedger");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }


            //dbQry = string.Format("INSERT INTO tblAuditLedger Select * From tblLedger Where LedgerID = {0}", LedgerID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblLedger Where LedgerID = {0}", LedgerID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Ledger ID : " + oldLedgerID + " got Deleted. Record Details :  User :" + Username + " Ledger : " + oldLedgerName + " GroupID= " + oldgroup + " ,Mobile=" + oldmobile + " Phone :" + oldphone;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }


    public void DeleteExpense(string connection, int ID, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        DataSet dsOld = new DataSet();

        string dbQry = string.Empty;
        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;
        string sAuditStr = string.Empty;

        int oldLedgerID = 0;
        string oldLedgerName = string.Empty;
        string oldIsActive = string.Empty;
        int oldgroup = 0;
        string oldphone = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry2 = string.Format("Select * from tblExpenseMaster Where ID={0}", ID);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry2);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldLedgerID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["ID"]);
                    oldLedgerName = Convert.ToString(dsOld.Tables[0].Rows[0]["ExpenseHead"]);
                    //oldphone = Convert.ToString(dsOld.Tables[0].Rows[0]["phone"]);
                    oldgroup = Convert.ToInt32(dsOld.Tables[0].Rows[0]["GroupID"]);
                    oldIsActive = Convert.ToString(dsOld.Tables[0].Rows[0]["IsActive"]);
                }

            }

            dbQry2 = "SELECT KeyValue From tblSettings WHERE keyName='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Delete From tblLedger Where ID = {0}", ID);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), "", ID, "DeleteExpense");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }


            //dbQry = string.Format("INSERT INTO tblAuditLedger Select * From tblLedger Where LedgerID = {0}", LedgerID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblLedger Where ExpenseID = {0}", ID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblExpenseMaster Where ID = {0}", ID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Expense ID : " + oldLedgerID + " got Deleted. Record Details :  User :" + Username + " ExpenseHead : " + oldLedgerName + " GroupID= " + oldgroup + " ,IsActive=" + oldIsActive ;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void DeleteCategory(string connection, int CategoryID, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry2 = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Delete From tblCategories Where CategoryID = {0}", CategoryID);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, CategoryID, "DeleteCategory");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblAuditCategories Select * From tblCategories Where CategoryID = {0}", CategoryID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = string.Format("Delete From tblCategories Where CategoryID = {0}", CategoryID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Category got deleted : User = " + Username + " old Record Details CategoryID = " + CategoryID;

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void DeleteProduct(string connection, string ItemCode, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();


            dbQry2 = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Delete From tblProductMaster Where ItemCode = {0}", ItemCode);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, ItemCode, "DeleteProduct");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            //dbQry = string.Format("INSERT INTO tblAuditProductMaster Select * From tblProductMaster Where ItemCode = '{0}'", ItemCode);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblProductMaster Where ItemCode = '{0}'", ItemCode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblProductPrices Where ItemCode = '{0}'", ItemCode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblProductStock Where ItemCode = '{0}'", ItemCode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Product got deleted : User = " + Username + " old Record Details ItemCode=" + ItemCode;

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public Double getStockInfo(string itemcode, string branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        Double qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            dbQry = "SELECT stock FROM tblProductStock Where BranchCode='" + branchcode + "' and  ItemCode ='" + itemcode + "'";
            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);
            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (double)qtyObj;
            }
            return qty;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListProducts(string connection, string txtSearch, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        if (dropDown == "ItemCode")
        {
            dbQry = "select A.ItemCode,A.ProductName, A.Model,A.CST, tblCategories.CategoryID, tblCategories.CategoryName, A.ProductDesc,A.Stock,A.ROL, A.Rate, A.Unit, A.VAT, A.Discount,A.BuyUnit, A.BuyRate, A.BuyVAT, BuyDiscount,A.DealerUnit, A.DealerRate, A.DealerVAT, A.DealerDiscount,A.Complex,A.Measure_Unit,A.Accept_Role,A.block,A.NLC,A.Productlevel,A.MRPEffDate,A.DPEffDate,A.NLCEffDate, A.Outdated,A.Deviation, A.IsActive, (Select count(*) from tblProductMaster where A.ItemCode>=ItemCode) as Row from tblProductMaster as A inner join tblCategories on A.CategoryID = tblCategories.CategoryID Where A.ItemCode like '" + txtSearch + "' Order By A.ItemCode";
        }
        else if (dropDown == "ProductName")
        {
            dbQry = "select A.ItemCode,A.ProductName, A.Model,A.CST, tblCategories.CategoryID, tblCategories.CategoryName, A.ProductDesc,A.Stock,A.ROL, A.Rate, A.Unit, A.VAT, A.Discount,A.BuyUnit, A.BuyRate, A.BuyVAT, A.BuyDiscount,A.DealerUnit, A.DealerRate, A.DealerVAT, A.DealerDiscount,A.Complex,A.Measure_Unit,A.Accept_Role,A.block,A.NLC,A.Productlevel,A.MRPEffDate,A.DPEffDate,A.NLCEffDate, A.Outdated, A.Deviation, A.IsActive, (Select count(*) from tblProductMaster where A.ItemCode>=ItemCode) as Row  from tblProductMaster as A inner join tblCategories on A.CategoryID = tblCategories.CategoryID Where A.ProductName like '" + txtSearch + "' Order By A.ItemCode";
        }
        else if (dropDown == "Model")
        {
            dbQry = "select A.ItemCode,A.ProductName, A.Model,A.CST, tblCategories.CategoryID, tblCategories.CategoryName, A.ProductDesc,A.Stock,A.ROL, A.Rate, A.Unit, A.VAT, A.Discount,A.BuyUnit, A.BuyRate, A.BuyVAT, A.BuyDiscount,A.DealerUnit,A.DealerRate, A.DealerVAT, A.DealerDiscount,A.Complex,A.Measure_Unit,A.Accept_Role,A.block,A.NLC,A.Productlevel,A.MRPEffDate,A.DPEffDate,A.NLCEffDate, A.Outdated, A.Deviation, A.IsActive, (Select count(*) from tblProductMaster where A.ItemCode>=ItemCode) as Row  from tblProductMaster as A inner join tblCategories on A.CategoryID = tblCategories.CategoryID Where A.Model like '" + txtSearch + "' Order By A.ItemCode";
        }
        else if (dropDown == "Brand")
        {
            dbQry = "select A.ItemCode,A.ProductName, A.Model,A.CST, tblCategories.CategoryID, tblCategories.CategoryName, A.ProductDesc,A.Stock,A.ROL, A.Rate, A.Unit, A.VAT, A.Discount,A.BuyUnit, A.BuyRate, A.BuyVAT, A.BuyDiscount,A.DealerUnit, A.DealerRate, A.DealerVAT, DealerDiscount,A.Complex,A.Measure_Unit,A.Accept_Role,A.block,A.NLC,A.Productlevel,A.MRPEffDate,A.DPEffDate,A.NLCEffDate, A.Outdated, A.Deviation, A.IsActive, (Select count(*) from tblProductMaster where A.ItemCode>=ItemCode) as Row  from tblProductMaster as A inner join tblCategories on A.CategoryID = tblCategories.CategoryID Where A.ProductDesc like '" + txtSearch + "' Order By A.ItemCode";
        }
        else
        {
            dbQry = string.Format("select A.ItemCode,A.ProductName, A.CST,A.Model, tblCategories.CategoryID, tblCategories.CategoryName, A.ProductDesc,A.Stock,A.ROL, A.Rate, A.Unit, A.VAT, A.Discount,A.BuyUnit, A.BuyRate, A.BuyVAT, A.BuyDiscount,A.DealerUnit, A.DealerRate, A.DealerVAT, A.DealerDiscount,A.Complex,A.Measure_Unit,A.Accept_Role,A.block,A.NLC,A.Productlevel,A.MRPEffDate,A.DPEffDate,A.NLCEffDate, A.Outdated, A.Deviation, A.IsActive, (Select count(*) from tblProductMaster where A.ItemCode>=ItemCode) as Row  from tblProductMaster as A inner join tblCategories on A.CategoryID = tblCategories.CategoryID Order By A.ItemCode");
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public IDataReader ListProducts1(string connection, string itemCode, string productDesc, string model)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        //DataSet ds = new DataSet();
        string dbQry = string.Empty;


        if (itemCode == "ItemCode")
        {
            itemCode = "%" + itemCode + "%";
            dbQry = "select ItemCode,ProductName, Model,CST, tblCategories.CategoryID, tblCategories.CategoryName, ProductDesc,Stock,ROL, Rate, Unit, VAT, Discount,BuyUnit, BuyRate, BuyVAT, BuyDiscount,DealerUnit, DealerRate, DealerVAT, DealerDiscount,Complex,Measure_Unit,Accept_Role from tblProductMaster inner join tblCategories on tblProductMaster.CategoryID = tblCategories.CategoryID Where ItemCode like '" + itemCode + "' Order By ItemCode";
        }
        else if (productDesc == "ProductName")
        {
            productDesc = "%" + productDesc + "%";
            dbQry = "select ItemCode,ProductName, Model,CST, tblCategories.CategoryID, tblCategories.CategoryName, ProductDesc,Stock,ROL, Rate, Unit, VAT, Discount,BuyUnit, BuyRate, BuyVAT, BuyDiscount,DealerUnit, DealerRate, DealerVAT, DealerDiscount,Complex,Measure_Unit,Accept_Role from tblProductMaster inner join tblCategories on tblProductMaster.CategoryID = tblCategories.CategoryID Where ProductDesc like '" + productDesc + "' Order By ItemCode";
        }
        else if (model == "Model")
        {
            model = "%" + model + "%";
            dbQry = "select ItemCode,ProductName, Model,CST, tblCategories.CategoryID, tblCategories.CategoryName, ProductDesc,Stock,ROL, Rate, Unit, VAT, Discount,BuyUnit, BuyRate, BuyVAT, BuyDiscount,DealerUnit, DealerRate, DealerVAT, DealerDiscount,Complex,Measure_Unit,Accept_Role from tblProductMaster inner join tblCategories on tblProductMaster.CategoryID = tblCategories.CategoryID Where Model like '" + model + "' Order By ItemCode";
        }
        else
        {
            dbQry = string.Format("select ItemCode,ProductName, CST,Model, tblCategories.CategoryID, tblCategories.CategoryName, ProductDesc,Stock,ROL, Rate, Unit, VAT, Discount,BuyUnit, BuyRate, BuyVAT, BuyDiscount,DealerUnit, DealerRate, DealerVAT, DealerDiscount,Complex,Measure_Unit,Accept_Role from tblProductMaster inner join tblCategories on tblProductMaster.CategoryID = tblCategories.CategoryID Order By ItemCode");
        }

        try
        {
            manager.Open();
            IDataReader ds = manager.ExecuteReader(CommandType.Text, dbQry);

            return ds;

            //if (ds.Tables[0].Rows.Count > 0)
            //    return ds;
            //else
            //    return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet getRoleInfo(string itemCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            dbQry = "SELECT Qty_Available,Qty_bought,RoleID FROM tblItemRoleMaster Where ItemCode ='" + itemCode + "' AND Qty_Available > 0";
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public double getRoleInfoIntialQty(int roleID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        Double qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            dbQry = "SELECT Qty_Bought FROM tblItemRoleMaster Where RoleID =" + roleID;
            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);
            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (double)qtyObj;
            }
            return qty;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public Double getRoleInfo(int roleID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        Double qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            dbQry = "SELECT Qty_Available FROM tblItemRoleMaster Where RoleID =" + roleID;
            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);
            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (double)qtyObj;
            }
            return qty;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }


    public bool CheckTaskNameUsed(int Project_Id)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();

            dbQry = "SELECT Count(*) FROM tblTasks Where Project_Code =" + Project_Id.ToString();

            object objServiceLedger = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (objServiceLedger != null && objServiceLedger != DBNull.Value)
            {
                if (objServiceLedger.ToString() != "")
                    qty = qty + (int)objServiceLedger;
                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public bool CheckIfLedgerUsed(int LedgerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();

            dbQry = "SELECT Count(*) FROM tblDayBook Where DebtorID =" + LedgerID.ToString() + " OR CreditorID =" + LedgerID.ToString();

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                if (qtyObj.ToString() != "")
                    qty = qty + (int)qtyObj;

            }

            dbQry = "SELECT Count(*) FROM tblServiceMaster Where CustomerID =" + LedgerID.ToString();

            object objServiceLedger = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (objServiceLedger != null && objServiceLedger != DBNull.Value)
            {
                if (objServiceLedger.ToString() != "")
                    qty = qty + (int)objServiceLedger;
            }

            dbQry = "SELECT Count(*) FROM tblReceipt Where CreditorID =" + LedgerID.ToString();

            object objReceiptLedger = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (objReceiptLedger != null && objReceiptLedger != DBNull.Value)
            {
                if (objReceiptLedger.ToString() != "")
                    qty = qty + (int)objReceiptLedger;
            }

            dbQry = "SELECT Count(*) FROM tblQtyReturn Where LedgerID =" + LedgerID.ToString();

            object objQtyRetLedger = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (objQtyRetLedger != null && objQtyRetLedger != DBNull.Value)
            {
                if (objQtyRetLedger.ToString() != "")
                    qty = qty + (int)objQtyRetLedger;
            }

            dbQry = "SELECT Count(*) FROM tblSales Where CustomerID =" + LedgerID.ToString();

            object objSalesLedger = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (objSalesLedger != null && objSalesLedger != DBNull.Value)
            {
                if (objSalesLedger.ToString() != "")
                    qty = qty + (int)objSalesLedger;
            }

            dbQry = "SELECT Count(*) FROM tblPurchase Where SupplierID =" + LedgerID.ToString();

            object objPurchaseLedger = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (objPurchaseLedger != null && objPurchaseLedger != DBNull.Value)
            {
                if (objPurchaseLedger.ToString() != "")
                    qty = qty + (int)objPurchaseLedger;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public bool CheckIfCompReleased(int CompID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        string isReleased = string.Empty;
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            dbQry = "SELECT IsReleased FROM tblCompProduct Where CompID = " + CompID.ToString();

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                isReleased = (string)qtyObj;

                if (isReleased == "Y")
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }
    public bool CheckIfCategoryUsed(int CategoryID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            dbQry = "SELECT Count(*) FROM tblProductMaster Where CategoryID =" + CategoryID.ToString();

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public bool CheckIfTaskStatusUsed(int TaskID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            dbQry = "SELECT Count(*) FROM tblTaskUpdatesHistory Where Task_Status =" + TaskID.ToString();

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }



    //public bool CheckIfleadreerenceUsed(int leadID)
    //{
    //    DBManager manager = new DBManager(DataProvider.SqlServer);
    //    manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
    //    int qty = 0;
    //    string dbQry = string.Empty;
    //    try
    //    {
    //        manager.Open();
    //        dbQry = "SELECT Count(*) FROM tblLeadReferences Where ID =" + leadID.ToString();

    //        object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

    //        if (qtyObj != null && qtyObj != DBNull.Value)
    //        {
    //            qty = (int)qtyObj;

    //            if (qty > 0)
    //                return true;
    //            else
    //                return false;
    //        }
    //        else
    //        {
    //            return false;
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        manager.Dispose();
    //    }

    //}

    public bool CheckIfTaskTypeUsed(int TaskID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            dbQry = "SELECT Count(*) FROM tblTasks Where Task_Type =" + TaskID.ToString();

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public bool CheckIfBrandUsed(string Brand)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            dbQry = "SELECT Count(*) FROM tblProductMaster Where productdesc ='" + Brand + "' ";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public bool CheckIfProductUsed(string ItemCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;
        int Totalqty = 0;
        object qtyObj = null;

        string dbQry = string.Empty;
        try
        {
            manager.Open();

            dbQry = "SELECT Count(*) FROM tblCommissionItems Where ItemCode ='" + ItemCode + "'";

            qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    Totalqty = Totalqty + qty;
            }

            dbQry = "SELECT Count(*) FROM tblSalesItems Where ItemCode ='" + ItemCode + "'";

            qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    Totalqty = Totalqty + qty;
            }

            dbQry = "SELECT Count(*) FROM tblPurchaseItems Where ItemCode ='" + ItemCode + "'";

            qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    Totalqty = Totalqty + qty;
            }

            dbQry = "SELECT Count(*) FROM tblFormula Where ItemCode ='" + ItemCode + "'";

            qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    Totalqty = Totalqty + qty;
            }

            dbQry = "SELECT Count(*) FROM tblExecution Where ItemCode ='" + ItemCode + "'";

            qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    Totalqty = Totalqty + qty;
            }

            if (Totalqty > 0)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public bool CheckSalesSeriesRequired()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;

        string dbQry = string.Empty;
        try
        {
            manager.Open();

            dbQry = "SELECT Count(*) FROM tblSalesSeries";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            return false;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public bool CheckSalesSeriesOpen()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;

        string dbQry = string.Empty;
        try
        {
            manager.Open();

            dbQry = "SELECT Count(*) FROM tblSalesSeries Where Status='Open'";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            return false;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetSalesSeries()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        try
        {
            manager.Open();

            dbQry = "SELECT * FROM tblSalesSeries Where Status = 'Open'";

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetPaymentForId(string connection, int TransNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            //dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName,tblDayBook.CreditorID,tblDayBook.DebtorID, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            //dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo, Payment.Paymode,Payment.Billno  FROM  (((tblDayBook INNER JOIN ");
            //dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
            //dbQry.Append(" tblPayMent Payment ON tblDayBook.TransNo = Payment.JournalID)");
            //dbQry.AppendFormat("Where tblDayBook.TransNo = {0}", TransNo);


            dbQry.Append("SELECT  tblDayBook.BranchCode, tblDayBook.TransNo, tblDayBook.TransDate,Creditor.Mobile, Creditor.LedgerName,tblDayBook.CreditorID,tblDayBook.DebtorID, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo, Payment.Paymode,Payment.Billno  FROM  (((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
            dbQry.Append(" tblPayMent Payment ON tblDayBook.TransNo = Payment.JournalID)");
            dbQry.AppendFormat("Where tblDayBook.TransNo = {0}", TransNo);

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }
    public DataSet GetPaymentForId(int TransNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate,Creditor.Mobile, Creditor.LedgerName,tblDayBook.CreditorID,tblDayBook.DebtorID, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo, Payment.Paymode,Payment.Billno  FROM  (((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
            dbQry.Append(" tblPayMent Payment ON tblDayBook.TransNo = Payment.JournalID)");
            dbQry.AppendFormat("Where tblDayBook.TransNo = {0}", TransNo);

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }
    public DataSet GetReceiptForId(string connection, int TransNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT  tblDayBook.TransNo,tblDayBook.BranchCode, tblDayBook.TransDate, Creditor.LedgerName,tblDayBook.CreditorID,tblDayBook.DebtorID,Creditor.Mobile, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType,Receipt.ReceiptNo, tblDayBook.RefNo, tblDayBook.ChequeNo, Receipt.Paymode FROM  (((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
            dbQry.Append(" tblReceipt Receipt ON tblDayBook.TransNo = Receipt.JournalID)");
            dbQry.AppendFormat("Where tblDayBook.TransNo = {0}", TransNo);

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }
    public DataSet GetReceiptForId(int TransNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        try
        {
            dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName,tblDayBook.CreditorID,tblDayBook.DebtorID,Creditor.Mobile, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType,Receipt.ReceiptNo, tblDayBook.RefNo, tblDayBook.ChequeNo, Receipt.Paymode FROM  (((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
            dbQry.Append(" tblReceipt Receipt ON tblDayBook.TransNo = Receipt.JournalID)");
            dbQry.AppendFormat("Where tblDayBook.TransNo = {0}", TransNo);

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }
    public DataSet GetReceivedAmountId(string connection, int ReceiptNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT ReceiptNo,BillNo, Amount From tblReceivedAmount ");
            dbQry.AppendFormat("Where ReceiptNo = {0}", ReceiptNo);

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            DataTable dt = new DataTable();
            DataColumn dc;

            dc = new DataColumn("ID");
            dt.Columns.Add(dc);

            dc = new DataColumn("BillNo");
            dt.Columns.Add(dc);

            dc = new DataColumn("Amount");
            dt.Columns.Add(dc);

            ds.Tables.Add(dt);

            DataRow dr = ds.Tables[0].NewRow();

            dr["ReceiptNo"] = "0";
            dr["BillNo"] = "0";
            dr["Amount"] = "0";

            if (ds == null || ds.Tables[0].Rows.Count == 0)
            {
                if (ds.Tables[0].Rows.Count == 0)
                    ds.Tables[0].Rows.InsertAt(dr, 0);
            }

            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet GetCustReceivedAmount(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT BillNo,Sum( Amount) as TotalAmount From tblReceivedAmount Group By BillNo");

            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet ListCashForBookId(string connection, string billNo, int bookID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        if (billNo == null)
            billNo = string.Empty;

        try
        {
            if (billNo == string.Empty)
            {
                dbQry.Append("SELECT  slno,code,area,CashDetails.amount,discount,reason,date_paid,billno,bookname,CashDetails.BookID ");
                dbQry.Append("From CashDetails INNER JOIN tblBook ON tblBook.BookID = CashDetails.BookID ");
                dbQry.AppendFormat("Where tblBook.BookID = {0} ", bookID);
            }
            else
            {
                dbQry.Append("SELECT  slno,code,area,CashDetails.amount,discount,reason,date_paid,billno,bookname,CashDetails.BookID ");
                dbQry.Append("From CashDetails INNER JOIN tblBook ON tblBook.BookID = CashDetails.BookID ");
                dbQry.AppendFormat("Where tblBook.BookID = {0} AND billno='{1}' ", bookID, billNo);
            }
            dbQry.Append("Order By slno,billno");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet ListPayments(string connection, string txtSearch, string dropDown)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();


        if (dropDown == "TransDate" || dropDown == "RefNo" || dropDown == "TransNo")
            txtSearch = txtSearch;
        else
            txtSearch = "%" + txtSearch + "%";

        try
        {
            manager.Open();
            object reconDate = manager.ExecuteScalar(CommandType.Text, "Select recon_date from last_recon");

            dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo, Payment.Paymode,Payment.Billno FROM  (((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) INNER JOIN ");
            dbQry.Append("tblPayMent Payment ON tblDayBook.TransNo = Payment.JournalID) ");

            if (dropDown == "RefNo" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.RefNo = {0} ", txtSearch);
            }
            else if (dropDown == "TransNo" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.TransNo = {0} ", txtSearch);
            }
            else if (dropDown == "TransDate" && txtSearch != null)
            {
                dbQry.AppendFormat("WHERE tblDayBook.VoucherType = 'Payment' and Format([tblDayBook.TransDate], 'dd/mm/yyyy') = '{0}' ", Convert.ToDateTime(txtSearch).ToShortDateString());
            }
            else if (dropDown == "LedgerName" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and Debitor.LedgerName like '{0}' ", txtSearch);
            }
            else if (dropDown == "Narration" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.Narration like '{0}' ", txtSearch);
            }
            else
            {
                dbQry.Append("Where tblDayBook.VoucherType = 'Payment' ");
            }

            dbQry.Append(" AND tblDayBook.TransDate > #" + DateTime.Parse(reconDate.ToString()).ToString("MM/dd/yyyy") + "#");
            dbQry.Append(" Order By tblDayBook.TransDate Desc ");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }


    public DataSet ListCustomerPayments(string connection, string txtSearch, string dropDown, string Branch)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();


        if (dropDown == "LedgerName" || dropDown == "Narration" || dropDown == "All")
        {
            txtSearch = "%" + txtSearch + "%";
        }


        try
        {
            manager.Open();
            object reconDate = manager.ExecuteScalar(CommandType.Text, "Select recon_date from last_recon");

            dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.BranchCode, tblDayBook.TransDate, Creditor.LedgerName, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo, Payment.Paymode,Payment.Billno FROM ((((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) INNER JOIN ");
            dbQry.Append("tblPayMent Payment ON tblDayBook.TransNo = Payment.JournalID) INNER JOIN tblGroups G ON G.GroupID = Debitor.GroupID) ");

            if (dropDown == "RefNo" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.RefNo = {0} ", txtSearch);
            }
            else if (dropDown == "TransNo" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.TransNo = {0} ", txtSearch);
            }
            else if (dropDown == "TransDate" && txtSearch != null)
            {
                dbQry.AppendFormat("WHERE tblDayBook.VoucherType = 'Payment' and [tblDayBook.TransDate] = '{0}' ", Convert.ToDateTime(txtSearch).ToString("yyyy-MM-dd"));
            }
            else if (dropDown == "LedgerName" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and Debitor.LedgerName like '{0}' ", txtSearch);
            }
            else if (dropDown == "Narration" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.Narration like '{0}' ", txtSearch);
            }
            else if (dropDown == "All" && txtSearch != "%%")
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and (Debitor.LedgerName like '{0}' or tblDayBook.Narration like '{0}')", txtSearch);
            }
            else
            {
                dbQry.Append("Where tblDayBook.VoucherType = 'Payment' ");
            }

            if (Branch != "All")
            {
                dbQry.Append(" AND tblDayBook.BranchCode = '" + Branch + "' ");
            }

            dbQry.Append(" AND G.GroupName = 'Sundry Debtors' AND tblDayBook.TransDate > " + DateTime.Parse(reconDate.ToString()).ToString("yyyy-MM-dd") + "");
            dbQry.Append(" Order By tblDayBook.TransDate,tblDayBook.TransNo Desc ");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet ListBankPayments(string connection, string txtSearch, string dropDown, string Branch)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();


        if (dropDown == "TransDate" || dropDown == "RefNo" || dropDown == "TransNo")
            txtSearch = txtSearch;
        else
            txtSearch = "%" + txtSearch + "%";

        try
        {
            manager.Open();
            object reconDate = manager.ExecuteScalar(CommandType.Text, "Select recon_date from last_recon");

            dbQry.Append("SELECT  tblDayBook.TransNo,tblDayBook.BranchCode, tblDayBook.TransDate, Creditor.LedgerName, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo, Payment.Paymode,Payment.Billno FROM ((((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) INNER JOIN ");
            dbQry.Append("tblPayMent Payment ON tblDayBook.TransNo = Payment.JournalID) INNER JOIN tblGroups G ON G.GroupID = Debitor.GroupID) ");

            if (dropDown == "RefNo" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.RefNo = {0} ", txtSearch);
            }
            else if (dropDown == "TransNo" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.TransNo = {0} ", txtSearch);
            }
            else if (dropDown == "TransDate" && txtSearch != null)
            {
                dbQry.AppendFormat("WHERE tblDayBook.VoucherType = 'Payment' and [tblDayBook.TransDate] = '{0}' ", Convert.ToDateTime(txtSearch).ToString("yyyy-MM-dd"));
            }
            else if (dropDown == "LedgerName" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and Debitor.LedgerName like '{0}' ", txtSearch);
            }
            else if (dropDown == "Narration" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.Narration like '{0}' ", txtSearch);
            }
            else
            {
                dbQry.Append("Where tblDayBook.VoucherType = 'Payment' ");
            }

            if (Branch != "All")
            {
                dbQry.Append(" AND tblDayBook.BranchCode = '" + Branch + "' ");
            }

            dbQry.Append(" AND G.GroupName = 'Bank Accounts' AND tblDayBook.TransDate > " + DateTime.Parse(reconDate.ToString()).ToString("yyyy-MM-dd") + "");
            dbQry.Append(" Order By tblDayBook.TransDate Desc ");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet ListSupplierPayments(string connection, string txtSearch, string dropDown, string Branch)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();


        if (dropDown == "LedgerName" || dropDown == "Narration" || dropDown == "All")
        {
            txtSearch = "%" + txtSearch + "%";
        }

        try
        {
            manager.Open();
            object reconDate = manager.ExecuteScalar(CommandType.Text, "Select recon_date from last_recon");

            dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, tblDayBook.Branchcode, Creditor.LedgerName, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo, Payment.Paymode,Payment.Billno FROM ((((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) INNER JOIN ");
            dbQry.Append("tblPayMent Payment ON tblDayBook.TransNo = Payment.JournalID) INNER JOIN tblGroups G ON G.GroupID = Debitor.GroupID) ");

            if (dropDown == "RefNo" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.RefNo = {0} ", txtSearch);
            }
            else if (dropDown == "TransNo" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.TransNo = {0} ", txtSearch);
            }
            else if (dropDown == "TransDate" && txtSearch != null)
            {
                dbQry.AppendFormat("WHERE tblDayBook.VoucherType = 'Payment' and [tblDayBook.TransDate] = '{0}' ", Convert.ToDateTime(txtSearch).ToString("yyyy-MM-dd"));
            }
            else if (dropDown == "LedgerName" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and Debitor.LedgerName like '{0}' ", txtSearch);
            }
            else if (dropDown == "All" && txtSearch != "%%")
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and (Debitor.LedgerName like '{0}' or tblDayBook.Narration like '{0}')", txtSearch);
            }
            else if (dropDown == "Narration" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.Narration like '{0}' ", txtSearch);
            }
            else
            {
                dbQry.Append("Where tblDayBook.VoucherType = 'Payment' ");
            }

            if (Branch != "All")
            {
                dbQry.Append(" AND tblDayBook.BranchCode = '" + Branch + "' ");
            }

            dbQry.Append(" AND G.GroupName = 'Sundry Creditors' AND tblDayBook.TransDate > " + DateTime.Parse(reconDate.ToString()).ToString("yyyy-MM-dd") + "");
            dbQry.Append(" Order By tblDayBook.TransDate Desc ");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet ListExpensesPaymentsOld(string connection, string txtSearch, string dropDown, string usernam)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();


        if (dropDown == "TransDate" || dropDown == "RefNo" || dropDown == "TransNo")
            txtSearch = txtSearch;
        else
            txtSearch = "%" + txtSearch + "%";

        try
        {
            manager.Open();
            object reconDate = manager.ExecuteScalar(CommandType.Text, "Select recon_date from last_recon");

            //object locked = "select DateLock from tblUserInfo where username = '" + usernam.ToString() + "'";
            object locked = manager.ExecuteScalar(CommandType.Text, "Select DateLock from tblUserInfo where username = '" + usernam.ToString() + "' ");


            dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo, Payment.Paymode,Payment.Billno FROM ((((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) INNER JOIN ");
            dbQry.Append("tblPayMent Payment ON tblDayBook.TransNo = Payment.JournalID) INNER JOIN tblGroups G ON G.GroupID = Debitor.GroupID) ");

            if (dropDown == "RefNo" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.RefNo = {0} ", txtSearch);
            }
            else if (dropDown == "TransNo" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.TransNo = {0} ", txtSearch);
            }
            else if (dropDown == "TransDate" && txtSearch != null)
            {
                dbQry.AppendFormat("WHERE tblDayBook.VoucherType = 'Payment' and Format([tblDayBook.TransDate], 'dd/mm/yyyy') = '{0}' ", Convert.ToDateTime(txtSearch).ToShortDateString());
            }
            else if (dropDown == "LedgerName" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and Debitor.LedgerName like '{0}' ", txtSearch);
            }
            else if (dropDown == "Narration" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.Narration like '{0}' ", txtSearch);
            }
            else
            {
                dbQry.Append("Where tblDayBook.VoucherType = 'Payment' ");
            }

            if ((locked == "Y") || (locked == "Yes"))
            {
                dbQry.Append(" AND G.GroupName = 'General Expenses' AND tblDayBook.TransDate > #" + DateTime.Parse(reconDate.ToString()).ToString("MM/dd/yyyy") + "#");
            }
            else
            {
                dbQry.Append(" AND G.GroupName = 'General Expenses' ");
            }

            dbQry.Append(" Order By tblDayBook.TransDate Desc ");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet ListExpensesPayments(string connection, string txtSearch, string dropDown, string Branch)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        if (dropDown == "TransDate" || dropDown == "RefNo" || dropDown == "TransNo")
            txtSearch = txtSearch;
        else
            txtSearch = "%" + txtSearch + "%";

        try
        {
            manager.Open();
            object reconDate = manager.ExecuteScalar(CommandType.Text, "Select recon_date from last_recon");

            dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.Branchcode, tblDayBook.TransDate, Creditor.LedgerName, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo, Payment.Paymode,Payment.Billno FROM ((((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) INNER JOIN ");
            dbQry.Append("tblPayMent Payment ON tblDayBook.TransNo = Payment.JournalID) INNER JOIN tblGroups G ON G.GroupID = Debitor.GroupID) ");

            if (dropDown == "RefNo" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.RefNo = {0} ", txtSearch);
            }
            else if (dropDown == "TransNo" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.TransNo = {0} ", txtSearch);
            }
            else if (dropDown == "TransDate" && txtSearch != null)
            {
                dbQry.AppendFormat("WHERE tblDayBook.VoucherType = 'Payment' and [tblDayBook.TransDate] = '{0}' ", Convert.ToDateTime(txtSearch).ToString("yyyy-MM-dd"));
            }
            else if (dropDown == "LedgerName" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and Debitor.LedgerName like '{0}' ", txtSearch);
            }
            else if (dropDown == "Narration" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.Narration like '{0}' ", txtSearch);
            }
            else
            {
                dbQry.Append("Where tblDayBook.VoucherType = 'Payment' ");
            }

            //dbQry.Append(" AND G.GroupName = 'General Expenses' AND tblDayBook.TransDate > #" + DateTime.Parse(reconDate.ToString()).ToString("MM/dd/yyyy") + "#");

            if (Branch != "All")
            {
                dbQry.Append(" AND tblDayBook.BranchCode = '" + Branch + "' ");
            }

            dbQry.Append(" AND tblDayBook.TransDate > " + DateTime.Parse(reconDate.ToString()).ToString("yyyy-MM-dd") + "");

            //dbQry.Append(" AND tblDayBook.TransDate > #" + DateTime.Parse(reconDate.ToString()).ToString("MM/dd/yyyy") + "#");
            dbQry.Append(" Order By tblDayBook.TransDate Desc ");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet ListReceipts(string connection, string txtSearch, string dropDown)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();


        if (dropDown == "TransDate" || dropDown == "RefNo" || dropDown == "TransNo")
            txtSearch = txtSearch;
        else
            txtSearch = "%" + txtSearch + "%";

        try
        {
            manager.Open();
            object reconDate = manager.ExecuteScalar(CommandType.Text, "Select recon_date from last_recon");

            dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo, Receipt.Paymode FROM  (((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
            dbQry.Append("tblReceipt Receipt ON tblDayBook.TransNo = Receipt.JournalID) ");

            if (dropDown == "RefNo" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and tblDayBook.RefNo = {0} ", txtSearch);
            }
            else if (dropDown == "TransNo" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and tblDayBook.TransNo = {0} ", txtSearch);
            }
            else if (dropDown == "TransDate" && txtSearch != null)
            {
                dbQry.AppendFormat("WHERE tblDayBook.VoucherType= 'Receipt' and Format([tblDayBook.TransDate], 'dd/mm/yyyy') = '{0}' ", Convert.ToDateTime(txtSearch).ToShortDateString());
            }
            else if (dropDown == "LedgerName" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and Creditor.LedgerName like '{0}' ", txtSearch);
            }
            else if (dropDown == "Narration" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and tblDayBook.Narration like '{0}' ", txtSearch);
            }
            else
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' ");
            }

            dbQry.Append(" AND tblDayBook.TransDate > #" + DateTime.Parse(reconDate.ToString()).ToString("MM/dd/yyyy") + "#");
            dbQry.Append("Order By tblDayBook.TransDate Desc");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet ListReceiptsCustomers(string connection, string txtSearch, string dropDown, string Branch)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();


        if (dropDown == "TransDate" || dropDown == "RefNo" || dropDown == "TransNo")
            txtSearch = txtSearch;
        else
            txtSearch = "%" + txtSearch + "%";

        try
        {
            manager.Open();
            object reconDate = manager.ExecuteScalar(CommandType.Text, "Select recon_date from last_recon");

            dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, tblDayBook.BranchCode, Creditor.LedgerName, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo, Receipt.Paymode FROM  ((((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
            dbQry.Append("tblReceipt Receipt ON tblDayBook.TransNo = Receipt.JournalID) INNER JOIN tblGroups G ON Creditor.GroupID = G.GroupID) ");

            if (dropDown == "RefNo" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and tblDayBook.RefNo = {0} ", txtSearch);
            }
            else if (dropDown == "TransNo" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and tblDayBook.TransNo = {0} ", txtSearch);
            }
            else if (dropDown == "TransDate" && txtSearch != null)
            {
                dbQry.AppendFormat("WHERE tblDayBook.VoucherType= 'Receipt' and [tblDayBook.TransDate] = '{0}' ", Convert.ToDateTime(txtSearch).ToString("yyyy-MM-dd"));
            }
            else if (dropDown == "LedgerName" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and Creditor.LedgerName like '{0}' ", txtSearch);
            }
            else if (dropDown == "Narration" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and tblDayBook.Narration like '{0}' ", txtSearch);
            }
            else if (dropDown == "0" && txtSearch != "%%")
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' AND (tblDayBook.RefNo like '{0}' or Debitor.AliasName like '{0}' or Creditor.LedgerName like '{0}' or tblDayBook.Narration like '{0}') ", txtSearch);
            }
            else
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' ");
            }

            if (Branch != "All")
            {
                dbQry.Append(" AND tblDayBook.BranchCode = '" + Branch + "' ");
            }

            dbQry.Append(" AND G.GroupName = 'Sundry Debtors' AND tblDayBook.TransDate > " + DateTime.Parse(reconDate.ToString()).ToString("yyyy-MM-dd") + "");
            dbQry.Append("Order By tblDayBook.TransDate Desc");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet ListReceiptsForBillNo(string billNo)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            manager.Open();


            dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate,tblDayBook.DebtorID, Debitor.LedgerName AS Debi, R.Amount, tblDayBook.Narration, ");
            dbQry.Append(" tblDayBook.RefNo, tblDayBook.ChequeNo, Receipt.Paymode FROM  (((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblReceivedAmount R ON R.ReceiptNo = tblDayBook.TransNo) LEFT JOIN ");
            dbQry.Append("tblReceipt Receipt ON tblDayBook.TransNo = Receipt.JournalID) ");
            dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' AND R.BillNo={0} ", billNo);
            dbQry.Append("Order By tblDayBook.TransDate Desc");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListReceiptsSuppliers(string connection, string txtSearch, string dropDown, string Branch)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();


        if (dropDown == "TransDate" || dropDown == "RefNo" || dropDown == "TransNo")
            txtSearch = txtSearch;
        else
            txtSearch = "%" + txtSearch + "%";

        try
        {
            manager.Open();
            object reconDate = manager.ExecuteScalar(CommandType.Text, "Select recon_date from last_recon");

            dbQry.Append("SELECT  tblDayBook.TransNo,tblDayBook.BranchCode, tblDayBook.TransDate, Creditor.LedgerName, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo, Receipt.Paymode FROM  ((((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
            dbQry.Append("tblReceipt Receipt ON tblDayBook.TransNo = Receipt.JournalID) INNER JOIN tblGroups G ON Creditor.GroupID = G.GroupID) ");

            if (dropDown == "RefNo" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and tblDayBook.RefNo = {0} ", txtSearch);
            }
            else if (dropDown == "TransNo" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and tblDayBook.TransNo = {0} ", txtSearch);
            }
            else if (dropDown == "TransDate" && txtSearch != null)
            {
                dbQry.AppendFormat("WHERE tblDayBook.VoucherType= 'Receipt' and [tblDayBook.TransDate] = '{0}' ", Convert.ToDateTime(txtSearch).ToString("yyyy-MM-dd"));
            }
            else if (dropDown == "LedgerName" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and Creditor.LedgerName like '{0}' ", txtSearch);
            }
            else if (dropDown == "Narration" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and tblDayBook.Narration like '{0}' ", txtSearch);
            }
            else
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' ");
            }

            if (Branch != "All")
            {
                dbQry.Append(" AND tblDayBook.BranchCode = '" + Branch + "' ");
            }

            dbQry.Append(" AND G.GroupName = 'Sundry Creditors' AND tblDayBook.TransDate > " + DateTime.Parse(reconDate.ToString()).ToString("yyyy-MM-dd") + "");
            dbQry.Append("Order By tblDayBook.TransDate Desc");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListReceiptsBank(string connection, string txtSearch, string dropDown, string Branch)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();


        if (dropDown == "TransDate" || dropDown == "RefNo" || dropDown == "TransNo")
            txtSearch = txtSearch;
        else
            txtSearch = "%" + txtSearch + "%";

        try
        {
            manager.Open();
            object reconDate = manager.ExecuteScalar(CommandType.Text, "Select recon_date from last_recon");

            dbQry.Append("SELECT  tblDayBook.TransNo,tblDayBook.BranchCode, tblDayBook.TransDate, Creditor.LedgerName, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo, Receipt.Paymode FROM  ((((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
            dbQry.Append("tblReceipt Receipt ON tblDayBook.TransNo = Receipt.JournalID) INNER JOIN tblGroups G ON Creditor.GroupID = G.GroupID) ");

            if (dropDown == "RefNo" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and tblDayBook.RefNo = {0} ", txtSearch);
            }
            else if (dropDown == "TransNo" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and tblDayBook.TransNo = {0} ", txtSearch);
            }
            else if (dropDown == "TransDate" && txtSearch != null)
            {
                dbQry.AppendFormat("WHERE tblDayBook.VoucherType= 'Receipt' and [tblDayBook.TransDate] = '{0}' ", Convert.ToDateTime(txtSearch).ToString("yyyy-MM-dd"));
            }
            else if (dropDown == "LedgerName" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and Creditor.LedgerName like '{0}' ", txtSearch);
            }
            else if (dropDown == "Narration" && txtSearch != null)
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and tblDayBook.Narration like '{0}' ", txtSearch);
            }
            else
            {
                dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' ");
            }

            if (Branch != "All")
            {
                dbQry.Append(" AND tblDayBook.BranchCode = '" + Branch + "' ");
            }

            dbQry.Append(" AND G.GroupName = 'Bank Accounts' AND tblDayBook.TransDate > " + DateTime.Parse(reconDate.ToString()).ToString("yyyy-MM-dd") + "");
            dbQry.Append("Order By tblDayBook.TransDate Desc");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListLedgerInfo(string connection, string txtSearch, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        if (dropDown == "LedgerName")
        {
            dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName, IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit, Phone,LedgerCategory,ExecutiveIncharge,TinNumber from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where LedgerName like '" + txtSearch + "'" + " Order By LedgerName";
        }
        else if (dropDown == "AliasName")
        {
            dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName,IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit, Phone,LedgerCategory,ExecutiveIncharge,TinNumber from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where AliasName like '" + txtSearch + "'" + " Order By LedgerName";
        }
        else
        {
            dbQry = string.Format("select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName, IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit,Phone,LedgerCategory,ExecutiveIncharge,TinNumber from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID  Order By LedgerName");
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListLedgerInfoOthers(string connection, string txtSearch, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        if (dropDown == "LedgerName")
        {
            //AND GroupName NOT IN ('Sundry Creditors','Sundry Debtors','Bank Accounts','General Expenses')
            dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName, IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit, Phone,LedgerCategory,ExecutiveIncharge,TinNumber,Paymentmade,dc,unuse,Emailid, ModeOfContact,OpDueDate from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where LedgerName like '" + txtSearch + "'" + " Order By LedgerName";
        }
        else if (dropDown == "AliasName")
        {
            dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName,IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit, Phone,LedgerCategory,ExecutiveIncharge,TinNumber,Paymentmade,dc,unuse,Emailid, ModeOfContact,OpDueDate from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where AliasName like '" + txtSearch + "'" + " Order By LedgerName";
        }
        else
        {
            //AND GroupName NOT IN ('Sundry Creditors','Sundry Debtors','Bank Accounts','General Expenses')
            dbQry = string.Format("select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName, IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit,Phone,LedgerCategory,ExecutiveIncharge,TinNumber,Paymentmade,dc,unuse,Emailid, ModeOfContact,OpDueDate from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where (LedgerName like '{0}' or AliasName like '{0}') Order By LedgerName", txtSearch);
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListCustomerInfo(string connection, string txtSearch, string dropDown, string Branch)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        if (dropDown == "LedgerName")
        {
            if (Branch != "All")
            {
                dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName, IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit, Phone,LedgerCategory,ExecutiveIncharge,TinNumber,CreditLimit,CreditDays,Paymentmade,dc,Unuse,EmailId,ModeofContact,OpDueDate,BranchCode from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where LedgerName like '" + txtSearch + "'" + " AND BranchCode='" + Branch + "' AND GroupName = 'Sundry Debtors' Order By LedgerName";
            }
            else
            {
                dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName, IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit, Phone,LedgerCategory,ExecutiveIncharge,TinNumber,CreditLimit,CreditDays,Paymentmade,dc,Unuse,EmailId,ModeofContact,OpDueDate,BranchCode from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where LedgerName like '" + txtSearch + "'" + " AND GroupName = 'Sundry Debtors' Order By LedgerName";
            }
        }
        else if (dropDown == "AliasName")
        {
            if (Branch != "All")
            {
                dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName,IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit, Phone,LedgerCategory,ExecutiveIncharge,TinNumber,CreditLimit,CreditDays,Paymentmade,dc,Unuse,EmailId,ModeofContact,OpDueDate,BranchCode from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where AliasName like '" + txtSearch + "'" + " AND BranchCode='" + Branch + "' AND GroupName = 'Sundry Debtors' Order By LedgerName";
            }
            else
            {
                dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName,IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit, Phone,LedgerCategory,ExecutiveIncharge,TinNumber,CreditLimit,CreditDays,Paymentmade,dc,Unuse,EmailId,ModeofContact,OpDueDate,BranchCode from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where AliasName like '" + txtSearch + "'" + " AND GroupName = 'Sundry Debtors' Order By LedgerName";
            }
        }

        else
        {
            if (Branch != "All")
            {
                dbQry = string.Format("select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName, IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit,Phone,LedgerCategory,ExecutiveIncharge,TinNumber,CreditLimit,CreditDays,Paymentmade,dc,Unuse,EmailId,ModeofContact,OpDueDate,BranchCode from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where (LedgerName like '{0}' or AliasName like '{0}')  AND BranchCode='" + Branch + "' AND GroupName = 'Sundry Debtors' Order By LedgerName", txtSearch);
            }
            else
            {
                dbQry = string.Format("select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName, IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit,Phone,LedgerCategory,ExecutiveIncharge,TinNumber,CreditLimit,CreditDays,Paymentmade,dc,Unuse,EmailId,ModeofContact,OpDueDate,BranchCode from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where (LedgerName like '{0}' or AliasName like '{0}') AND GroupName = 'Sundry Debtors' Order By LedgerName", txtSearch);
            }
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListSupplierInfo(string connection, string txtSearch, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        if (dropDown == "LedgerName")
        {
            dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName, IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit, Phone,LedgerCategory,ExecutiveIncharge,TinNumber,Paymentmade,dc,EmailId,ModeOfContact,OpDueDate from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where LedgerName like '" + txtSearch + "'" + " AND GroupName = 'Sundry Creditors' Order By LedgerName";
        }
        else if (dropDown == "AliasName")
        {
            dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName,IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit, Phone,LedgerCategory,ExecutiveIncharge,TinNumber,Paymentmade,dc,EmailId,ModeOfContact,OpDueDate from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where AliasName like '" + txtSearch + "'" + " AND GroupName = 'Sundry Creditors' Order By LedgerName";
        }
        else if (dropDown == "All" && txtSearch != "%%")
        {
            dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName,IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit, Phone,LedgerCategory,ExecutiveIncharge,TinNumber,Paymentmade,dc,EmailId,ModeOfContact,OpDueDate from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where (AliasName like '" + txtSearch + "'" + " Or LedgerName like '" + txtSearch + "'" + " ) AND GroupName = 'Sundry Creditors' Order By LedgerName";
        }
        else
        {
            dbQry = string.Format("select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName, IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit,Phone,LedgerCategory,ExecutiveIncharge,TinNumber,Paymentmade,dc,EmailId,ModeOfContact,OpDueDate from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where (LedgerName like '{0}' or AliasName like '{0}') AND GroupName = 'Sundry Creditors' Order By LedgerName", txtSearch);
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListBankInfo(string connection, string txtSearch, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        if (dropDown == "LedgerName")
        {
            dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName, IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit, Phone,LedgerCategory,ExecutiveIncharge,TinNumber,Paymentmade,dc,Emailid, ModeOfContact,OpDueDate from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where LedgerName like '" + txtSearch + "'" + " AND GroupName = 'Bank Accounts' Order By LedgerName";
        }
        else if (dropDown == "AliasName")
        {
            dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName,IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit, Phone,LedgerCategory,ExecutiveIncharge,TinNumber,Paymentmade,dc,Emailid, ModeOfContact,OpDueDate from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where AliasName like '" + txtSearch + "'" + " AND GroupName = 'Bank Accounts' Order By LedgerName";
        }
        else
        {
            dbQry = string.Format("select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName, IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit,Phone,LedgerCategory,ExecutiveIncharge,TinNumber,Paymentmade,dc,Emailid, ModeOfContact,OpDueDate from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where (LedgerName like '{0}' or AliasName like '{0}') AND GroupName = 'Bank Accounts' Order By LedgerName", txtSearch);
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListExpenseInfo(string connection, string txtSearch, string dropDown, string Branch)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";


        if (dropDown == "ExpenseName")
        {

            dbQry = " select  *  from tblExpenseMaster inner join tblGroups on tblExpenseMaster.GroupID = tblGroups.GroupID Where ExpenseHead like '" + txtSearch + "'" + " AND GroupName = 'General Expenses' Order By ExpenseHead";
            
        }
        else if (dropDown == "AliasName")
        {


            dbQry = "select  *  from tblExpenseMaster inner join tblGroups on tblExpenseMaster.GroupID = tblGroups.GroupID Where AliasName like '" + txtSearch + "'" + " AND GroupName = 'General Expenses' Order By ExpenseHead";
            
        }
        else
        {
            dbQry = string.Format("select *  from tblExpenseMaster inner join tblGroups on tblExpenseMaster.GroupID = tblGroups.GroupID Where (ExpenseHead like '{0}' or AliasName like '{0}') AND GroupName = 'General Expenses' Order By Expensehead", txtSearch);
            
        }

        //if (dropDown == "LedgerName")
        //{
        //    if (Branch != "All")
        //    {
        //        dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName, IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit, Phone,LedgerCategory,ExecutiveIncharge,TinNumber,Paymentmade,dc,unuse,OpDueDate,Branchcode from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where LedgerName like '" + txtSearch + "'" + " and Branchcode='" + Branch + "' AND GroupName = 'General Expenses' Order By LedgerName";
        //    }
        //    else
        //    {
        //        dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName, IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit, Phone,LedgerCategory,ExecutiveIncharge,TinNumber,Paymentmade,dc,unuse,OpDueDate,Branchcode from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where LedgerName like '" + txtSearch + "'" + " AND GroupName = 'General Expenses' Order By LedgerName";
        //    }
        //}
        //else if (dropDown == "AliasName")
        //{
        //    if (Branch != "All")
        //    {
        //        dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName,IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit, Phone,LedgerCategory,ExecutiveIncharge,TinNumber,Paymentmade,dc,unuse,OpDueDate,Branchcode from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where AliasName like '" + txtSearch + "'" + " and Branchcode='" + Branch + "' AND GroupName = 'General Expenses' Order By LedgerName";
        //    }
        //    else
        //    {
        //        dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName,IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit, Phone,LedgerCategory,ExecutiveIncharge,TinNumber,Paymentmade,dc,unuse,OpDueDate,Branchcode from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where AliasName like '" + txtSearch + "'" + " AND GroupName = 'General Expenses' Order By LedgerName";
        //    }
        //}
        //else
        //{
        //    if (Branch != "All")
        //    {
        //        dbQry = string.Format("select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName, IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit,Phone,LedgerCategory,ExecutiveIncharge,TinNumber,Paymentmade,dc,unuse,OpDueDate,Branchcode from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where (LedgerName like '{0}' or AliasName like '{0}') and Branchcode='" + Branch + "' AND GroupName = 'General Expenses' Order By LedgerName", txtSearch);
        //    }
        //    else
        //    {
        //        dbQry = string.Format("select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName, IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit,Phone,LedgerCategory,ExecutiveIncharge,TinNumber,Paymentmade,dc,unuse,OpDueDate,Branchcode from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where (LedgerName like '{0}' or AliasName like '{0}') AND GroupName = 'General Expenses' Order By LedgerName", txtSearch);
        //    }
        //}



        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }




    //public DataSet ListExpenseheadInfo(string connection, string txtSearch, string dropDown, string Branch)
    //{
    //    DBManager manager = new DBManager(DataProvider.SqlServer);
    //    manager.ConnectionString = CreateConnectionString(connection);
    //    DataSet ds = new DataSet();
    //    string dbQry = string.Empty;
    //    txtSearch = "%" + txtSearch + "%";

    //    //if (dropDown == "LedgerName")
    //    //{
    //    //    if (Branch != "All")
    //    //    {
    //    //        dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName, IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit, Phone,LedgerCategory,ExecutiveIncharge,TinNumber,Paymentmade,dc,unuse,OpDueDate,Branchcode from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where LedgerName like '" + txtSearch + "'" + " and Branchcode='" + Branch + "' AND GroupName = 'General Expenses' Order By LedgerName";
    //    //    }
    //    //    else
    //    //    {
    //    //        dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName, IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit, Phone,LedgerCategory,ExecutiveIncharge,TinNumber,Paymentmade,dc,unuse,OpDueDate,Branchcode from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where LedgerName like '" + txtSearch + "'" + " AND GroupName = 'General Expenses' Order By LedgerName";
    //    //    }
    //    //}
    //    //else if (dropDown == "AliasName")
    //    //{
    //    //    if (Branch != "All")
    //    //    {
    //    //        dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName,IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit, Phone,LedgerCategory,ExecutiveIncharge,TinNumber,Paymentmade,dc,unuse,OpDueDate,Branchcode from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where AliasName like '" + txtSearch + "'" + " and Branchcode='" + Branch + "' AND GroupName = 'General Expenses' Order By LedgerName";
    //    //    }
    //    //    else
    //    //    {
    //    //        dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName,IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit, Phone,LedgerCategory,ExecutiveIncharge,TinNumber,Paymentmade,dc,unuse,OpDueDate,Branchcode from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where AliasName like '" + txtSearch + "'" + " AND GroupName = 'General Expenses' Order By LedgerName";
    //    //    }
    //    //}
    //    //else
    //    //{
    //        //if (Branch != "All")
    //        //{
    //        //    dbQry = string.Format("select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName, IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3,Debit,Credit,Phone,LedgerCategory,ExecutiveIncharge,TinNumber,Paymentmade,dc,unuse,OpDueDate,Branchcode from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where (LedgerName like '{0}' or AliasName like '{0}') and Branchcode='" + Branch + "' AND GroupName = 'General Expenses' Order By LedgerName", txtSearch);
    //        //}
    //        //else
    //        {
    //            dbQry = string.Format("select Expensehead, AliasName,tblExpenseMaster.IsActive,tblGroups.GroupID,GroupName from tblExpenseMaster inner join tblGroups on tblExpenseMaster.GroupID = tblGroups.GroupID Where (Expensehead like '%%' or AliasName like '%%') AND GroupName = 'General Expenses' Order By Expensehead", txtSearch);
    //        }
    //  //  }

    //    try
    //    {
    //        manager.Open();
    //        ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

    //        if (ds.Tables[0].Rows.Count > 0)
    //            return ds;
    //        else
    //            return null;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        manager.Dispose();
    //    }

    //}

    public bool checkUserRoleExists(string role, string connection, string user)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            bool retval = false;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblUserRole Where Role='" + role + "' And UserName <> '" + user + "'");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    retval = true;
                }
            }
            else
            {
                retval = false;
            }

            return retval;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void InsertLedgerInfoold(string connection, string LedgerName, string AliasName, int GroupID, double OpenBalanceDR, double OpenBalanceCR, double OpenBalance, string DRORCR, string ContactName, string Add1, string Add2, string Add3, string Phone, string LedgerCategory, int ExecutiveIncharge, string TinNumber, string Mobile)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblLedger Where LedgerName='" + LedgerName + "'");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Ledger Exists");
                }
            }

            int LedgerID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(LedgerID) FROM tblLedger");

            dbQry = string.Format("INSERT INTO tblLedger(LedgerID,LedgerName, AliasName,GroupID,OpenBalanceDR,OpenBalanceCR,Debit,Credit,ContactName,Add1,Add2,Add3,Phone,BelongsTo,LedgerCategory,ExecutiveIncharge,TinNumber,Mobile,BranchCode,ExpenseID) VALUES({0},'{1}','{2}',{3},{4},{5},{6},{7},'{8}','{9}','{10}','{11}','{12}',{13},'{14}',{15},'{16}','{17}',{18})",
                LedgerID + 1, LedgerName, AliasName, GroupID, OpenBalanceDR, OpenBalanceCR, 0, 0, ContactName, Add1, Add2, Add3, Phone, 0, LedgerCategory, ExecutiveIncharge, TinNumber, Mobile,0);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void InsertLedgerInfo(string connection, string LedgerName, string AliasName, int GroupID, double OpenBalanceDR, double OpenBalanceCR, double OpenBalance, string DRORCR, string ContactName, string Add1, string Add2, string Add3, string Phone, string LedgerCategory, int ExecutiveIncharge, string TinNumber, string Mobile, string Inttrans, string Paymentmade, string dc, string ChequeName, string Username, string unuse, string EmailId, int ModeofContact, string OpDueDate, string BranchCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;
        string sAuditStr = string.Empty;

        //string dbLdId = string.Empty;
        //DataSet dsLdId = new DataSet();


        //DateTime sBilldate;
        //string[] sDate;
        //string delim = "/";
        //char[] delimA = delim.ToCharArray();

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblLedger Where LedgerName='" + LedgerName + "'");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Ledger Exists");
                }
            }


            //sDate = OpDueDate.Trim().Split(delimA);


            //sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));





            // int LedgerID;

            //dbLdId = "SELECT MAX(LedgerID) as LedgerID FROM tblLedger";
            //dsLdId = manager.ExecuteDataSet(CommandType.Text, dbLdId.ToString());
            //if (dsLdId.Tables[0].Rows.Count > 0)
            //    LedgerID = Convert.ToInt32(dsLdId.Tables[0].Rows[0]["LedgerID"].ToString());

            int LedgerID = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(LedgerID) FROM tblLedger"));


            dbQ = "SELECT KeyValue From tblSettings WHERE keyName='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                string value1 = string.Empty;
                string value2 = string.Empty;
                string value3 = string.Empty;

                int middlePos = 0;


                logdescription = string.Format("INSERT INTO tblLedger(LedgerID,LedgerName, AliasName,GroupID,OpenBalanceDR,OpenBalanceCR,Debit,Credit,ContactName,Add1,Add2,Add3,Phone,BelongsTo,LedgerCategory,ExecutiveIncharge,TinNumber,Mobile,Inttrans,Paymentmade,dc,BranchCode,ExpenseID) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22})",
                LedgerID + 1, LedgerName, AliasName, GroupID, OpenBalanceDR, OpenBalanceCR, 0, 0, ContactName, Add1, Add2, Add3, Phone, 0, LedgerCategory, ExecutiveIncharge, TinNumber, Mobile, Inttrans, Paymentmade, dc, BranchCode,0);
                logdescription = logdescription.Trim();
                if (logdescription.Length > 255)
                {
                    value1 = logdescription.Substring(0, 255);

                    middlePos = logdescription.Length - (value1.Length);
                    if (middlePos > 0)
                        value2 = logdescription.Substring(255, middlePos);
                    else
                        value2 = "";

                    middlePos = logdescription.Length - (value1.Length + value2.Length);
                    if (middlePos > 0)
                        value3 = logdescription.Substring(510, middlePos);
                    else
                        value3 = "";
                }
                else
                {
                    value1 = logdescription;
                    value2 = "";
                    value3 = "";
                }

                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), value1, "", "", value2, value3, "InsertLedgerInfo");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            //dbQry = string.Format("SET IDENTITY_INSERT [tblLedger] ON");
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("INSERT INTO tblLedger(LedgerID,LedgerName, AliasName,GroupID,OpenBalanceDR,OpenBalanceCR,Debit,Credit,ContactName,Add1,Add2,Add3,Phone,BelongsTo,LedgerCategory,ExecutiveIncharge,TinNumber,Mobile,Inttrans,Paymentmade,dc,ChequeName,unuse, EmailId, ModeofContact,OpDueDate,BranchCode,ExpenseID) VALUES({0},'{1}','{2}',{3},{4},{5},{6},{7},'{8}','{9}','{10}','{11}','{12}',{13},'{14}',{15},'{16}','{17}','{18}','{19}','{20}','{21}','{22}','{23}',{24},'{25}','{26}',{27})",
                LedgerID + 1, LedgerName, AliasName, GroupID, OpenBalanceDR, OpenBalanceCR, 0, 0, ContactName, Add1, Add2, Add3, Phone, 0, LedgerCategory, ExecutiveIncharge, TinNumber, Mobile, Inttrans, Paymentmade, dc, ChequeName, unuse, EmailId, ModeofContact, OpDueDate, BranchCode,0);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            //dbQry = string.Format("SET IDENTITY_INSERT [tblLedger] OFF");
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);


            sAuditStr = "Ledger : " + LedgerName + " added. Record Details :  User :" + Username + " AliasName = " + AliasName + " GroupID= " + GroupID + " ,LedgerCategory = " + LedgerCategory + " ,Mobile=" + Mobile + " Phone :" + Phone;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    //public void InsertCustomerInfo(string connection, string LedgerName, string AliasName, int GroupID, double OpenBalanceDR, double OpenBalanceCR, double OpenBalance, string DRORCR, string ContactName, string Add1, string Add2, string Add3, string Phone, string LedgerCategory, int ExecutiveIncharge, string TinNumber, string Mobile, double CreditLimit, int CreditDays)
    //{
    //    DBManager manager = new DBManager(DataProvider.SqlServer);
    //    manager.ConnectionString = CreateConnectionString(connection);
    //    DataSet ds = new DataSet();
    //    string dbQry = string.Empty;

    //    try
    //    {
    //        manager.Open();
    //        manager.ProviderType = DataProvider.SqlServer;

    //        manager.BeginTransaction();

    //        object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblLedger Where LedgerName='" + LedgerName + "'");

    //        if (exists.ToString() != string.Empty)
    //        {
    //            if (int.Parse(exists.ToString()) > 0)
    //            {
    //                throw new Exception("Ledger Exists");
    //            }
    //        }

    //        int LedgerID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(LedgerID) FROM tblLedger");

    //        dbQry = string.Format("INSERT INTO tblLedger(LedgerID,LedgerName, AliasName,GroupID,OpenBalanceDR,OpenBalanceCR,Debit,Credit,ContactName,Add1,Add2,Add3,Phone,BelongsTo,LedgerCategory,ExecutiveIncharge,TinNumber,Mobile,CreditLimit, CreditDays) VALUES({0},'{1}','{2}',{3},{4},{5},{6},{7},'{8}','{9}','{10}','{11}','{12}',{13},'{14}',{15},'{16}','{17}',{18},{19})",
    //            LedgerID + 1, LedgerName, AliasName, GroupID, OpenBalanceDR, OpenBalanceCR, 0, 0, ContactName, Add1, Add2, Add3, Phone, 0, LedgerCategory, ExecutiveIncharge, TinNumber, Mobile, CreditLimit, CreditDays);

    //        manager.ExecuteNonQuery(CommandType.Text, dbQry);

    //        manager.CommitTransaction();

    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        manager.Dispose();
    //    }

    //}
    public void InsertCustomerInfo(string connection, string LedgerName, string AliasName, int GroupID, double OpenBalanceDR, double OpenBalanceCR, double OpenBalance, string DRORCR, string ContactName, string Add1, string Add2, string Add3, string Phone, string LedgerCategory, int ExecutiveIncharge, string TinNumber, string Mobile, double CreditLimit, int CreditDays, string Inttrans, string Paymentmade, string dc, string ChequeName, string Username, string unuse, string Email, int ModeofContact, string OpDueDate, string BranchCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        string dbQ = string.Empty;

        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        string sAuditStr = string.Empty;
        //DateTime sBilldate;
        //string[] sDate;
        //string delim = "/";
        //char[] delimA = delim.ToCharArray();


        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblLedger Where LedgerName='" + LedgerName + "'");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Ledger Exists");
                }
            }


            int LedgerID = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(LedgerID) FROM tblLedger"));


            dbQ = "SELECT KeyValue From tblSettings WHERE KEYNAME='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                string value1 = string.Empty;
                string value2 = string.Empty;
                string value3 = string.Empty;

                int middlePos = 0;

                logdescription = string.Format("INSERT INTO tblLedger(LedgerID,LedgerName, AliasName,GroupID,OpenBalanceDR,OpenBalanceCR,Debit,Credit,ContactName,Add1,Add2,Add3,Phone,BelongsTo,LedgerCategory,ExecutiveIncharge,TinNumber,Mobile,CreditLimit, CreditDays,Inttrans,Paymentmade,dc,ExpenseID) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23})",
                        LedgerID + 1, LedgerName, AliasName, GroupID, OpenBalanceDR, OpenBalanceCR, 0, 0, ContactName, Add1, Add2, Add3, Phone, 0, LedgerCategory, ExecutiveIncharge, TinNumber, Mobile, CreditLimit, CreditDays, Inttrans, Paymentmade, dc,0);
                logdescription = logdescription.Trim();
                if (logdescription.Length > 255)
                {
                    value1 = logdescription.Substring(0, 255);
                    middlePos = logdescription.Length - (value1.Length);
                    if (middlePos > 0)
                        value2 = logdescription.Substring(255, middlePos);
                    else
                        value2 = "";

                    middlePos = logdescription.Length - (value1.Length + value2.Length);
                    if (middlePos > 0)
                        value3 = logdescription.Substring(510, middlePos);
                    else
                        value3 = "";
                }
                else
                {
                    value1 = logdescription;
                    value2 = "";
                    value3 = "";
                }
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), value1, "", "", value2, value3, "InsertCustmoerInfo");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }


            //dbQry = string.Format("SET IDENTITY_INSERT tblLedger ON");
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("INSERT INTO tblLedger(LedgerID,LedgerName, AliasName,GroupID,OpenBalanceDR,OpenBalanceCR,Debit,Credit,ContactName,Add1,Add2,Add3,Phone,BelongsTo,LedgerCategory,ExecutiveIncharge,TinNumber,Mobile,CreditLimit, CreditDays,Inttrans,Paymentmade,dc,ChequeName,unuse, EmailId,ModeofContact,OpDueDate,BranchCode,ExpenseID) VALUES({0},'{1}','{2}',{3},{4},{5},{6},{7},'{8}','{9}','{10}','{11}','{12}',{13},'{14}',{15},'{16}','{17}',{18},{19},'{20}','{21}','{22}','{23}','{24}','{25}',{26},'{27}','{28}',{29})",
                LedgerID + 1, LedgerName, AliasName, GroupID, OpenBalanceDR, OpenBalanceCR, 0, 0, ContactName, Add1, Add2, Add3, Phone, 0, LedgerCategory, ExecutiveIncharge, TinNumber, Mobile, CreditLimit, CreditDays, Inttrans, Paymentmade, dc, ChequeName, unuse, Email, ModeofContact, OpDueDate, BranchCode,0);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("SET IDENTITY_INSERT tblLedger OFF");
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Customer Ledger : " + LedgerName + " added. Record Details :  User :" + Username + " AliasName = " + AliasName + " GroupID= " + GroupID + " ,LedgerCategory = " + LedgerCategory + " ,Mobile=" + Mobile + " Phone :" + Phone;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }

        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }
    public void InsertPayment(out int NewTransNo, string connection, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string ChequeNo, string PaymentMode, string BillNo, string Username, string BranchCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            if (!IsValidDate(connection, TransDate))
            {
                throw new Exception("Invalid Date");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            int cid = 0;
            if (PaymentMode == "Cash")
            {
                cid = getCashACLedgerId(connection, BranchCode);
                CreditorID = cid;
            }


            dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, BranchCode) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})",
                    TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, BranchCode);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "InsertPayment");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, BranchCode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},{8},'{9}')",
                TransDate.ToString("yyyy-MM-dd"), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, BranchCode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int TransNo = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));

            if (Logsave == "YES")
            {
                logdescription = string.Format("INSERT INTO tblPayment(JournalID,Paymode,BillNo, BranchCode) Values({0},{1},{2},{3})", TransNo, PaymentMode, BillNo, BranchCode);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "InsertPayment");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("Insert Into tblPayment(JournalID,Paymode,BillNo, BranchCode) Values({0},'{1}','{2}','{3}')", TransNo, PaymentMode, BillNo, BranchCode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = string.Format("Update tblChequeitems Set Status='Y' Where ChequeNo='" + ChequeNo + "' and BankID=" + CreditorID + "");          
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);

            //double Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);

            //double Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            NewTransNo = TransNo;

            sAuditStr = "Payment Transaction: " + TransNo + " added. Record Details :  User :" + Username + " Bill No=" + RefNo + " DebtorID=" + DebitorID + " ,CreditorID=" + CreditorID + " ,Amount=" + Amount + " New Trans No :" + TransNo + " DateTime: " + TransDate.ToShortDateString();
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void InsertCustomerReceipt(out int NewTransNo, string connection, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string ChequeNo, string Paymode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {

            if (!IsValidDate(connection, TransDate))
            {
                throw new Exception("Invalid Date");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();


            dbQ = "SELECT KeyValue From tblSettings WHERE key='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8})",
                        TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString(), logdescription.ToString(), "", "", "InsertCustomerReceipt");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int TransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if (Logsave == "YES")
            {

                logdescription = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode) Values({0},{1},{2})", CreditorID, TransNo, Paymode);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString(), logdescription.ToString(), "", TransNo, "InsertCustomerReceipt");
                manager.ExecuteNonQuery(CommandType.Text, description);

            }

            dbQry = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode) Values({0},{1},'{2}')", CreditorID, TransNo, Paymode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);

            //double Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);

            //double Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            NewTransNo = TransNo;

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void DeleteCustReceipt(string connection, int TransNo, bool requireValidation, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        DataSet dsOldRec = new DataSet();
        string dbQry = string.Empty;
        string dbQry123 = string.Empty;
        string State = "N";
        DataSet dsOld = new DataSet();
        string sAuditStr = string.Empty;

        int TTransNo = 0;
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;

        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            ds = manager.ExecuteDataSet(CommandType.Text, "Select Amount,DebtorID,CreditorID,TransDate from tblDayBook Where TransNo=" + TransNo);

            int DebitorID = Convert.ToInt32(ds.Tables[0].Rows[0]["DebtorID"].ToString());
            int CreditorID = Convert.ToInt32(ds.Tables[0].Rows[0]["CreditorID"].ToString());
            double Amount = Convert.ToDouble(ds.Tables[0].Rows[0]["Amount"].ToString());
            DateTime TransDate = Convert.ToDateTime(ds.Tables[0].Rows[0]["TransDate"].ToString());

            if (requireValidation)
            {
                if (!IsValidDate(connection, TransDate))
                {
                    throw new Exception("Invalid Date");
                }
            }

            dbQry = string.Format("Select DebtorID,CreditorID,Amount,Transdate,RefNo from tblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                    oldBillNo = dsOld.Tables[0].Rows[0]["RefNo"].ToString();
                }

            }

            //dbQry = string.Format("Update tblLedger SET Debit = Debit - {0} Where LedgerID={1}", Amount, DebitorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Update tblLedger SET Credit = Credit - {0} Where LedgerID={1}", Amount, CreditorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry2 = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Delete From tblReceipt Where JournalID = {0}", TransNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, TransNo, "DeleteCustReceipt");
                manager.ExecuteNonQuery(CommandType.Text, description);

                logdescription = string.Format("Delete From tblReceivedAmount Where ReceiptNo = {0}", TransNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, TransNo, "DeleteCustReceipt");
                manager.ExecuteNonQuery(CommandType.Text, description);

                logdescription = string.Format("Delete From tblDayBook Where TransNo = {0}", TransNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, TransNo, "DeleteCustReceipt");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblAuditDayBook Select * From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("INSERT INTO tblAuditReceipt Select * From tblReceipt Where JournalID = {0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("INSERT INTO tblAuditReceivedAmount Select * From tblReceivedAmount Where ReceiptNo = {0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblReceipt Where JournalID = {0}", TransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblReceivedAmount Where ReceiptNo = {0}", TransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            if (requireValidation)
            {

                dbQry123 = string.Format("Select TransNo from tblBankRecon Where TransNo={0}", TransNo);
                dsOldRec = manager.ExecuteDataSet(CommandType.Text, dbQry123);
                if (dsOldRec != null)
                {
                    if (dsOldRec.Tables.Count > 0)
                    {
                        dbQry = string.Format("Delete From tblBankRecon Where TransNo = {0}", TransNo);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }


                sAuditStr = "Receipt Transaction: " + TransNo + " got deleted old Record Details : User =" + Username + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + Amount;

                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public void UpdateCustReceipt(out int NewTransNo, string connection, int TransNo, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string ChequeNo, string Paymode, DataSet dsBillNos, string usernam, string Branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        DataSet dsOld = new DataSet();

        string sAuditStr = string.Empty;

        int TTransNo = 0;
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;
        string Userna = string.Empty;
        string oldtrandate = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        SqlConnection oleConn, oleSubConn;
        string pQry = string.Empty;
        string pgQry = string.Empty;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        DataSet dsChildQry;
        string sConStr = string.Empty;

        oleConn = new SqlConnection(CreateConnectionString(connection));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        DataSet dsOldRec = new DataSet();
        string dbQry123 = string.Empty;

        try
        {
            if (IsValidDate(connection, TransDate))
            {
                manager.Open();
                manager.ProviderType = DataProvider.SqlServer;

                manager.BeginTransaction();


                dbQry = string.Format("Select DebtorID,CreditorID,Amount,Transdate,RefNo from tblDaybook Where TransNo={0}", TransNo);
                dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
                if (dsOld != null)
                {
                    if (dsOld.Tables.Count > 0)
                    {
                        oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                        oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                        oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                        oldtrandate = Convert.ToString(dsOld.Tables[0].Rows[0]["transdate"]);
                        oldBillNo = dsOld.Tables[0].Rows[0]["RefNo"].ToString();
                    }

                }

                DeleteCustReceipt(connection, TransNo, false, Userna);

                //InsertCustReceipt(out NewTransNo, connection, RefNo, TransDate, DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, Paymode, dsBillNos);
                if (!IsValidDate(connection, TransDate))
                {
                    throw new Exception("Invalid Date");
                }

                int cid = 0;
                if (Paymode == "Cash")
                {
                    cid = getCashACLedgerId(connection, Branchcode);
                    DebitorID = cid;
                }

                dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
                dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
                if (dsd.Tables[0].Rows.Count > 0)
                    Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

                if (Logsave == "YES")
                {
                    logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, Branchcode) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})",
                        TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, Branchcode);
                    logdescription = logdescription.Trim();
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                         DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, "", "UpdateCustReceipt");
                    manager.ExecuteNonQuery(CommandType.Text, description);
                }

                dbQry = string.Format("INSERT INTO tblAuditDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, Branchcode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},{8},'{9}')",
                    TransDate.ToString("yyyy-MM-dd"), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, Branchcode);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, Branchcode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},{8},'{9}')",
                    TransDate.ToString("yyyy-MM-dd"), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, Branchcode);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                int TransNum = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));


                if (Logsave == "YES")
                {
                    logdescription = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode, Branchcode) Values({0},{1},{2},{3})", CreditorID, TransNum, Paymode, Branchcode);
                    logdescription = logdescription.Trim();
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                         DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, "", "UpdateCustReceipt");
                    manager.ExecuteNonQuery(CommandType.Text, description);
                }

                //dbQry = string.Format("Insert Into tblAuditReceipt(CreditorID,JournalID,Paymode) Values({0},{1},'{2}')", CreditorID, TransNum, Paymode);

                //manager.ExecuteNonQuery(CommandType.Text, dbQry);


                dbQry = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode, Branchcode) Values({0},{1},'{2}','{3}')", CreditorID, TransNum, Paymode, Branchcode);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);


                int Voucher = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(ReceiptNo) FROM tblReceipt"));

                dbQry = string.Format("Insert Into tblAuditReceipt(ReceiptNo,CreditorID,JournalID,Paymode, Branchcode) Values({0},{1},{2},'{3}','{4}')", Voucher, CreditorID, TransNum, Paymode, Branchcode);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);


                if (dsBillNos != null)
                {
                    foreach (DataRow dr in dsBillNos.Tables[0].Rows)
                    {
                        if (dr["BillNo"].ToString() != "0")
                        {
                            if (Logsave == "YES")
                            {
                                logdescription = string.Format("INSERT INTO tblReceivedAmount(ReceiptNo,BillNo,Amount, Branchcode) VALUES({0},{1},{2},{3})", TransNum.ToString(), dr["BillNo"].ToString(), Convert.ToDouble(dr["Amount"]), Branchcode);
                                logdescription = logdescription.Trim();
                                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, "", "UpdateCustReceipt");
                                manager.ExecuteNonQuery(CommandType.Text, description);
                            }

                            dbQry = string.Format("INSERT INTO tblAuditReceivedAmount(ReceiptNo,BillNo,Amount, Branchcode) VALUES({0},{1},{2},'{3}')", TransNum.ToString(), dr["BillNo"].ToString(), Convert.ToDouble(dr["Amount"]), Branchcode);

                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                            dbQry = string.Format("INSERT INTO tblReceivedAmount(ReceiptNo,BillNo,Amount, Branchcode) VALUES({0},{1},{2},'{3}')", TransNum.ToString(), dr["BillNo"].ToString(), Convert.ToDouble(dr["Amount"]), Branchcode);
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        }
                    }
                }




                string Debtor = string.Empty;
                string creditor = string.Empty;
                if (DebitorID != null)
                {
                    pQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + DebitorID;
                }

                if (CreditorID != null)
                {
                    pgQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + CreditorID;
                }
                if (pQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(connection));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            Debtor = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }

                if (pgQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pgQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(connection));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            creditor = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }
                dbQry123 = string.Format("Select TransNo from tblBankRecon Where TransNo={0}", TransNo);
                dsOldRec = manager.ExecuteDataSet(CommandType.Text, dbQry123);
                if (dsOldRec != null)
                {
                    if (dsOldRec.Tables.Count > 0)
                    {
                        dbQry = string.Format("UPDATE tblBankRecon SET TransNo={0},TransDate = '{1}',DebtorID={2},Debtor='{3}',CreditorID={4},Creditor='{5}',Amount={6},Narration='{7}',VoucherType='{8}',Chequeno='{9}',RefNo={10} WHERE TransNo={11} ",
                        TransNum, TransDate.ToString("yyyy-MM-dd"), DebitorID, Debtor, CreditorID, creditor, Amount, Narration, VoucherType, ChequeNo, 0, TransNo);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }




                NewTransNo = TransNo;

                sAuditStr = "Receipt Transaction: " + TransNo + " got edited. Updates Record Details : Bill No=" + oldBillNo + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt + " New Trans No :" + NewTransNo + " DateTime:" + DateTime.Now.ToString();

                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit and Update", DateTime.Now.ToString("yyyy-MM-dd"));
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                manager.CommitTransaction();
            }
            else
            {
                throw new Exception("Invalid Date");
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
        }
    }

    public void InsertCustReceipt(out int NewTransNo, string connection, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string ChequeNo, string Paymode, DataSet dsBillNos, string usernam)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {

            if (!IsValidDate(connection, TransDate))
            {
                throw new Exception("Invalid Date");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQ = "SELECT KeyValue From tblSettings WHERE key='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8})",
                TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString(), logdescription.ToString(), usernam, "", "InsertCustReceipt");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int TransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if (Logsave == "YES")
            {
                logdescription = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode) Values({0},{1},{2})", CreditorID, TransNo, Paymode);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString(), logdescription.ToString(), usernam, TransNo, "InsertCustReceipt");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode) Values({0},{1},'{2}')", CreditorID, TransNo, Paymode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            if (dsBillNos != null)
            {
                foreach (DataRow dr in dsBillNos.Tables[0].Rows)
                {
                    if (dr["BillNo"].ToString() != "0")
                    {
                        if (Logsave == "YES")
                        {
                            logdescription = string.Format("INSERT INTO tblReceivedAmount(ReceiptNo,BillNo,Amount) VALUES({0},{1},{2})", TransNo.ToString(), dr["BillNo"].ToString(), Convert.ToDouble(dr["Amount"]));
                            logdescription = logdescription.Trim();
                            description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                                 DateTime.Now.ToString(), logdescription.ToString(), usernam, TransNo, "InsertCustReceipt");
                            manager.ExecuteNonQuery(CommandType.Text, description);
                        }

                        dbQry = string.Format("INSERT INTO tblReceivedAmount(ReceiptNo,BillNo,Amount) VALUES({0},{1},{2})", TransNo.ToString(), dr["BillNo"].ToString(), Convert.ToDouble(dr["Amount"]));
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);


                    }
                }
            }

            NewTransNo = TransNo;

            sAuditStr = "Receipt Transaction: " + TransNo + " added. Record Details : User=" + usernam + "Ref No=" + RefNo + " DebtorID=" + DebitorID + ",CreditorID=" + CreditorID + ",Amount=" + Amount + " Trans No :" + TransNo + " DateTime:" + DateTime.Now.ToString();

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Add New", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void InsertReceipt(out int NewTransNo, string connection, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string ChequeNo, string Paymode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {

            if (!IsValidDate(connection, TransDate))
            {
                throw new Exception("Invalid Date");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQ = "SELECT KeyValue From tblSettings WHERE key='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8})",
                TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString(), logdescription.ToString(), "", "", "InsertReceipt");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int TransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if (Logsave == "YES")
            {
                logdescription = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode) Values({0},{1},{2})", CreditorID, TransNo, Paymode);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString(), logdescription.ToString(), "", "", "InsertReceipt");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode) Values({0},{1},'{2}')", CreditorID, TransNo, Paymode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);

            //double Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);

            //double Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            NewTransNo = TransNo;

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void InsertSupplierReceiptold(out int NewTransNo, string connection, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string ChequeNo, string Paymode, string Mobile)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {

            if (!IsValidDate(connection, TransDate))
            {
                throw new Exception("Invalid Date");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int TransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            dbQry = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode) Values({0},{1},'{2}')", CreditorID, TransNo, Paymode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);

            double Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);

            double Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            NewTransNo = TransNo;

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public void InsertSupplierReceipt(out int NewTransNo, string connection, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string ChequeNo, string Paymode, string Username, string Mobile, string BranchCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {

            if (!IsValidDate(connection, TransDate))
            {
                throw new Exception("Invalid Date");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();


            int cid = 0;
            if (Paymode == "Cash")
            {
                cid = getCashACLedgerId(connection, BranchCode);
                DebitorID = cid;
            }


            dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, BranchCode) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})",
                        TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, BranchCode);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "InsertSupplierReceipt");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, BranchCode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},{8},'{9}')",
                TransDate.ToString("yyyy-MM-dd"), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, BranchCode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int TransNo = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));

            if (Logsave == "YES")
            {
                logdescription = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode) Values({0},{1},{2},{3}, BranchCode)", CreditorID, TransNo, Paymode, BranchCode);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "InsertSupplierReceipt");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }


            dbQry = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode, BranchCode) Values({0},{1},'{2}','{3}')", CreditorID, TransNo, Paymode, BranchCode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);

            //double Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);

            //double Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            NewTransNo = TransNo;

            sAuditStr = "Receipt Transaction: " + TransNo + " added. Record Details : User : " + Username + " DebtorID = " + DebitorID + ",CreditorID=" + CreditorID + ",Amount=" + Amount + " DateTime:" + TransDate.ToShortDateString();

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            manager.CommitTransaction();

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }


    public void UpdatePayment(out int NewTransNo, string connection, int TransNo, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string ChequeNo, string Paymode, string BillNo, string usernam)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        DataSet dsOld = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        int TTransNo = 0;
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;

        string oldtrandate = string.Empty;
        string Userna = string.Empty;
        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;
        //int NewTransNo = 0;
        try
        {

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();




            dbQry = string.Format("Select DebtorID,CreditorID,Amount,RefNo,Transdate from tblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                    oldtrandate = Convert.ToString(dsOld.Tables[0].Rows[0]["transdate"]);
                    oldBillNo = dsOld.Tables[0].Rows[0]["RefNo"].ToString();
                }

            }

            if (IsValidDate(connection, TransDate))
            {
                DeletePayment(connection, TransNo, false, Userna);

                //InsertPayment(out NewTransNo, connection, RefNo, TransDate, DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, Paymode, BillNo, usernam);

                if (!IsValidDate(connection, TransDate))
                {
                    throw new Exception("Invalid Date");
                }


                dbQ = "SELECT KeyValue From tblSettings WHERE key='SAVELOG'";
                dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
                if (dsd.Tables[0].Rows.Count > 0)
                    Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

                if (Logsave == "YES")
                {
                    logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                    TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);
                    logdescription = logdescription.Trim();
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                         DateTime.Now.ToString(), logdescription.ToString(), usernam, "", "UpdatePayment");
                    manager.ExecuteNonQuery(CommandType.Text, description);
                }

                dbQry = string.Format("INSERT INTO tblAuditDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                    TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                    TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                int TransNum = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");


                if (Logsave == "YES")
                {
                    logdescription = string.Format("Insert Into tblPayment(JournalID,Paymode,BillNo) Values({0},'{1}','{2}')", TransNum, Paymode, BillNo);
                    logdescription = logdescription.Trim();
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                         DateTime.Now.ToString(), logdescription.ToString(), usernam, "", "UpdatePayment");
                    manager.ExecuteNonQuery(CommandType.Text, description);
                }

                //dbQry = string.Format("Insert Into tblAuditPayment(JournalID,Paymode,BillNo) Values({0},'{1}','{2}')", TransNum, Paymode, BillNo);
                //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                dbQry = string.Format("Insert Into tblPayment(JournalID,Paymode,BillNo) Values({0},'{1}','{2}')", TransNum, Paymode, BillNo);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                int Voucher = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(VoucherNo) FROM tblPayment");

                dbQry = string.Format("Insert Into tblAuditPayment(VoucherNo,JournalID,Paymode,BillNo) Values({0},{1},'{2}','{3}')", Voucher, TransNum, Paymode, BillNo);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);

                //double Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

                //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);

                //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);

                //double Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

                //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);

                //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                NewTransNo = TransNo;

                sAuditStr = "Payment Transaction: " + TransNo + " got edited. Updates Record Details : Bill No=" + oldBillNo + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt + " New Trans No :" + NewTransNo + " DateTime:" + DateTime.Now.ToString();

                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Edit and Update", oldtrandate);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
                manager.CommitTransaction();
            }
            else
            {
                throw new Exception("Invalid Date");
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public void UpdateUserInfo(string connection, string UserName, string Email, bool Locked, bool DateLock, ArrayList roles)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("Update tblUserInfo SET Email='{0}',Locked={1}, DateLock={3} Where UserName = '{2}' ", Email, Locked, UserName, DateLock);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblUserRole Where UserName = '{0}' and Role not in ('SMS','ACCSYS') ", UserName);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            for (int i = 0; i < roles.Count; i++)
            {
                dbQry = string.Format("Insert Into tblUserRole Values('{0}','{1}')", UserName, roles[i]);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }

            manager.CommitTransaction();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public bool InsertUserInfo(string connection, string UserName, string Email, bool Locked, bool DateLock, ArrayList roles)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("Select Count(*) From tblUserInfo Where UserName='{0}'", UserName);

            int exists = (int)manager.ExecuteScalar(CommandType.Text, dbQry);

            if (exists > 0)
                return false;

            dbQry = string.Format("Insert Into tblUserInfo(UserID,UserName,Userpwd,UserGroup,Email,Locked,DateLock) VALUES ('{0}','{1}','abc123','Users','{2}',{3} ,{4})", UserName, UserName, Email, Locked, DateLock);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            for (int i = 0; i < roles.Count; i++)
            {
                dbQry = string.Format("Insert Into tblUserRole Values('{0}','{1}')", UserName, roles[i]);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }

            manager.CommitTransaction();
            return true;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public void UpdateReceipt(out int NewTransNo, string connection, int TransNo, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string ChequeNo, string Paymode, string Mobile, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        DataSet dsOld = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        string Userna = string.Empty;
        int TTransNo = 0;
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        string oldtrandate = string.Empty;
        try
        {
            if (IsValidDate(connection, TransDate))
            {
                manager.Open();
                manager.ProviderType = DataProvider.SqlServer;

                manager.BeginTransaction();

                dsOld = GetPaymentForId(TransNo);
                if (dsOld.Tables[0].Rows[0]["JournalID"] != null)
                {
                    if (dsOld.Tables[0].Rows[0]["JournalID"].ToString() != string.Empty)
                    {
                        TTransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["JournalID"].ToString());
                    }

                    if (dsOld.Tables[0].Rows[0]["BillNo"] != null)
                        oldBillNo = dsOld.Tables[0].Rows[0]["RefNo"].ToString();
                }

                dbQry = string.Format("Select DebtorID,CreditorID,Amount,Transdate from tblDaybook Where TransNo={0}", TransNo);
                dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
                if (dsOld != null)
                {
                    if (dsOld.Tables.Count > 0)
                    {
                        oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                        oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                        oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                        oldtrandate = Convert.ToString(dsOld.Tables[0].Rows[0]["transdate"]);
                    }

                }

                DeleteReceipt(connection, TransNo, false, Userna);

                //InsertReceipt(out NewTransNo, connection, RefNo, TransDate, DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, Paymode);

                if (!IsValidDate(connection, TransDate))
                {
                    throw new Exception("Invalid Date");
                }

                dbQ = "SELECT KeyValue From tblSettings WHERE key='SAVELOG'";
                dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
                if (dsd.Tables[0].Rows.Count > 0)
                    Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

                if (Logsave == "YES")
                {
                    logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8})",
                    TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);
                    logdescription = logdescription.Trim();
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                         DateTime.Now.ToString(), logdescription.ToString(), Username, "", "UpdateReceipt");
                    manager.ExecuteNonQuery(CommandType.Text, description);
                }

                dbQry = string.Format("INSERT INTO tblAuditDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                    TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                    TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                int TransNm = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

                if (Logsave == "YES")
                {
                    logdescription = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode) Values({0},{1},{2})", CreditorID, TransNm, Paymode);
                    logdescription = logdescription.Trim();
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                         DateTime.Now.ToString(), logdescription.ToString(), Username, "", "UpdateReceipt");
                    manager.ExecuteNonQuery(CommandType.Text, description);
                }

                //dbQry = string.Format("Insert Into tblAuditReceipt(CreditorID,JournalID,Paymode) Values({0},{1},'{2}')", CreditorID, TransNm, Paymode);
                //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                dbQry = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode) Values({0},{1},'{2}')", CreditorID, TransNm, Paymode);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                int Voucher = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(ReceiptNo) FROM tblReceipt");

                dbQry = string.Format("Insert Into tblAuditReceipt(ReceiptNo,CreditorID,JournalID,Paymode) Values({0},{1},{2},'{3}')", Voucher, CreditorID, TransNm, Paymode);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);


                //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);

                //double Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

                //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);

                //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);

                //double Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

                //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);

                //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                NewTransNo = TransNo;



                sAuditStr = "Receipt Transaction: " + TransNo + " got edited. Updates Record Details : User = " + Username + " Bill No=" + oldBillNo + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt + " New Trans No :" + NewTransNo + " DateTime:" + DateTime.Now.ToString();

                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Edit and Update", DateTime.Now.ToString());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                manager.CommitTransaction();
            }
            else
            {
                throw new Exception("Invalid Date");
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public void UpdateBankReceipt(out int NewTransNo, string connection, int TransNo, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string ChequeNo, string Paymode, string Username, string BranchCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        DataSet dsOld = new DataSet();
        string sAuditStr = string.Empty;
        int TTransNo = 0;
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;

        string oldtrandate = string.Empty;
        string Userna = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        SqlConnection oleConn, oleSubConn;
        string pQry = string.Empty;
        string pgQry = string.Empty;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        DataSet dsChildQry;
        string sConStr = string.Empty;

        oleConn = new SqlConnection(CreateConnectionString(connection));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        DataSet dsOldRec = new DataSet();
        string dbQry123 = string.Empty;


        try
        {
            if (IsValidDate(connection, TransDate))
            {
                manager.Open();
                manager.ProviderType = DataProvider.SqlServer;

                manager.BeginTransaction();

                int cid = 0;
                if (Paymode == "Cash")
                {
                    cid = getCashACLedgerId(connection, BranchCode);
                    DebitorID = cid;
                }


                dbQry = string.Format("Select DebtorID,CreditorID,Amount,Transdate,RefNo from tblDaybook Where TransNo={0}", TransNo);
                dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
                if (dsOld != null)
                {
                    if (dsOld.Tables.Count > 0)
                    {
                        oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                        oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                        oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                        oldtrandate = Convert.ToString(dsOld.Tables[0].Rows[0]["transdate"]);
                        oldBillNo = dsOld.Tables[0].Rows[0]["RefNo"].ToString();
                    }

                }
                DeleteReceipt(connection, TransNo, false, Userna);

                //InsertBankReceipt(out NewTransNo, connection, RefNo, TransDate, DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, Paymode);

                if (!IsValidDate(connection, TransDate))
                {
                    throw new Exception("Invalid Date");
                }


                dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
                dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
                if (dsd.Tables[0].Rows.Count > 0)
                    Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

                if (Logsave == "YES")
                {
                    logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, BranchCode) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})",
                        TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, BranchCode);
                    logdescription = logdescription.Trim();
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                         DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "UpdateBankReceipt");
                    manager.ExecuteNonQuery(CommandType.Text, description);
                }


                dbQry = string.Format("INSERT INTO tblAuditDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, BranchCode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},{8},'{9}')",
                    TransDate.ToString("yyyy-MM-dd"), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, BranchCode);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);


                dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, BranchCode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},{8},'{9}')",
                    TransDate.ToString("yyyy-MM-dd"), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, BranchCode);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                int TransNm = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));


                if (Logsave == "YES")
                {
                    logdescription = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode, BranchCode) Values({0},{1},{2},{3})", CreditorID, TransNm, Paymode, BranchCode);
                    logdescription = logdescription.Trim();
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                         DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "UpdateBankReceipt");
                    manager.ExecuteNonQuery(CommandType.Text, description);
                }

                //dbQry = string.Format("Insert Into tblAuditReceipt(CreditorID,JournalID,Paymode) Values({0},{1},'{2}')", CreditorID, TransNm, Paymode);

                //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                dbQry = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode, BranchCode) Values({0},{1},'{2}','{3}')", CreditorID, TransNm, Paymode, BranchCode);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                int Voucher = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(ReceiptNo) FROM tblReceipt"));

                dbQry = string.Format("Insert Into tblAuditReceipt(ReceiptNo,CreditorID,JournalID,Paymode, BranchCode) Values({0},{1},{2},'{3}','{4}')", Voucher, CreditorID, TransNm, Paymode, BranchCode);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);



                //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);

                //double Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

                //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);

                //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);

                //double Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

                //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);

                //manager.ExecuteNonQuery(CommandType.Text, dbQry);





                string Debtor = string.Empty;
                string creditor = string.Empty;
                if (DebitorID != null)
                {
                    pQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + DebitorID;
                }

                if (CreditorID != null)
                {
                    pgQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + CreditorID;
                }
                if (pQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(connection));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            Debtor = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }

                if (pgQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pgQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(connection));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            creditor = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }
                dbQry123 = string.Format("Select TransNo from tblBankRecon Where TransNo={0}", TransNo);
                dsOldRec = manager.ExecuteDataSet(CommandType.Text, dbQry123);
                if (dsOldRec != null)
                {
                    if (dsOldRec.Tables.Count > 0)
                    {
                        dbQry = string.Format("UPDATE tblBankRecon SET TransNo={0},TransDate = '{1}',DebtorID={2},Debtor='{3}',CreditorID={4},Creditor='{5}',Amount={6},Narration='{7}',VoucherType='{8}',Chequeno='{9}',RefNo={10} WHERE TransNo={11} ",
                        TransNm, TransDate.ToString("yyyy-MM-dd"), DebitorID, Debtor, CreditorID, creditor, Amount, Narration, VoucherType, ChequeNo, 0, TransNo);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }






                NewTransNo = TransNo;


                sAuditStr = "Receipt Transaction: " + TransNo + " got edited. Updates Record Details : User = " + Username + " Bill No=" + oldBillNo + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt + " New Trans No :" + NewTransNo + " DateTime:" + DateTime.Now.ToString();

                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit and Update", DateTime.Now.ToString("yyyy-MM-dd"));
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                manager.CommitTransaction();
            }
            else
            {
                throw new Exception("Invalid Date");
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        //finally
        //{
        //    if (manager != null)
        //        manager.Dispose();
        //}
    }


    public void UpdateLedgerInfo(string connection, int LedgerID, string LedgerName, string AliasName, double OpenBalance, string DRORCR, int GroupID, double OpenBalanceDR, double OpenBalanceCR, string ContactName, string Add1, string Add2, string Add3, string Phone, string LedgerCategory, int ExecutiveIncharge, string TinNumber, string Mobile, string Inttrans, string Paymentmade, string dc, string ChequeName, string Username, string unuse, string EmailId, int ModeofContact, string OpDueDate, string BranchCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        //DateTime sBilldate;
        //string[] sDate;
        //string delim = "/";
        //char[] delimA = delim.ToCharArray();

        string sAuditStr = string.Empty;
        int oldLedgerID = 0;
        string oldLedgerName = string.Empty;
        string oldmobile = string.Empty;
        string oldphone = string.Empty;
        DataSet dsOld = new DataSet();

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblLedger Where LedgerName='" + LedgerName + "' And LedgerID <> " + LedgerID.ToString() + "");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Ledger Exists");
                }
            }

            //sDate = OpDueDate.Trim().Split(delimA);


            //sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));


            dbQ = string.Format("Select LedgerName,LedgerID,phone,mobile from tblledger Where LedgerID={0}", LedgerID);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQ);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldLedgerID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["LedgerID"]);
                    oldLedgerName = Convert.ToString(dsOld.Tables[0].Rows[0]["LedgerName"]);
                    oldphone = Convert.ToString(dsOld.Tables[0].Rows[0]["phone"]);
                    oldmobile = Convert.ToString(dsOld.Tables[0].Rows[0]["mobile"]);
                }

            }

            dbQ = "SELECT KeyValue From tblSettings WHERE keyName='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                string value1 = string.Empty;
                string value2 = string.Empty;
                string value3 = string.Empty;

                int middlePos = 0;
                logdescription = string.Format("Update tblLedger SET LedgerName={0}, AliasName={1}, GroupID={2},OpenBalanceDR={3},ContactName={4},Add1={5}, Add2={6}, Add3={7}, Phone={8}, OpenBalanceCR= {9},LedgerCategory={11},ExecutiveInCharge = {12},TinNumber={13},Mobile={14}, Inttrans={15}, Paymentmade={16}, dc={17},BranchCode={18} WHERE LedgerID={10}", LedgerName, AliasName, GroupID, OpenBalanceDR, ContactName, Add1, Add2, Add3, Phone, OpenBalanceCR, LedgerID, LedgerCategory, ExecutiveIncharge, TinNumber, Mobile, Inttrans, Paymentmade, dc, BranchCode);
                logdescription = logdescription.Trim();

                if (logdescription.Length > 255)
                {
                    value1 = logdescription.Substring(0, 255);
                    middlePos = logdescription.Length - value1.Length;
                    if (middlePos > 0)
                        value2 = logdescription.Substring(255, middlePos);
                    else
                        value2 = "";

                    //middlePos = logdescription.Length - (value1.Length + value2.Length);
                    //if (middlePos > 0)
                    //    value3 = logdescription.Substring(510, middlePos);
                    //else
                    value3 = "";
                }
                else
                {
                    value1 = logdescription;
                    value2 = "";
                    value3 = "";
                }

                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), value1, "", "", value2, value3, "UpdateLedgerInfo");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("Update tblLedger SET LedgerName='{0}', AliasName='{1}', GroupID={2},OpenBalanceDR={3},ContactName='{4}',Add1='{5}', Add2='{6}', Add3='{7}', Phone='{8}', OpenBalanceCR= {9},LedgerCategory='{11}',ExecutiveInCharge = {12},TinNumber='{13}',Mobile='{14}', Inttrans='{15}', Paymentmade='{16}', dc='{17}',ChequeName='{18}', unuse='{19}',EmailId='{20}',ModeofContact={21},OpDueDate='{22}',BranchCode='{23}' WHERE LedgerID={10}", LedgerName, AliasName, GroupID, OpenBalanceDR, ContactName, Add1, Add2, Add3, Phone, OpenBalanceCR, LedgerID, LedgerCategory, ExecutiveIncharge, TinNumber, Mobile, Inttrans, Paymentmade, dc, ChequeName, unuse, EmailId, ModeofContact, OpDueDate, BranchCode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Ledger ID : " + oldLedgerID + " got edited. Record Details :  User :" + Username + " Ledger : " + oldLedgerName + " GroupID= " + GroupID + " ,Mobile=" + oldmobile + " Phone :" + oldphone;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit And Update", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void UpdateCustomerInfo(string connection, int LedgerID, string LedgerName, string AliasName, double OpenBalance, string DRORCR, int GroupID, double OpenBalanceDR, double OpenBalanceCR, string ContactName, string Add1, string Add2, string Add3, string Phone, string LedgerCategory, int ExecutiveIncharge, string TinNumber, string Mobile, double CreditLimit, int CreditDays, string Inttrans, string Paymentmade, string dc, string ChequeName, string Username, string unuse, string Email, int ModeofContact, string OpDueDate, string BranchCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        DataSet dsOld = new DataSet();

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;
        string sAuditStr = string.Empty;
        int oldLedgerID = 0;
        string oldLedgerName = string.Empty;
        string oldmobile = string.Empty;
        string oldphone = string.Empty;

        //DateTime sBilldate;
        //string[] sDate;
        //string delim = "/";
        //char[] delimA = delim.ToCharArray();

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblLedger Where LedgerName='" + LedgerName + "' And LedgerID <> " + LedgerID.ToString() + "");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Ledger Exists");
                }
            }


            //sDate = OpDueDate.Trim().Split(delimA);
            //sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));



            dbQ = string.Format("Select LedgerName,LedgerID,phone,mobile from tblledger Where LedgerID={0}", LedgerID);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQ);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldLedgerID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["LedgerID"]);
                    oldLedgerName = Convert.ToString(dsOld.Tables[0].Rows[0]["LedgerName"]);
                    oldphone = Convert.ToString(dsOld.Tables[0].Rows[0]["phone"]);
                    oldmobile = Convert.ToString(dsOld.Tables[0].Rows[0]["mobile"]);
                }

            }

            dbQ = "SELECT KeyValue From tblSettings WHERE keyName='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                string value1 = string.Empty;
                string value2 = string.Empty;
                string value3 = string.Empty;

                int middlePos = 0;
                logdescription = string.Format("Update tblLedger SET LedgerName={0}, AliasName={1}, GroupID={2},OpenBalanceDR={3},ContactName={4},Add1={5}, Add2={6}, Add3={7}, Phone={8}, OpenBalanceCR= {9},LedgerCategory={11},ExecutiveInCharge = {12},TinNumber={13},Mobile={14},CreditLimit={15},CreditDays={16}, Inttrans={17},Paymentmade={18},dc={19} WHERE LedgerID={10}", LedgerName, AliasName, GroupID, OpenBalanceDR, ContactName, Add1, Add2, Add3, Phone, OpenBalanceCR, LedgerID, LedgerCategory, ExecutiveIncharge, TinNumber, Mobile, CreditLimit, CreditDays, Inttrans, Paymentmade, dc);
                logdescription = logdescription.Trim();
                if (logdescription.Length > 255)
                {
                    value1 = logdescription.Substring(0, 255);
                    middlePos = logdescription.Length - (value1.Length);
                    if (middlePos > 0)
                        value2 = logdescription.Substring(255, middlePos);
                    else
                        value2 = "";

                    middlePos = logdescription.Length - (value1.Length + value2.Length);
                    if (middlePos > 0)
                        value3 = logdescription.Substring(510, middlePos);
                    else
                        value3 = "";
                }
                else
                {
                    value1 = logdescription;
                    value2 = "";
                    value3 = "";
                }

                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), value1, "", "", value2, value3, "UpdateCustomerInfo");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("Update tblLedger SET LedgerName='{0}', AliasName='{1}', GroupID={2},OpenBalanceDR={3},ContactName='{4}',Add1='{5}', Add2='{6}', Add3='{7}', Phone='{8}', OpenBalanceCR= {9},LedgerCategory='{11}',ExecutiveInCharge = {12},TinNumber='{13}',Mobile='{14}',CreditLimit={15},CreditDays={16}, Inttrans='{17}',Paymentmade='{18}',dc='{19}',ChequeName='{20}',unuse='{21}',EmailId='{22}',ModeofContact={23},OpDueDate='{24}',BranchCode='{25}' WHERE LedgerID={10}", LedgerName, AliasName, GroupID, OpenBalanceDR, ContactName, Add1, Add2, Add3, Phone, OpenBalanceCR, LedgerID, LedgerCategory, ExecutiveIncharge, TinNumber, Mobile, CreditLimit, CreditDays, Inttrans, Paymentmade, dc, ChequeName, unuse, Email, ModeofContact, OpDueDate, BranchCode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Ledger ID : " + oldLedgerID + " got edited. Record Details :  User :" + Username + " Ledger : " + oldLedgerName + " GroupID= " + GroupID + " ,Mobile=" + oldmobile + " Phone :" + oldphone;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit And Update", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListCategory(string connection, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        string dbQry2 = string.Empty;
        DataSet dsd = new DataSet();
        string obsolute = string.Empty;

        try
        {
            manager.Open();

            dbQry2 = "SELECT KeyValue From tblSettings WHERE keyname='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2);

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    dbQry = "select CategoryID, CategoryName from tblCategories where IsActive = 'YES' Order By CategoryName ";
                }
                else
                {
                    dbQry = "select CategoryID, CategoryName from tblCategories Order By CategoryName ";
                }
            }
            else
            {
                dbQry = "select CategoryID, CategoryName from tblCategories Order By CategoryName ";
            }


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListCategoryIsActive(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select CategoryID, CategoryName from tblCategories where IsActive = 'YES' Order By CategoryName ";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetGroupInfoForId(string connection, int groupID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select GroupID, GroupName, Heading, tblGroups.HeadingID from tblGroups inner join tblAccHeading on tblGroups.HeadingID = tblAccHeading.HeadingID where GroupID = " + groupID.ToString();
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public string supplierName(string connection, int ledgerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select LedgerName FROM tblLedger where LedgerID = " + ledgerID;
            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds.Tables[0].Rows[0]["ledgerName"].ToString();
            else
                return "";
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public string GetLedgerMobileForId(string connection, int ledgerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        string dbQry = string.Empty;

        try
        {
            dbQry = "select Mobile from tblLedger where LedgerID = " + ledgerID.ToString();
            manager.Open();

            object objMobile = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (objMobile != null)
                return objMobile.ToString();
            else
                return string.Empty;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet GetLedgerInfoForId(string connection, int ledgerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,GroupName,IIF(OpenBalanceDR <> 0,'DR','CR') AS DRORCR ,IIF(OpenBalanceDR <> 0,OpenBalanceDR,OpenBalanceCR) AS OpenBalance,ContactName,Add1, Add2, Add3, Phone,LedgerCategory,ExecutiveIncharge,TinNumber,Mobile,CreditLimit,CreditDays,(OpenBalanceDR - OpenBalanceCR) as OpeningBalance,Inttrans,Paymentmade,dc,ChequeName,unuse,EmailId,ModeofContact,OpDueDate,BranchCode from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID where LedgerID = " + ledgerID.ToString();
            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }



    public DataSet GetExpenseInfoForId(string connection, int ID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select * from tblExpenseMaster inner join tblGroups on tblExpenseMaster.GroupID = tblGroups.GroupID where ID = " + ID.ToString();
            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public string GetItemCode(string connection, string barcd) //Jolo Barcode
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        try
        {
            dbQry = "select ItemCode from tblProductMaster where Barcode = '" + barcd + "'";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds.Tables[0].Rows[0]["ItemCode"].ToString().Trim();
            else
                return "0";
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetProductForId(string connection, string ItemCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select ItemCode,ProductName, Model,CST, tblCategories.CategoryID, tblCategories.CategoryName, ProductDesc,Stock,ROL, Rate, Unit, VAT, Discount, BuyRate,BuyVAT, BuyDiscount,BuyUnit,DealerUnit, DealerRate, DealerVAT, DealerDiscount,Complex,Measure_Unit,Accept_Role,Barcode,ExecutiveCommission,CommodityCode,NLC,block,Productlevel,mrpeffdate,dpeffdate,nlceffdate,OutDated, Deviation, tblProductMaster.IsActive  from tblProductMaster inner join tblCategories on tblProductMaster.CategoryID = tblCategories.CategoryID where ItemCode = '" + ItemCode.Trim() + "'"; //Jolo Barcode
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetBookForId(string connection, int BookID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select BookID,BookName, BookRef, StartEntry, EndEntry, BookStatus,Amount from tblBook where BookID = " + BookID + "";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void UpdateProduct(string connection, string ItemCode, string ProductName, string Model, int CategoryID, string ProductDesc, int ROL, double Stock, double Rate, int Unit, double VAT, int Discount, double BuyRate, double BuyVAT, int BuyDiscount, int BuyUnit, int DealerUnit, double DealerRate, double DealerVAT, int DealerDiscount, string Complex, string Measure_Unit, string Accept_Role, double CST, string Barcode, Double ExecutiveCommission, string CommodityCode, double NLC, string block, int Productlevel, DateTime MRPEffDate, DateTime DPEffDate, DateTime NLCEffDate, string Username, string Outdated, int Deviation, string IsActive, DataSet dsprice)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        DataSet dsOld = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        string dbQry3 = string.Empty;
        string AuditLog = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        DataSet dsAudit = GetOldValues(manager.ConnectionString, "Select ProductName,Model,CategoryID,ProductDesc,ROL,Rate,Unit,VAT,Discount,BuyRate,BuyVAT,BuyDiscount,BuyUnit from tblProductMaster Where ItemCode = '" + ItemCode + "'");

        DateTime mrpdat = DateTime.Now;
        DateTime dpdat = DateTime.Now;
        DateTime nlcdat = DateTime.Now;

        DateTime mrpprevdat = DateTime.Now;
        DateTime nlcprevdat = DateTime.Now;
        DateTime dpprevdat = DateTime.Now;

        DateTime mrpnewdat;
        DateTime nlcnewdat;
        DateTime dpnewdat;

        double oldmrp = 0;
        double oldnlc = 0;
        double olddp = 0;

        try
        {
            manager.Open();

            dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                string value1 = string.Empty;
                string value2 = string.Empty;
                string value3 = string.Empty;

                int middlePos = 0;
                logdescription = string.Format("UPDATE tblProductMaster SET ProductName={0}, Model={1}, CategoryID={2}, ProductDesc={3},Stock ={4},ROL={5}, Rate={6}, Unit={7}, VAT={8}, Discount={9},BuyRate={10},BuyVAT={11},BuyDiscount={12},BuyUnit={13},DealerUnit={15}, DealerRate={16}, DealerVAT={17}, DealerDiscount={18},Complex={19},Measure_Unit={20},Accept_Role={21}, CST={22}, barcode = {23},ExecutiveCommission={24},CommodityCode={25},NLC={26},block={27},Productlevel={28},MRPEffDate={29},DPEffDate={30},NLCEffDate={31},mrpstartdate={32},dpstartdate={33},nlcstartdate={34},mrpenddate={35},dpenddate={36},nlcenddate={37} where ItemCode = {14} ", //Jolo Barcode
                 ProductName, Model, CategoryID, ProductDesc, Stock, ROL, Rate, Unit, VAT, Discount, BuyRate, BuyVAT, BuyDiscount, BuyUnit, ItemCode, DealerUnit, DealerRate, DealerVAT, DealerDiscount, Complex, Measure_Unit, Accept_Role, CST, Barcode, ExecutiveCommission, CommodityCode, NLC, block, Productlevel, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), mrpdat.ToShortDateString(), mrpprevdat.ToShortDateString(), dpdat.ToShortDateString(), dpprevdat.ToShortDateString(), nlcdat.ToShortDateString(), nlcprevdat.ToShortDateString());
                logdescription = logdescription.Trim();
                if (logdescription.Length > 255)
                {
                    value1 = logdescription.Substring(0, 255);


                    value2 = logdescription.Substring(256, 255);


                    middlePos = logdescription.Length - (value1.Length + value2.Length);
                    if (middlePos > 0)
                        value3 = logdescription.Substring(510, middlePos);
                    else
                        value3 = "";
                }
                else
                {
                    value1 = logdescription;
                    value2 = "";
                    value3 = "";
                }
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), value1, Username, "", value2, value3, "UpdateProduct");
                manager.ExecuteNonQuery(CommandType.Text, description);

                logdescription = string.Format("INSERT INTO tblProducthistory VALUES({0},{1}, {2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18})",
                ItemCode, ProductName, Model, CategoryID, ProductDesc, ROL, Rate, DealerRate, NLC, block, MRPEffDate.ToString("yyyy-MM-dd"), DPEffDate.ToString("yyyy-MM-dd"), NLCEffDate.ToString("yyyy-MM-dd"), mrpdat.ToString("yyyy-MM-dd"), mrpprevdat.ToString("yyyy-MM-dd"), dpdat.ToString("yyyy-MM-dd"), dpprevdat.ToString("yyyy-MM-dd"), nlcdat.ToString("yyyy-MM-dd"), nlcprevdat.ToString("yyyy-MM-dd"));
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "UpdateProduct");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }


            dbQry = string.Format("UPDATE tblProductMaster SET ProductName='{0}', Model='{1}', CategoryID={2}, ProductDesc='{3}',Stock ={4},ROL={5}, Rate={6}, Unit={7}, VAT={8}, Discount={9},BuyRate={10},BuyVAT={11},BuyDiscount={12},BuyUnit={13},DealerUnit='{15}', DealerRate={16}, DealerVAT={17}, DealerDiscount={18},Complex='{19}',Measure_Unit='{20}',Accept_Role='{21}', CST={22}, barcode = '{23}',ExecutiveCommission={24},CommodityCode='{25}',NLC={26},block='{27}',Productlevel={28},MRPEffDate='{29}',DPEffDate='{30}',NLCEffDate={31},mrpstartdate='{32}',dpstartdate='{33}',nlcstartdate='{34}',mrpenddate='{35}',dpenddate='{36}',nlcenddate='{37}', Outdated ='{38}' , Deviation = {39}, IsActive='{40}' where ItemCode = '{14}' ", //Jolo Barcode
                 ProductName, Model, CategoryID, ProductDesc, Stock, ROL, Rate, Unit, VAT, Discount, BuyRate, BuyVAT, BuyDiscount, BuyUnit, ItemCode, DealerUnit, DealerRate, DealerVAT, DealerDiscount, Complex, Measure_Unit, Accept_Role, CST, Barcode, ExecutiveCommission, CommodityCode, NLC, block, Productlevel, MRPEffDate.ToString("yyyy-MM-dd"), DPEffDate.ToString("yyyy-MM-dd"), NLCEffDate.ToString("yyyy-MM-dd"), mrpdat.ToString("yyyy-MM-dd"), mrpprevdat.ToString("yyyy-MM-dd"), dpdat.ToString("yyyy-MM-dd"), dpprevdat.ToString("yyyy-MM-dd"), nlcdat.ToString("yyyy-MM-dd"), nlcprevdat.ToString("yyyy-MM-dd"), Outdated, Deviation, IsActive); //Jolo Barcode

            manager.ExecuteDataSet(CommandType.Text, dbQry);


            //dbQry = string.Format("Delete From tblProductPrices Where ItemCode = '{0}'", ItemCode);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            if (dsprice != null)
            {
                if (dsprice.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsprice.Tables[0].Rows)
                    {

                        dbQry3 = string.Format("Select Effdate from tblproductprices Where itemcode='{0}' and pricename ='{1}'", ItemCode, Convert.ToString(dr["PriceName"]));
                        dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry3);
                        if (dsOld != null)
                        {
                            if (dsOld.Tables.Count > 0)
                            {
                                mrpdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["effdate"]);
                            }
                        }

                        dbQry = string.Format("UPDATE tblProductPrices set EffDate = '{0}',Price = {1},PriceId = {2},Discount = {3} where ItemCode = '{4}' and PriceName= '{5}'",
                            Convert.ToDateTime(dr["EffDate"]).ToString("yyyy-MM-dd"), Convert.ToDouble(dr["Price"]), Convert.ToInt32(dr["Id"]), Convert.ToDouble(dr["Discount"]), ItemCode, Convert.ToString(dr["PriceName"]));

                        manager.ExecuteNonQuery(CommandType.Text, dbQry);


                        if (mrpdat == Convert.ToDateTime(dr["EffDate"]))
                        {
                            mrpprevdat = Convert.ToDateTime(dr["EffDate"]);
                        }
                        else
                        {
                            mrpprevdat = Convert.ToDateTime(dr["EffDate"]).AddDays(-1);
                        }

                        if (mrpdat == Convert.ToDateTime(dr["EffDate"]))
                        {
                        }
                        else
                        {
                            dbQry2 = string.Format("INSERT INTO tblProductPricehistory VALUES('{0}','{1}', '{2}',{3},'{4}',{5},'{6}','{7}','{8}','{9}',{10},{11},{12},'{13}')",
                                     ItemCode, ProductName, Model, CategoryID, ProductDesc, ROL, Convert.ToDateTime(dr["EffDate"]).ToString("yyyy-MM-dd"), mrpdat.ToString("yyyy-MM-dd"), mrpprevdat.ToString("yyyy-MM-dd"), Convert.ToString(dr["PriceName"]), Convert.ToDouble(dr["Price"]), Convert.ToDouble(dr["Discount"]), Convert.ToInt32(dr["Id"]), Username);

                            manager.ExecuteDataSet(CommandType.Text, dbQry2);
                        }

                    }
                }
            }

            //if ((mrpdat == MRPEffDate) && (nlcdat == NLCEffDate) && (dpdat == DPEffDate))
            //{
            //}
            //else
            //{
            //    dbQry2 = string.Format("INSERT INTO tblProducthistory VALUES('{0}','{1}', '{2}',{3},'{4}',{5},{6},{7},{8},'{9}',Format('{10}', 'dd/mm/yyyy'),Format('{11}', 'dd/mm/yyyy'),Format('{12}', 'dd/mm/yyyy'),Format('{13}', 'dd/mm/yyyy'),Format('{14}', 'dd/mm/yyyy'),Format('{15}', 'dd/mm/yyyy'),Format('{16}', 'dd/mm/yyyy'),Format('{17}', 'dd/mm/yyyy'),Format('{18}', 'dd/mm/yyyy'))",
            //        ItemCode, ProductName, Model, CategoryID, ProductDesc, ROL, oldmrp, olddp, oldnlc, block, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), mrpdat.ToShortDateString(), mrpprevdat.ToShortDateString(), dpdat.ToShortDateString(), dpprevdat.ToShortDateString(), nlcdat.ToShortDateString(), nlcprevdat.ToShortDateString());
            //    manager.ExecuteDataSet(CommandType.Text, dbQry2);
            //}

            if (dsAudit != null)
            {
                System.Threading.Thread.Sleep(1000);
                dsAudit = GetNewValues(manager.ConnectionString, "Select ProductName,Model,CategoryID,ProductDesc,ROL,Rate,Unit,VAT,Discount,BuyRate,BuyVAT,BuyDiscount,BuyUnit,DealerUnit, DealerRate, DealerVAT, DealerDiscount,Complex,Measure_Unit,Accept_Role  from tblProductMaster Where ItemCode = '" + ItemCode + "'", dsAudit);
                AuditLog = GetAuditString(dsAudit);
                AuditLog = AuditLog + " User :" + Username + " :" + DateTime.Now.ToString();
                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", AuditLog, "Update Product", DateTime.Now.ToString("yyyy-MM-dd"));
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public string[] GetRoles(string connection, string UserName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select UserName,Role from tblUserRole where UserName= '" + UserName + "'";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            string[] retRoles = new string[ds.Tables[0].Rows.Count];

            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    retRoles[i] = ds.Tables[0].Rows[i]["Role"].ToString();
                }
                return retRoles;
            }
            else
                return retRoles;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetMasterRoles(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select * from tblRoleMaster";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void InsertProduct(string connection, string ItemCode, string ProductName, string Model, int CategoryID, string ProductDesc, int ROL, double Stock, double Rate, int Unit, int BuyUnit, double VAT, int Discount, double BuyRate, double BuyVAT, int BuyDiscount, int DealerUnit, double DealerRate, double DealerVAT, int DealerDiscount, string Complex, string Measure_Unit, string Accept_Role, double CST, string Barcode, Double ExecutiveCommission, string CommodityCode, double NLC, string block, int productlevel, DateTime MRPEffDate, DateTime DPEffDate, DateTime NLCEffDate, string Username, string Outdated, int deviation, string IsActive, DataSet dsprice, DataSet dsstock) //Jolo Barcode
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsOld = new DataSet();
        string dbQry3 = string.Empty;

        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();

            dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                string value1 = string.Empty;
                string value2 = string.Empty;
                string value3 = string.Empty;

                int middlePos = 0;
                logdescription = string.Format("INSERT INTO tblProductMaster VALUES({0},{1}, {2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24},{25},{26},{27},{28},{29},{30},{31},{32},{33},{34},{35},{36},{37},{38})",
                ItemCode, ProductName, Model, CategoryID, ProductDesc, Stock, ROL, Rate, Unit, VAT, Discount, BuyUnit, BuyRate, BuyVAT, BuyDiscount, DealerUnit, DealerRate, DealerVAT, DealerDiscount, Complex, Measure_Unit, Accept_Role, CST, Barcode, ExecutiveCommission, CommodityCode, NLC, block, productlevel, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), 0);
                logdescription = logdescription.Trim();
                //if (logdescription.Length > 255)
                //{
                //    value1 = logdescription.Substring(0, 255);
                //    value2 = logdescription.Substring(256, 255);
                //    middlePos = logdescription.Length - (value1.Length + value2.Length);
                //    if (middlePos > 0)
                //        value3 = logdescription.Substring(510, middlePos);
                //    else
                //        value3 = "";
                //}
                //else
                //{
                //    value1 = logdescription;
                //    value2 = "";
                //    value3 = "";
                //}

                if (logdescription.Length > 255)
                {
                    value1 = logdescription.Substring(0, 255);
                    middlePos = logdescription.Length - (value1.Length);
                    if (middlePos > 0)
                    {
                        if (middlePos < 255)
                            value2 = logdescription.Substring(255, middlePos);
                        else if (middlePos > 255)
                            value2 = logdescription.Substring(256, 255);
                        else
                            value2 = logdescription.Substring(256, 254);
                    }
                    else
                        value2 = "";

                    middlePos = logdescription.Length - (value1.Length + value2.Length);
                    if (middlePos > 0)
                    {
                        if (middlePos < 255)
                        {
                            if (middlePos == 1)
                                value3 = "";
                            else
                                value3 = logdescription.Substring(510, middlePos);
                        }
                        else if (middlePos > 255)
                            value3 = logdescription.Substring(511, 255);
                        else
                            value3 = logdescription.Substring(511, 254);
                    }
                    else
                        value3 = "";
                }
                else
                {
                    value1 = logdescription;
                    value2 = "";
                    value3 = "";
                }

                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), value1, Username, "", value2, value3, "InsertProduct");
                manager.ExecuteNonQuery(CommandType.Text, description);

                logdescription = string.Format("INSERT INTO tblProducthistory VALUES({0},{1}, {2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18})",
                ItemCode, ProductName, Model, CategoryID, ProductDesc, ROL, Rate, DealerRate, NLC, block, MRPEffDate.ToString("yyyy-MM-dd"), DPEffDate.ToString("yyyy-MM-dd"), NLCEffDate.ToString("yyyy-MM-dd"), MRPEffDate.ToString("yyyy-MM-dd"), MRPEffDate.ToString("yyyy-MM-dd"), DPEffDate.ToString("yyyy-MM-dd"), DPEffDate.ToString("yyyy-MM-dd"), NLCEffDate.ToString("yyyy-MM-dd"), NLCEffDate.ToString("yyyy-MM-dd"));
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "InsertProduct");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblProductMaster VALUES('{0}','{1}', '{2}',{3},'{4}',{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},'{19}','{20}','{21}',{22},'{23}',{24},'{25}',{26},'{27}',{28},'{29}','{30}','{31}','{32}','{33}','{34}','{35}','{36}','{37}',{38}, {39},'{40}','{41}')",//Jolo Barcode
                ItemCode, ProductName, Model, CategoryID, ProductDesc, Stock, ROL, Rate, Unit, VAT, Discount, BuyUnit, BuyRate, BuyVAT, BuyDiscount, DealerUnit, DealerRate, DealerVAT, DealerDiscount, Complex, Measure_Unit, Accept_Role, CST, Barcode, ExecutiveCommission, CommodityCode, NLC, block, productlevel, MRPEffDate.ToString("yyyy-MM-dd"), DPEffDate.ToString("yyyy-MM-dd"), NLCEffDate.ToString("yyyy-MM-dd"), MRPEffDate.ToString("yyyy-MM-dd"), MRPEffDate.ToString("yyyy-MM-dd"), DPEffDate.ToString("yyyy-MM-dd"), DPEffDate.ToString("yyyy-MM-dd"), NLCEffDate.ToString("yyyy-MM-dd"), NLCEffDate.ToString("yyyy-MM-dd"), 0, deviation, Outdated, IsActive);//Jolo Barcode


            manager.ExecuteDataSet(CommandType.Text, dbQry);


            //dbQry2 = string.Format("INSERT INTO tblProducthistory VALUES('{0}','{1}', '{2}',{3},'{4}',{5},{6},{7},{8},'{9}',Format('{10}', 'dd/mm/yyyy'),Format('{11}', 'dd/mm/yyyy'),Format('{12}', 'dd/mm/yyyy'),Format('{13}', 'dd/mm/yyyy'),Format('{14}', 'dd/mm/yyyy'),Format('{15}', 'dd/mm/yyyy'),Format('{16}', 'dd/mm/yyyy'),Format('{17}', 'dd/mm/yyyy'),Format('{18}', 'dd/mm/yyyy'))",
            //    ItemCode, ProductName, Model, CategoryID, ProductDesc, ROL, Rate, DealerRate, NLC, block, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), NLCEffDate.ToShortDateString());

            //manager.ExecuteDataSet(CommandType.Text, dbQry2);

            double MRate = 0;
            double NRate = 0;
            double DRate = 0;

            if (dsprice != null)
            {
                if (dsprice.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsprice.Tables[0].Rows)
                    {
                        dbQry = string.Format("INSERT INTO tblProductPrices(EffDate,PriceName,Price,PriceId,Discount,ItemCode) VALUES('{0}','{1}',{2},{3},{4},'{5}')",
                            Convert.ToDateTime(dr["EffDate"]).ToString("yyyy-MM-dd"), Convert.ToString(dr["PriceName"]), Convert.ToDouble(dr["Price"]), Convert.ToInt32(dr["Id"]), Convert.ToDouble(dr["Discount"]), ItemCode);

                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        //dbQry2 = string.Format("INSERT INTO tblProductPricehistory VALUES('{0}','{1}', '{2}',{3},'{4}',{5},'{6}','{7}','{8}','{9}',{10},{11},{12},'{13}')",
                        //            ItemCode, ProductName, Model, CategoryID, ProductDesc, ROL, Convert.ToDateTime(dr["EffDate"]).ToString("yyyy-MM-dd"), Convert.ToDateTime(dr["EffDate"]).ToString("yyyy-MM-dd"), Convert.ToDateTime(dr["EffDate"]).ToString("yyyy-MM-dd"), Convert.ToString(dr["PriceName"]), Convert.ToDouble(dr["Price"]), Convert.ToDouble(dr["Discount"]), Convert.ToInt32(dr["Id"]), Username);

                        //manager.ExecuteDataSet(CommandType.Text, dbQry2);

                    }
                }
            }


            if (dsstock != null)
            {
                if (dsstock.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsstock.Tables[0].Rows)
                    {
                        dbQry = string.Format("INSERT INTO tblProductStock(Branchcode,BranchName,Stock,CategoryID,Model,ItemCode,ProductName,ProductDesc) VALUES('{0}','{1}',{2},{3},'{4}','{5}','{6}','{7}')",
                            Convert.ToString(dr["Branchcode"]), Convert.ToString(dr["BranchName"]), Convert.ToDouble(dr["Stock"]), Convert.ToInt32(dr["CategoryID"]), Convert.ToString(dr["Model"]), Convert.ToString(dr["ItemCode"]), Convert.ToString(dr["ProductName"]), Convert.ToString(dr["ProductDesc"]));

                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }
                }
            }

            sAuditStr = "Product added. Record Details :  User :" + Username + "Product Name =" + ProductName + " Model=" + Model + ", Brand=" + ProductDesc + " ,CategoryID=" + CategoryID + " ItemCode :" + ItemCode + " DateTime: " + DateTime.Now.ToString();
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);



        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    #region Journal Section

    public DataSet ListProdForDynammicrowLead(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}','{2}','{3}','{4}') OR tblGroups.HeadingID IN (11) Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors", "Bank Accounts", "Cash in Hand", "InCome");
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID where tblLedger.Unuse = 'YES' ORDER By LedgerName");
            dbQry = string.Format("SELECT ItemCode,ItemCode + ' - ' +  ProductName + ' - ' + Model + ' - ' + ProductDesc + ' - ' + CategoryName as ProductName FROM  tblCategories INNER JOIN tblProductMaster ON tblCategories.CategoryID = tblProductMaster.CategoryID");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListProdForDynammicrowPurchase(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}','{2}','{3}','{4}') OR tblGroups.HeadingID IN (11) Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors", "Bank Accounts", "Cash in Hand", "InCome");
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID where tblLedger.Unuse = 'YES' ORDER By LedgerName");
            dbQry = string.Format("SELECT ItemCode,ItemCode + ' - ' +  ProductName + ' - ' + Model + ' - ' + ProductDesc as ProductName FROM tblProductMaster where IsActive='YES'");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListProdForDynammicrow(string connection, string branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}','{2}','{3}','{4}') OR tblGroups.HeadingID IN (11) Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors", "Bank Accounts", "Cash in Hand", "InCome");
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID where tblLedger.Unuse = 'YES' ORDER By LedgerName");
            // dbQry = string.Format("SELECT ItemCode,ItemCode + ' - ' +  ProductName + ' - ' + Model + ' - ' + ProductDesc as ProductName FROM tblProductMaster where stock > 0");


            dbQry = string.Format("SELECT tblProductMaster.ItemCode,tblProductMaster.ItemCode + ' - ' + tblProductMaster.ProductName + ' - ' + tblProductMaster.Model + ' - ' + tblProductMaster.ProductDesc as ProductName, tblProductMaster.Model, tblProductMaster.CategoryID, " +
                                " tblProductMaster.Rate, tblProductMaster.VAT, tblProductMaster.Discount, tblProductStock.Stock, tblProductStock.BranchCode, " +
                                " tblProductStock.BranchName FROM tblProductMaster INNER JOIN tblProductStock ON tblProductMaster.ItemCode = tblProductStock.ItemCode " +
                                " where BranchCode='" + branchcode + "' and tblProductStock.Stock > 0");


            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListCreditorDebitorJ(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}','{2}','{3}','{4}') OR tblGroups.HeadingID IN (11) Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors", "Bank Accounts", "Cash in Hand", "InCome");
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID where tblLedger.Unuse = 'YES' ORDER By LedgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListCreditorDebitorJNotActive(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}','{2}','{3}','{4}') OR tblGroups.HeadingID IN (11) Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors", "Bank Accounts", "Cash in Hand", "InCome");
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID ORDER By LedgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListSundryDebitors(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}','{2}','{3}','{4}') OR tblGroups.HeadingID IN (11) Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors", "Bank Accounts", "Cash in Hand", "InCome");
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where GroupName = 'Sundry Debtors' ORDER By LedgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListSundryDebitorsIsActive(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}','{2}','{3}','{4}') OR tblGroups.HeadingID IN (11) Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors", "Bank Accounts", "Cash in Hand", "InCome");
            dbQry = string.Format("select LedgerId, LedgerName, Mobile from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where GroupName = 'Sundry Debtors' and tblLedger.Unuse = 'YES' ORDER By LedgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListSundryCreditors(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}','{2}','{3}','{4}') OR tblGroups.HeadingID IN (11) Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors", "Bank Accounts", "Cash in Hand", "InCome");
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where GroupName = 'Sundry Creditors' ORDER By LedgerName");

            dbQry = string.Format("select LedgerId, LedgerName from (tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID) inner join tblAccHeading on tblAccHeading.HeadingId = tblGroups.HeadingId Where Heading = 'Current Liabilities' ORDER By LedgerName");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListSundryCreditorsIsActive(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}','{2}','{3}','{4}') OR tblGroups.HeadingID IN (11) Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors", "Bank Accounts", "Cash in Hand", "InCome");
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where GroupName = 'Sundry Creditors' ORDER By LedgerName");

            dbQry = string.Format("select LedgerId, LedgerName from (tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID) inner join tblAccHeading on tblAccHeading.HeadingId = tblGroups.HeadingId Where Heading = 'Current Liabilities' and tblLedger.Unuse = 'YES' ORDER By LedgerName");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public DataSet ListGeneralExpenses(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}','{2}','{3}','{4}') OR tblGroups.HeadingID IN (11) Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors", "Bank Accounts", "Cash in Hand", "InCome");
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where GroupName = 'General Expenses' ORDER By LedgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListBankAccounts(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}','{2}','{3}','{4}') OR tblGroups.HeadingID IN (11) Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors", "Bank Accounts", "Cash in Hand", "InCome");
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where GroupName = 'Bank Accounts' ORDER By LedgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListJournal(string sTransNo, string sRefno, string sNaration, string sDate, string sPath)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(sPath);
        string dbQry2 = string.Empty;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        String searchStr = string.Empty;

        if (sRefno != string.Empty && sRefno != null)
            searchStr = "tblDayBook.Refno=" + sRefno.Trim();

        if (sTransNo != string.Empty && sTransNo != null)
            searchStr = "tblDayBook.TransNo=" + sTransNo.Trim();

        if (sNaration != string.Empty && sNaration != null)
        {
            if (searchStr == string.Empty)
                searchStr = searchStr + " (Creditor.LedgerName LIKE '%" + sNaration.Trim() + "%' OR Debitor.LedgerName LIKE '%" + sNaration.Trim() + "%')";
            else
                searchStr = searchStr + " AND (Creditor.LedgerName LIKE '%" + sNaration.Trim() + "%' OR Debitor.LedgerName LIKE '%" + sNaration.Trim() + "%')";
        }
        if (sDate != string.Empty && sDate != null)
        {
            if (searchStr == string.Empty)
                searchStr = searchStr + "tblDayBook.TransDate=#" + Convert.ToDateTime(sDate).ToString("MM/dd/yyyy").Trim() + "#";
            else
                searchStr = searchStr + " AND tblDayBook.TransDate=#" + Convert.ToDateTime(sDate).ToString("MM/dd/yyyy").Trim() + "#";
        }
        dbQry2 = "Select recon_date from last_recon";
        manager.Open();
        object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

        if (searchStr != string.Empty)
        {
            dbQry.Append("SELECT  tblDayBook.TransNo,  Format(tblDayBook.TransDate, 'dd/mm/yyyy') As TransDate, Creditor.LedgerName As Cred, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo FROM  (((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID))");

            dbQry.AppendFormat("Where {0} AND VoucherType='Journal' AND tblDayBook.TransDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "#  Order By tblDayBook.TransDate Desc", searchStr);

        }
        else
        {
            dbQry.Append("SELECT  tblDayBook.TransNo, Format(tblDayBook.TransDate, 'dd/mm/yyyy') As TransDate, Creditor.LedgerName As Cred, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo FROM  (((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID))");

            dbQry.AppendFormat(" Where VoucherType='Journal' AND tblDayBook.TransDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "#   Order By tblDayBook.TransDate Desc");
        }


        try
        {

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetJournalForId(int TransNo, String ConStr)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(ConStr);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName,tblDayBook.CreditorID,tblDayBook.DebtorID, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo FROM  (((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID)) ");
            dbQry.AppendFormat("Where tblDayBook.TransNo = {0} AND tblDayBook.TransDate > " + DateTime.Parse(retVal.ToString()).ToString("yyyy-MM-dd") + "   Order By tblDayBook.TransDate Desc", TransNo);


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void UpdatJournal(int TransNo, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, String sPath, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(sPath);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        DataSet dsOld = new DataSet();
        int oldDebtorID = 0;
        int oldCreditorID = 0;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        SqlConnection oleConn, oleSubConn;
        string pQry = string.Empty;
        string pgQry = string.Empty;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        DataSet dsChildQry;
        string sConStr = string.Empty;

        oleConn = new SqlConnection(CreateConnectionString(sPath));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        DataSet dsOldRec = new DataSet();
        string dbQry123 = string.Empty;

        try
        {

            if (!IsValidDate(sPath, TransDate))
            {
                throw new Exception("Invalid Date");
            }

            //if (DebitorID == CreditorID)
            //{
            //    throw new Exception("Same Creditor Debtor");
            //}

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID
            dsOld = GetJournalForId(TransNo, sPath);
            if (dsOld.Tables[0].Rows[0]["DebtorID"] != null)
            {
                if (dsOld.Tables[0].Rows[0]["DebtorID"].ToString() != string.Empty)
                {
                    oldDebtorID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"].ToString());
                }
            }
            if (dsOld.Tables[0].Rows[0]["CreditorID"] != null)
            {
                if (dsOld.Tables[0].Rows[0]["CreditorID"].ToString() != string.Empty)
                {
                    oldCreditorID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"].ToString());
                }
            }
            //End Retriving the old Debtor and CreditorID

            //Start Updating the Debit and credit 
            ////dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", oldDebtorID);
            ////double Debit = 0;

            ////object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            ////if ((retDebit != null) && (retDebit != DBNull.Value))
            ////{
            ////    Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            ////}


            ////dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit - Amount, oldDebtorID);
            ////manager.ExecuteNonQuery(CommandType.Text, dbQry);

            ////dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", oldCreditorID);
            ////double Credit = 0;

            ////object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            ////if ((retCredit != null) && (retCredit != DBNull.Value))
            ////{
            ////    Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            ////}



            ////dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit - Amount, oldCreditorID);
            ////manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Updating the Debit and credit
            //Start Delete the old record

            dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "UpdateJournal");
                manager.ExecuteNonQuery(CommandType.Text, description);

                logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,RefNo,BranchCode) VALUES({0},{1},{2},{3},{4},{5},{6},'{7}')",
                     TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, RefNo,"All");
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "UpdateJournal");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblAuditDayBook Select * From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Deleting the old record
            //Insert New Record

            dbQry = string.Format("INSERT INTO tblAuditDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,RefNo,BranchCode) VALUES('{0}',{1},{2},{3},'{4}','{5}',{6},'{7}')",
               TransDate.ToString("yyyy-MM-dd"), DebitorID, CreditorID, Amount, Narration, VoucherType, RefNo,"All");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,RefNo,BranchCode) VALUES('{0}',{1},{2},{3},'{4}','{5}',{6},'{7}')",
               TransDate.ToString("yyyy-MM-dd"), DebitorID, CreditorID, Amount, Narration, VoucherType, RefNo,"All");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int NewTransNo = 0;

            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NewTransNo = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }






            string Debtor = string.Empty;
            string creditor = string.Empty;
            if (DebitorID != null)
            {
                pQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + DebitorID;
            }

            if (CreditorID != null)
            {
                pgQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + CreditorID;
            }
            if (pQry != "")
            {
                oleCmd = new SqlCommand();
                oleCmd.CommandText = pQry;
                oleSubConn = new SqlConnection(CreateConnectionString(sPath));
                oleCmd.Connection = oleSubConn;
                oleAdp = new SqlDataAdapter(oleCmd);
                dsChildQry = new DataSet();
                oleAdp.Fill(dsChildQry);
                if (dsChildQry != null)
                {
                    if (dsChildQry.Tables[0].Rows.Count > 0)
                    {
                        Debtor = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                    }
                }
                oleSubConn.Close();
            }

            if (pgQry != "")
            {
                oleCmd = new SqlCommand();
                oleCmd.CommandText = pgQry;
                oleSubConn = new SqlConnection(CreateConnectionString(sPath));
                oleCmd.Connection = oleSubConn;
                oleAdp = new SqlDataAdapter(oleCmd);
                dsChildQry = new DataSet();
                oleAdp.Fill(dsChildQry);
                if (dsChildQry != null)
                {
                    if (dsChildQry.Tables[0].Rows.Count > 0)
                    {
                        creditor = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                    }
                }
                oleSubConn.Close();
            }
            dbQry123 = string.Format("Select TransNo from tblBankRecon Where TransNo={0}", TransNo);
            dsOldRec = manager.ExecuteDataSet(CommandType.Text, dbQry123);
            if (dsOldRec != null)
            {
                if (dsOldRec.Tables.Count > 0)
                {
                    dbQry = string.Format("UPDATE tblBankRecon SET TransNo={0},TransDate = '{1}',DebtorID={2},Debtor='{3}',CreditorID={4},Creditor='{5}',Amount={6},Narration='{7}',VoucherType='{8}',Chequeno='{9}',RefNo={10} WHERE TransNo={11} ",
                    NewTransNo, TransDate.ToString("yyyy-MM-dd"), DebitorID, Debtor, CreditorID, creditor, Amount, Narration, VoucherType, 0, 0, TransNo);
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                }
            }





            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);

            //double DebitNew = 0;

            //object retDebitNew = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retDebitNew != null) && (retDebitNew != DBNull.Value))
            //{
            //    DebitNew = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}

            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", DebitNew + Amount, DebitorID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);


            //double CreditNew = 0;

            //object retCreditNew = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retCreditNew != null) && (retCreditNew != DBNull.Value))
            //{
            //    CreditNew = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}

            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", CreditNew + Amount, CreditorID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //Store the details in the Audit Table.
            sAuditStr = "Journal Transaction : " + TransNo + " got edited and deleted Record Details : User = " + Username + "DebtorID=" + DebitorID + ",CreditorID=" + CreditorID + ",Amount=" + Amount + " New Trans No :" + NewTransNo;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit and Update", TransDate.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void UpdateJournal(out int NewTransNo, int TransNo, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, String sPath, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(sPath);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        DataSet dsOld = new DataSet();
        int oldDebtorID = 0;
        int oldCreditorID = 0;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {

            if (!IsValidDate(sPath, TransDate))
            {
                throw new Exception("Invalid Date");
            }

            if (DebitorID == CreditorID)
            {
                throw new Exception("Same Creditor Debtor");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID
            dsOld = GetJournalForId(TransNo, sPath);
            if (dsOld.Tables[0].Rows[0]["DebtorID"] != null)
            {
                if (dsOld.Tables[0].Rows[0]["DebtorID"].ToString() != string.Empty)
                {
                    oldDebtorID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"].ToString());
                }
            }
            if (dsOld.Tables[0].Rows[0]["CreditorID"] != null)
            {
                if (dsOld.Tables[0].Rows[0]["CreditorID"].ToString() != string.Empty)
                {
                    oldCreditorID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"].ToString());
                }
            }
            //End Retriving the old Debtor and CreditorID

            //Start Updating the Debit and credit 
            ////dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", oldDebtorID);
            ////double Debit = 0;

            ////object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            ////if ((retDebit != null) && (retDebit != DBNull.Value))
            ////{
            ////    Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            ////}


            ////dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit - Amount, oldDebtorID);
            ////manager.ExecuteNonQuery(CommandType.Text, dbQry);

            ////dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", oldCreditorID);
            ////double Credit = 0;

            ////object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            ////if ((retCredit != null) && (retCredit != DBNull.Value))
            ////{
            ////    Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            ////}



            ////dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit - Amount, oldCreditorID);
            ////manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Updating the Debit and credit
            //Start Delete the old record

            dbQ = "SELECT KeyValue From tblSettings WHERE key='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString(), logdescription.ToString(), Username, "", "UpdateJournal");
                manager.ExecuteNonQuery(CommandType.Text, description);

                logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,RefNo) VALUES({0},{1},{2},{3},{4},{5},{6})",
                     TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, RefNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString(), logdescription.ToString(), Username, "", "UpdateJournal");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblAuditDayBook Select * From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Deleting the old record
            //Insert New Record

            dbQry = string.Format("INSERT INTO tblAuditDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}',{6})",
               TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, RefNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}',{6})",
               TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, RefNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            NewTransNo = 0;

            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NewTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }



            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);

            //double DebitNew = 0;

            //object retDebitNew = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retDebitNew != null) && (retDebitNew != DBNull.Value))
            //{
            //    DebitNew = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}

            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", DebitNew + Amount, DebitorID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);


            //double CreditNew = 0;

            //object retCreditNew = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retCreditNew != null) && (retCreditNew != DBNull.Value))
            //{
            //    CreditNew = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}

            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", CreditNew + Amount, CreditorID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //Store the details in the Audit Table.
            sAuditStr = "Journal Transaction : " + TransNo + " got edited and deleted Record Details : User = " + Username + "DebtorID=" + DebitorID + ",CreditorID=" + CreditorID + ",Amount=" + Amount + " New Trans No :" + NewTransNo;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Edit and Update", TransDate.ToShortDateString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void InsertJournal(out int NewTransNo, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string sPath, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(sPath);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {

            if (!IsValidDate(sPath, TransDate))
            {
                throw new Exception("Invalid Date");
            }

            if (DebitorID == CreditorID)
            {
                throw new Exception("Same Creditor Debtor");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();


            dbQry2 = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,RefNo,BranchCode) VALUES({0},{1},{2},{3},{4},{5},{6},'{7}')",
                    TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, RefNo,"All");
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "InsertJournal");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }


            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,RefNo,BranchCode) VALUES('{0}',{1},{2},{3},'{4}','{5}',{6},'{7}')",
            TransDate.ToString("yyyy-MM-dd"), DebitorID, CreditorID, Amount, Narration, VoucherType, RefNo,"All");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int TransNo = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                TransNo = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));
            }
            else
            {
                TransNo = TransNo + 1;
            }

            //dbQry = string.Format("Insert Into tblPayment(JournalID,Paymode) Values({0},'{1}')", TransNo, PaymentMode);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);
            //double Debit = 0;

            //object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retDebit != null) && (retDebit != DBNull.Value))
            //{
            //    Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}



            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);
            //double Credit = 0;

            //object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retCredit != null) && (retCredit != DBNull.Value))
            //{
            //    Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}


            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);


            sAuditStr = "Journal Transaction: " + TransNo + " added. Record Details :  User :" + Username + " Bill No=" + RefNo + " DebtorID=" + DebitorID + " ,CreditorID=" + CreditorID + " ,Amount=" + Amount + " New Trans No :" + TransNo + " DateTime: " + DateTime.Now.ToString();
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            manager.CommitTransaction();
            NewTransNo = TransNo;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }
    public void DeleteJournal(int TransNo, string sPath, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(sPath);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        DataSet dsOld = new DataSet();
        int oldDebtorID = 0;
        int oldCreditorID = 0;
        string dbQry123 = string.Empty;
        DataSet dsOldRec = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;

        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();
            dsOld = GetJournalForId(TransNo, sPath);
            if (dsOld.Tables[0].Rows[0]["DebtorID"] != null)
            {
                if (dsOld.Tables[0].Rows[0]["DebtorID"].ToString() != string.Empty)
                {
                    oldDebtorID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"].ToString());
                }
            }
            if (dsOld.Tables[0].Rows[0]["CreditorID"] != null)
            {
                if (dsOld.Tables[0].Rows[0]["CreditorID"].ToString() != string.Empty)
                {
                    oldCreditorID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"].ToString());
                }
            }

            //Start Updating the Debit and credit 
            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", oldDebtorID);
            //double Debit = 0;

            //object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retDebit != null) && (retDebit != DBNull.Value))
            //{
            //    Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}


            double Amount = (double)manager.ExecuteScalar(CommandType.Text, "Select Amount from tblDayBook Where TransNo=" + TransNo);
            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit - Amount, oldDebtorID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", oldCreditorID);
            //double Credit = 0;

            //object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retCredit != null) && (retCredit != DBNull.Value))
            //{
            //    Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}


            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit - Amount, oldCreditorID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Updating the Debit and credit


            //Start Save in Log table

            dbQry2 = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, TransNo, "DeleteJournal");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            //End Save in Log table


            dbQry = string.Format("INSERT INTO tblAuditDayBook Select * From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            //dbQry = string.Format("Delete From tblPayment Where JournalID = {0}", TransNo);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry123 = string.Format("Select TransNo from tblBankRecon Where TransNo={0}", TransNo);
            dsOldRec = manager.ExecuteDataSet(CommandType.Text, dbQry123);
            if (dsOldRec != null)
            {
                if (dsOldRec.Tables.Count > 0)
                {
                    dbQry = string.Format("Delete From tblBankRecon Where TransNo = {0}", TransNo);
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                }
            }


            sAuditStr = "Journal Transaction: " + TransNo + " got deleted old Record Details : User = " + Username + " DebtorID=" + oldDebtorID + ",CreditorID=" + oldCreditorID + ",Amount=" + Amount;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}', '{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    #endregion

    #region Purchase Section

    public DataSet GetPurchase(object usernam)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        DataSet dsdate = new DataSet();

        StringBuilder dbQry = new StringBuilder();
        StringBuilder dbQry2 = new StringBuilder();
        string dbQry3 = string.Empty;

        string username = string.Empty;
        string name = string.Empty;

        try
        {
            //manager.Open();
            //dbQry2 = "Select recon_date from last_recon";
            //object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            manager.Open();
            dbQry2.Append("Select user,recondate from tbluserlock");
            dsdate = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());


            foreach (DataRow drdate in dsdate.Tables[0].Rows)
            {
                name = drdate["user"].ToString();
                if (name == usernam.ToString())
                {
                    username = "Yes";
                    name = drdate["user"].ToString();
                }
            }

            object retVal;

            if (username == "Yes")
            {
                dbQry3 = "Select recondate from tbluserlock";
                retVal = manager.ExecuteScalar(CommandType.Text, dbQry3);
            }
            else
            {
                retVal = DBNull.Value;
            }

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                dbQry.Append("SELECT tblPurchase.PurchaseId,tblPurchase.Billno,Format(tblPurchase.Billdate, 'dd/mm/yyyy') As BillDate,tblPurchase.Paymode,tblPurchase.SupplierID,tblDaybook.Chequeno,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.TransNo,tblDayBook.narration,tblPurchase.JournalID,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason,Supplier.LedgerName As Supplier");
                dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID) INNER JOIN tblLedger Supplier ON tblPurchase.SupplierID = Supplier.LedgerID)) Where tblPurchase.InvoiceDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ORDER BY tblPurchase.InvoiceDate Desc");

            }
            else
            {
                dbQry.Append("SELECT tblPurchase.PurchaseId,tblPurchase.Billno,Format(tblPurchase.Billdate, 'dd/mm/yyyy') As BillDate,tblPurchase.Paymode,tblPurchase.SupplierID,tblDaybook.Chequeno,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.narration,tblDayBook.TransNo,tblPurchase.JournalID,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason,Supplier.LedgerName As Supplier");
                dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID) INNER JOIN tblLedger Supplier ON tblPurchase.SupplierID = Supplier.LedgerID)) ORDER BY tblPurchase.InvoiceDate Desc");
            }
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetPurchase()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        DataSet dsdate = new DataSet();

        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        string dbQry3 = string.Empty;

        string username = string.Empty;
        string name = string.Empty;

        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";

            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                dbQry.Append("SELECT tblPurchase.PurchaseId,tblPurchase.Billno,Format(tblPurchase.Billdate, 'dd/mm/yyyy') As BillDate,tblPurchase.Paymode,tblPurchase.SupplierID,tblDaybook.Chequeno,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.TransNo,tblDayBook.narration,tblPurchase.JournalID,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason,Supplier.LedgerName As Supplier");
                dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID) INNER JOIN tblLedger Supplier ON tblPurchase.SupplierID = Supplier.LedgerID)) Where tblPurchase.InvoiceDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ORDER BY tblPurchase.InvoiceDate Desc");

            }
            else
            {
                dbQry.Append("SELECT tblPurchase.PurchaseId,tblPurchase.Billno,Format(tblPurchase.Billdate, 'dd/mm/yyyy') As BillDate,tblPurchase.Paymode,tblPurchase.SupplierID,tblDaybook.Chequeno,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.narration,tblDayBook.TransNo,tblPurchase.JournalID,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason,Supplier.LedgerName As Supplier");
                dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID) INNER JOIN tblLedger Supplier ON tblPurchase.SupplierID = Supplier.LedgerID)) ORDER BY tblPurchase.InvoiceDate Desc");
            }
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public string getProductName(string itemcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();


            dbQry.Append("SELECT itemcode + '-' +  Productname + '-' +  Model As ProductName From tblProductMaster WHERE itemCode='" + itemcode + "'");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds.Tables[0].Rows[0]["ProductName"].ToString();
            else
                return "";
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }
    public string getBillProductName(string itemcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();


            dbQry.Append("SELECT   Productname + ' ' +  Model + ' ' + ProductDesc As ProductName From tblProductMaster WHERE itemCode='" + itemcode + "'");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds.Tables[0].Rows[0]["ProductName"].ToString();
            else
                return "";
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }
    public string getBillProductUnit(string itemcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();


            dbQry.Append("SELECT   Measure_unit  From tblProductMaster WHERE itemCode='" + itemcode + "'");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds.Tables[0].Rows[0]["Measure_unit"].ToString();
            else
                return "";
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }
    public string getConfigInfo()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();


            dbQry.Append("SELECT   KeyValue  From tblSettings WHERE KEYNAME='BILLFORMAT'");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds.Tables[0].Rows[0]["KeyValue"].ToString();
            else
                return "";
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }
    public string GetBillFormat(int billno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();


            dbQry.Append("SELECT Bundles,Rods From tblSalesItems Where Billno=" + billno + " AND Bundles>0 AND Rods>0");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return "STEEL";
            else
                return "CEMENT";
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }
    //SELECT itemCode,Sum(Qty) As Quantity,PurchaseRate As Rate ,Sum((Qty * PurchaseRate) - ((discount/100) + Qty * PurchaseRate) + ((VAT/100) + Qty * PurchaseRate)) As Total  FROM tblPurchaseItems Group By itemcode,purchaserate,purchaseID having purchaseID=561;
    public DataSet GetPurchaseBill(int purchaseID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();

            dbQry.Append("SELECT itemCode,Sum(Qty) As Quantity,PurchaseRate As Rate ,Sum((Qty * PurchaseRate) - ((discount/100) + Qty * PurchaseRate) + ((VAT/100) + Qty * PurchaseRate)) As Total  FROM tblPurchaseItems");
            dbQry.Append(" Group By itemcode,purchaserate,purchaseID having purchaseID=" + purchaseID);


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet GetPurchaseForId(String Billno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                dbQry.Append("SELECT tblPurchase.PurchaseId,tblPurchase.Billno,Format(tblPurchase.Billdate, 'dd/mm/yyyy') As BillDate,tblPurchase.Paymode,tblPurchase.SupplierID,tblDaybook.Chequeno,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.TransNo,tblDayBook.narration,tblPurchase.JournalID,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason");
                dbQry.Append(" FROM (((tblDayBook  INNER JOIN  tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID))");
                dbQry.Append(" Where tblPurchase.Billno='" + Billno.Trim() + "' AND tblPurchase.InvoiceDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ORDER BY tblPurchase.InvoiceDate Desc");
            }
            else
            {
                dbQry.Append("SELECT tblPurchase.PurchaseId,tblPurchase.Billno,Format(tblPurchase.Billdate, 'dd/mm/yyyy') As BillDate,tblPurchase.Paymode,tblPurchase.SupplierID,tblDaybook.Chequeno,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.narration,tblDayBook.TransNo,tblPurchase.JournalID,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason");
                dbQry.Append(" FROM (((tblDayBook  INNER JOIN  tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID))");
                dbQry.Append(" ORDER BY tblPurchase.InvoiceDate Desc");

            }
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetPurchaseForId(String Billno, String TransNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                dbQry.Append("SELECT tblPurchase.PurchaseId,tblPurchase.Billno,Format(tblPurchase.Billdate, 'dd/mm/yyyy') As BillDate,tblPurchase.Paymode,tblPurchase.SupplierID,tblDaybook.Chequeno,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.TransNo,tblDayBook.narration,tblPurchase.JournalID,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason,Supplier.LedgerName As Supplier ");
                dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID) INNER JOIN tblLedger Supplier ON tblPurchase.SupplierID = Supplier.LedgerID))");
                dbQry.Append(" Where tblPurchase.InvoiceDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ");

                if (TransNo != "")
                {
                    if (TransNo != "0")
                        dbQry.Append(" AND tblDayBook.TransNo = " + TransNo + "");

                }

                if (Billno != "")
                {
                    if (Billno != "0")
                        dbQry.Append(" AND tblPurchase.Billno='" + Billno.Trim() + "'");
                }

                dbQry.Append(" ORDER BY tblPurchase.BillDate Desc");

            }
            else
            {
                dbQry.Append("SELECT tblPurchase.PurchaseId,tblPurchase.Billno,Format(tblPurchase.Billdate, 'dd/mm/yyyy') As BillDate,tblPurchase.Paymode,tblPurchase.SupplierID,tblDaybook.Chequeno,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.narration,,tblDayBook.TransNo,tblPurchase.JournalID,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason,Supplier.LedgerName As Supplier ");
                dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID) INNER JOIN tblLedger Supplier ON tblPurchase.SupplierID = Supplier.LedgerID)) ");
                dbQry.Append(" ORDER BY tblPurchase.InvoiceDate Desc");
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet GetPurchaseForId(int purchaseID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                /*Start Purchase Loading / Unloading Freight Change - March 16*/
                dbQry.Append("SELECT tblPurchase.PurchaseId,tblPurchase.Billno,tblPurchase.DeliveryNote, tblPurchase.Billdate,tblPurchase.TotalAmt,tblPurchase.InvoiceNo,tblPurchase.Invoicedate,tblPurchase.Paymode,tblPurchase.InternalTransfer,tblPurchase.SupplierID,tblDaybook.Chequeno,Creditor.LedgerID As CreditorID,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.TransNo,tblDayBook.narration,tblPurchase.JournalID,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason,tblPurchase.LoadUnload,tblPurchase.discamount,tblPurchase.discper,tblPurchase.TotalWORndOff,tblPurchase.dcbillno,tblPurchase.narration2,tblPurchase.Freight,IIF(tblPurchase.BilitID IS NULL,0,tblPurchase.BilitID) AS BilitID,tblPurchase.BranchCode ");
                /*Start Purchase Loading / Unloading Freight Change - March 16*/
                dbQry.Append(" FROM (((tblDayBook  INNER JOIN  tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID))");
                dbQry.Append(" Where tblPurchase.purchaseID=" + purchaseID + " AND tblPurchase.InvoiceDate > '" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "' ORDER BY tblPurchase.InvoiceDate Desc");
            }
            else
            {
                /*Start Purchase Loading / Unloading Freight Change - March 16*/
                dbQry.Append("SELECT tblPurchase.PurchaseId,tblPurchase.Billno,tblPurchase.DeliveryNote,tblPurchase.Billdate,tblPurchase.TotalAmt,tblPurchase.InvoiceNo,tblPurchase.Invoicedate,tblPurchase.Paymode,tblPurchase.InternalTransfer,tblPurchase.SupplierID,tblDaybook.Chequeno,tblDayBook.TransNo,Creditor.LedgerID As CreditorID,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.narration,tblPurchase.JournalID,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason,tblPurchase.LoadUnload,tblPurchase.discamount,tblPurchase.discper,tblPurchase.TotalWORndOff,tblPurchase.dcbillno,tblPurchase.narration2,tblPurchase.Freight,IIF(tblPurchase.BilitID IS NULL,0,tblPurchase.BilitID) AS BilitID,tblPurchase.BranchCode ");
                /*Start Purchase Loading / Unloading Freight Change - March 16*/
                dbQry.Append(" FROM (((tblDayBook  INNER JOIN  tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID))");
                dbQry.Append("  ORDER BY tblPurchase.InvoiceDate Desc");
            }
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetSalesRtnPurchaseItemsForId(int purchaseId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("Select tblPurchaseitems.ItemCode,tblProductMaster.ProductName,tblProductMaster.ProductDesc,tblProductMaster.Measure_Unit,tblPurchaseitems.PurchaseRate,tblPurchaseitems.Qty,tblPurchaseitems.ReturnQty,");
            dbQry.Append("tblPurchaseitems.discount,tblPurchaseitems.Vat,tblPurchaseItems.CST,tblPurchaseItems.NLP,tblPurchaseitems.discamt,tblPurchaseItems.PurchaseID,tblPurchaseItems.RoleID,tblpurchaseitems.isRole,tblProductMaster.Model FROM tblPurchaseItems INNER JOIN tblProductmaster ON tblPurchaseItems.itemCode = tblProductMaster.itemCode");
            dbQry.Append(" Where tblPurchaseitems.PrdReturnStatus='NO' and  tblPurchaseItems.purchaseID = " + purchaseId);
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet GetPurchaseItemsForId(int purchaseId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("Select tblPurchaseitems.ItemCode,tblProductMaster.ProductName,tblProductMaster.ProductDesc,tblProductMaster.Measure_Unit,tblPurchaseitems.PurchaseRate,tblPurchaseitems.Qty,tblPurchaseitems.ReturnQty,");
            dbQry.Append("tblPurchaseitems.discount,tblPurchaseitems.Vat,tblPurchaseItems.CST,tblPurchaseItems.NLP,tblPurchaseitems.discamt,tblPurchaseItems.PurchaseID,tblPurchaseItems.RoleID,tblpurchaseitems.isRole,tblProductMaster.Model FROM tblPurchaseItems INNER JOIN tblProductmaster ON tblPurchaseItems.itemCode = tblProductMaster.itemCode");
            dbQry.Append(" Where tblPurchaseItems.purchaseID = " + purchaseId);
            //dbQry.Append(" Where tblPurchaseitems.PrdReturnStatus='NO' and  tblPurchaseItems.purchaseID = " + purchaseId);
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }
    public DataSet ListProducts()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;



        //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
        dbQry = "SELECT ProductName + ' - ' + ItemCode + ' - ' + Model  As ProductName,ItemCode FROM tblProductMaster Order By ProductName,Model,ItemCode Asc";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet ListBillFormat()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;



        //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
        dbQry = "SELECT Billformat FROM tblBillFormat";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }


    public DataSet ListPurProductDetails(string itemCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = "select itemcode,ProductName,ProductDesc,Model,BuyDiscount,BuyVat,BuyRate,CST,Stock,dealerdiscount,dealervat,dealerrate,Accept_Role,Rol,vat,BuyRate as NLP, Measure_Unit from tblProductMaster Where itemCode='" + itemCode + "'";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet ListSalesProductDetails(string itemCode, string CatType)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        if (CatType == "Dealer")
            dbQry = "select itemcode,ProductName,ProductDesc,Model,DealerDiscount as Discount,DealerVat as Vat,DealerRate as Rate,CST,Stock,dealerdiscount,VAT as dealervat,dealerrate,Accept_Role,DealerRate as NLP,ExecutiveCommission,Measure_Unit from tblProductMaster Where itemCode='" + itemCode + "'";
        else
            dbQry = "select itemcode,ProductName,ProductDesc,Model,Discount,Vat,Rate,CST,Stock,dealerdiscount,VAT as dealervat,dealerrate,Accept_Role,DealerRate as NLP,ExecutiveCommission,Measure_Unit from tblProductMaster Where itemCode='" + itemCode + "'";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }


    public DataSet ListProductDetails(string itemCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = "select itemcode,ProductName,ProductDesc,Model,Discount,Vat,Rate,CST,Stock,dealerdiscount,dealervat,dealerrate,Accept_Role,Rate as NLP from tblProductMaster Where itemCode='" + itemCode + "'";
        // ,string branchcodedbQry = " SELECT tblProductMaster.ItemCode,tblProductMaster.ProductName,tblProductMaster.ProductDesc, tblProductMaster.Model, tblProductMaster.Discount," +
        //       " tblProductMaster.VAT,tblProductMaster.Rate, tblProductMaster.CST,tblProductMaster.dealerdiscount,tblProductMaster.dealervat,tblProductMaster.dealerrate, " +
        //       " tblProductMaster.Accept_Role,tblProductMaster.Rate as NLP ,tblProductStock.Stock, tblProductStock.BranchCode, " +
        //       " tblProductStock.BranchName FROM tblProductMaster INNER JOIN tblProductStock ON tblProductMaster.ItemCode = tblProductStock.ItemCode " +
        //       " where tblProductMaster.ItemCode='" + itemCode + "' and tblProductStock.BranchCode='" + branchcode + "' and tblProductStock.Stock > 0 ";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet ListProductRate(string itemCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = "select ProductName,ProductDesc,Model,Discount,Vat,Rate,Stock from tblProductMaster Where itemCode='" + itemCode + "'";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public int isDuplicateBill(string Billno, int SupplierID)
    {
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        dbQry = "SELECT COUNT(*) FROM tblPurchase WHERE Billno='" + Billno + "' and SupplierID=" + SupplierID;

        try
        {
            int cnt = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                cnt = (int)manager.ExecuteScalar(CommandType.Text, dbQry);
            }
            dbQry2 = "SELECT COUNT(*) FROM TemptblPurchase WHERE Billno='" + Billno + "' and SupplierID=" + SupplierID;
            int tcnt = 0;
            object retTVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retTVal != null) && (retTVal != DBNull.Value))
            {
                tcnt = (int)manager.ExecuteScalar(CommandType.Text, dbQry2);
            }
            cnt = cnt + tcnt;

            return cnt;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    /*Start Purchase Loading / Unloading Freight Change - March 16 Parameter Added double freight, double dLU,*/
    public int InsertPurchaseOld26(string Billno, DateTime BillDate, int SupplierID, int paymode, string Chequeno, int BankName, double Amount, string salesreturn, string srReason, double freight, double dLU, int BilitID, string intTrans, DataSet purchaseDS, string deliveryNote)
    {
        /*End Purchase Loading / Unloading Freight Change - March 16*/
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldSupplierID = 0;
        double oldAmt = 0;
        string sNarration = string.Empty;
        int creditorID = 0;
        int DebtorID = 3;
        int purchaseID = 0;
        string sVoucherType = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID

            if (paymode == 1)
                creditorID = 1;
            else if (paymode == 2)
                creditorID = BankName;
            else
                creditorID = SupplierID;

            //End Retriving the old Debtor and CreditorID
            if (salesreturn == "NO")
                sVoucherType = "Purchase";
            else
                sVoucherType = "Sales Return";

            sNarration = sVoucherType + " - Bill No:" + Billno;
            //Purchase A/c - 3 will always be the debtor
            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebtorID);
            double Debit = 0;

            object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebit != null) && (retDebit != DBNull.Value))
            {
                Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            //double Payment = (double)manager.ExecuteScalar(CommandType.Text, "Select Amount from tblDayBook Where TransNo=" + TransNo);
            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebtorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", creditorID);
            double Credit = 0;
            object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCredit != null) && (retCredit != DBNull.Value))
            {
                Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }
            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, creditorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Updating the Debit and credit
            //Start Delete the old record


            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,Chequeno,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
            BillDate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, Chequeno, 0);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int NewTransNo = 0;

            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NewTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }

            /*Start Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/
            dbQry = string.Format("INSERT INTO tblPurchase(Billno,BillDate,SupplierID,JournalID,Paymode,TotalAmt,salesreturn,salesreturnreason,freight,LoadUnload,BilitID,InternalTransfer,DeliveryNote) VALUES('{0}',Format('{1}', 'dd/mm/yyyy'),{2},{3},{4},{5},'{6}','{7}',{8},{9},{10},'{11}','{12}')",
            Billno, BillDate.ToShortDateString(), SupplierID, NewTransNo, paymode, Amount, salesreturn, srReason, freight, dLU, BilitID, intTrans, deliveryNote);
            /*Start Purchase Loading / Unloading Freight Change - March 16*/
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            object retPurchase = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(PurchaseID) FROM tblPurchase");

            if ((retPurchase != null) && (retPurchase != DBNull.Value))
            {
                purchaseID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(PurchaseID) FROM tblPurchase");
            }
            else
            {
                purchaseID = purchaseID + 1;
            }

            //Store the details in the Audit Table.
            //sAuditStr = "Transaction: " + TransNo + " got edited and deleted Record Details : SupplierID=" + SupplierID + ",CreditorID=3,Amount=" + oldAmt + " New Trans No :" + NewTransNo;
            //dbQry = string.Format("INSERT INTO  tblAudit(Description,Command) VALUES('{0}','{1}')", sAuditStr, "Edit and Update");
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //Adding the Purchase Items Table

            int roleID = 0;
            string rolename = string.Empty;
            if (purchaseDS != null)
            {
                if (purchaseDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in purchaseDS.Tables[0].Rows)
                    {
                        //dbQry = string.Format("INSERT INTO tblPurchaseItems(purchaseID,itemcode,Qty,PurchaseRate,discount,vat,roleid,isRole,cst,nlp,discamt) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10})", purchaseID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["PurchaseRate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), roleID, rolename, Convert.ToDouble(dr["CST"]), Convert.ToDouble(dr["NLP"]), Convert.ToDouble(dr["Discountamt"]));

                        dbQry = string.Format("INSERT INTO tblPurchaseItems(purchaseID,itemcode,Qty,PurchaseRate,discount,vat,roleid,isRole,cst,nlp,discamt) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10})", purchaseID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["PurchaseRate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), roleID, rolename, Convert.ToDouble(dr["CST"]), Convert.ToDouble(dr["NLP"]), Convert.ToDouble(dr["Discountamt"]));
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock + {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }
                }
            }

            dbQry = string.Format("Update tblBilti SET Status = 'Closed' Where ID={0}", BilitID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();
            return purchaseID;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public int UpdatePurchase26(int purchaseID, string Billno, DateTime BillDate, int SupplierID, int paymode, string Chequeno, int BankName, double Amount, string salesreturn, string srReason, double freight, double dLU, int BilitID, string intTrans, DataSet purchaseDS, string deliveryNote, string branchcode)
    {
        /*End Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;
        string sVoucherType = string.Empty;

        if (salesreturn.ToUpper() == "NO")
            sVoucherType = "Purchase";
        else
            sVoucherType = "Sales Return";

        string sNarration = string.Empty;

        int creditorID = 0;
        int DebtorID = 3;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID
            dsOld = GetPurchaseForId(purchaseID);


            if (dsOld.Tables[0].Rows[0]["JournalID"] != null)
            {
                if (dsOld.Tables[0].Rows[0]["JournalID"].ToString() != string.Empty)
                {
                    TransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["JournalID"].ToString());
                }

                if (dsOld.Tables[0].Rows[0]["BillNo"] != null)
                    oldBillNo = dsOld.Tables[0].Rows[0]["BillNo"].ToString();
            }
            dbQry = string.Format("Select DebtorID,CreditorID,Amount from tblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                }

            }
            //End Retriving

            if (paymode == 1)
                creditorID = 1;
            else if (paymode == 2)
                creditorID = BankName;
            else
                creditorID = SupplierID;
            // sNarration = "Purchase - Bill No:" + Billno;
            sNarration = sVoucherType + " - Bill No:" + Billno;
            //Delete Purchase

            /*
             Step 1 : Decrese the Debit and Credit for the Old Debtor and Old Creditor.
             Step 2 : Delete the Entry From tblDayBook,tblPurchase,tblPurchaseItem.
             Step 3 : Increase the Debit and Credit for the new Debtor and new Creditor.
             Step 4 : Add Entry From tblDayBook,tblPurchase,tblPurchaseItem.
             Step 5 : Make an entry in the audit table.
             */
            //Step 1 - Start

            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", oldDebitID);

            double DebitDel = 0;

            object retDebitDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebitDel != null) && (retDebitDel != DBNull.Value))
            {
                DebitDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Select BilitID from tblPurchase Where PurchaseID={0}", purchaseID);

            object retBilitID = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retBilitID != null) && (retBilitID != DBNull.Value))
            {
                oldBilitID = (int)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", DebitDel - oldAmt, oldDebitID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", oldCreditID);
            double CreditDel = 0;

            object retCreditDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCreditDel != null) && (retCreditDel != DBNull.Value))
            {
                CreditDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }
            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", CreditDel - oldAmt, oldCreditID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //Step 1 - End


            //Step 2 - Start
            //Start Delete the old record
            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("SELECT Qty,ItemCode,RoleID,isRole From tblPurchaseItems WHERE PurchaseID={0}", purchaseID);
            DataSet purchasedS = (DataSet)manager.ExecuteDataSet(CommandType.Text, dbQry);
            /*Start March 15 Modification */
            double currStock = 0;
            double arrivedStock = 0;
            string itemStock = string.Empty;
            string itmCode = string.Empty;
            /*End March 15 Modification */
            if (purchasedS != null)
            {
                if (purchasedS.Tables.Count > 0)
                {
                    foreach (DataRow dr in purchasedS.Tables[0].Rows)
                    {
                        /*Start March 15 Modification */
                        itmCode = Convert.ToString(dr["ItemCode"]).Trim();
                        currStock = getStockInfo(Convert.ToString(dr["ItemCode"]).Trim(), "");
                        arrivedStock = currStock - Convert.ToDouble(dr["Qty"]);

                        itemStock = itemStock + itmCode + "^" + arrivedStock + "#";
                        /*End March 15 Modification */
                        dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock - {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }


                }

            }
            dbQry = string.Format("Delete From tblPurchase Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblPurchaseItems Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Deleting the old record


            //Step 2 - End


            //End Delete Purchase
            //Purchase A/c - 3 will always be the debtor
            //Step 3 - Start

            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebtorID);
            double Debit = 0;

            object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebit != null) && (retDebit != DBNull.Value))
            {
                Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }
            //double Payment = (double)manager.ExecuteScalar(CommandType.Text, "Select Amount from tblDayBook Where TransNo=" + TransNo);
            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebtorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", creditorID);
            double Credit = 0;

            object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCredit != null) && (retCredit != DBNull.Value))
            {
                Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, creditorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Updating the Debit and credit
            //Step 3 - End

            //Step 4 - Start
            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,Chequeno,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
             BillDate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, Chequeno, 0);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int NewTransNo = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NewTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }
            /*Start Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/
            dbQry = string.Format("INSERT INTO tblPurchase(Billno,BillDate,SupplierID,JournalID,Paymode,TotalAmt,salesreturn,salesreturnreason,freight,LoadUnload,BilitID,InternalTransfer,DeliveryNote) VALUES('{0}',Format('{1}', 'dd/mm/yyyy'),{2},{3},{4},{5},'{6}','{7}',{8},{9},{10},'{11}','{12}')",
            Billno, BillDate.ToShortDateString(), SupplierID, NewTransNo, paymode, Amount, salesreturn, srReason, freight, dLU, BilitID, intTrans, deliveryNote);
            /*Start Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            object retPurchase = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(PurchaseID) FROM tblPurchase");

            if ((retPurchase != null) && (retPurchase != DBNull.Value))
            {
                purchaseID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(PurchaseID) FROM tblPurchase");
            }
            else
            {
                purchaseID = purchaseID + 1;
            }


            //Adding the Purchase Items Table
            object retRole = null;
            int roleID = 0;
            /*Start March 15 Modification */
            string[] itemArr;
            string[] itemChildArr;
            string chkItemCode = string.Empty;
            double chkStock = 0;
            double actStock = 0;
            string actItem = string.Empty;
            /*End March 15 Modification */
            if (purchaseDS != null)
            {
                if (purchaseDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in purchaseDS.Tables[0].Rows)
                    {

                        dbQry = string.Format("INSERT INTO tblPurchaseItems(purchaseID,itemcode,Qty,PurchaseRate,discount,vat,roleid,isRole,CST,NLP,discamt) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10})", purchaseID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["PurchaseRate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), roleID, Convert.ToString(dr["isRole"]), Convert.ToDouble(dr["CST"]), Convert.ToDouble(dr["NLP"]), Convert.ToDouble(dr["Discountamt"]));
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        //dbQry = string.Format("INSERT INTO tblPurchaseItems() VALUES({0},'{1}',{2},{3},{4},{5})", purchaseID, Convert.ToString(dr["ItemCode"]), Convert.ToInt32(dr["Qty"]), Convert.ToDouble(dr["PurchaseRate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]));
                        //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        /*Start March 15 Modification */
                        itemArr = itemStock.Split('#');
                        for (int k = 0; k < itemArr.Length; k++)
                        {
                            if (itemArr[k].Trim() != "")
                            {
                                itemChildArr = itemArr[k].Split('^');
                                chkStock = Convert.ToDouble(itemChildArr[1]);
                                chkItemCode = itemChildArr[0].ToString().Trim();
                                actStock = Convert.ToDouble(dr["Qty"]);
                                actItem = Convert.ToString(dr["Itemcode"]).Trim();
                                if (chkItemCode == actItem)
                                {
                                    chkStock = chkStock + actStock;

                                    if (chkStock < 0)
                                    {
                                        return -2;
                                    }
                                }
                            }
                        }
                        /*End March 15 Modification */
                        dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock + {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }
                }
            }
            //Step 4 - End

            //Bilit Management
            if (BilitID != oldBilitID)
            {
                dbQry = string.Format("Update tblBilti SET Status = 'Closed' Where ID={0}", BilitID);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                if (oldBilitID != 0)
                {
                    dbQry = string.Format("Update tblBilti SET Status = 'Open' Where ID={0}", oldBilitID);
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                }
            }

            //Step 5 - Start
            //Store the details in the Audit Table.
            sAuditStr = "Purchase Transaction: " + TransNo + " got edited. Deleted Record Details : Bill No=" + oldBillNo + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt + " New Trans No :" + NewTransNo + " DateTime:" + DateTime.Now.ToString();

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command) VALUES('{0}','{1}')", sAuditStr, "Edit and Update");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //Step 5 -  End
            manager.CommitTransaction();
            return purchaseID;
        }

        catch (Exception ex)
        {
            manager.Transaction.Rollback();
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public int UpdatePurchaseOldNew(int purchaseID, string Billno, DateTime BillDate, int SupplierID, int paymode, string Chequeno, int BankName, double Amount, string salesreturn, string srReason, double freight, double dLU, int BilitID, string intTrans, DataSet purchaseDS, string deliveryNote)
    {
        /*End Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;
        string sVoucherType = string.Empty;

        if (salesreturn.ToUpper() == "NO")
            sVoucherType = "Purchase";
        else
            sVoucherType = "Sales Return";

        string sNarration = string.Empty;

        int creditorID = 0;
        int DebtorID = 3;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID
            dsOld = GetPurchaseForId(purchaseID);


            if (dsOld.Tables[0].Rows[0]["JournalID"] != null)
            {
                if (dsOld.Tables[0].Rows[0]["JournalID"].ToString() != string.Empty)
                {
                    TransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["JournalID"].ToString());
                }

                if (dsOld.Tables[0].Rows[0]["BillNo"] != null)
                    oldBillNo = dsOld.Tables[0].Rows[0]["BillNo"].ToString();
            }
            dbQry = string.Format("Select DebtorID,CreditorID,Amount from tblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                }

            }
            //End Retriving

            if (paymode == 1)
                creditorID = 1;
            else if (paymode == 2)
                creditorID = BankName;
            else
                creditorID = SupplierID;
            // sNarration = "Purchase - Bill No:" + Billno;
            sNarration = sVoucherType + " - Bill No:" + Billno;
            //Delete Purchase

            /*
             Step 1 : Decrese the Debit and Credit for the Old Debtor and Old Creditor.
             Step 2 : Delete the Entry From tblDayBook,tblPurchase,tblPurchaseItem.
             Step 3 : Increase the Debit and Credit for the new Debtor and new Creditor.
             Step 4 : Add Entry From tblDayBook,tblPurchase,tblPurchaseItem.
             Step 5 : Make an entry in the audit table.
             */
            //Step 1 - Start

            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", oldDebitID);

            double DebitDel = 0;

            object retDebitDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebitDel != null) && (retDebitDel != DBNull.Value))
            {
                DebitDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Select BilitID from tblPurchase Where PurchaseID={0}", purchaseID);

            object retBilitID = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retBilitID != null) && (retBilitID != DBNull.Value))
            {
                oldBilitID = (int)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", DebitDel - oldAmt, oldDebitID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", oldCreditID);
            double CreditDel = 0;

            object retCreditDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCreditDel != null) && (retCreditDel != DBNull.Value))
            {
                CreditDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }
            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", CreditDel - oldAmt, oldCreditID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //Step 1 - End


            //Step 2 - Start
            //Start Delete the old record
            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("SELECT Qty,ItemCode,RoleID,isRole From tblPurchaseItems WHERE PurchaseID={0}", purchaseID);
            DataSet purchasedS = (DataSet)manager.ExecuteDataSet(CommandType.Text, dbQry);
            /*Start March 15 Modification */
            double currStock = 0;
            double arrivedStock = 0;
            string itemStock = string.Empty;
            string itmCode = string.Empty;
            /*End March 15 Modification */
            if (purchasedS != null)
            {
                if (purchasedS.Tables.Count > 0)
                {
                    foreach (DataRow dr in purchasedS.Tables[0].Rows)
                    {
                        /*Start March 15 Modification */
                        itmCode = Convert.ToString(dr["ItemCode"]).Trim();
                        currStock = getStockInfo(Convert.ToString(dr["ItemCode"]).Trim(), "");
                        arrivedStock = currStock - Convert.ToDouble(dr["Qty"]);

                        itemStock = itemStock + itmCode + "^" + arrivedStock + "#";
                        /*End March 15 Modification */
                        dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock - {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }


                }

            }
            dbQry = string.Format("Delete From tblPurchase Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblPurchaseItems Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Deleting the old record


            //Step 2 - End


            //End Delete Purchase
            //Purchase A/c - 3 will always be the debtor
            //Step 3 - Start

            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebtorID);
            double Debit = 0;

            object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebit != null) && (retDebit != DBNull.Value))
            {
                Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }
            //double Payment = (double)manager.ExecuteScalar(CommandType.Text, "Select Amount from tblDayBook Where TransNo=" + TransNo);
            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebtorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", creditorID);
            double Credit = 0;

            object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCredit != null) && (retCredit != DBNull.Value))
            {
                Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, creditorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Updating the Debit and credit
            //Step 3 - End

            //Step 4 - Start
            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,Chequeno,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
             BillDate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, Chequeno, 0);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int NewTransNo = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NewTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }
            /*Start Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/
            dbQry = string.Format("INSERT INTO tblPurchase(Billno,BillDate,SupplierID,JournalID,Paymode,TotalAmt,salesreturn,salesreturnreason,freight,LoadUnload,BilitID,InternalTransfer,DeliveryNote) VALUES('{0}',Format('{1}', 'dd/mm/yyyy'),{2},{3},{4},{5},'{6}','{7}',{8},{9},{10},'{11}','{12}')",
            Billno, BillDate.ToShortDateString(), SupplierID, NewTransNo, paymode, Amount, salesreturn, srReason, freight, dLU, BilitID, intTrans, deliveryNote);
            /*Start Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            object retPurchase = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(PurchaseID) FROM tblPurchase");

            if ((retPurchase != null) && (retPurchase != DBNull.Value))
            {
                purchaseID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(PurchaseID) FROM tblPurchase");
            }
            else
            {
                purchaseID = purchaseID + 1;
            }


            //Adding the Purchase Items Table
            object retRole = null;
            int roleID = 0;
            /*Start March 15 Modification */
            string[] itemArr;
            string[] itemChildArr;
            string chkItemCode = string.Empty;
            double chkStock = 0;
            double actStock = 0;
            string actItem = string.Empty;
            /*End March 15 Modification */
            if (purchaseDS != null)
            {
                if (purchaseDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in purchaseDS.Tables[0].Rows)
                    {

                        dbQry = string.Format("INSERT INTO tblPurchaseItems(purchaseID,itemcode,Qty,PurchaseRate,discount,vat,roleid,isRole,CST,NLP) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9})", purchaseID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["PurchaseRate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), roleID, Convert.ToString(dr["isRole"]), Convert.ToDouble(dr["CST"]), Convert.ToDouble(dr["NLP"]));
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        //dbQry = string.Format("INSERT INTO tblPurchaseItems() VALUES({0},'{1}',{2},{3},{4},{5})", purchaseID, Convert.ToString(dr["ItemCode"]), Convert.ToInt32(dr["Qty"]), Convert.ToDouble(dr["PurchaseRate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]));
                        //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        /*Start March 15 Modification */
                        itemArr = itemStock.Split('#');
                        for (int k = 0; k < itemArr.Length; k++)
                        {
                            if (itemArr[k].Trim() != "")
                            {
                                itemChildArr = itemArr[k].Split('^');
                                chkStock = Convert.ToDouble(itemChildArr[1]);
                                chkItemCode = itemChildArr[0].ToString().Trim();
                                actStock = Convert.ToDouble(dr["Qty"]);
                                actItem = Convert.ToString(dr["Itemcode"]).Trim();
                                if (chkItemCode == actItem)
                                {
                                    chkStock = chkStock + actStock;

                                    if (chkStock < 0)
                                    {
                                        return -2;
                                    }
                                }
                            }
                        }
                        /*End March 15 Modification */
                        dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock + {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }
                }
            }
            //Step 4 - End

            //Bilit Management
            if (BilitID != oldBilitID)
            {
                dbQry = string.Format("Update tblBilti SET Status = 'Closed' Where ID={0}", BilitID);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                if (oldBilitID != 0)
                {
                    dbQry = string.Format("Update tblBilti SET Status = 'Open' Where ID={0}", oldBilitID);
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                }
            }

            //Step 5 - Start
            //Store the details in the Audit Table.
            sAuditStr = "Purchase Transaction: " + TransNo + " got edited. Deleted Record Details : Bill No=" + oldBillNo + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt + " New Trans No :" + NewTransNo + " DateTime:" + DateTime.Now.ToString();

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command) VALUES('{0}','{1}')", sAuditStr, "Edit and Update");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //Step 5 -  End
            manager.CommitTransaction();
            return purchaseID;
        }

        catch (Exception ex)
        {
            manager.Transaction.Rollback();
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    /*Start Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/
    public int UpdatePurchaseOld(int purchaseID, string Billno, DateTime BillDate, int SupplierID, int paymode, string Chequeno, int BankName, double Amount, string salesreturn, string srReason, double freight, double dLU, DataSet purchaseDS)
    {
        /*End Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldDebitID = 0;
        int oldCreditID = 0;
        double oldAmt = 0;
        string sVoucherType = string.Empty;
        if (salesreturn == "No")
            sVoucherType = "Purchase";
        else
            sVoucherType = "Sales Return";

        string sNarration = string.Empty;

        int creditorID = 0;
        int DebtorID = 3;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID
            dsOld = GetPurchaseForId(purchaseID);


            if (dsOld.Tables[0].Rows[0]["JournalID"] != null)
            {
                if (dsOld.Tables[0].Rows[0]["JournalID"].ToString() != string.Empty)
                {
                    TransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["JournalID"].ToString());
                }
            }
            dbQry = string.Format("Select DebtorID,CreditorID,Amount from tblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                }

            }
            //End Retriving

            if (paymode == 1)
                creditorID = 1;
            else if (paymode == 2)
                creditorID = BankName;
            else
                creditorID = SupplierID;
            // sNarration = "Purchase - Bill No:" + Billno;
            sNarration = sVoucherType + " - Bill No:" + Billno;
            //Delete Purchase

            /*
             Step 1 : Decrese the Debit and Credit for the Old Debtor and Old Creditor.
             Step 2 : Delete the Entry From tblDayBook,tblPurchase,tblPurchaseItem.
             Step 3 : Increase the Debit and Credit for the new Debtor and new Creditor.
             Step 4 : Add Entry From tblDayBook,tblPurchase,tblPurchaseItem.
             Step 5 : Make an entry in the audit table.
             */
            //Step 1 - Start

            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", oldDebitID);

            double DebitDel = 0;

            object retDebitDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebitDel != null) && (retDebitDel != DBNull.Value))
            {
                DebitDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }


            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", DebitDel - oldAmt, oldDebitID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", oldCreditID);
            double CreditDel = 0;

            object retCreditDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCreditDel != null) && (retCreditDel != DBNull.Value))
            {
                CreditDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }
            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", CreditDel - oldAmt, oldCreditID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //Step 1 - End


            //Step 2 - Start
            //Start Delete the old record
            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("SELECT Qty,ItemCode,RoleID,isRole From tblPurchaseItems WHERE PurchaseID={0}", purchaseID);
            DataSet purchasedS = (DataSet)manager.ExecuteDataSet(CommandType.Text, dbQry);
            /*Start March 15 Modification */
            double currStock = 0;
            double arrivedStock = 0;
            string itemStock = string.Empty;
            string itmCode = string.Empty;
            /*End March 15 Modification */
            if (purchasedS != null)
            {
                if (purchasedS.Tables.Count > 0)
                {
                    foreach (DataRow dr in purchasedS.Tables[0].Rows)
                    {
                        /*Start March 15 Modification */
                        itmCode = Convert.ToString(dr["ItemCode"]).Trim();
                        currStock = getStockInfo(Convert.ToString(dr["ItemCode"]).Trim(), "");
                        arrivedStock = currStock - Convert.ToDouble(dr["Qty"]);

                        itemStock = itemStock + itmCode + "^" + arrivedStock + "#";
                        /*End March 15 Modification */
                        dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock - {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);


                        if (dr["isRole"] != null)
                        {
                            if (Convert.ToString(dr["isrole"]) == "Y")
                            {
                                dbQry = string.Format("DELETE FROM tblItemRoleMaster  WHERE RoleID={0}", Convert.ToInt32(dr["RoleID"]));
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);
                            }
                        }

                    }


                }

            }
            dbQry = string.Format("Delete From tblPurchase Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblPurchaseItems Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Deleting the old record


            //Step 2 - End




            //End Delete Purchase
            //Purchase A/c - 3 will always be the debtor
            //Step 3 - Start
            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebtorID);
            double Debit = 0;

            object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebit != null) && (retDebit != DBNull.Value))
            {
                Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }
            //double Payment = (double)manager.ExecuteScalar(CommandType.Text, "Select Amount from tblDayBook Where TransNo=" + TransNo);
            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebtorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", creditorID);
            double Credit = 0;

            object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCredit != null) && (retCredit != DBNull.Value))
            {
                Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, creditorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Updating the Debit and credit
            //Step 3 - End

            //Step 4 - Start
            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,Chequeno,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
             BillDate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, Chequeno, 0);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int NewTransNo = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NewTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }
            /*Start Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/
            dbQry = string.Format("INSERT INTO tblPurchase(Billno,BillDate,SupplierID,JournalID,Paymode,TotalAmt,salesreturn,salesreturnreason,freight,LoadUnload) VALUES('{0}',Format('{1}', 'dd/mm/yyyy'),{2},{3},{4},{5},'{6}','{7}',{8},{9})",
           Billno, BillDate.ToShortDateString(), SupplierID, NewTransNo, paymode, Amount, salesreturn, srReason, freight, dLU);
            /*Start Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            object retPurchase = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(PurchaseID) FROM tblPurchase");

            if ((retPurchase != null) && (retPurchase != DBNull.Value))
            {
                purchaseID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(PurchaseID) FROM tblPurchase");
            }
            else
            {
                purchaseID = purchaseID + 1;
            }

            //Store the details in the Audit Table.
            //sAuditStr = "Transaction: " + TransNo + " got edited and deleted Record Details : SupplierID=" + SupplierID + ",CreditorID=3,Amount=" + oldAmt + " New Trans No :" + NewTransNo;
            //dbQry = string.Format("INSERT INTO  tblAudit(Description,Command) VALUES('{0}','{1}')", sAuditStr, "Edit and Update");
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //Adding the Purchase Items Table
            object retRole = null;
            int roleID = 0;
            /*Start March 15 Modification */
            string[] itemArr;
            string[] itemChildArr;
            string chkItemCode = string.Empty;
            double chkStock = 0;
            double actStock = 0;
            string actItem = string.Empty;
            /*End March 15 Modification */
            if (purchaseDS != null)
            {
                if (purchaseDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in purchaseDS.Tables[0].Rows)
                    {

                        if (dr["isRole"].ToString().ToUpper() == "Y")
                        {
                            dbQry = string.Format("INSERT INTO tblItemRoleMaster(Role_Date,ItemCode,Qty_Bought,Qty_Available) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}',{2},{3})", DateTime.Now.ToShortDateString(), Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Qty"]));
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);
                            retRole = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(RoleID) FROM tblItemRoleMaster");

                            if ((retRole != null) && (retRole != DBNull.Value))
                            {
                                roleID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(roleID) FROM tblItemRoleMaster");
                            }
                            else
                            {
                                roleID = roleID + 1;
                            }
                        }

                        dbQry = string.Format("INSERT INTO tblPurchaseItems(purchaseID,itemcode,Qty,PurchaseRate,discount,vat,roleid,isRole,CST,NLP) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9})", purchaseID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["PurchaseRate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), roleID, Convert.ToString(dr["isRole"]), Convert.ToDouble(dr["CST"]), Convert.ToDouble(dr["NLP"]));
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        //dbQry = string.Format("INSERT INTO tblPurchaseItems() VALUES({0},'{1}',{2},{3},{4},{5})", purchaseID, Convert.ToString(dr["ItemCode"]), Convert.ToInt32(dr["Qty"]), Convert.ToDouble(dr["PurchaseRate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]));
                        //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        /*Start March 15 Modification */
                        itemArr = itemStock.Split('#');
                        for (int k = 0; k < itemArr.Length; k++)
                        {
                            if (itemArr[k].Trim() != "")
                            {
                                itemChildArr = itemArr[k].Split('^');
                                chkStock = Convert.ToDouble(itemChildArr[1]);
                                chkItemCode = itemChildArr[0].ToString();
                                actStock = Convert.ToDouble(dr["Qty"]);
                                actItem = Convert.ToString(dr["Itemcode"]).Trim();
                                if (chkItemCode == actItem)
                                {
                                    chkStock = chkStock + actStock;
                                }
                                if (chkStock < 0)
                                {

                                    return -2;
                                }
                            }
                        }
                        /*End March 15 Modification */
                        dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock + {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }
                }
            }
            //Step 4 - End

            //Step 5 - Start
            //Store the details in the Audit Table.
            sAuditStr = "Purchase Transaction: " + TransNo + " got edited and deleted Record Details : DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt + " New Trans No :" + NewTransNo;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command) VALUES('{0}','{1}')", sAuditStr, "Edit and Update");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //Step 5 -  End
            manager.CommitTransaction();
            return purchaseID;
        }

        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    /*Start Purchase Stock Negative Change - March 16 -- (return type changed from void to int method)*/
    public int DeletePurchase(int purchaseID, string Billno, string usernam,string branchcode)
    {
        /*End Purchase Stock Negative Change - March 16 -- (Commented the below method)*/
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        DataSet dsd = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldDebitID = 0;
        int oldCreditID = 0;
        int CreditID = 0;
        string oldBillNo = "";
        double oldAmt = 0;
        string sNarration = string.Empty;
        string transdate = string.Empty;
        int creditorID = 0;
        int DebtorID = 3;
        int BilitID = 0;
        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        int CheNo = 0; 
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID
            dsOld = GetPurchaseForId(purchaseID);

            if (dsOld.Tables[0].Rows[0]["ChequeNo"].ToString() != "")
            {
                CheNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["ChequeNo"].ToString());
                CreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
            } 


            if (dsOld.Tables[0].Rows[0]["JournalID"] != null)
            {
                if (dsOld.Tables[0].Rows[0]["JournalID"].ToString() != string.Empty)
                {
                    TransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["JournalID"].ToString());
                }

                if (dsOld.Tables[0].Rows[0]["BillNo"] != null)
                    oldBillNo = dsOld.Tables[0].Rows[0]["BillNo"].ToString();
            }

            dbQry = string.Format("Select DebtorID,CreditorID,Amount,transdate,ChequeNo from tblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                    transdate = Convert.ToString(dsOld.Tables[0].Rows[0]["transdate"]);

                    CheNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["ChequeNo"].ToString());
                    CreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                }
            }


            //Start Save in Log table
            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                description = string.Format("SELECT Qty,ItemCode,RoleID,isRole From tblPurchaseItems WHERE PurchaseID={0}", purchaseID);
                DataSet pDS = (DataSet)manager.ExecuteDataSet(CommandType.Text, description);
                if (pDS != null)
                {
                    if (pDS.Tables.Count > 0)
                    {
                        foreach (DataRow dr in pDS.Tables[0].Rows)
                        {
                            logdescription = string.Format("UPDATE tblProductStock SET tblProductStock.Stock = tblProductStock.Stock - {0} WHERE ItemCode={1} and BranchCode={2}", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim(),branchcode);
                            logdescription = logdescription.Trim();
                            description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                                 DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, Billno, "DeletePurchase");
                            manager.ExecuteNonQuery(CommandType.Text, description);
                        }
                    }
                }
            }


            //End Save in Log table


            //Step 1 - Start

            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", oldDebitID);
            //double DebitDel = 0;

            //object retDebitDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retDebitDel != null) && (retDebitDel != DBNull.Value))
            //{
            //    DebitDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}

            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", DebitDel - oldAmt, oldDebitID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", oldCreditID);
            //double CreditDel = 0;

            //object retCreditDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retCreditDel != null) && (retCreditDel != DBNull.Value))
            //{
            //    CreditDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}

            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", CreditDel - oldAmt, oldCreditID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select BilitID from tblPurchase Where PurchaseID={0}", purchaseID);

            object retBilitID = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retBilitID != null) && (retBilitID != DBNull.Value))
            {
                BilitID = (int)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            //Step 1 - End

            //Step 2 - Start
            //Start Delete the old record

            dbQry = string.Format("SELECT Qty,ItemCode,RoleID,isRole From tblPurchaseItems WHERE PurchaseID={0}", purchaseID);
            DataSet purchaseDS = (DataSet)manager.ExecuteDataSet(CommandType.Text, dbQry);
            /*Start Purchase Stock Negative Change - March 16 */
            double currStock = 0;
            double arrivedStock = 0;
            string itmCode = string.Empty;
            /*End Purchase Stock Negative Change - March 16 */
            if (purchaseDS != null)
            {
                if (purchaseDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in purchaseDS.Tables[0].Rows)
                    {
                        /*Start Purchase Stock Negative Change - March 16 */
                        itmCode = Convert.ToString(dr["ItemCode"]).Trim();
                        currStock = getStockInfo(Convert.ToString(dr["ItemCode"]).Trim(),branchcode);
                        arrivedStock = currStock - Convert.ToDouble(dr["Qty"]);

                        if (arrivedStock >= 0)
                        {
                            /*End Purchase Stock Negative Change - March 16 */
                            dbQry = string.Format("UPDATE tblProductStock SET tblProductStock.Stock = tblProductStock.Stock - {0} WHERE ItemCode='{1}' and BranchCode='{2}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim(),branchcode);

                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                            if (dr["isRole"] != null)
                            {
                                if (Convert.ToString(dr["isrole"]) == "Y")
                                {
                                    dbQry = string.Format("DELETE FROM tblItemRoleMaster  WHERE RoleID={0}", Convert.ToInt32(dr["RoleID"]));
                                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                                }
                            }
                        }
                        /*Start Purchase Stock Negative Change - March 16 */
                        else
                        {
                            return -2;
                        }
                        /*End Purchase Stock Negative Change - March 16*/
                    }
                }
            }

            if (Logsave == "YES")
            {
                logdescription = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString(), logdescription.ToString(), usernam, TransNo, "DeletePurchase");
                manager.ExecuteNonQuery(CommandType.Text, description);

                logdescription = string.Format("Delete From tblPurchase Where PurchaseID={0}", purchaseID);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString(), logdescription.ToString(), usernam, purchaseID, "DeletePurchase");
                manager.ExecuteNonQuery(CommandType.Text, description);

                logdescription = string.Format("Delete From tblPurchaseItems Where PurchaseID={0}", purchaseID);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString(), logdescription.ToString(), usernam, purchaseID, "DeletePurchase");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblAuditDayBook Select * From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("INSERT INTO tblAuditPurchase Select * From tblPurchase Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblPurchase Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("INSERT INTO tblAuditPurchaseItems Select * From tblPurchaseItems Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblPurchaseItems Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Deleting the old record

            if (BilitID != 0)
            {
                dbQry = string.Format("Update tblBilti SET Status = 'Open' Where ID={0}", BilitID);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }


            if (dsOld.Tables[0].Rows[0]["ChequeNo"].ToString() != "")
            {
                dbQry = string.Format("Update tblChequeitems Set DamageCheque='Y' Where ChequeNo='" + CheNo + "' and BankID=" + CreditID + "");
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            } 

            sAuditStr = "Purchase Transaction: " + TransNo + " got deleted old Record Details : User =" + usernam + " BillNo=" + oldBillNo + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
            /*Start Purchase Stock Negative Change - March 16 -- (changed based on return type)*/
            int del = manager.ExecuteNonQuery(CommandType.Text, dbQry);
            /*End Purchase Stock Negative Change - March 16 -- (Commented the below method)*/

            manager.CommitTransaction();
            return del;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    #endregion

    #region "Sales"

    public DataSet ListRoles(int Billno, string itemcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;



        //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
        dbQry = "SELECT Qty_bought As Qty,RoleID   FROM tblSalesRole WHERE Billno = " + Billno + " AND itemCode = '" + itemcode + "'";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public int InsertSalesNew(string BillDate, int sCustomerID, string sCustomerName, string sCustomerAddress, string sCustomerContact, int paymode, string sCreditCardno, int BankName, double Amount, string purchasereturn, string prreason, int executive, double freight, double dLU, DataSet salesDS, string sOtherCusName)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        DateTime sBilldate;
        string[] sDate;
        string delim = "/";
        char[] delimA = delim.ToCharArray();
        CultureInfo culture = new CultureInfo("pt-BR");
        string sVoucherType = string.Empty;
        string strRole = string.Empty;
        string[] roleArr;
        string sRoleID = string.Empty;
        string sQty = string.Empty;
        string[] roleSpl;
        int iSno = 0;

        try
        {
            sDate = BillDate.Trim().Split(delimA);


            sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));

        }
        catch (Exception ex)
        {
            //Response.Write("<b><font face='Trebuchet MS' size=2 color=red>Invalid Bill Date Format</font></b>");
            throw new Exception("Invalid Bill Date Format", ex);
        }


        double oldAmt = 0;
        string sNarration = string.Empty;
        int creditorID = 2;
        int DebtorID = 0;
        int salesID = 0;
        int BillNo = 0;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID

            if (paymode == 1)
                DebtorID = 1;
            else if (paymode == 2)
                DebtorID = BankName;
            else
                DebtorID = sCustomerID;

            //End Retriving the old Debtor and CreditorID

            //Sales A/c -2 will always be the Creditor


            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebtorID);
            double Debit = 0;

            object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebit != null) && (retDebit != DBNull.Value))
            {
                Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }
            //double Payment = (double)manager.ExecuteScalar(CommandType.Text, "Select Amount from tblDayBook Where TransNo=" + TransNo);
            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebtorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", creditorID);
            double Credit = 0;
            object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCredit != null) && (retCredit != DBNull.Value))
            {
                Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, creditorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Updating the Debit and credit
            //Start Delete the old record
            if (purchasereturn == "NO")
                sVoucherType = "Sales";
            else
                sVoucherType = "Purchase Return";

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,CreditCardNo,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
             sBilldate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, sCreditCardno, 0);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            int NewTransNo = 0;

            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NewTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }

            object retBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM tblSales");
            if ((retBillVal != null) && (retBillVal != DBNull.Value))
            {
                BillNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM tblSales");
            }
            else
            {
                BillNo = BillNo + 1;
            }

            /* Start March 21 - Duplicate Billno Check*/
            int tBillNo = 0;
            int salesBillno = 0;
            object retTBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM TemptblSales");
            if ((retTBillVal != null) && (retTBillVal != DBNull.Value))
            {
                tBillNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM TemptblSales");
            }
            else
            {
                tBillNo = tBillNo + 1;
            }

            if (BillNo >= tBillNo)
            {
                salesBillno = BillNo;
            }
            else
            {
                salesBillno = tBillNo;
            }

            dbQry = string.Format("INSERT INTO tblSales(Billno,BillDate,JournalID,CustomerID,CustomerName,CustomerAddress,CustomerContacts,Paymode,purchaseReturn,purchaseReturnReason,executive,freight,LoadUnload,OtherCusName) VALUES({0},Format('{1}', 'dd/mm/yyyy'),{2},{3},'{4}','{5}','{6}',{7},'{8}','{9}','{10}',{11},{12},'{13}')",
           salesBillno, sBilldate.ToShortDateString(), NewTransNo, sCustomerID, sCustomerName, sCustomerAddress, sCustomerContact, paymode, purchasereturn, prreason, executive, freight, dLU, sOtherCusName);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            /*End March 21 - Duplicate Billno Check*/

            object retSalesVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo) FROM tblSales");
            if ((retSalesVal != null) && (retSalesVal != DBNull.Value))
            {
                salesID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo) FROM tblSales");
            }
            else
            {
                salesID = salesID + 1;
            }


            sNarration = sVoucherType + " - Bill No:" + BillNo;
            dbQry = string.Format("Update tblDayBook SET Narration = '{0}' Where TransNo={1}", sNarration, NewTransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            //Adding the Purchase Items Table
            if (salesDS != null)
            {
                if (salesDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in salesDS.Tables[0].Rows)
                    {
                        iSno = iSno + 1;
                        object returnStock = manager.ExecuteScalar(CommandType.Text, "Select stock from tblProductMaster WHERE itemCode='" + Convert.ToString(dr["ItemCode"]) + "'");
                        if ((returnStock != null) && (returnStock != DBNull.Value))
                        {
                            if (Convert.ToDouble(returnStock) < Convert.ToDouble(dr["Qty"]))
                            {
                                salesID = -1;
                                return salesID;
                            }

                        }
                        if (dr["isRole"].ToString() == "Y")
                        {
                            if (dr["Roles"].ToString() != "NO ROLE" && dr["Roles"].ToString().Trim() != "")
                            {
                                strRole = dr["Roles"].ToString();
                                if (strRole.EndsWith(","))
                                    strRole = strRole.Remove(strRole.Length - 1, 1);
                                roleArr = strRole.Split(',');
                                for (int k = 0; k < roleArr.Length; k++)
                                {
                                    if (roleArr[k].ToString() != "")
                                    {
                                        roleSpl = roleArr[k].Split('_');
                                        dbQry = string.Format("INSERT INTO tblSalesRole(BillNo,ItemCode,Qty_Bought,RoleID) VALUES({0},'{1}',{2},{3})", salesID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(roleSpl[1]), Convert.ToInt32((roleSpl[0])));
                                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                                        dbQry = string.Format("Update tblItemRoleMaster SET Qty_Available = Qty_Available - {0} WHERE roleid={1}", Convert.ToDouble(roleSpl[1]), Convert.ToDouble(roleSpl[0]));
                                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                                    }
                                }

                                dbQry = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,isrole,CST,Bundles,Rods,ExecIncharge,ExecCharge) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10},{11},{12})", salesID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), iSno, Convert.ToString(dr["isRole"]), Convert.ToDouble(dr["CST"]), Convert.ToInt32(dr["Bundles"]), Convert.ToInt32(dr["Rods"]), 0, Convert.ToDouble(dr["ExecCharge"]));
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);


                            }
                        }
                        else
                        {
                            dbQry = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,isrole,CST,Bundles,Rods,ExecIncharge,ExecCharge) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10},{11},{12})", salesID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), iSno, Convert.ToString(dr["isRole"]), Convert.ToDouble(dr["CST"]), Convert.ToInt32(dr["Bundles"]), Convert.ToInt32(dr["Rods"]), 0, Convert.ToDouble(dr["ExecCharge"]));
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        }


                        dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock - {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }
                    iSno = 0;
                }
            }

            manager.CommitTransaction();
            return salesID;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public int InsertSalesNewSeries(string Series, string BillDate, int sCustomerID, string sCustomerName, string sCustomerAddress, string sCustomerContact, int paymode, string sCreditCardno, int BankName, double Amount, string purchasereturn, string prreason, double freight, double dLU, DataSet salesDS, string sOtherCusName, string intTrans, DataSet receiptData, string MultiPayment, string deliveryNote, string sCustomerAddress2, string sCustomerAddress3, string sexecutivename, string despatchedfrom, double fixedtotal, int manualno, double TotalWORndOff, string usernam, string ManualSales, string NormalSales, string Types, string narration2, string DuplicateCopy, string check, int CustomerIdMobile, string cuscategory, string distype, int iPurID, string branchcode, string connection)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        //string connection = Request.Cookies["Company"].Value;
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string dbQry2 = string.Empty;
        string SaleSeries = string.Empty;
        DataSet dsOld = new DataSet();
        DataSet dsd = new DataSet();
        DateTime sBilldate;
        string[] sDate;
        string delim = "/";
        char[] delimA = delim.ToCharArray();
        CultureInfo culture = new CultureInfo("pt-BR");
        string sVoucherType = string.Empty;
        string strRole = string.Empty;

        string sRoleID = string.Empty;
        string sQty = string.Empty;

        string description = string.Empty;
        string logdescription = string.Empty;

        string dbQ = string.Empty;

        string Logsave = string.Empty;

        int iSno = 0;
        int AddRtnQty = 0;
        string Prdrtnstatus = string.Empty;
        try
        {
            sDate = BillDate.Trim().Split(delimA);


            sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));

        }
        catch (Exception ex)
        {
            //Response.Write("<b><font face='Trebuchet MS' size=2 color=red>Invalid Bill Date Format</font></b>");
            throw new Exception("Invalid Bill Date Format", ex);
        }

        int TransSaleno = 0;
        double oldAmt = 0;
        string sNarration = string.Empty;
        int creditorID = 2;
        int DebtorID = 0;
        int salesID = 0;
        int BillNo = 0;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            int cid = 0;
            cid = getSalesACLedgerId(connection, branchcode);
            creditorID = cid;


            //Start Retriving the old Debtor and CreditorID
            int did = 0;
            if (paymode == 1)
            {
                did = getCashACLedgerId(connection, branchcode);
                DebtorID = did;
            }
            else if (paymode == 2)
                DebtorID = BankName;
            else
                DebtorID = sCustomerID;

            //End Retriving the old Debtor and CreditorID

            //End Updating the Debit and credit
            //Start Delete the old record
            if (purchasereturn == "NO")
                sVoucherType = "Sales";
            else
                sVoucherType = "Purchase Return";



            dbQ = "SELECT KeyValue From tblSettings WHERE KEYNAME='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,CreditCardNo,RefNo,BranchCode) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8})",
                    sBilldate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, sCreditCardno, 0, branchcode);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, "", "InsertSalesNewSeries");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }



            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,CreditCardNo,RefNo,BranchCode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},'{8}')",
             sBilldate.ToString("yyyy-MM-dd"), DebtorID, creditorID, Amount, sNarration, sVoucherType, sCreditCardno, 0, branchcode);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            int NewTransNo = 0;

            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NewTransNo = int.Parse(retVal.ToString());
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }

            int tBillNo = 0;
            int salesBillno = 0;

            if (Series == "")
            {
                dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='SALBILLNO'";
                dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
                if (dsd.Tables[0].Rows.Count > 0)
                    SaleSeries = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

                if (SaleSeries == "YES")
                {
                    if (intTrans == "YES")
                    {
                        dbQry2 = "SELECT StartBillNo From tblConfigBillNo WHERE SalesType='InternalTransfer'";
                        dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
                        if (dsd.Tables[0].Rows.Count > 0)
                            TransSaleno = Convert.ToInt32(dsd.Tables[0].Rows[0]["StartBillNo"]);

                        object retBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM tblSales where InternalTransfer ='YES' and BranchCode='" + branchcode + "'");

                        if ((retBillVal != null) && (retBillVal != DBNull.Value))
                        {
                            BillNo = Int32.Parse(retBillVal.ToString());
                        }
                        else
                        {
                            BillNo = TransSaleno + 1;
                        }

                        /* Start March 21 - Duplicate Billno Check*/
                        object retTBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM TemptblSales  where InternalTransfer ='YES' ");

                        if ((retTBillVal != null) && (retTBillVal != DBNull.Value))
                        {
                            tBillNo = Int32.Parse(retTBillVal.ToString());
                        }
                        else
                        {
                            tBillNo = TransSaleno + 1;
                        }

                        if (BillNo >= tBillNo)
                        {
                            salesBillno = BillNo;
                        }
                        else
                        {
                            salesBillno = tBillNo;
                        }
                        Series = "0";
                    }
                    else if (deliveryNote == "YES")
                    {
                        dbQry2 = "SELECT StartBillNo From tblConfigBillNo WHERE SalesType='deliveryNote'";
                        dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
                        if (dsd.Tables[0].Rows.Count > 0)
                            TransSaleno = Convert.ToInt32(dsd.Tables[0].Rows[0]["StartBillNo"]);

                        object retBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM tblSales where deliveryNote ='YES' and BranchCode='" + branchcode + "' ");

                        if ((retBillVal != null) && (retBillVal != DBNull.Value))
                        {
                            BillNo = Int32.Parse(retBillVal.ToString());
                        }
                        else
                        {
                            BillNo = TransSaleno + 1;
                        }

                        /* Start March 21 - Duplicate Billno Check*/
                        object retTBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM TemptblSales  where deliveryNote ='YES' ");

                        if ((retTBillVal != null) && (retTBillVal != DBNull.Value))
                        {
                            tBillNo = Int32.Parse(retTBillVal.ToString());
                        }
                        else
                        {
                            tBillNo = TransSaleno + 1;
                        }

                        if (BillNo >= tBillNo)
                        {
                            salesBillno = BillNo;
                        }
                        else
                        {
                            salesBillno = tBillNo;
                        }
                        Series = "0";
                    }
                    else if (purchasereturn == "YES")
                    {
                        dbQry2 = "SELECT StartBillNo From tblConfigBillNo WHERE SalesType='purchasereturn'";
                        dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
                        if (dsd.Tables[0].Rows.Count > 0)
                            TransSaleno = Convert.ToInt32(dsd.Tables[0].Rows[0]["StartBillNo"]);

                        object retBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM tblSales where purchasereturn ='YES' and BranchCode='" + branchcode + "' ");

                        if ((retBillVal != null) && (retBillVal != DBNull.Value))
                        {
                            BillNo = Int32.Parse(retBillVal.ToString());
                        }
                        else
                        {
                            BillNo = TransSaleno + 1;
                        }

                        /* Start March 21 - Duplicate Billno Check*/
                        object retTBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM TemptblSales  where purchasereturn ='YES' ");

                        if ((retTBillVal != null) && (retTBillVal != DBNull.Value))
                        {
                            tBillNo = Int32.Parse(retTBillVal.ToString());
                        }
                        else
                        {
                            tBillNo = TransSaleno + 1;
                        }

                        if (BillNo >= tBillNo)
                        {
                            salesBillno = BillNo;
                        }
                        else
                        {
                            salesBillno = tBillNo;
                        }
                        Series = "0";
                    }
                    else if (ManualSales == "YES")
                    {
                        dbQry2 = "SELECT StartBillNo From tblConfigBillNo WHERE SalesType='Manualsales'";
                        dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
                        if (dsd.Tables[0].Rows.Count > 0)
                            TransSaleno = Convert.ToInt32(dsd.Tables[0].Rows[0]["StartBillNo"]);

                        object retBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM tblSales where Manualsales ='YES' and BranchCode='" + branchcode + "' ");

                        if ((retBillVal != null) && (retBillVal != DBNull.Value))
                        {
                            BillNo = Int32.Parse(retBillVal.ToString());
                        }
                        else
                        {
                            BillNo = TransSaleno + 1;
                        }

                        /* Start March 21 - Duplicate Billno Check*/
                        object retTBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM TemptblSales  where Manualsales ='YES' ");

                        if ((retTBillVal != null) && (retTBillVal != DBNull.Value))
                        {
                            tBillNo = Int32.Parse(retTBillVal.ToString());
                        }
                        else
                        {
                            tBillNo = TransSaleno + 1;
                        }

                        if (BillNo >= tBillNo)
                        {
                            salesBillno = BillNo;
                        }
                        else
                        {
                            salesBillno = tBillNo;
                        }
                        Series = "0";
                    }
                    else if (NormalSales == "YES")
                    {
                        dbQry2 = "SELECT StartBillNo From tblConfigBillNo WHERE SalesType='NormalSales'";
                        dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
                        if (dsd.Tables[0].Rows.Count > 0)
                            TransSaleno = Convert.ToInt32(dsd.Tables[0].Rows[0]["StartBillNo"]);

                        object retBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM tblSales where NormalSales ='YES' and BranchCode='" + branchcode + "' ");

                        if ((retBillVal != null) && (retBillVal != DBNull.Value))
                        {
                            BillNo = Int32.Parse(retBillVal.ToString());
                        }
                        else
                        {
                            BillNo = TransSaleno + 1;
                        }

                        /* Start March 21 - Duplicate Billno Check*/
                        object retTBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM TemptblSales  where NormalSales ='YES' ");

                        if ((retTBillVal != null) && (retTBillVal != DBNull.Value))
                        {
                            tBillNo = Int32.Parse(retTBillVal.ToString());
                        }
                        else
                        {
                            tBillNo = TransSaleno + 1;
                        }

                        if (BillNo >= tBillNo)
                        {
                            salesBillno = BillNo;
                        }
                        else
                        {
                            salesBillno = tBillNo;
                        }
                        Series = "0";
                    }
                    Series = "0";
                }
                else
                {
                    object retBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM tblSales where BranchCode='" + branchcode + "'");

                    if ((retBillVal != null) && (retBillVal != DBNull.Value))
                    {
                        BillNo = Int32.Parse(retBillVal.ToString());
                    }
                    else
                    {
                        BillNo = BillNo + 1;
                    }

                    /* Start March 21 - Duplicate Billno Check*/
                    object retTBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM TemptblSales ");

                    if ((retTBillVal != null) && (retTBillVal != DBNull.Value))
                    {
                        tBillNo = Int32.Parse(retTBillVal.ToString());
                    }
                    else
                    {
                        tBillNo = tBillNo + 1;
                    }

                    if (BillNo >= tBillNo)
                    {
                        salesBillno = BillNo;
                    }
                    else
                    {
                        salesBillno = tBillNo;
                    }

                    Series = "0";
                }
                Series = "0";
            }
            else
            {
                object retBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT NextSequence FROM tblSalesSeries Where ID=" + Series);
                object retBillEnd = manager.ExecuteScalar(CommandType.Text, "SELECT [End] FROM tblSalesSeries Where ID=" + Series);

                int LastValue = 0;

                if ((retBillVal != null) && (retBillVal != DBNull.Value))
                {
                    BillNo = Int32.Parse(retBillVal.ToString());
                }
                else
                {
                    return -3;
                }

                /* Start March 21 - Duplicate Billno Check*/
                object retTBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM TemptblSales Where SeriesID=" + Series);
                if ((retTBillVal != null) && (retTBillVal != DBNull.Value))
                {
                    tBillNo = Int32.Parse(retTBillVal.ToString());
                }
                else
                {
                    tBillNo = tBillNo + 1;
                }

                if (BillNo >= tBillNo)
                {
                    salesBillno = BillNo;
                }
                else
                {
                    salesBillno = tBillNo;
                }

                if ((retBillEnd != null) && (retBillEnd != DBNull.Value))
                {
                    LastValue = Int32.Parse(retBillEnd.ToString());
                }
                else
                {
                    return -3;
                }

                dbQry = string.Format("Update tblSalesSeries SET NextSequence = {0} Where ID={1}", salesBillno + 1, Series);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                if ((salesBillno + 1) > LastValue)
                {
                    dbQry = string.Format("Update tblSalesSeries SET Status = 'Closed' Where ID={0}", Series);
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                }

                //salesBillno = BillNo;

            }

            Series = "0";


            if (Logsave == "YES")
            {
                string value1 = string.Empty;
                string value2 = string.Empty;
                string value3 = string.Empty;

                int middlePos = 0;

                logdescription = string.Format("INSERT INTO tblSales(Billno,SeriesID,BillDate,JournalID,CustomerID,CustomerName,CustomerAddress,CustomerContacts,Paymode,purchaseReturn,purchaseReturnReason,freight,LoadUnload,OtherCusName,InternalTransfer,MultiPayment,DeliveryNote,CustomerAddress2,CustomerAddress3,executivename,despatchedfrom, manualNo,Total,TotalWORndOff, Manualsales, NormalSales,Types,narration2,Discounttype,InvoiceReturnStatus,BranchCode) VALUES({0},{14},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24},{25},{26},{27},{28},{29},{30})",
                    salesBillno, sBilldate.ToString("yyyy-MM-dd"), NewTransNo, sCustomerID, sCustomerName, sCustomerAddress, sCustomerContact, paymode, purchasereturn, prreason, freight, dLU, sOtherCusName, Series, intTrans, MultiPayment, deliveryNote, sCustomerAddress2, sCustomerAddress3, sexecutivename, despatchedfrom, manualno, Amount, TotalWORndOff, ManualSales, NormalSales, Types, narration2, distype, "NO", branchcode);
                logdescription = logdescription.Trim();
                //if (logdescription.Length > 255)
                //{                   
                //    value1 = logdescription.Substring(0, 255);

                //    middlePos = logdescription.Length - (value1.Length);

                //    if (middlePos > 0)
                //    {
                //        if (middlePos < 255)
                //            value2 = logdescription.Substring(255, middlePos);
                //        else
                //            value2 = logdescription.Substring(256, 255);
                //    }
                //    else
                //        value2 = "";

                //    //value2 = logdescription.Substring(256, 255);


                //    middlePos = logdescription.Length - (value1.Length + value2.Length);
                //    if (middlePos > 0)
                //    {
                //        //value3 = logdescription.Substring(510, middlePos);
                //        if (middlePos < 255)
                //            value3 = logdescription.Substring(510, middlePos);
                //        else
                //            value3 = logdescription.Substring(511, 255);
                //    }
                //    else
                //        value3 = "";
                //}
                //else
                //{
                //    value1 = logdescription;
                //    value2 = "";
                //    value3 = "";
                //}
                if (logdescription.Length > 255)
                {
                    value1 = logdescription.Substring(0, 255);
                    middlePos = logdescription.Length - (value1.Length);
                    if (middlePos > 0)
                    {
                        if (middlePos < 255)
                            value2 = logdescription.Substring(255, middlePos);
                        else if (middlePos > 255)
                            value2 = logdescription.Substring(256, 255);
                        else
                            value2 = logdescription.Substring(256, 254);
                    }
                    else
                        value2 = "";

                    middlePos = logdescription.Length - (value1.Length + value2.Length);
                    if (middlePos > 0)
                    {
                        if (middlePos < 255)
                        {
                            if (middlePos == 1)
                                value3 = "";
                            else
                                value3 = logdescription.Substring(510, middlePos);
                        }
                        else if (middlePos > 255)
                            value3 = logdescription.Substring(511, 255);
                        else
                            value3 = logdescription.Substring(511, 254);
                    }
                    else
                        value3 = "";
                }
                else
                {
                    value1 = logdescription;
                    value2 = "";
                    value3 = "";
                }
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), value1, usernam, salesBillno, value2, value3, "InsertSalesNewSeries");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            //dbQry = string.Format("INSERT INTO tblSales(Billno,SeriesID,BillDate,JournalID,CustomerID,CustomerName,CustomerAddress,CustomerContacts,Paymode,purchaseReturn,purchaseReturnReason,executive,freight,LoadUnload,OtherCusName,InternalTransfer,MultiPayment,DeliveryNote,CustomerAddress2,CustomerAddress3,executivename,despatchedfrom, manualNo,Total,TotalWORndOff, Manualsales, NormalSales, Types, narration2, DuplicateCopy, check1, CustomerIdMobile,cuscategory) VALUES({0},{14},Format('{1}', 'dd/mm/yyyy'),{2},{3},'{4}','{5}','{6}',{7},'{8}','{9}','{10}',{11},{12},'{13}','{15}','{16}','{17}','{18}','{19}','{20}','{21}',{22},{23},{24},'{25}','{26}','{27}','{28}','{29}','{30}',{31},'{32}')",
            dbQry = string.Format("INSERT INTO tblSales(Billno,SeriesID,BillDate,JournalID,CustomerID,CustomerName,PayMode,CustomerAddress,CustomerContacts,purchaseReturn,purchaseReturnreason,Freight,LoadUnLoad,OtherCusName,InternalTransfer,MultiPayment,DeliveryNote, CustomerAddress2,CustomerAddress3, despatchedfrom, manualNo, TotalWORndOff, Total, Manualsales, NormalSales, Types,Narration2,DuplicateCopy,CustomerIdMobile,Check1,cuscategory,Discounttype,InvoiceReturnStatus,BranchCode) VALUES({0},{1},'{2}',{3},{4},'{5}',{6},'{7}','{8}','{9}','{10}',{11},{12},'{13}','{14}','{15}','{16}','{17}','{18}','{19}',{20},{21},{22},'{23}','{24}','{25}','{26}','{27}',{28},'{29}','{30}','{31}','{32}','{33}')",
            salesBillno,
            Series,
            sBilldate.ToString("yyyy-MM-dd"),
            NewTransNo,
            sCustomerID,
            sCustomerName,
            paymode,
            sCustomerAddress,
            sCustomerContact,
            purchasereturn,
            prreason,
            freight,
            dLU,
            sOtherCusName,
            intTrans,
            MultiPayment,
            deliveryNote,
            sCustomerAddress2,
            sCustomerAddress3,
            despatchedfrom,
            manualno,
            TotalWORndOff,
            Amount,
            ManualSales,
            NormalSales,
            Types,
            narration2,
            DuplicateCopy,
            CustomerIdMobile,
            check,
            cuscategory, distype, "NO", branchcode);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            salesID = salesBillno;

            sNarration = sVoucherType + " - Bill No:" + BillNo;
            dbQry = string.Format("Update tblDayBook SET Narration = '{0}' Where TransNo={1}", sNarration, NewTransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            double rateinclu = 0;
            //Adding the Purchase Items Table // Previous code
            if (salesDS != null)
            {
                if (salesDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in salesDS.Tables[0].Rows)
                    {
                        iSno = iSno + 1;
                        //object returnStock = manager.ExecuteScalar(CommandType.Text, "Select stock from tblProductMaster WHERE itemCode='" + Convert.ToString(dr["Prd"]) + "'");
                        object returnStock = manager.ExecuteScalar(CommandType.Text, "Select Stock from tblProductStock WHERE BranchCode='" + branchcode + "' and ItemCode='" + Convert.ToString(dr["Prd"]) + "'");
                        if ((returnStock != null) && (returnStock != DBNull.Value))
                        {
                            if (Convert.ToDouble(returnStock) < Convert.ToDouble(dr["Qty"]))
                            {
                                salesID = -1;
                                return salesID;
                            }

                        }

                        if (dr["Prd"].ToString() != "")
                        {

                            rateinclu = Convert.ToDouble(dr["Rate"]) - (Convert.ToDouble(dr["VATAmt"]) / Convert.ToDouble(dr["Qty"]));

                            if (Logsave == "YES")
                            {
                                logdescription = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,isrole,CST,Bundles,Rods,ExecIncharge,ExecCharge,Vatamount,TotalMrp,subtotal,executivename,TotalPrice,PriceBeforeVATAmt,PrdReturnStatus,ReturnQty,BranchCode) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},'{19}',{20},'{21}')", salesID, Convert.ToString(dr["Prd"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["DisPre"]), Convert.ToDouble(dr["VATPre"]), iSno, Convert.ToString(dr["IsRole"]), Convert.ToDouble(dr["CSTPre"]), Convert.ToInt32(dr["Bundles"]), Convert.ToInt32(dr["Rods"]), 0, Convert.ToDouble(dr["ExeComm"]), Convert.ToDouble(dr["VATAmt"]), Convert.ToDouble(dr["TotalMrp"]), 0, Convert.ToInt32(dr["Emp"]), Convert.ToDouble(dr["TotPrice"]), Convert.ToDouble(dr["PrBefVATAmt"]), "NO", 0,branchcode);
                                logdescription = logdescription.Trim();
                                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, salesBillno, "InsertSalesNewSeries");
                                manager.ExecuteNonQuery(CommandType.Text, description);

                                //logdescription = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock - {0} WHERE ItemCode={1}", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                                logdescription = string.Format("UPDATE tblProductStock SET tblProductStock.Stock =  tblProductStock.Stock - {0} WHERE ItemCode={1} and BranchCode={2}", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim(), branchcode);
                                logdescription = logdescription.Trim();
                                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, salesBillno, "InsertSalesNewSeries");
                                manager.ExecuteNonQuery(CommandType.Text, description);
                            }
                            string dbQry1;
                            dbQry1 = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,isrole,CST,Bundles,Rods,ExecIncharge,ExecCharge,Vatamount,TotalMrp,subtotal,executivename,TotalPrice,PriceBeforeVATAmt,PrdReturnStatus,ReturnQty,BranchCode) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},'{19}',{20},'{21}')", salesID, Convert.ToString(dr["Prd"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["DisPre"]), Convert.ToDouble(dr["VATPre"]), iSno, Convert.ToString(dr["IsRole"]), Convert.ToDouble(dr["CSTPre"]), Convert.ToInt32(dr["Bundles"]), Convert.ToInt32(dr["Rods"]), 0, Convert.ToDouble(dr["ExeComm"]), Convert.ToDouble(dr["VATAmt"]), Convert.ToDouble(dr["TotalMrp"]), 0, Convert.ToInt32(dr["Emp"]), Convert.ToDouble(dr["TotPrice"]), Convert.ToDouble(dr["PrBefVATAmt"]), "NO", 0, branchcode);
                            manager.ExecuteNonQuery(CommandType.Text, dbQry1);

                            //dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock - {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["Prd"]).Trim());
                            dbQry = string.Format("UPDATE tblProductStock SET tblProductStock.Stock =  tblProductStock.Stock - {0} WHERE ItemCode='{1}' and BranchCode='{2}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["Prd"]).Trim(), branchcode);
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                            if (purchasereturn == "YES")
                            {
                                dbQ = "SELECT ReturnQty From tblPurchaseItems Where purchaseID=" + iPurID + " and ItemCode='" + Convert.ToString(dr["Prd"]) + "'";
                                dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
                                if (dsd.Tables[0].Rows.Count > 0)
                                    AddRtnQty = Convert.ToInt32(dsd.Tables[0].Rows[0]["ReturnQty"].ToString());
                                AddRtnQty = AddRtnQty + Convert.ToInt32(dr["Qty"]);

                                if (Convert.ToDouble(dr["Qty"]) == Convert.ToDouble(dr["RtnQty"]))
                                {
                                    Prdrtnstatus = "YES";
                                    dbQry = string.Format("Update tblPurchaseItems Set ReturnQty=" + AddRtnQty + ",PrdReturnStatus='" + Prdrtnstatus + "' Where purchaseID=" + iPurID + " and ItemCode='" + Convert.ToString(dr["Prd"]) + "'");
                                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                                    //dbQry = string.Format("Update tblSales Set InvoiceReturnStatus='" + Prdrtnstatus + "' Where BillNo=" + iSalesID + "");
                                    //manager.ExecuteNonQuery(CommandType.Text, dbQry);
                                }
                                else
                                {
                                    Prdrtnstatus = "NO";
                                    dbQry = string.Format("Update tblPurchaseItems Set ReturnQty=" + AddRtnQty + ",PrdReturnStatus='" + Prdrtnstatus + "' Where purchaseID=" + iPurID + " and ItemCode='" + Convert.ToString(dr["Prd"]) + "'");
                                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                                }
                            }
                        }

                    }
                    iSno = 0;
                }
            }




            if (receiptData != null && receiptData.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in receiptData.Tables[0].Rows)
                {
                    var receiptNarration = "Amount Received against Bill No :" + salesBillno;

                    if (Logsave == "YES")
                    {
                        logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo,BranchCode) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})",
                            dr["TransDate"].ToString(), dr["DebitorID"].ToString(), dr["CreditorID"].ToString(), dr["Amount"].ToString(), receiptNarration, dr["VoucherType"].ToString(), dr["ChequeNo"].ToString(), 0, salesBillno, branchcode);
                        logdescription = logdescription.Trim();
                        description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                             DateTime.Now.ToString(), logdescription.ToString(), usernam, salesBillno, "InsertSalesNewSeries");
                        manager.ExecuteNonQuery(CommandType.Text, description);

                    }


                    string qryReceipt = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo,BranchCode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},{8},'{9}')",
                    dr["TransDate"].ToString(), dr["DebitorID"].ToString(), dr["CreditorID"].ToString(), dr["Amount"].ToString(), receiptNarration, dr["VoucherType"].ToString(), dr["ChequeNo"].ToString(), 0, salesBillno, branchcode);

                    manager.ExecuteNonQuery(CommandType.Text, qryReceipt);

                    int ReceiptTransNo = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));


                    if (Logsave == "YES")
                    {
                        logdescription = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode) Values({0},{1},{2})", dr["CreditorID"].ToString(), ReceiptTransNo, dr["Paymode"].ToString());
                        logdescription = logdescription.Trim();
                        description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                             DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, salesBillno, "InsertSalesNewSeries");
                        manager.ExecuteNonQuery(CommandType.Text, description);

                        logdescription = string.Format("INSERT INTO tblReceivedAmount(ReceiptNo,BillNo,Amount) VALUES({0},{1},{2})", ReceiptTransNo.ToString(), salesBillno, Convert.ToDouble(dr["Amount"]));
                        logdescription = logdescription.Trim();
                        description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                             DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, salesBillno, "InsertSalesNewSeries");
                        manager.ExecuteNonQuery(CommandType.Text, description);
                    }

                    dbQry = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode,SFRefNo) Values({0},{1},'{2}','{3}')", dr["CreditorID"].ToString(), ReceiptTransNo, dr["Paymode"].ToString(), dr["SFRefNo"].ToString());

                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    dbQry = string.Format("INSERT INTO tblReceivedAmount(ReceiptNo,BillNo,Amount) VALUES({0},{1},{2})", ReceiptTransNo.ToString(), salesBillno, Convert.ToDouble(dr["Amount"]));
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                }
            }


            sAuditStr = "Sales Transaction: " + NewTransNo + " got added. Record Details : User =" + usernam + " Bill No= " + salesBillno + " Bill Date= " + BillDate + " CustomerID=" + sCustomerID + ",Amount= " + Amount + " Trans No :" + NewTransNo;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            manager.CommitTransaction();
            return salesID;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public int InsertSalesNewSeries942013(string Series, string BillDate, int sCustomerID, string sCustomerName, string sCustomerAddress, string sCustomerContact, int paymode, string sCreditCardno, int BankName, double Amount, string purchasereturn, string prreason, int executive, double freight, double dLU, DataSet salesDS, string sOtherCusName, string intTrans, DataSet receiptData, string MultiPayment, string deliveryNote, string sCustomerAddress2, string sCustomerAddress3, string sexecutivename, string despatchedfrom, double fixedtotal, int manualno, double TotalWORndOff, string usernam)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        DataSet dsOld = new DataSet();
        DateTime sBilldate;
        string[] sDate;
        string delim = "/";
        char[] delimA = delim.ToCharArray();
        CultureInfo culture = new CultureInfo("pt-BR");
        string sVoucherType = string.Empty;
        string strRole = string.Empty;

        string sRoleID = string.Empty;
        string sQty = string.Empty;

        int iSno = 0;

        try
        {
            sDate = BillDate.Trim().Split(delimA);


            sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));

        }
        catch (Exception ex)
        {
            //Response.Write("<b><font face='Trebuchet MS' size=2 color=red>Invalid Bill Date Format</font></b>");
            throw new Exception("Invalid Bill Date Format", ex);
        }


        double oldAmt = 0;
        string sNarration = string.Empty;
        int creditorID = 2;
        int DebtorID = 0;
        int salesID = 0;
        int BillNo = 0;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID

            if (paymode == 1)
                DebtorID = 1;
            else if (paymode == 2)
                DebtorID = BankName;
            else
                DebtorID = sCustomerID;

            //End Retriving the old Debtor and CreditorID

            //End Updating the Debit and credit
            //Start Delete the old record
            if (purchasereturn == "NO")
                sVoucherType = "Sales";
            else
                sVoucherType = "Purchase Return";

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,CreditCardNo,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
             sBilldate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, sCreditCardno, 0);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            int NewTransNo = 0;

            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NewTransNo = int.Parse(retVal.ToString());
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }

            int tBillNo = 0;
            int salesBillno = 0;

            if (Series == "")
            {
                object retBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM tblSales");

                if ((retBillVal != null) && (retBillVal != DBNull.Value))
                {
                    BillNo = Int32.Parse(retBillVal.ToString());
                }
                else
                {
                    BillNo = BillNo + 1;
                }

                /* Start March 21 - Duplicate Billno Check*/
                object retTBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM TemptblSales ");

                if ((retTBillVal != null) && (retTBillVal != DBNull.Value))
                {
                    tBillNo = Int32.Parse(retTBillVal.ToString());
                }
                else
                {
                    tBillNo = tBillNo + 1;
                }

                if (BillNo >= tBillNo)
                {
                    salesBillno = BillNo;
                }
                else
                {
                    salesBillno = tBillNo;
                }

                Series = "0";

            }
            else
            {
                object retBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT NextSequence FROM tblSalesSeries Where ID=" + Series);
                object retBillEnd = manager.ExecuteScalar(CommandType.Text, "SELECT [End] FROM tblSalesSeries Where ID=" + Series);

                int LastValue = 0;

                if ((retBillVal != null) && (retBillVal != DBNull.Value))
                {
                    BillNo = Int32.Parse(retBillVal.ToString());
                }
                else
                {
                    return -3;
                }

                /* Start March 21 - Duplicate Billno Check*/
                object retTBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM TemptblSales Where SeriesID=" + Series);
                if ((retTBillVal != null) && (retTBillVal != DBNull.Value))
                {
                    tBillNo = Int32.Parse(retTBillVal.ToString());
                }
                else
                {
                    tBillNo = tBillNo + 1;
                }

                if (BillNo >= tBillNo)
                {
                    salesBillno = BillNo;
                }
                else
                {
                    salesBillno = tBillNo;
                }

                if ((retBillEnd != null) && (retBillEnd != DBNull.Value))
                {
                    LastValue = Int32.Parse(retBillEnd.ToString());
                }
                else
                {
                    return -3;
                }

                dbQry = string.Format("Update tblSalesSeries SET NextSequence = {0} Where ID={1}", salesBillno + 1, Series);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                if ((salesBillno + 1) > LastValue)
                {
                    dbQry = string.Format("Update tblSalesSeries SET Status = 'Closed' Where ID={0}", Series);
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                }

                //salesBillno = BillNo;

            }

            dbQry = string.Format("INSERT INTO tblSales(Billno,SeriesID,BillDate,JournalID,CustomerID,CustomerName,CustomerAddress,CustomerContacts,Paymode,purchaseReturn,purchaseReturnReason,executive,freight,LoadUnload,OtherCusName,InternalTransfer,MultiPayment,DeliveryNote,CustomerAddress2,CustomerAddress3,executivename,despatchedfrom, manualNo,Total,TotalWORndOff) VALUES({0},{14},Format('{1}', 'dd/mm/yyyy'),{2},{3},'{4}','{5}','{6}',{7},'{8}','{9}','{10}',{11},{12},'{13}','{15}','{16}','{17}','{18}','{19}','{20}','{21}',{22},{23},{24})",
            salesBillno, sBilldate.ToShortDateString(), NewTransNo, sCustomerID, sCustomerName, sCustomerAddress, sCustomerContact, paymode, purchasereturn, prreason, executive, freight, dLU, sOtherCusName, Series, intTrans, MultiPayment, deliveryNote, sCustomerAddress2, sCustomerAddress3, sexecutivename, despatchedfrom, manualno, Amount, TotalWORndOff);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            salesID = salesBillno;

            sNarration = sVoucherType + " - Bill No:" + BillNo;
            dbQry = string.Format("Update tblDayBook SET Narration = '{0}' Where TransNo={1}", sNarration, NewTransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            //Adding the Purchase Items Table
            if (salesDS != null)
            {
                if (salesDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in salesDS.Tables[0].Rows)
                    {
                        iSno = iSno + 1;
                        object returnStock = manager.ExecuteScalar(CommandType.Text, "Select stock from tblProductMaster WHERE itemCode='" + Convert.ToString(dr["ItemCode"]) + "'");
                        if ((returnStock != null) && (returnStock != DBNull.Value))
                        {
                            if (Convert.ToDouble(returnStock) < Convert.ToDouble(dr["Qty"]))
                            {
                                salesID = -1;
                                return salesID;
                            }

                        }

                        if (dr["ItemCode"].ToString() != "")
                        {
                            dbQry = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,isrole,CST,Bundles,Rods,ExecIncharge,ExecCharge) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10},{11},{12})", salesID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), iSno, Convert.ToString(dr["isRole"]), Convert.ToDouble(dr["CST"]), Convert.ToInt32(dr["Bundles"]), Convert.ToInt32(dr["Rods"]), 0, Convert.ToDouble(dr["ExecCharge"]));
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                            dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock - {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        }

                    }
                    iSno = 0;
                }
            }

            if (receiptData != null && receiptData.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in receiptData.Tables[0].Rows)
                {
                    var receiptNarration = "Amount Received against Bill No :" + salesBillno;
                    string qryReceipt = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                    dr["TransDate"].ToString(), dr["DebitorID"].ToString(), dr["CreditorID"].ToString(), dr["Amount"].ToString(), receiptNarration, dr["VoucherType"].ToString(), dr["ChequeNo"].ToString(), 0, salesBillno);

                    manager.ExecuteNonQuery(CommandType.Text, qryReceipt);

                    int ReceiptTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

                    dbQry = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode) Values({0},{1},'{2}')", dr["CreditorID"].ToString(), ReceiptTransNo, dr["Paymode"].ToString());

                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    dbQry = string.Format("INSERT INTO tblReceivedAmount(ReceiptNo,BillNo,Amount) VALUES({0},{1},{2})", ReceiptTransNo.ToString(), salesBillno, Convert.ToDouble(dr["Amount"]));
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                }
            }


            sAuditStr = "Sales Transaction: " + NewTransNo + " got added. Record Details : User =" + usernam + " Bill No= " + salesBillno + " Bill Date= " + BillDate + " CustomerID=" + sCustomerID + ",Amount=" + Amount + " Trans No :" + NewTransNo;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Add New", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            manager.CommitTransaction();
            return salesID;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public int InsertSalesNewSeriesSenthil(string Series, string BillDate, int sCustomerID, string sCustomerName, string sCustomerAddress, string sCustomerContact, int paymode, string sCreditCardno, int BankName, double Amount, string purchasereturn, string prreason, int executive, double freight, double dLU, DataSet salesDS, string sOtherCusName, string intTrans, DataSet receiptData, string MultiPayment, string deliveryNote, string sCustomerAddress2, string sCustomerAddress3)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        DataSet dsOld = new DataSet();
        DateTime sBilldate;
        string[] sDate;
        string delim = "/";
        char[] delimA = delim.ToCharArray();
        CultureInfo culture = new CultureInfo("pt-BR");
        string sVoucherType = string.Empty;
        string strRole = string.Empty;

        string sRoleID = string.Empty;
        string sQty = string.Empty;

        int iSno = 0;

        try
        {
            sDate = BillDate.Trim().Split(delimA);


            sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));

        }
        catch (Exception ex)
        {
            //Response.Write("<b><font face='Trebuchet MS' size=2 color=red>Invalid Bill Date Format</font></b>");
            throw new Exception("Invalid Bill Date Format", ex);
        }


        double oldAmt = 0;
        string sNarration = string.Empty;
        int creditorID = 2;
        int DebtorID = 0;
        int salesID = 0;
        int BillNo = 0;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID

            if (paymode == 1)
                DebtorID = 1;
            else if (paymode == 2)
                DebtorID = BankName;
            else
                DebtorID = sCustomerID;

            //End Retriving the old Debtor and CreditorID

            //End Updating the Debit and credit
            //Start Delete the old record
            if (purchasereturn == "NO")
                sVoucherType = "Sales";
            else
                sVoucherType = "Purchase Return";

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,CreditCardNo,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
             sBilldate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, sCreditCardno, 0);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            int NewTransNo = 0;

            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NewTransNo = int.Parse(retVal.ToString());
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }

            int tBillNo = 0;
            int salesBillno = 0;

            if (Series == "")
            {
                object retBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM tblSales");

                if ((retBillVal != null) && (retBillVal != DBNull.Value))
                {
                    BillNo = Int32.Parse(retBillVal.ToString());
                }
                else
                {
                    BillNo = BillNo + 1;
                }

                /* Start March 21 - Duplicate Billno Check*/
                object retTBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM TemptblSales ");

                if ((retTBillVal != null) && (retTBillVal != DBNull.Value))
                {
                    tBillNo = Int32.Parse(retTBillVal.ToString());
                }
                else
                {
                    tBillNo = tBillNo + 1;
                }

                if (BillNo >= tBillNo)
                {
                    salesBillno = BillNo;
                }
                else
                {
                    salesBillno = tBillNo;
                }

                Series = "0";

            }
            else
            {
                object retBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT NextSequence FROM tblSalesSeries Where ID=" + Series);
                object retBillEnd = manager.ExecuteScalar(CommandType.Text, "SELECT [End] FROM tblSalesSeries Where ID=" + Series);

                int LastValue = 0;

                if ((retBillVal != null) && (retBillVal != DBNull.Value))
                {
                    BillNo = Int32.Parse(retBillVal.ToString());
                }
                else
                {
                    return -3;
                }

                /* Start March 21 - Duplicate Billno Check*/
                object retTBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM TemptblSales Where SeriesID=" + Series);
                if ((retTBillVal != null) && (retTBillVal != DBNull.Value))
                {
                    tBillNo = Int32.Parse(retTBillVal.ToString());
                }
                else
                {
                    tBillNo = tBillNo + 1;
                }

                if (BillNo >= tBillNo)
                {
                    salesBillno = BillNo;
                }
                else
                {
                    salesBillno = tBillNo;
                }

                if ((retBillEnd != null) && (retBillEnd != DBNull.Value))
                {
                    LastValue = Int32.Parse(retBillEnd.ToString());
                }
                else
                {
                    return -3;
                }

                dbQry = string.Format("Update tblSalesSeries SET NextSequence = {0} Where ID={1}", salesBillno + 1, Series);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                if ((salesBillno + 1) > LastValue)
                {
                    dbQry = string.Format("Update tblSalesSeries SET Status = 'Closed' Where ID={0}", Series);
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                }

                //salesBillno = BillNo;

            }

            dbQry = string.Format("INSERT INTO tblSales(Billno,SeriesID,BillDate,JournalID,CustomerID,CustomerName,CustomerAddress,CustomerContacts,Paymode,purchaseReturn,purchaseReturnReason,executive,freight,LoadUnload,OtherCusName,InternalTransfer,MultiPayment,DeliveryNote,CustomerAddress2,CustomerAddress3) VALUES({0},{14},Format('{1}', 'dd/mm/yyyy'),{2},{3},'{4}','{5}','{6}',{7},'{8}','{9}','{10}',{11},{12},'{13}','{15}','{16}','{17}','{18}','{19}')",
            salesBillno, sBilldate.ToShortDateString(), NewTransNo, sCustomerID, sCustomerName, sCustomerAddress, sCustomerContact, paymode, purchasereturn, prreason, executive, freight, dLU, sOtherCusName, Series, intTrans, MultiPayment, deliveryNote, sCustomerAddress2, sCustomerAddress3);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            salesID = salesBillno;

            sNarration = sVoucherType + " - Bill No:" + BillNo;
            dbQry = string.Format("Update tblDayBook SET Narration = '{0}' Where TransNo={1}", sNarration, NewTransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            //Adding the Purchase Items Table
            if (salesDS != null)
            {
                if (salesDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in salesDS.Tables[0].Rows)
                    {
                        iSno = iSno + 1;
                        object returnStock = manager.ExecuteScalar(CommandType.Text, "Select stock from tblProductMaster WHERE itemCode='" + Convert.ToString(dr["ItemCode"]) + "'");
                        if ((returnStock != null) && (returnStock != DBNull.Value))
                        {
                            if (Convert.ToDouble(returnStock) < Convert.ToDouble(dr["Qty"]))
                            {
                                salesID = -1;
                                return salesID;
                            }

                        }

                        if (dr["ItemCode"].ToString() != "")
                        {
                            dbQry = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,isrole,CST,Bundles,Rods,ExecIncharge,ExecCharge) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10},{11},{12})", salesID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), iSno, Convert.ToString(dr["isRole"]), Convert.ToDouble(dr["CST"]), Convert.ToInt32(dr["Bundles"]), Convert.ToInt32(dr["Rods"]), 0, Convert.ToDouble(dr["ExecCharge"]));
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                            dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock - {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        }

                    }
                    iSno = 0;
                }
            }

            if (receiptData != null && receiptData.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in receiptData.Tables[0].Rows)
                {
                    var receiptNarration = "Amount Received against Bill No :" + salesBillno;
                    string qryReceipt = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                    dr["TransDate"].ToString(), dr["DebitorID"].ToString(), dr["CreditorID"].ToString(), dr["Amount"].ToString(), receiptNarration, dr["VoucherType"].ToString(), dr["ChequeNo"].ToString(), 0, salesBillno);

                    manager.ExecuteNonQuery(CommandType.Text, qryReceipt);

                    int ReceiptTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

                    dbQry = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode) Values({0},{1},'{2}')", dr["CreditorID"].ToString(), ReceiptTransNo, dr["Paymode"].ToString());

                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    dbQry = string.Format("INSERT INTO tblReceivedAmount(ReceiptNo,BillNo,Amount) VALUES({0},{1},{2})", ReceiptTransNo.ToString(), salesBillno, Convert.ToDouble(dr["Amount"]));
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                }
            }

            manager.CommitTransaction();
            return salesID;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public int insertsalesNewSeriesOldSenthil(string Series, string BillDate, int sCustomerID, string sCustomerName, string sCustomerAddress, string sCustomerContact, int paymode, string sCreditCardno, int BankName, double Amount, string purchasereturn, string prreason, int executive, double freight, double dLU, DataSet salesDS, string sOtherCusName, string intTrans, DataSet receiptData, string MultiPayment, string deliveryNote)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        DataSet dsOld = new DataSet();
        DateTime sBilldate;
        string[] sDate;
        string delim = "/";
        char[] delimA = delim.ToCharArray();
        CultureInfo culture = new CultureInfo("pt-BR");
        string sVoucherType = string.Empty;
        string strRole = string.Empty;

        string sRoleID = string.Empty;
        string sQty = string.Empty;

        int iSno = 0;

        try
        {
            sDate = BillDate.Trim().Split(delimA);


            sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));

        }
        catch (Exception ex)
        {
            //Response.Write("<b><font face='Trebuchet MS' size=2 color=red>Invalid Bill Date Format</font></b>");
            throw new Exception("Invalid Bill Date Format", ex);
        }


        double oldAmt = 0;
        string sNarration = string.Empty;
        int creditorID = 2;
        int DebtorID = 0;
        int salesID = 0;
        int BillNo = 0;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID

            if (paymode == 1)
                DebtorID = 1;
            else if (paymode == 2)
                DebtorID = BankName;
            else
                DebtorID = sCustomerID;

            //End Retriving the old Debtor and CreditorID

            //End Updating the Debit and credit
            //Start Delete the old record
            if (purchasereturn == "NO")
                sVoucherType = "Sales";
            else
                sVoucherType = "Purchase Return";

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,CreditCardNo,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
             sBilldate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, sCreditCardno, 0);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            int NewTransNo = 0;

            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NewTransNo = int.Parse(retVal.ToString());
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }

            int tBillNo = 0;
            int salesBillno = 0;

            if (Series == "")
            {
                object retBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM tblSales");

                if ((retBillVal != null) && (retBillVal != DBNull.Value))
                {
                    BillNo = Int32.Parse(retBillVal.ToString());
                }
                else
                {
                    BillNo = BillNo + 1;
                }

                /* Start March 21 - Duplicate Billno Check*/
                object retTBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM TemptblSales ");

                if ((retTBillVal != null) && (retTBillVal != DBNull.Value))
                {
                    tBillNo = Int32.Parse(retTBillVal.ToString());
                }
                else
                {
                    tBillNo = tBillNo + 1;
                }

                if (BillNo >= tBillNo)
                {
                    salesBillno = BillNo;
                }
                else
                {
                    salesBillno = tBillNo;
                }

                Series = "0";

            }
            else
            {
                object retBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT NextSequence FROM tblSalesSeries Where ID=" + Series);
                object retBillEnd = manager.ExecuteScalar(CommandType.Text, "SELECT [End] FROM tblSalesSeries Where ID=" + Series);

                int LastValue = 0;

                if ((retBillVal != null) && (retBillVal != DBNull.Value))
                {
                    BillNo = Int32.Parse(retBillVal.ToString());
                }
                else
                {
                    return -3;
                }

                /* Start March 21 - Duplicate Billno Check*/
                object retTBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM TemptblSales Where SeriesID=" + Series);
                if ((retTBillVal != null) && (retTBillVal != DBNull.Value))
                {
                    tBillNo = Int32.Parse(retTBillVal.ToString());
                }
                else
                {
                    tBillNo = tBillNo + 1;
                }

                if (BillNo >= tBillNo)
                {
                    salesBillno = BillNo;
                }
                else
                {
                    salesBillno = tBillNo;
                }

                if ((retBillEnd != null) && (retBillEnd != DBNull.Value))
                {
                    LastValue = Int32.Parse(retBillEnd.ToString());
                }
                else
                {
                    return -3;
                }

                dbQry = string.Format("Update tblSalesSeries SET NextSequence = {0} Where ID={1}", salesBillno + 1, Series);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                if ((salesBillno + 1) > LastValue)
                {
                    dbQry = string.Format("Update tblSalesSeries SET Status = 'Closed' Where ID={0}", Series);
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                }

                //salesBillno = BillNo;

            }

            dbQry = string.Format("INSERT INTO tblSales(Billno,SeriesID,BillDate,JournalID,CustomerID,CustomerName,CustomerAddress,CustomerContacts,Paymode,purchaseReturn,purchaseReturnReason,executive,freight,LoadUnload,OtherCusName,InternalTransfer,MultiPayment,DeliveryNote) VALUES({0},{14},Format('{1}', 'dd/mm/yyyy'),{2},{3},'{4}','{5}','{6}',{7},'{8}','{9}','{10}',{11},{12},'{13}','{15}','{16}','{17}')",
            salesBillno, sBilldate.ToShortDateString(), NewTransNo, sCustomerID, sCustomerName, sCustomerAddress, sCustomerContact, paymode, purchasereturn, prreason, executive, freight, dLU, sOtherCusName, Series, intTrans, MultiPayment, deliveryNote);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            salesID = salesBillno;

            sNarration = sVoucherType + " - Bill No:" + BillNo;
            dbQry = string.Format("Update tblDayBook SET Narration = '{0}' Where TransNo={1}", sNarration, NewTransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            //Adding the Purchase Items Table
            if (salesDS != null)
            {
                if (salesDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in salesDS.Tables[0].Rows)
                    {
                        iSno = iSno + 1;
                        object returnStock = manager.ExecuteScalar(CommandType.Text, "Select stock from tblProductMaster WHERE itemCode='" + Convert.ToString(dr["ItemCode"]) + "'");
                        if ((returnStock != null) && (returnStock != DBNull.Value))
                        {
                            if (Convert.ToDouble(returnStock) < Convert.ToDouble(dr["Qty"]))
                            {
                                salesID = -1;
                                return salesID;
                            }

                        }

                        if (dr["ItemCode"].ToString() != "")
                        {
                            dbQry = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,isrole,CST,Bundles,Rods,ExecIncharge,ExecCharge) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10},{11},{12})", salesID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), iSno, Convert.ToString(dr["isRole"]), Convert.ToDouble(dr["CST"]), Convert.ToInt32(dr["Bundles"]), Convert.ToInt32(dr["Rods"]), 0, Convert.ToDouble(dr["ExecCharge"]));
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                            dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock - {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        }

                    }
                    iSno = 0;
                }
            }

            if (receiptData != null && receiptData.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in receiptData.Tables[0].Rows)
                {
                    var receiptNarration = "Amount Received against Bill No :" + salesBillno;
                    string qryReceipt = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                    dr["TransDate"].ToString(), dr["DebitorID"].ToString(), dr["CreditorID"].ToString(), dr["Amount"].ToString(), receiptNarration, dr["VoucherType"].ToString(), dr["ChequeNo"].ToString(), 0, salesBillno);

                    manager.ExecuteNonQuery(CommandType.Text, qryReceipt);

                    int ReceiptTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

                    dbQry = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode) Values({0},{1},'{2}')", dr["CreditorID"].ToString(), ReceiptTransNo, dr["Paymode"].ToString());

                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    dbQry = string.Format("INSERT INTO tblReceivedAmount(ReceiptNo,BillNo,Amount) VALUES({0},{1},{2})", ReceiptTransNo.ToString(), salesBillno, Convert.ToDouble(dr["Amount"]));
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                }
            }

            manager.CommitTransaction();
            return salesID;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public int UpdateSalesNew(string Series, int Billno, string BillDate, int sCustomerID, string sCustomerName, string sCustomerAddress, string sCustomerContact, int paymode, string sCreditCardno, int BankName, double Amount, string purchasereturn, string prreason, double freight, double dLU, DataSet salesDS, String sOtherCusName, string intTrans, string UserID, DataSet receiptData, string MultiPayment, string deliveryNote, string sCustomerAddress2, string sCustomerAddress3, string executivename, string despatchedfrom, double fixedtotal, int manualno, double TotalWORndOff, string usernam, string Types, string narration2, string DuplicateCopy, string check, int CustomerIdMobile, string cuscategory, string distype, string branchcode, string connection)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        CultureInfo culture = new CultureInfo("pt-BR");
        string dbQry = string.Empty;
        string sQry = string.Empty;
        string sAuditStr = string.Empty;
        string dbQryRecDate = string.Empty;
        string sNarration = string.Empty;
        string sVoucherType = string.Empty;
        string oldTransDate = string.Empty;

        DataSet dsOld = new DataSet();
        DataSet roleDs = new DataSet();
        DateTime sBilldate;

        int TransNo = 0;
        int oldDebitID = 0;
        int oldBillNo = 0;
        int oldCreditID = 0;
        double oldAmt = 0;
        int creditorID = 0;
        int DebtorID = 0;
        //int BillNo = 0;
        int salesID = 0;
        int iSno = 0;
        StringBuilder dbQryData = new StringBuilder();
        string[] sDate;
        string delim = "/";
        char[] delimA = delim.ToCharArray();

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID

            try
            {
                sDate = BillDate.Trim().Split(delimA);
                sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));

                dbQryRecDate = "Select recon_date from last_recon";

                object recDateVal = manager.ExecuteScalar(CommandType.Text, dbQryRecDate);

                if ((recDateVal != null) && (recDateVal != DBNull.Value))
                {
                    dbQryData.Append("SELECT tblSales.Billno,Format(tblSales.Billdate, 'dd/MM/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerID As DebtorID, Debtor.LedgerName As Debtor,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,OtherCusName,tblSales.CustomerAddress2,tblSales.CustomerAddress3");
                    dbQryData.Append(" FROM (((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID))");
                    dbQryData.Append(" Where tblSales.Billno=" + Billno + " AND tblSales.BranchCode='" + branchcode + "' AND tblSales.BillDate > " + DateTime.Parse(recDateVal.ToString()).ToString("MM/dd/yyyy") + " ORDER BY tblSales.BillDate Desc,tblSales.Billno Desc");
                }
                else
                {
                    dbQryData.Append("SELECT tblSales.Billno,Format(tblSales.Billdate, 'dd/MM/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerID As DebtorID,Debtor.LedgerName As Debtor,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,OtherCusName,tblSales.CustomerAddress2,tblSales.CustomerAddress3");
                    dbQryData.Append(" FROM (((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID))");
                    dbQryData.Append(" ORDER BY tblSales.BillDate Desc,tblSales.Billno Desc");
                }

                dsOld = manager.ExecuteDataSet(CommandType.Text, dbQryData.ToString());

                if (dsOld != null)
                {
                    if (dsOld != null)
                    {
                        if (dsOld.Tables[0].Rows.Count > 0)
                        {
                            if (dsOld.Tables[0].Rows[0]["JournalID"] != null)
                            {
                                if (dsOld.Tables[0].Rows[0]["JournalID"].ToString() != string.Empty)
                                {
                                    TransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["JournalID"].ToString());
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to find sales details for Sales BillNo :" + Billno.ToString());
                        }
                    }
                    else
                    {
                        throw new Exception("Unable to find sales details for Sales BillNo :" + Billno.ToString());
                    }


                    dbQry = string.Format("Select DebtorID,CreditorID,Amount,transDate from tblDaybook Where TransNo={0}", TransNo);

                    dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);

                    if (dsOld != null)
                    {
                        if (dsOld.Tables[0].Rows.Count == 1)
                        {
                            oldBillNo = Billno;
                            oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                            oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                            oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                            oldTransDate = Convert.ToString(dsOld.Tables[0].Rows[0]["transDate"]);
                        }
                        else
                        {
                            throw new Exception("More than 1 row found in tblDaybook for TransNo :" + TransNo.ToString());
                        }

                    }

                    dbQ = "SELECT KeyValue From tblSettings WHERE KEYNAME='SAVELOG'";
                    dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
                    if (dsd.Tables[0].Rows.Count > 0)
                        Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

                    if (Logsave == "YES")
                    {
                        logdescription = string.Format("Delete From tblSalesItems Where BillNo={0} and BranchCode='{1}'", Billno,branchcode);
                        logdescription = logdescription.Trim();
                        description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                             DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, Billno, "UpdateSalesNew");
                        manager.ExecuteNonQuery(CommandType.Text, description);
                    }


                    dbQry = string.Format("SELECT Qty,ItemCode,RoleID,isRole From tblSalesItems Where Billno={0} and BranchCode='{1}'", Billno,branchcode);
                    DataSet salesDSData = (DataSet)manager.ExecuteDataSet(CommandType.Text, dbQry);

                    if (salesDSData != null)
                    {
                        if (salesDSData.Tables.Count > 0)
                        {
                            foreach (DataRow dr in salesDSData.Tables[0].Rows)
                            {
                                if (Logsave == "YES")
                                {
                                    logdescription = string.Format("UPDATE tblProductStock SET tblProductStock.Stock =  tblProductStock.Stock + {0} WHERE ItemCode={1} and BranchCode={2}", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim(), branchcode);
                                    logdescription = logdescription.Trim();
                                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                                         DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, Billno, "UpdateSalesNew");
                                    manager.ExecuteNonQuery(CommandType.Text, description);
                                }

                                dbQry = string.Format("UPDATE tblProductStock SET tblProductStock.Stock =  tblProductStock.Stock + {0} WHERE ItemCode='{1}' and BranchCode='{2}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim(), branchcode);
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);
                            }
                        }
                    }

                    //Create log entries in Audit table before deleting.

                    dbQry = string.Format("INSERT INTO tblAuditSalesItems Select * From tblSalesItems Where BillNo={0} and BranchCode='{1}'", Billno,branchcode);
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    dbQry = string.Format("Delete From tblSalesItems Where BillNo={0} and BranchCode='{1}'", Billno, branchcode);
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                }
                //End Deleting the old record

                //if (paymode == 1)
                //    DebtorID = 1;
                //else if (paymode == 2)
                //    DebtorID = BankName;
                //else
                //    DebtorID = sCustomerID;
                int cid = 0;
                cid = getSalesACLedgerId(connection, branchcode);
                creditorID = cid;

                int did = 0;
                if (paymode == 1)
                {
                    did = getCashACLedgerId(connection, branchcode);
                    DebtorID = did;
                }
                else if (paymode == 2)
                    DebtorID = BankName;
                else
                    DebtorID = sCustomerID;

                //Sales A/c -2 will always be the Creditor

                if (purchasereturn.ToUpper() == "NO")
                    sVoucherType = "Sales";
                else
                    sVoucherType = "Purchase Return";

                sNarration = sVoucherType + " - Bill No:" + Billno;

                if (Logsave == "YES")
                {
                    string value1 = string.Empty;
                    string value2 = string.Empty;
                    string value3 = string.Empty;

                    int middlePos = 0;
                    logdescription = string.Format("UPDATE tblDayBook SET TransDate = {0},DebtorID={1},CreditorID={2},Amount={3},Narration={4},VoucherType={5},CreditCardNo={6},RefNo={7} WHERE TransNo={8} ",
                        sBilldate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, sCreditCardno, 0, TransNo);
                    logdescription = logdescription.Trim();
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                         DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, Billno, "UpdateSalesNew");
                    manager.ExecuteNonQuery(CommandType.Text, description);

                    logdescription = string.Format("UPDATE tblSales SET SeriesID={28},BillDate={1},JournalID={2},CustomerID={3},CustomerName={4},CustomerAddress={5},CustomerContacts={6},Paymode={7},purchaseReturn={8},purchaseReturnReason={9},executive={10},freight={11},LoadUnload={12},OtherCusName={13}, InternalTransfer={15},DeliveryNote={16},CustomerAddress2={17},CustomerAddress3={18},executivename={19}, despatchedfrom ={20} , manualNo ={21},TotalWORndOff={22},Total={23},MultiPayment={24},narration2={25},cuscategory={26},Discounttype={27},InvoiceReturnStatus={28} WHERE Billno={0} and BranchCode={29}",
                        Billno, sBilldate.ToString("yyyy-MM-dd"), TransNo, sCustomerID, sCustomerName, sCustomerAddress, sCustomerContact, paymode, purchasereturn, prreason, freight, dLU, sOtherCusName, Series, intTrans, deliveryNote, sCustomerAddress2, sCustomerAddress3, executivename, despatchedfrom, manualno, TotalWORndOff, Amount, MultiPayment, narration2, cuscategory, Series, "NO",branchcode);
                    logdescription = logdescription.Trim();


                    //     dbQry = string.Format("UPDATE tblSales SET SeriesID={28},BillDate=Format('{1}', 'dd/mm/yyyy'),JournalID={2},CustomerID={3},CustomerName='{4}',CustomerAddress='{5}',CustomerContacts='{6}',Paymode={7},purchaseReturn='{8}',purchaseReturnReason='{9}',executive='{10}',freight={11},LoadUnload={12},OtherCusName='{13}', InternalTransfer='{15}',DeliveryNote='{16}',CustomerAddress2='{17}',CustomerAddress3='{18}',executivename='{19}', despatchedfrom ='{20}' , manualNo ={21},TotalWORndOff={22},Total={23},MultiPayment='{24}',Types='{25}',narration2='{26}',cuscategory='{27}' WHERE Billno={0}",
                    //Billno, sBilldate.ToShortDateString(), TransNo, sCustomerID, sCustomerName, sCustomerAddress, sCustomerContact, paymode, purchasereturn, prreason, executive, freight, dLU, sOtherCusName, Series, intTrans, deliveryNote, sCustomerAddress2, sCustomerAddress3, executivename, despatchedfrom, manualno, TotalWORndOff, Amount, MultiPayment, Types, narration2, cuscategory);
                    //     manager.ExecuteNonQuery(CommandType.Text, dbQry);


                    //if (logdescription.Length > 255)
                    //{
                    //    value1 = logdescription.Substring(0, 255);
                    //    middlePos = logdescription.Length - (value1.Length);
                    //    if (middlePos > 0)
                    //    {
                    //        if (middlePos < 255)
                    //            value2 = logdescription.Substring(255, middlePos);
                    //        else
                    //            value2 = logdescription.Substring(256, 255);
                    //    }
                    //    else
                    //        value2 = "";

                    //    middlePos = logdescription.Length - (value1.Length + value2.Length);
                    //    if (middlePos > 0)
                    //    {
                    //        //value3 = logdescription.Substring(510, middlePos);
                    //        if (middlePos < 255)
                    //            value3 = logdescription.Substring(510, middlePos);
                    //        else
                    //            value3 = logdescription.Substring(511, 255);
                    //    }
                    //    else
                    //        value3 = "";
                    //}
                    //else
                    //{
                    //    value1 = logdescription;
                    //    value2 = "";
                    //    value3 = "";
                    //}
                    if (logdescription.Length > 255)
                    {
                        value1 = logdescription.Substring(0, 255);
                        middlePos = logdescription.Length - (value1.Length);
                        if (middlePos > 0)
                        {
                            if (middlePos < 255)
                                value2 = logdescription.Substring(255, middlePos);
                            else if (middlePos > 255)
                                value2 = logdescription.Substring(256, 255);
                            else
                                value2 = logdescription.Substring(256, 254);
                        }
                        else
                            value2 = "";

                        middlePos = logdescription.Length - (value1.Length + value2.Length);
                        if (middlePos > 0)
                        {
                            if (middlePos < 255)
                            {
                                if (middlePos == 1)
                                    value3 = "";
                                else
                                    value3 = logdescription.Substring(510, middlePos);
                            }
                            else if (middlePos > 255)
                                value3 = logdescription.Substring(511, 255);
                            else
                                value3 = logdescription.Substring(511, 254);
                            //value3 = logdescription.Substring(510, middlePos);
                        }
                        else
                            value3 = "";
                    }
                    else
                    {
                        value1 = logdescription;
                        value2 = "";
                        value3 = "";
                    }
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}')",
                         DateTime.Now.ToString("yyyy-MM-dd"), value1, usernam, Billno, value2, value3, "UpdateSalesNew");
                    manager.ExecuteNonQuery(CommandType.Text, description);
                }

                dbQry = string.Format("UPDATE tblDayBook SET TransDate = '{0}',DebtorID={1},CreditorID={2},Amount={3},Narration='{4}',VoucherType='{5}',CreditCardNo='{6}',RefNo={7},BranchCode='{9}' WHERE TransNo={8} ",
                sBilldate.ToString("yyyy-MM-dd"), DebtorID, creditorID, Amount, sNarration, sVoucherType, sCreditCardno, 0, TransNo, branchcode);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                dbQry = string.Format("UPDATE tblSales SET SeriesID={25},BillDate='{1}',JournalID={2},CustomerID={3},CustomerName='{4}',CustomerAddress='{5}',CustomerContacts='{6}',Paymode={7},purchaseReturn='{8}',purchaseReturnReason='{9}',freight={10},LoadUnload={11},OtherCusName='{12}', InternalTransfer='{13}',DeliveryNote='{14}',CustomerAddress2='{15}',CustomerAddress3='{16}', despatchedfrom ='{17}' , manualNo ={18},TotalWORndOff={19},Total={20},MultiPayment='{21}',Types='{22}',narration2='{23}',cuscategory='{24}',Discounttype='{25}',InvoiceReturnStatus='{26}' WHERE Billno={0} and BranchCode='{27}'",
                Billno, sBilldate.ToString("yyyy-MM-dd"), TransNo, sCustomerID, sCustomerName, sCustomerAddress, sCustomerContact, paymode, purchasereturn, prreason, freight, dLU, sOtherCusName, intTrans, deliveryNote, sCustomerAddress2, sCustomerAddress3, despatchedfrom, manualno, TotalWORndOff, Amount, MultiPayment, Types, narration2, cuscategory, Series, distype, "NO",branchcode);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                //Adding the Sales Items Table
                double rateinclu = 0;

                if (salesDS != null)
                {
                    if (salesDS.Tables.Count > 0)
                    {
                        foreach (DataRow dr in salesDS.Tables[0].Rows)
                        {
                            iSno = iSno + 1;
                            object returnStock = manager.ExecuteScalar(CommandType.Text, "Select Stock from tblProductStock WHERE BranchCode='" + branchcode + "' and ItemCode='" + Convert.ToString(dr["Prd"]) + "'");
                            if ((returnStock != null) && (returnStock != DBNull.Value))
                            {
                                if (Convert.ToDouble(returnStock) < Convert.ToDouble(dr["Qty"]))
                                {
                                    salesID = -1;
                                    return salesID;
                                }

                            }

                            rateinclu = Convert.ToDouble(dr["Rate"]) - (Convert.ToDouble(dr["VatAmt"]) / Convert.ToDouble(dr["Qty"])); ;

                            if (Logsave == "YES")
                            {
                                //logdescription = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,isrole,CST,Bundles,Rods,ExecIncharge,ExecCharge,Vatamount,TotalMrp,Subtotal) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15})", Billno, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), iSno, Convert.ToString(dr["isRole"]), Convert.ToDouble(dr["CST"]), Convert.ToInt32(dr["Bundles"]), Convert.ToInt32(dr["Rods"]), 0, Convert.ToDouble(dr["ExecCharge"]), Convert.ToDouble(dr["Vatamount"]), rateinclu, 0);
                                //logdescription = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,isrole,CST,Bundles,Rods,ExecIncharge,ExecCharge,Vatamount,TotalMrp,subtotal,executivename,TotalPrice,PriceBeforeVATAmt) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18})", salesID, Convert.ToString(dr["Prd"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["DisPre"]), Convert.ToDouble(dr["VATPre"]), iSno, Convert.ToString(dr["IsRole"]), Convert.ToDouble(dr["CSTPre"]), Convert.ToInt32(dr["Bundles"]), Convert.ToInt32(dr["Rods"]), 0, Convert.ToDouble(dr["ExeComm"]), Convert.ToDouble(dr["VATAmt"]), rateinclu, 0, Convert.ToInt32(dr["Emp"]), Convert.ToDouble(dr["TotPrice"]), Convert.ToDouble(dr["PrBefVATAmt"]));
                                logdescription = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,isrole,CST,Bundles,Rods,ExecIncharge,ExecCharge,Vatamount,TotalMrp,subtotal,executivename,TotalPrice,PriceBeforeVATAmt,PrdReturnStatus,ReturnQty,BranchCode) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},'{19}',{20},'{21}')", Billno, Convert.ToString(dr["Prd"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["DisPre"]), Convert.ToDouble(dr["VATPre"]), iSno, Convert.ToString(dr["IsRole"]), Convert.ToDouble(dr["CSTPre"]), Convert.ToInt32(dr["Bundles"]), Convert.ToInt32(dr["Rods"]), 0, Convert.ToDouble(dr["ExeComm"]), Convert.ToDouble(dr["VATAmt"]), Convert.ToDouble(dr["TotalMrp"]), 0, Convert.ToInt32(dr["Emp"]), Convert.ToDouble(dr["TotPrice"]), Convert.ToDouble(dr["PrBefVATAmt"]), "NO", 0,branchcode);
                                logdescription = logdescription.ToString().Trim();
                                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription, usernam, Billno, "UpdateSalesNew");
                                manager.ExecuteNonQuery(CommandType.Text, description);

                                logdescription = string.Format("UPDATE tblProductStock SET tblProductStock.Stock =  tblProductStock.Stock - {0} WHERE ItemCode={1} and BranchCode={2}", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim(), branchcode);
                                logdescription = logdescription.Trim();
                                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, Billno, "UpdateSalesNew");
                                manager.ExecuteNonQuery(CommandType.Text, description);
                            }


                            //dbQry = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,isrole,CST,Bundles,Rods,ExecIncharge,ExecCharge,Vatamount,TotalMrp,Subtotal) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10},{11},{12},{13},{14},{15})", Billno, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), iSno, Convert.ToString(dr["isRole"]), Convert.ToDouble(dr["CST"]), Convert.ToInt32(dr["Bundles"]), Convert.ToInt32(dr["Rods"]), 0, Convert.ToDouble(dr["ExecCharge"]), Convert.ToDouble(dr["Vatamount"]), Convert.ToDouble(dr["TotalMrp"]), 0);
                            // dbQry = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,isrole,CST,Bundles,Rods,ExecIncharge,ExecCharge,Vatamount,TotalMrp,subtotal,executivename,TotalPrice,PriceBeforeVATAmt) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18})", Billno, Convert.ToString(dr["Prd"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["DisPre"]), Convert.ToDouble(dr["VATPre"]), iSno, Convert.ToString(dr["IsRole"]), Convert.ToDouble(dr["CSTPre"]), Convert.ToInt32(dr["Bundles"]), Convert.ToInt32(dr["Rods"]), 0, Convert.ToDouble(dr["ExeComm"]), Convert.ToDouble(dr["VATAmt"]), rateinclu, 0, Convert.ToInt32(dr["Emp"]), Convert.ToDouble(dr["TotPrice"]), Convert.ToDouble(dr["PrBefVATAmt"]));
                            dbQry = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,isrole,CST,Bundles,Rods,ExecIncharge,ExecCharge,Vatamount,TotalMrp,subtotal,executivename,TotalPrice,PriceBeforeVATAmt,PrdReturnStatus,ReturnQty,BranchCode) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},'{19}',{20},'{21}')", Billno, Convert.ToString(dr["Prd"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["DisPre"]), Convert.ToDouble(dr["VATPre"]), iSno, Convert.ToString(dr["IsRole"]), Convert.ToDouble(dr["CSTPre"]), Convert.ToInt32(dr["Bundles"]), Convert.ToInt32(dr["Rods"]), 0, Convert.ToDouble(dr["ExeComm"]), Convert.ToDouble(dr["VATAmt"]), Convert.ToDouble(dr["TotalMrp"]), 0, Convert.ToInt32(dr["Emp"]), Convert.ToDouble(dr["TotPrice"]), Convert.ToDouble(dr["PrBefVATAmt"]), "NO", 0, branchcode);
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                            dbQry = string.Format("UPDATE tblProductStock SET tblProductStock.Stock =  tblProductStock.Stock - {0} WHERE ItemCode='{1}' and BranchCode='{2}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["Prd"]).Trim(), branchcode);
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        }

                        iSno = 0;
                    }
                }

                sAuditStr = "Sales Transaction: " + TransNo + " got edited. Old Record Details : User =" + usernam + " Bill No=" + oldBillNo + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt + ",TransDate=" + oldTransDate + " DateTime:" + sBilldate + " User:" + UserID;

                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit and Update", DateTime.Now.ToString("yyyy-MM-dd"));
                manager.ExecuteNonQuery(CommandType.Text, dbQry);





                if (receiptData != null && receiptData.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in receiptData.Tables[0].Rows)
                    {



                        var receiptNarration = "Amount Received against Bill No :" + Billno;
                        string qryReceipt = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo,BranchCode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},{8},'{9}')",
                        dr["TransDate"].ToString(), dr["DebitorID"].ToString(), dr["CreditorID"].ToString(), dr["Amount"].ToString(), receiptNarration, dr["VoucherType"].ToString(), dr["ChequeNo"].ToString(), 0, Billno, branchcode);

                        manager.ExecuteNonQuery(CommandType.Text, qryReceipt);

                        int ReceiptTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

                        dbQry = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode,SFRefNo) Values({0},{1},'{2}','{3}')", dr["CreditorID"].ToString(), ReceiptTransNo, dr["Paymode"].ToString(), dr["SFRefNo"].ToString());

                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        dbQry = string.Format("INSERT INTO tblReceivedAmount(ReceiptNo,BillNo,Amount) VALUES({0},{1},{2})", ReceiptTransNo.ToString(), Billno, Convert.ToDouble(dr["Amount"]));
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }
                manager.CommitTransaction();
                return Billno;
            }
            catch (Exception e)
            {
                manager.Transaction.Rollback();
                throw e;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public int UpdateSalesNewSenthil28213(string Series, int Billno, string BillDate, int sCustomerID, string sCustomerName, string sCustomerAddress, string sCustomerContact, int paymode, string sCreditCardno, int BankName, double Amount, string purchasereturn, string prreason, int executive, double freight, double dLU, DataSet salesDS, String sOtherCusName, string intTrans, string UserID, string deliveryNote, string sCustomerAddress2, string sCustomerAddress3, string executivename)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        CultureInfo culture = new CultureInfo("pt-BR");
        string dbQry = string.Empty;
        string sQry = string.Empty;
        string sAuditStr = string.Empty;
        string dbQryRecDate = string.Empty;
        string sNarration = string.Empty;
        string sVoucherType = string.Empty;
        string oldTransDate = string.Empty;

        DataSet dsOld = new DataSet();
        DataSet roleDs = new DataSet();
        DateTime sBilldate;

        int TransNo = 0;
        int oldDebitID = 0;
        int oldBillNo = 0;
        int oldCreditID = 0;
        double oldAmt = 0;
        int creditorID = 2;
        int DebtorID = 0;
        //int BillNo = 0;
        int salesID = 0;
        int iSno = 0;
        StringBuilder dbQryData = new StringBuilder();
        string[] sDate;
        string delim = "/";
        char[] delimA = delim.ToCharArray();

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID

            try
            {
                sDate = BillDate.Trim().Split(delimA);
                sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));

                dbQryRecDate = "Select recon_date from last_recon";

                object recDateVal = manager.ExecuteScalar(CommandType.Text, dbQryRecDate);

                if ((recDateVal != null) && (recDateVal != DBNull.Value))
                {

                    dbQryData.Append("SELECT tblSales.Billno,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerID As DebtorID, Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,OtherCusName,tblSales.CustomerAddress2,tblSales.CustomerAddress3,tblSales.executivename");
                    dbQryData.Append(" FROM (((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID))");
                    dbQryData.Append(" Where tblSales.Billno=" + Billno + " AND tblSales.BillDate > #" + DateTime.Parse(recDateVal.ToString()).ToString("MM/dd/yyyy") + "# ORDER BY tblSales.BillDate Desc,tblSales.Billno Desc");
                }
                else
                {
                    dbQryData.Append("SELECT tblSales.Billno,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerID As DebtorID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,OtherCusName,tblSales.CustomerAddress2,tblSales.CustomerAddress3,tblSales.executivename");
                    dbQryData.Append(" FROM (((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID))");
                    dbQryData.Append(" ORDER BY tblSales.BillDate Desc,tblSales.Billno Desc");
                }

                dsOld = manager.ExecuteDataSet(CommandType.Text, dbQryData.ToString());

                if (dsOld != null)
                {
                    if (dsOld != null)
                    {
                        if (dsOld.Tables[0].Rows.Count > 0)
                        {
                            if (dsOld.Tables[0].Rows[0]["JournalID"] != null)
                            {
                                if (dsOld.Tables[0].Rows[0]["JournalID"].ToString() != string.Empty)
                                {
                                    TransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["JournalID"].ToString());
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to find sales details for Sales BillNo :" + Billno.ToString());
                        }
                    }
                    else
                    {
                        throw new Exception("Unable to find sales details for Sales BillNo :" + Billno.ToString());
                    }


                    dbQry = string.Format("Select DebtorID,CreditorID,Amount,transDate from tblDaybook Where TransNo={0}", TransNo);

                    dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);

                    if (dsOld != null)
                    {
                        if (dsOld.Tables[0].Rows.Count == 1)
                        {
                            oldBillNo = Billno;
                            oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                            oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                            oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                            oldTransDate = Convert.ToString(dsOld.Tables[0].Rows[0]["transDate"]);
                        }
                        else
                        {
                            throw new Exception("More than 1 row found in tblDaybook for TransNo :" + TransNo.ToString());
                        }

                    }

                    dbQry = string.Format("SELECT Qty,ItemCode,RoleID,isRole From tblSalesItems Where Billno={0}", Billno);
                    DataSet salesDSData = (DataSet)manager.ExecuteDataSet(CommandType.Text, dbQry);

                    if (salesDSData != null)
                    {
                        if (salesDSData.Tables.Count > 0)
                        {
                            foreach (DataRow dr in salesDSData.Tables[0].Rows)
                            {
                                dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock + {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);
                            }
                        }
                    }

                    //Create log entries in Audit table before deleting.

                    dbQry = string.Format("INSERT INTO tblAuditSalesItems Select * From tblSalesItems Where BillNo={0}", Billno);
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    dbQry = string.Format("Delete From tblSalesItems Where BillNo={0}", Billno);
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                }
                //End Deleting the old record

                if (paymode == 1)
                    DebtorID = 1;
                else if (paymode == 2)
                    DebtorID = BankName;
                else
                    DebtorID = sCustomerID;

                //Sales A/c -2 will always be the Creditor

                if (purchasereturn.ToUpper() == "NO")
                    sVoucherType = "Sales";
                else
                    sVoucherType = "Purchase Return";

                sNarration = sVoucherType + " - Bill No:" + Billno;

                dbQry = string.Format("UPDATE tblDayBook SET TransDate = Format('{0}', 'dd/mm/yyyy'),DebtorID={1},CreditorID={2},Amount={3},Narration='{4}',VoucherType='{5}',CreditCardNo='{6}',RefNo={7} WHERE TransNo={8} ",
                sBilldate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, sCreditCardno, 0, TransNo);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                dbQry = string.Format("UPDATE tblSales SET SeriesID={14},BillDate=Format('{1}', 'dd/mm/yyyy'),JournalID={2},CustomerID={3},CustomerName='{4}',CustomerAddress='{5}',CustomerContacts='{6}',Paymode={7},purchaseReturn='{8}',purchaseReturnReason='{9}',executive='{10}',freight={11},LoadUnload={12},OtherCusName='{13}', InternalTransfer='{15}',DeliveryNote='{16}',CustomerAddress2='{17}',CustomerAddress3='{18}',executivename='{19}' WHERE Billno={0}",
                Billno, sBilldate.ToShortDateString(), TransNo, sCustomerID, sCustomerName, sCustomerAddress, sCustomerContact, paymode, purchasereturn, prreason, executive, freight, dLU, sOtherCusName, Series, intTrans, deliveryNote, sCustomerAddress2, sCustomerAddress3, executivename);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                //Adding the Sales Items Table

                if (salesDS != null)
                {
                    if (salesDS.Tables.Count > 0)
                    {
                        foreach (DataRow dr in salesDS.Tables[0].Rows)
                        {
                            iSno = iSno + 1;
                            object returnStock = manager.ExecuteScalar(CommandType.Text, "Select stock from tblProductMaster WHERE itemCode='" + Convert.ToString(dr["ItemCode"]) + "'");
                            if ((returnStock != null) && (returnStock != DBNull.Value))
                            {
                                if (Convert.ToDouble(returnStock) < Convert.ToDouble(dr["Qty"]))
                                {
                                    salesID = -1;
                                    return salesID;
                                }

                            }

                            dbQry = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,isrole,CST,Bundles,Rods,ExecIncharge,ExecCharge) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10},{11},{12})", Billno, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), iSno, Convert.ToString(dr["isRole"]), Convert.ToDouble(dr["CST"]), Convert.ToInt32(dr["Bundles"]), Convert.ToInt32(dr["Rods"]), 0, Convert.ToDouble(dr["ExecCharge"]));
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                            dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock - {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        }

                        iSno = 0;
                    }
                }

                sAuditStr = "Sales Transaction: " + TransNo + " got edited. Old Record Details : Bill No=" + oldBillNo + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt + ",TransDate=" + oldTransDate + " DateTime:" + DateTime.Now.ToString() + " User:" + UserID;

                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command) VALUES('{0}','{1}')", sAuditStr, "Edit and Update");
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                manager.CommitTransaction();
                return Billno;
            }
            catch (Exception e)
            {
                manager.Transaction.Rollback();
                throw e;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public int UpdateSalesNewOld2(string Series, int Billno, string BillDate, int sCustomerID, string sCustomerName, string sCustomerAddress, string sCustomerContact, int paymode, string sCreditCardno, int BankName, double Amount, string purchasereturn, string prreason, int executive, double freight, double dLU, DataSet salesDS, String sOtherCusName, string intTrans, string UserID, string deliveryNote, string sCustomerAddress2, string sCustomerAddress3)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        CultureInfo culture = new CultureInfo("pt-BR");
        string dbQry = string.Empty;
        string sQry = string.Empty;
        string sAuditStr = string.Empty;
        string dbQryRecDate = string.Empty;
        string sNarration = string.Empty;
        string sVoucherType = string.Empty;
        string oldTransDate = string.Empty;

        DataSet dsOld = new DataSet();
        DataSet roleDs = new DataSet();
        DateTime sBilldate;

        int TransNo = 0;
        int oldDebitID = 0;
        int oldBillNo = 0;
        int oldCreditID = 0;
        double oldAmt = 0;
        int creditorID = 2;
        int DebtorID = 0;
        //int BillNo = 0;
        int salesID = 0;
        int iSno = 0;
        StringBuilder dbQryData = new StringBuilder();
        string[] sDate;
        string delim = "/";
        char[] delimA = delim.ToCharArray();

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID

            try
            {
                sDate = BillDate.Trim().Split(delimA);
                sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));

                dbQryRecDate = "Select recon_date from last_recon";

                object recDateVal = manager.ExecuteScalar(CommandType.Text, dbQryRecDate);

                if ((recDateVal != null) && (recDateVal != DBNull.Value))
                {

                    dbQryData.Append("SELECT tblSales.Billno,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerID As DebtorID, Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,OtherCusName,tblSales.CustomerAddress2,tblSales.CustomerAddress3");
                    dbQryData.Append(" FROM (((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID))");
                    dbQryData.Append(" Where tblSales.Billno=" + Billno + " AND tblSales.BillDate > #" + DateTime.Parse(recDateVal.ToString()).ToString("MM/dd/yyyy") + "# ORDER BY tblSales.BillDate Desc,tblSales.Billno Desc");
                }
                else
                {
                    dbQryData.Append("SELECT tblSales.Billno,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerID As DebtorID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,OtherCusName,tblSales.CustomerAddress2,tblSales.CustomerAddress3");
                    dbQryData.Append(" FROM (((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID))");
                    dbQryData.Append(" ORDER BY tblSales.BillDate Desc,tblSales.Billno Desc");
                }

                dsOld = manager.ExecuteDataSet(CommandType.Text, dbQryData.ToString());

                if (dsOld != null)
                {
                    if (dsOld != null)
                    {
                        if (dsOld.Tables[0].Rows.Count > 0)
                        {
                            if (dsOld.Tables[0].Rows[0]["JournalID"] != null)
                            {
                                if (dsOld.Tables[0].Rows[0]["JournalID"].ToString() != string.Empty)
                                {
                                    TransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["JournalID"].ToString());
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to find sales details for Sales BillNo :" + Billno.ToString());
                        }
                    }
                    else
                    {
                        throw new Exception("Unable to find sales details for Sales BillNo :" + Billno.ToString());
                    }


                    dbQry = string.Format("Select DebtorID,CreditorID,Amount,transDate from tblDaybook Where TransNo={0}", TransNo);

                    dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);

                    if (dsOld != null)
                    {
                        if (dsOld.Tables[0].Rows.Count == 1)
                        {
                            oldBillNo = Billno;
                            oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                            oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                            oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                            oldTransDate = Convert.ToString(dsOld.Tables[0].Rows[0]["transDate"]);
                        }
                        else
                        {
                            throw new Exception("More than 1 row found in tblDaybook for TransNo :" + TransNo.ToString());
                        }

                    }

                    dbQry = string.Format("SELECT Qty,ItemCode,RoleID,isRole From tblSalesItems Where Billno={0}", Billno);
                    DataSet salesDSData = (DataSet)manager.ExecuteDataSet(CommandType.Text, dbQry);

                    if (salesDSData != null)
                    {
                        if (salesDSData.Tables.Count > 0)
                        {
                            foreach (DataRow dr in salesDSData.Tables[0].Rows)
                            {
                                dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock + {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);
                            }
                        }
                    }

                    //Create log entries in Audit table before deleting.

                    dbQry = string.Format("INSERT INTO tblAuditSalesItems Select * From tblSalesItems Where BillNo={0}", Billno);
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    dbQry = string.Format("Delete From tblSalesItems Where BillNo={0}", Billno);
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                }
                //End Deleting the old record

                if (paymode == 1)
                    DebtorID = 1;
                else if (paymode == 2)
                    DebtorID = BankName;
                else
                    DebtorID = sCustomerID;

                //Sales A/c -2 will always be the Creditor

                if (purchasereturn.ToUpper() == "NO")
                    sVoucherType = "Sales";
                else
                    sVoucherType = "Purchase Return";

                sNarration = sVoucherType + " - Bill No:" + Billno;

                dbQry = string.Format("UPDATE tblDayBook SET TransDate = Format('{0}', 'dd/mm/yyyy'),DebtorID={1},CreditorID={2},Amount={3},Narration='{4}',VoucherType='{5}',CreditCardNo='{6}',RefNo={7} WHERE TransNo={8} ",
                sBilldate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, sCreditCardno, 0, TransNo);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                dbQry = string.Format("UPDATE tblSales SET SeriesID={14},BillDate=Format('{1}', 'dd/mm/yyyy'),JournalID={2},CustomerID={3},CustomerName='{4}',CustomerAddress='{5}',CustomerContacts='{6}',Paymode={7},purchaseReturn='{8}',purchaseReturnReason='{9}',executive='{10}',freight={11},LoadUnload={12},OtherCusName='{13}', InternalTransfer='{15}',DeliveryNote='{16}',CustomerAddress2='{17}',CustomerAddress3='{18}' WHERE Billno={0}",
                Billno, sBilldate.ToShortDateString(), TransNo, sCustomerID, sCustomerName, sCustomerAddress, sCustomerContact, paymode, purchasereturn, prreason, executive, freight, dLU, sOtherCusName, Series, intTrans, deliveryNote, sCustomerAddress2, sCustomerAddress3);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                //Adding the Sales Items Table

                if (salesDS != null)
                {
                    if (salesDS.Tables.Count > 0)
                    {
                        foreach (DataRow dr in salesDS.Tables[0].Rows)
                        {
                            iSno = iSno + 1;
                            object returnStock = manager.ExecuteScalar(CommandType.Text, "Select stock from tblProductMaster WHERE itemCode='" + Convert.ToString(dr["ItemCode"]) + "'");
                            if ((returnStock != null) && (returnStock != DBNull.Value))
                            {
                                if (Convert.ToDouble(returnStock) < Convert.ToDouble(dr["Qty"]))
                                {
                                    salesID = -1;
                                    return salesID;
                                }

                            }

                            dbQry = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,isrole,CST,Bundles,Rods,ExecIncharge,ExecCharge) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10},{11},{12})", Billno, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), iSno, Convert.ToString(dr["isRole"]), Convert.ToDouble(dr["CST"]), Convert.ToInt32(dr["Bundles"]), Convert.ToInt32(dr["Rods"]), 0, Convert.ToDouble(dr["ExecCharge"]));
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                            dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock - {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        }

                        iSno = 0;
                    }
                }

                sAuditStr = "Sales Transaction: " + TransNo + " got edited. Old Record Details : Bill No=" + oldBillNo + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt + ",TransDate=" + oldTransDate + " DateTime:" + DateTime.Now.ToString() + " User:" + UserID;

                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command) VALUES('{0}','{1}')", sAuditStr, "Edit and Update");
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                manager.CommitTransaction();
                return Billno;
            }
            catch (Exception e)
            {
                manager.Transaction.Rollback();
                throw e;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public int UpdateSalesNewOldSenthil(string Series, int Billno, string BillDate, int sCustomerID, string sCustomerName, string sCustomerAddress, string sCustomerContact, int paymode, string sCreditCardno, int BankName, double Amount, string purchasereturn, string prreason, int executive, double freight, double dLU, DataSet salesDS, String sOtherCusName, string intTrans, string UserID, string deliveryNote)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        CultureInfo culture = new CultureInfo("pt-BR");
        string dbQry = string.Empty;
        string sQry = string.Empty;
        string sAuditStr = string.Empty;
        string dbQryRecDate = string.Empty;
        string sNarration = string.Empty;
        string sVoucherType = string.Empty;
        string oldTransDate = string.Empty;

        DataSet dsOld = new DataSet();
        DataSet roleDs = new DataSet();
        DateTime sBilldate;

        int TransNo = 0;
        int oldDebitID = 0;
        int oldBillNo = 0;
        int oldCreditID = 0;
        double oldAmt = 0;
        int creditorID = 2;
        int DebtorID = 0;
        //int BillNo = 0;
        int salesID = 0;
        int iSno = 0;
        StringBuilder dbQryData = new StringBuilder();
        string[] sDate;
        string delim = "/";
        char[] delimA = delim.ToCharArray();

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID

            try
            {
                sDate = BillDate.Trim().Split(delimA);
                sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));

                dbQryRecDate = "Select recon_date from last_recon";

                object recDateVal = manager.ExecuteScalar(CommandType.Text, dbQryRecDate);

                if ((recDateVal != null) && (recDateVal != DBNull.Value))
                {

                    dbQryData.Append("SELECT tblSales.Billno,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerID As DebtorID, Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,OtherCusName");
                    dbQryData.Append(" FROM (((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID))");
                    dbQryData.Append(" Where tblSales.Billno=" + Billno + " AND tblSales.BillDate > #" + DateTime.Parse(recDateVal.ToString()).ToString("MM/dd/yyyy") + "# ORDER BY tblSales.BillDate Desc,tblSales.Billno Desc");
                }
                else
                {
                    dbQryData.Append("SELECT tblSales.Billno,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerID As DebtorID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,OtherCusName");
                    dbQryData.Append(" FROM (((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID))");
                    dbQryData.Append(" ORDER BY tblSales.BillDate Desc,tblSales.Billno Desc");
                }

                dsOld = manager.ExecuteDataSet(CommandType.Text, dbQryData.ToString());

                if (dsOld != null)
                {
                    if (dsOld != null)
                    {
                        if (dsOld.Tables[0].Rows.Count > 0)
                        {
                            if (dsOld.Tables[0].Rows[0]["JournalID"] != null)
                            {
                                if (dsOld.Tables[0].Rows[0]["JournalID"].ToString() != string.Empty)
                                {
                                    TransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["JournalID"].ToString());
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to find sales details for Sales BillNo :" + Billno.ToString());
                        }
                    }
                    else
                    {
                        throw new Exception("Unable to find sales details for Sales BillNo :" + Billno.ToString());
                    }


                    dbQry = string.Format("Select DebtorID,CreditorID,Amount,transDate from tblDaybook Where TransNo={0}", TransNo);

                    dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);

                    if (dsOld != null)
                    {
                        if (dsOld.Tables[0].Rows.Count == 1)
                        {
                            oldBillNo = Billno;
                            oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                            oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                            oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                            oldTransDate = Convert.ToString(dsOld.Tables[0].Rows[0]["transDate"]);
                        }
                        else
                        {
                            throw new Exception("More than 1 row found in tblDaybook for TransNo :" + TransNo.ToString());
                        }

                    }

                    dbQry = string.Format("SELECT Qty,ItemCode,RoleID,isRole From tblSalesItems Where Billno={0}", Billno);
                    DataSet salesDSData = (DataSet)manager.ExecuteDataSet(CommandType.Text, dbQry);

                    if (salesDSData != null)
                    {
                        if (salesDSData.Tables.Count > 0)
                        {
                            foreach (DataRow dr in salesDSData.Tables[0].Rows)
                            {
                                dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock + {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);
                            }
                        }
                    }

                    //Create log entries in Audit table before deleting.

                    dbQry = string.Format("INSERT INTO tblAuditSalesItems Select * From tblSalesItems Where BillNo={0}", Billno);
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    dbQry = string.Format("Delete From tblSalesItems Where BillNo={0}", Billno);
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                }
                //End Deleting the old record

                if (paymode == 1)
                    DebtorID = 1;
                else if (paymode == 2)
                    DebtorID = BankName;
                else
                    DebtorID = sCustomerID;

                //Sales A/c -2 will always be the Creditor

                if (purchasereturn.ToUpper() == "NO")
                    sVoucherType = "Sales";
                else
                    sVoucherType = "Purchase Return";

                sNarration = sVoucherType + " - Bill No:" + Billno;

                dbQry = string.Format("UPDATE tblDayBook SET TransDate = Format('{0}', 'dd/mm/yyyy'),DebtorID={1},CreditorID={2},Amount={3},Narration='{4}',VoucherType='{5}',CreditCardNo='{6}',RefNo={7} WHERE TransNo={8} ",
                sBilldate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, sCreditCardno, 0, TransNo);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                dbQry = string.Format("UPDATE tblSales SET SeriesID={14},BillDate=Format('{1}', 'dd/mm/yyyy'),JournalID={2},CustomerID={3},CustomerName='{4}',CustomerAddress='{5}',CustomerContacts='{6}',Paymode={7},purchaseReturn='{8}',purchaseReturnReason='{9}',executive='{10}',freight={11},LoadUnload={12},OtherCusName='{13}', InternalTransfer='{15}',DeliveryNote='{16}' WHERE Billno={0}",
                Billno, sBilldate.ToShortDateString(), TransNo, sCustomerID, sCustomerName, sCustomerAddress, sCustomerContact, paymode, purchasereturn, prreason, executive, freight, dLU, sOtherCusName, Series, intTrans, deliveryNote);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                //Adding the Sales Items Table

                if (salesDS != null)
                {
                    if (salesDS.Tables.Count > 0)
                    {
                        foreach (DataRow dr in salesDS.Tables[0].Rows)
                        {
                            iSno = iSno + 1;
                            object returnStock = manager.ExecuteScalar(CommandType.Text, "Select stock from tblProductMaster WHERE itemCode='" + Convert.ToString(dr["ItemCode"]) + "'");
                            if ((returnStock != null) && (returnStock != DBNull.Value))
                            {
                                if (Convert.ToDouble(returnStock) < Convert.ToDouble(dr["Qty"]))
                                {
                                    salesID = -1;
                                    return salesID;
                                }

                            }

                            dbQry = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,isrole,CST,Bundles,Rods,ExecIncharge,ExecCharge) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10},{11},{12})", Billno, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), iSno, Convert.ToString(dr["isRole"]), Convert.ToDouble(dr["CST"]), Convert.ToInt32(dr["Bundles"]), Convert.ToInt32(dr["Rods"]), 0, Convert.ToDouble(dr["ExecCharge"]));
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                            dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock - {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        }

                        iSno = 0;
                    }
                }

                sAuditStr = "Sales Transaction: " + TransNo + " got edited. Old Record Details : Bill No=" + oldBillNo + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt + ",TransDate=" + oldTransDate + " DateTime:" + DateTime.Now.ToString() + " User:" + UserID;

                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command) VALUES('{0}','{1}')", sAuditStr, "Edit and Update");
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                manager.CommitTransaction();
                return Billno;
            }
            catch (Exception e)
            {
                manager.Transaction.Rollback();
                throw e;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public void DeleteSalesNew(string connection, int Billno, string UserID, string branchcode)
    {
        //DBManager manager = new DBManager(DataProvider.SqlServer);
        //manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();


        string dbQry = string.Empty;
        string sQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldDebitID = 0;
        int oldCreditID = 0;
        double oldAmt = 0;
        string transdate = string.Empty;
        DataSet roleDs = new DataSet();
        string sNarration = string.Empty;
        int creditorID = 0;
        int DebtorID = 3;

        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        string dbQry2 = string.Empty;
        DataSet dsd = new DataSet();

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID
            dsOld = GetSalesForId(connection, Billno,branchcode);

            if (dsOld != null)
            {
                if (dsOld.Tables[0].Rows.Count > 0)
                {
                    if (dsOld.Tables[0].Rows[0]["JournalID"] != null)
                    {
                        if (dsOld.Tables[0].Rows[0]["JournalID"].ToString() != string.Empty)
                        {
                            TransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["JournalID"].ToString());
                        }
                    }
                }
            }
            dbQry = string.Format("Select DebtorID,CreditorID,Amount,transDate from tblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables[0].Rows.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                    transdate = Convert.ToString(dsOld.Tables[0].Rows[0]["transDate"]);
                }

            }



            //Start Save in Log table

            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                description = string.Format("SELECT Qty,ItemCode,RoleID,isRole From tblSalesItems Where Billno={0} and BranchCode='{1}'", Billno,branchcode);
                DataSet salDS = (DataSet)manager.ExecuteDataSet(CommandType.Text, description);
                if (salDS != null)
                {
                    if (salDS.Tables.Count > 0)
                    {
                        foreach (DataRow dr in salDS.Tables[0].Rows)
                        {
                            logdescription = string.Format("UPDATE tblProductStock SET tblProductStock.Stock =  tblProductStock.Stock + {0} WHERE ItemCode={1} and BranchCode={2}", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim(), branchcode);
                            logdescription = logdescription.Trim();
                            description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES'{0}','{1}','{2}','{3}','{4}')",
                                    DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), UserID, Billno, "DeleteSalesNew");
                            manager.ExecuteNonQuery(CommandType.Text, description);
                        }
                    }
                }
            }


            //End Save in Log table


            //Step 1 - Start

            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", oldDebitID);
            //double DebitDel = 0;
            //object retDebitDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retDebitDel != null) && (retDebitDel != DBNull.Value))
            //{
            //    DebitDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}

            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", DebitDel - oldAmt, oldDebitID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", oldCreditID);
            //double CreditDel = 0;
            //object retCreditDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retCreditDel != null) && (retCreditDel != DBNull.Value))
            //{
            //    CreditDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}

            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", CreditDel - oldAmt, oldCreditID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //Step 1 - End


            //Step 2 - Start
            //Start Delete the old record         

            dbQry = string.Format("SELECT Qty,ItemCode,RoleID,isRole From tblSalesItems Where Billno={0} and BranchCode='{1}'", Billno,branchcode);
            DataSet salesDS = (DataSet)manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (salesDS != null)
            {
                if (salesDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in salesDS.Tables[0].Rows)
                    {
                        dbQry = string.Format("UPDATE tblProductStock SET tblProductStock.Stock =  tblProductStock.Stock + {0} WHERE ItemCode='{1}' and BranchCode='{2}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim(), branchcode);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        if (dr["isRole"] != null)
                        {
                            if (Convert.ToString(dr["isrole"]) == "Y")
                            {
                                sQry = "SELECT roleID,Qty_bought FROM tblSalesRole WHERE itemcode='" + Convert.ToString(dr["ItemCode"]).Trim() + "' AND Billno=" + Billno;
                                roleDs = manager.ExecuteDataSet(CommandType.Text, sQry);
                                if (roleDs != null)
                                {
                                    if (roleDs.Tables[0].Rows.Count > 0)
                                    {
                                        foreach (DataRow dR in roleDs.Tables[0].Rows)
                                        {
                                            dbQry = string.Format("Update tblItemRoleMaster SET Qty_Available = Qty_Available + {1}  WHERE RoleID={0}", Convert.ToInt32(dR["RoleID"]), Convert.ToDouble(dR["Qty_bought"]));
                                            manager.ExecuteNonQuery(CommandType.Text, dbQry);
                                        }
                                        sQry = "DELETE FROM tblSalesRole WHERE itemcode='" + Convert.ToString(dr["ItemCode"]).Trim() + "' AND Billno=" + Billno;
                                        manager.ExecuteNonQuery(CommandType.Text, sQry);
                                    }
                                }

                            }
                        }
                    }
                }
            }


            if (Logsave == "YES")
            {
                logdescription = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                        DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), UserID, TransNo, "DeleteSalesNew");
                manager.ExecuteNonQuery(CommandType.Text, description);

                logdescription = string.Format("Delete From tblSales Where BillNo={0} and BranchCode='{1}'", Billno,branchcode);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                        DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), UserID, Billno, "DeleteSalesNew");
                manager.ExecuteNonQuery(CommandType.Text, description);

                logdescription = string.Format("Delete From tblSalesItems Where BillNo={0} and BranchCode='{1}'", Billno,branchcode);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                        DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), UserID, Billno, "DeleteSalesNew");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }


            dbQry = string.Format("INSERT INTO tblAuditDayBook Select * From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("INSERT INTO tblAuditSales Select * From tblSales Where BillNo={0} and BranchCode='{1}'", Billno,branchcode);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblSales Where BillNo={0} and BranchCode='{1}'", Billno,branchcode);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("INSERT INTO tblAuditSalesItems Select * From tblSalesItems Where BillNo={0} and BranchCode='{1}'", Billno,branchcode);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblSalesItems Where BillNo={0} and BranchCode='{1}'", Billno,branchcode);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Deleting the old record

            sAuditStr = "Sales Transaction: " + TransNo + " got deleted old Record Details : User Name : " + UserID + ", DebtorID= " + oldDebitID + " ,CreditorID= " + oldCreditID + ",Amount= " + oldAmt + ",TransDate= " + transdate + ", DateTime:" + transdate;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}', '{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public int DeleteSalesProduct(int billno, string itemCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();

        DataSet roleDs = new DataSet();

        string dbQry = string.Empty;
        string sQry = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            dbQry = string.Format("SELECT Qty,ItemCode,RoleID,isRole From tblSalesItems Where Billno={0} AND itemcode='{1}'", billno, itemCode.Trim());
            DataSet salesDS = (DataSet)manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (salesDS != null)
            {
                if (salesDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in salesDS.Tables[0].Rows)
                    {
                        dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock + {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        if (dr["isRole"] != null)
                        {
                            if (Convert.ToString(dr["isrole"]) == "Y")
                            {
                                sQry = "SELECT roleID,Qty_bought FROM tblSalesRole WHERE itemcode='" + Convert.ToString(dr["ItemCode"]).Trim() + "' AND Billno=" + billno;
                                roleDs = manager.ExecuteDataSet(CommandType.Text, sQry);
                                if (roleDs != null)
                                {
                                    if (roleDs.Tables[0].Rows.Count > 0)
                                    {
                                        foreach (DataRow dR in roleDs.Tables[0].Rows)
                                        {
                                            dbQry = string.Format("Update tblItemRoleMaster SET Qty_Available = Qty_Available + {1}  WHERE RoleID={0}", Convert.ToInt32(dR["RoleID"]), Convert.ToDouble(dR["Qty_bought"]));
                                            manager.ExecuteNonQuery(CommandType.Text, dbQry);
                                        }
                                        sQry = "DELETE FROM tblSalesRole WHERE itemcode='" + Convert.ToString(dr["ItemCode"]).Trim() + "' AND Billno=" + billno;
                                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                                    }
                                }

                            }
                        }
                    }
                    dbQry = string.Format("Delete From tblSalesItems Where Billno={0} AND itemcode='{1}'", billno, itemCode.Trim());
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                }
            }
            return -1;
            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetSalesForId(int Billno,string branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        //DBManager manager = new DBManager(DataProvider.SqlServer);
        //manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            // object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {

                dbQry.Append("SELECT tblDayBook.Transno,tblSales.Billno,tblSales.DeliveryNote,tblSales.InternalTransfer,tblSales.cuscategory,tblSales.SeriesID,Format(tblSales.Billdate, 'dd/MM/yyyy') As BillDate,tblSales.DuplicateCopy,tblSales.Check1,tblSales.CustomerIdMobile,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerID As DebtorID, Debtor.LedgerName As Debtor,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,OtherCusName, Customer.ContactName, MultiPayment,tblSales.CustomerAddress2,tblSales.CustomerAddress3, tblSales.despatchedfrom, tblSales.manualNo, tblSales.manualsales, tblSales.normalsales,tblSales.Types,tblsales.narration2,tblSales.BranchCode ");
                dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID) INNER JOIN tblLedger Customer ON tblSales.CustomerID = Customer.LedgerID))");
                dbQry.Append(" Where tblSales.BranchCode='" + branchcode + "' and tblSales.Billno=" + Billno + " AND tblSales.BillDate > " + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + " ORDER BY tblSales.BillDate Desc,tblSales.Billno Desc");

            }
            else
            {
                dbQry.Append("SELECT tblDayBook.Transno,tblSales.Billno,tblSales.DeliveryNote,tblSales.InternalTransfer,tblSales.cuscategory,tblSales.SeriesID,Format(tblSales.Billdate, 'dd/MM/yyyy') As BillDate,tblSales.DuplicateCopy,tblSales.CustomerID,tblSales.Check1,tblSales.CustomerIdMobile,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerID As DebtorID,Debtor.LedgerName As Debtor,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,OtherCusName, Customer.ContactName,MultiPayment,tblSales.CustomerAddress2,tblSales.CustomerAddress3,  tblSales.despatchedfrom, tblSales.manualNo, tblSales.manualsales, tblSales.normalsales,tblSales.Types,tblsales.narration2,tblSales.BranchCode");
                dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID) INNER JOIN tblLedger Customer ON tblSales.CustomerID = Customer.LedgerID))");
                dbQry.Append(" Where tblSales.BranchCode='" + branchcode + "' ORDER BY tblSales.BillDate Desc,tblSales.Billno Desc");
            }
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet GetSalesForId(string connection, int Billno,string branchcode)
    {
        //DBManager manager = new DBManager(DataProvider.SqlServer);
        //manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            // object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {

                dbQry.Append("SELECT tblDayBook.Transno,tblSales.Billno,tblSales.DeliveryNote,tblSales.InternalTransfer,tblSales.SeriesID,Format(tblSales.Billdate, 'dd/MM/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerID As DebtorID, Debtor.LedgerName As Debtor,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,OtherCusName, Customer.ContactName, MultiPayment,tblSales.CustomerAddress2,tblSales.CustomerAddress3, tblSales.despatchedfrom, tblSales.manualNo, tblSales.manualsales, tblSales.normalsales");
                dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID) INNER JOIN tblLedger Customer ON tblSales.CustomerID = Customer.LedgerID))");
                dbQry.Append(" Where tblSales.Billno=" + Billno + " AND tblSales.BranchCode='" + branchcode + "' AND tblSales.BillDate > " + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + " ORDER BY tblSales.BillDate Desc,tblSales.Billno Desc");

            }
            else
            {
                dbQry.Append("SELECT tblDayBook.Transno,tblSales.Billno,tblSales.DeliveryNote,tblSales.InternalTransfer,tblSales.SeriesID,Format(tblSales.Billdate, 'dd/MM/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerID As DebtorID,Debtor.LedgerName As Debtor,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,OtherCusName, Customer.ContactName,MultiPayment,tblSales.CustomerAddress2,tblSales.CustomerAddress3,  tblSales.despatchedfrom, tblSales.manualNo, tblSales.manualsales, tblSales.normalsales");
                dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID) INNER JOIN tblLedger Customer ON tblSales.CustomerID = Customer.LedgerID))");
                dbQry.Append(" ORDER BY tblSales.BillDate Desc,tblSales.Billno Desc");
            }
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet getSalesForIdOldSenthil(int Billno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            // object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {

                dbQry.Append("SELECT tblDayBook.Transno,tblSales.Billno,tblSales.DeliveryNote,tblSales.InternalTransfer,tblSales.SeriesID,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerID As DebtorID, Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,OtherCusName, Customer.ContactName, MultiPayment");
                dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID) INNER JOIN tblLedger Customer ON tblSales.CustomerID = Customer.LedgerID))");
                dbQry.Append(" Where tblSales.Billno=" + Billno + " AND tblSales.BillDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ORDER BY tblSales.BillDate Desc,tblSales.Billno Desc");

            }
            else
            {
                dbQry.Append("SELECT tblDayBook.Transno,tblSales.Billno,tblSales.DeliveryNote,tblSales.InternalTransfer,tblSales.SeriesID,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerID As DebtorID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,OtherCusName, Customer.ContactName,MultiPayment");
                dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID) INNER JOIN tblLedger Customer ON tblSales.CustomerID = Customer.LedgerID))");
                dbQry.Append(" ORDER BY tblSales.BillDate Desc,tblSales.Billno Desc");
            }
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet GetSalesForId(int Billno, int TransNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            // object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {

                dbQry.Append("SELECT tblDayBook.Transno,tblSales.Billno,tblSales.InternalTransfer,tblSales.SeriesID,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerID As DebtorID, Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,OtherCusName, Customer.ContactName, MultiPayment,tblSales.CustomerAddress2,tblSales.CustomerAddress3,tblSales.despatchedfrom,tblSales.manualNo,tblSales.NormalSales,tblSales.deliveryNote,tblSales.ManualSales");
                dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID) INNER JOIN tblLedger Customer ON tblSales.CustomerID = Customer.LedgerID))");
                dbQry.Append(" Where tblSales.BillDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ");

            }
            else
            {
                dbQry.Append("SELECT tblDayBook.Transno,tblSales.Billno,tblSales.InternalTransfer,tblSales.SeriesID,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerID As DebtorID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,OtherCusName, Customer.ContactName,MultiPayment,tblSales.CustomerAddress2,tblSales.CustomerAddress3,tblSales.despatchedfrom,tblSales.manualNo,tblSales.NormalSales,tblSales.deliveryNote,tblSales.ManualSales");
                dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID) INNER JOIN tblLedger Customer ON tblSales.CustomerID = Customer.LedgerID))");
                dbQry.Append(" Where 1=1 ");
            }

            if (Billno.ToString() != "0")
                dbQry.Append(" AND tblSales.Billno=" + Billno + "");

            if (TransNo.ToString() != "0")
                dbQry.Append(" AND tblDayBook.TransNo = " + TransNo + "");

            dbQry.Append(" ORDER BY tblSales.BillDate Desc,tblSales.Billno Desc");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetSalesForIdOldSenthil(int Billno, int TransNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            // object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {

                dbQry.Append("SELECT tblDayBook.Transno,tblSales.Billno,tblSales.InternalTransfer,tblSales.SeriesID,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerID As DebtorID, Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,OtherCusName, Customer.ContactName, MultiPayment");
                dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID) INNER JOIN tblLedger Customer ON tblSales.CustomerID = Customer.LedgerID))");
                dbQry.Append(" Where tblSales.BillDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ");

            }
            else
            {
                dbQry.Append("SELECT tblDayBook.Transno,tblSales.Billno,tblSales.InternalTransfer,tblSales.SeriesID,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerID As DebtorID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,OtherCusName, Customer.ContactName,MultiPayment");
                dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID) INNER JOIN tblLedger Customer ON tblSales.CustomerID = Customer.LedgerID))");
                dbQry.Append(" Where 1=1 ");
            }

            if (Billno.ToString() != "0")
                dbQry.Append(" AND tblSales.Billno=" + Billno + "");

            if (TransNo.ToString() != "0")
                dbQry.Append(" AND tblDayBook.TransNo = " + TransNo + "");

            dbQry.Append(" ORDER BY tblSales.BillDate Desc,tblSales.Billno Desc");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetSalesBill(int billno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();

            dbQry.Append("SELECT itemCode,Sum(Qty) As Quantity,Rate ,Sum( (Qty * Rate) - ((discount/100) * Qty * Rate) + ((VAT/100) * ((Qty * Rate) - ((discount/100) * Qty * Rate)))+ ((CST/100) * ((Qty * Rate) - ((discount/100) * Qty * Rate)))) As Total FROM tblSalesItems");
            dbQry.Append(" Group By itemcode,rate,billno having billno=" + billno);


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public double GetSalesPendingAmount(int billno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        double TotalAmount = 0.0;
        double TotalReceived = 0.0;
        try
        {

            manager.Open();

            dbQry.Append("SELECT Sum(Amount) As Total FROM tblSales Inner Join tblDayBook On tblSales.JournalId = tblDayBook.TransNo Where tblSales.BillNo=" + billno.ToString());

            var amount = manager.ExecuteScalar(CommandType.Text, dbQry.ToString());

            if (!string.IsNullOrEmpty(amount.ToString()))
                TotalAmount = double.Parse(amount.ToString());

            dbQry.Length = 0;

            dbQry.Append("SELECT Sum(Amount) As Total FROM tblReceivedAmount Where BillNo=" + billno.ToString());

            var AmountReceived = manager.ExecuteScalar(CommandType.Text, dbQry.ToString());

            if (!string.IsNullOrEmpty(AmountReceived.ToString()))
                TotalReceived = double.Parse(AmountReceived.ToString());

            return (TotalAmount - TotalReceived);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public int GetIfBillNoExists(int billno, string customerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        int Exists = 0;

        try
        {

            manager.Open();

            dbQry.Append("SELECT Count(*) FROM tblSales Where BillNo=" + billno.ToString() + " AND CustomerID=" + customerID + " AND PayMode=3 ");

            var count = manager.ExecuteScalar(CommandType.Text, dbQry.ToString());

            if (!string.IsNullOrEmpty(count.ToString()))
                Exists = int.Parse(count.ToString());

            return Exists;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet GetProductSalesBill(int billno, string itemcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();

            dbQry.Append("SELECT itemCode,Sum(Qty) As Quantity,Rate ,Sum((qty*Rate) - ((discount/100) * qty*rate)) As SalesDiscount,");
            dbQry.Append("Sum( (Qty * Rate) - ((discount/100) * Qty * Rate) + ((VAT/100) * ((Qty * Rate) - ((discount/100) * Qty * Rate)))) As SumVAT,");
            dbQry.Append("Sum( (Qty * Rate) - ((discount/100) * Qty * Rate) + ((CST/100) * ((Qty * Rate) - ((discount/100) * Qty * Rate)))) As SumCST FROM tblSalesItems");
            dbQry.Append(" Group By itemcode,rate,billno having billno=" + billno + " and itemcode='" + itemcode + "'");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }
    public DataSet GetProductPurchaseBill(int purchaseID, string itemcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();

            dbQry.Append("SELECT itemCode,Sum(Qty) As Quantity,PurchaseRate ,Sum((qty*PurchaseRate) - ((discount/100) * qty*PurchaseRate)) As PurchaseDiscount,");
            dbQry.Append("Sum( (Qty * PurchaseRate) - ((discount/100) * Qty * PurchaseRate) + ((VAT/100) * ((Qty * PurchaseRate) - ((discount/100) * Qty * PurchaseRate)))) As SumVAT,");
            dbQry.Append("Sum( (Qty * PurchaseRate) - ((discount/100) * Qty * PurchaseRate) + ((CST/100) * ((Qty * PurchaseRate) - ((discount/100) * Qty * PurchaseRate)))) As SumCST FROM tblPurchaseItems");
            dbQry.Append(" Group By itemcode,PurchaseRate,purchaseID having purchaseID=" + purchaseID + " and itemcode='" + itemcode + "'");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetSales(object usernam)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        DataSet dsdate = new DataSet();

        StringBuilder dbQry2 = new StringBuilder();
        string dbQry3 = string.Empty;
        string username = string.Empty;

        string name = string.Empty;
        try
        {

            manager.Open();
            dbQry2.Append("Select user,recondate from tbluserlock");
            dsdate = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
            foreach (DataRow drdate in dsdate.Tables[0].Rows)
            {
                name = drdate["user"].ToString();
                if (name == usernam.ToString())
                {
                    username = "Yes";
                    name = drdate["user"].ToString();
                }
            }

            object retVal;
            if (username == "Yes")
            {
                dbQry3 = "Select recondate from tbluserlock";
                retVal = manager.ExecuteScalar(CommandType.Text, dbQry3);
            }
            else
            {
                retVal = DBNull.Value;
            }


            if ((retVal != null) && (retVal != DBNull.Value))
            {
                dbQry.Append("SELECT tblDayBook.Transno,tblSales.Billno,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,MultiPayment");
                dbQry.Append(" FROM (((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID )) Where tblSales.BillDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "#  ORDER BY tblSales.BillDate Desc,tblSales.Billno Desc");
            }
            else
            {
                dbQry.Append("SELECT tblDayBook.Transno,tblSales.Billno,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,MultiPayment");
                dbQry.Append(" FROM (((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID )) ORDER BY tblSales.BillDate Desc,tblSales.Billno Desc");
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet GetSales()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                dbQry.Append("SELECT tblDayBook.Transno,tblSales.Billno,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,MultiPayment,despatchedfrom,manualNo");
                dbQry.Append(" FROM (((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID )) Where tblSales.BillDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "#  ORDER BY tblSales.BillDate Desc,tblSales.Billno Desc");
            }
            else
            {
                dbQry.Append("SELECT tblDayBook.Transno,tblSales.Billno,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,MultiPayment,despatchedfrom,manualNo");
                dbQry.Append(" FROM (((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID )) ORDER BY tblSales.BillDate Desc,tblSales.Billno Desc");
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet GetExecutive(int ledgerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();


        string dbQry = string.Empty;
        try
        {

            manager.Open();

            dbQry = "SELECT executiveIncharge,ledgerCategory,CreditLimit FROM tblLedger WHERE LedgerID=" + ledgerID;
            // int executive =0;
            // //ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            // if (manager.ExecuteScalar(CommandType.Text, dbQry) != null && manager.ExecuteScalar(CommandType.Text, dbQry).ToString()  != "")
            //     executive = (Int32)manager.ExecuteScalar(CommandType.Text, dbQry); 
            //return executive;
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }
    public int InsertSales(string BillDate, int sCustomerID, string sCustomerName, string sCustomerAddress, string sCustomerContact, int paymode, string sCreditCardno, int BankName, double Amount, string purchasereturn, string prreason, int executive, DataSet salesDS)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        DateTime sBilldate;
        string[] sDate;
        string delim = "/";
        char[] delimA = delim.ToCharArray();
        CultureInfo culture = new CultureInfo("pt-BR");
        string sVoucherType = string.Empty;
        try
        {
            sDate = BillDate.Trim().Split(delimA);


            sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));

        }
        catch (Exception ex)
        {
            //Response.Write("<b><font face='Trebuchet MS' size=2 color=red>Invalid Bill Date Format</font></b>");
            throw new Exception("Invalid Bill Date Format", ex);
        }


        double oldAmt = 0;
        string sNarration = string.Empty;
        int creditorID = 2;
        int DebtorID = 0;
        int salesID = 0;
        int BillNo = 0;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID

            if (paymode == 1)
                DebtorID = 1;
            else if (paymode == 2)
                DebtorID = BankName;
            else
                DebtorID = sCustomerID;

            //End Retriving the old Debtor and CreditorID

            //Sales A/c -2 will always be the Creditor


            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebtorID);
            double Debit = 0;

            object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebit != null) && (retDebit != DBNull.Value))
            {
                Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }
            //double Payment = (double)manager.ExecuteScalar(CommandType.Text, "Select Amount from tblDayBook Where TransNo=" + TransNo);
            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebtorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", creditorID);
            double Credit = 0;
            object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCredit != null) && (retCredit != DBNull.Value))
            {
                Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, creditorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Updating the Debit and credit
            //Start Delete the old record
            if (purchasereturn == "NO")
                sVoucherType = "Sales";
            else
                sVoucherType = "Purchase Return";

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,CreditCardNo,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
             sBilldate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, sCreditCardno, 0);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            int NewTransNo = 0;

            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NewTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }

            object retBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM tblSales");
            if ((retBillVal != null) && (retBillVal != DBNull.Value))
            {
                BillNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM tblSales");
            }
            else
            {
                BillNo = BillNo + 1;
            }

            dbQry = string.Format("INSERT INTO tblSales(Billno,BillDate,JournalID,CustomerID,CustomerName,CustomerAddress,CustomerContacts,Paymode,purchaseReturn,purchaseReturnReason,executive) VALUES({0},Format('{1}', 'dd/mm/yyyy'),{2},{3},'{4}','{5}','{6}',{7},'{8}','{9}','{10}')",
           BillNo, sBilldate.ToShortDateString(), NewTransNo, sCustomerID, sCustomerName, sCustomerAddress, sCustomerContact, paymode, purchasereturn, prreason, executive);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);



            object retSalesVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo) FROM tblSales");
            if ((retSalesVal != null) && (retSalesVal != DBNull.Value))
            {
                salesID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo) FROM tblSales");
            }
            else
            {
                salesID = salesID + 1;
            }


            sNarration = sVoucherType + " - Bill No:" + BillNo;
            dbQry = string.Format("Update tblDayBook SET Narration = '{0}' Where TransNo={1}", sNarration, NewTransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            //Adding the Purchase Items Table
            if (salesDS != null)
            {
                if (salesDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in salesDS.Tables[0].Rows)
                    {
                        object returnStock = manager.ExecuteScalar(CommandType.Text, "Select stock from tblProductMaster WHERE itemCode='" + Convert.ToString(dr["ItemCode"]) + "'");
                        if ((returnStock != null) && (returnStock != DBNull.Value))
                        {
                            if (Convert.ToDouble(returnStock) < Convert.ToDouble(dr["Qty"]))
                            {
                                salesID = -1;
                                return salesID;
                            }

                        }
                        if (dr["Roles"].ToString() != "NO ROLE")
                        {
                            dbQry = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,roleID,isrole,CST) VALUES({0},'{1}',{2},{3},{4},{5},{6},{7},'{8}',{9})", salesID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), Convert.ToInt32(dr["SlNo"]), Convert.ToInt32(dr["Roles"]), Convert.ToString(dr["RoleFlag"]), Convert.ToDouble(dr["CST"]));
                        }
                        else
                        {
                            dbQry = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,roleID,isrole,CST) VALUES({0},'{1}',{2},{3},{4},{5},{6},{7},'{8}')", salesID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), Convert.ToInt32(dr["SlNo"]), 0, Convert.ToString(dr["RoleFlag"]), Convert.ToDouble(dr["CST"]));
                        }
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);


                        dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock - {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]));
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        if (Convert.ToString(dr["RoleFlag"]) == "Y")
                        {
                            dbQry = string.Format("Update tblItemRoleMaster SET Qty_Available = Qty_Available - {0} WHERE roleid={1}", Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Roles"]));
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        }
                    }
                }
            }

            manager.CommitTransaction();
            return salesID;
        }

        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public int UpdateSales(int Billno, string BillDate, int sCustomerID, string sCustomerName, string sCustomerAddress, string sCustomerContact, int paymode, string sCreditCardno, int BankName, double Amount, string purchasereturn, string prreason, int executive, DataSet salesDS)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();



        string sVoucherType = string.Empty;
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldDebitID = 0;
        int oldCreditID = 0;
        double oldAmt = 0;
        DateTime sBilldate;
        string[] sDate;
        string delim = "/";
        char[] delimA = delim.ToCharArray();
        CultureInfo culture = new CultureInfo("pt-BR");
        try
        {
            sDate = BillDate.Trim().Split(delimA);


            sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));

        }
        catch (Exception ex)
        {
            //Response.Write("<b><font face='Trebuchet MS' size=2 color=red>Invalid Bill Date Format</font></b>");
            return 0;
        }

        string sNarration = string.Empty;

        int creditorID = 2;
        int DebtorID = 0;
        int salesID = 0;
        int BillNo = 0;
        if (purchasereturn == "NO")
            sVoucherType = "Sales";
        else
            sVoucherType = "Purchase Return";
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID
            dsOld = GetSalesForId(Billno,"");


            if (dsOld.Tables[0].Rows[0]["JournalID"] != null)
            {
                if (dsOld.Tables[0].Rows[0]["JournalID"].ToString() != string.Empty)
                {
                    TransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["JournalID"].ToString());
                }
            }
            dbQry = string.Format("Select DebtorID,CreditorID,Amount from tblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                }

            }
            //End Retriving

            if (paymode == 1)
                DebtorID = 1;
            else if (paymode == 2)
                DebtorID = BankName;
            else
                DebtorID = sCustomerID;
            sNarration = "Sales - Bill No:" + Billno;

            //Delete Purchase

            /*
             Step 1 : Decrese the Debit and Credit for the Old Debtor and Old Creditor.
             Step 2 : Delete the Entry From tblDayBook,tblPurchase,tblPurchaseItem.
             Step 3 : Increase the Debit and Credit for the new Debtor and new Creditor.
             Step 4 : Add Entry From tblDayBook,tblPurchase,tblPurchaseItem.
             Step 5 : Make an entry in the audit table.
             */
            //Step 1 - Start

            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", oldDebitID);
            double DebitDel = 0;
            object retDebitDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebitDel != null) && (retDebitDel != DBNull.Value))
            {
                DebitDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", DebitDel - oldAmt, oldDebitID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", oldCreditID);

            double CreditDel = 0;
            object retCreditDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCreditDel != null) && (retCreditDel != DBNull.Value))
            {
                CreditDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", CreditDel - oldAmt, oldCreditID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //Step 1 - End


            //Step 2 - Start
            //Start Delete the old record
            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("SELECT Qty,ItemCode,RoleID,isRole From tblSalesItems Where Billno={0}", Billno);
            DataSet salesdS = (DataSet)manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (salesdS != null)
            {
                if (salesdS.Tables.Count > 0)
                {
                    foreach (DataRow dr in salesdS.Tables[0].Rows)
                    {
                        dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock + {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]));
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        if (dr["isRole"] != null)
                        {
                            if (Convert.ToString(dr["isrole"]) == "Y")
                            {
                                dbQry = string.Format("Update tblItemRoleMaster SET Qty_Available = Qty_Available + {1}  WHERE RoleID={0}", Convert.ToInt32(dr["RoleID"]), Convert.ToDouble(dr["Qty"]));
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);
                            }
                        }
                    }
                }
            }
            dbQry = string.Format("Delete From tblSales Where Billno={0}", Billno);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblSalesItems Where Billno={0}", Billno);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Deleting the old record


            //Step 2 - End




            //End Delete Purchase
            //Purchase A/c - 3 will always be the debtor
            //Step 3 - Start
            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebtorID);
            double Debit = 0;
            object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebit != null) && (retDebit != DBNull.Value))
            {
                Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            //double Payment = (double)manager.ExecuteScalar(CommandType.Text, "Select Amount from tblDayBook Where TransNo=" + TransNo);
            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebtorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", creditorID);
            double Credit = 0;
            object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCredit != null) && (retCredit != DBNull.Value))
            {
                Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, creditorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Updating the Debit and credit
            //Step 3 - End

            //Step 4 - Start
            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,CreditCardNo,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
           sBilldate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, sCreditCardno, 0);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            int NewTransNo = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NewTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }



            object retBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM tblSales");
            if ((retBillVal != null) && (retBillVal != DBNull.Value))
            {
                BillNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM tblSales");
            }
            else
            {
                BillNo = BillNo + 1;
            }

            dbQry = string.Format("INSERT INTO tblSales(Billno,BillDate,JournalID,CustomerID,CustomerName,CustomerAddress,CustomerContacts,Paymode,purchasereturn,purchasereturnreason,executive) VALUES({0},Format('{1}', 'dd/mm/yyyy'),{2},{3},'{4}','{5}','{6}',{7},'{8}','{9}','{10}')",
           BillNo, sBilldate.ToShortDateString(), NewTransNo, sCustomerID, sCustomerName, sCustomerAddress, sCustomerContact, paymode, purchasereturn, prreason, executive);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            object retSalesVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo) FROM tblSales");
            if ((retSalesVal != null) && (retSalesVal != DBNull.Value))
            {
                salesID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo) FROM tblSales");
            }
            else
            {
                salesID = salesID + 1;
            }

            sNarration = sVoucherType + " - Bill No:" + salesID;

            string itemScode = string.Empty;

            //Adding the Purchase Items Table
            if (salesDS != null)
            {
                if (salesDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in salesDS.Tables[0].Rows)
                    {
                        object returnStock = manager.ExecuteScalar(CommandType.Text, "Select stock from tblProductMaster WHERE itemCode='" + Convert.ToString(dr["ItemCode"]) + "'");
                        if ((returnStock != null) && (returnStock != DBNull.Value))
                        {
                            if (Convert.ToDouble(returnStock) < Convert.ToDouble(dr["Qty"]))
                            {
                                salesID = -1;
                                return salesID;
                            }

                        }

                        //dbQry = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo) VALUES({0},'{1}',{2},{3},{4},{5},{6})", salesID, Convert.ToString(dr["ItemCode"]), Convert.ToInt32(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), Convert.ToInt32(dr["SlNo"]));
                        //dbQry = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,roleID,isrole) VALUES({0},'{1}',{2},{3},{4},{5},{6},{7},'{8}')", salesID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), Convert.ToInt32(dr["SlNo"]), Convert.ToInt32(dr["Roles"]), Convert.ToString(dr["RoleFlag"]));

                        if (dr["Roles"].ToString() == "")
                            dr["Roles"] = "0";

                        if (dr["Roles"].ToString() != "NO ROLE")
                        {
                            dbQry = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,roleID,isrole,CST) VALUES({0},'{1}',{2},{3},{4},{5},{6},{7},'{8}',{9})", salesID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), Convert.ToInt32(dr["SlNo"]), dr["Roles"], Convert.ToString(dr["RoleFlag"]), Convert.ToDouble(dr["CST"]));
                        }
                        else
                        {
                            dbQry = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,roleID,isrole, CST) VALUES({0},'{1}',{2},{3},{4},{5},{6},{7},'{8}',{9})", salesID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), Convert.ToInt32(dr["SlNo"]), 0, Convert.ToString(dr["RoleFlag"]), Convert.ToDouble(dr["CST"]));
                        }
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock - {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]));
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        if (Convert.ToString(dr["RoleFlag"]) == "Y")
                        {
                            dbQry = string.Format("Update tblItemRoleMaster SET Qty_Available = Qty_Available - {0} WHERE roleid={1}", Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Roles"]));
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        }
                    }
                }
            }



            dbQry = string.Format("Update tblDayBook SET Narration = '{0}' Where TransNo={1}", sNarration, NewTransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //Step 4 - End

            //Step 5 - Start
            //Store the details in the Audit Table.
            sAuditStr = "Sales Transaction: " + TransNo + " got edited and deleted Record Details : DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt + " New Trans No :" + NewTransNo;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Edit and Update", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //Step 5 -  End
            manager.CommitTransaction();
            return salesID;
        }

        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public DataSet GetSalesItemsForPurId(int Billno,string branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("Select tblSalesitems.ItemCode,tblProductMaster.ProductName,tblProductMaster.ProductDesc,tblSalesitems.Rate,tblProductMaster.Measure_Unit, tblSalesitems.Qty,IIF((tblEmployee.empno IS NULL),' --NA-- ',tblEmployee.empno) as executivename, ");
            dbQry.Append("tblSalesitems.discount,tblSalesitems.Vat,tblSalesitems.CST,tblSalesitems.Vatamount,tblSalesitems.Totalmrp,tblSalesitems.subtotal,tblSalesitems.billno,tblSalesItems.SlNo,tblSalesItems.RoleID,tblSalesItems.isRole,tblSalesItems.TotalPrice,tblSalesItems.PrdReturnStatus,tblSalesItems.ReturnQty,tblProductMaster.Model,tblSalesItems.Bundles,tblSalesItems.Rods,tblSalesItems.ExecIncharge,tblProductmaster.Stock,tblSalesItems.ExecCharge,tblSalesItems.PriceBeforeVATAmt,tblSalesItems.BranchCode ");
            dbQry.Append(" FROM ((tblSalesitems INNER JOIN tblProductmaster ON tblSalesitems.itemCode = tblProductMaster.itemCode ) LEFT JOIN tblEmployee ON tblEmployee.empno = tblSalesItems.executivename)");
            dbQry.Append(" Where tblSalesItems.BranchCode='" + branchcode + "' and PrdReturnStatus='NO' and tblSalesitems.Billno = " + Billno);
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetSalesItemsForIdRet(int Billno, string branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            //dbQry.Append("Select tblSalesitems.ItemCode,tblProductMaster.ProductName,tblProductMaster.ProductDesc,tblSalesitems.Rate,tblProductMaster.Measure_Unit, tblSalesitems.Qty,IIF(ISNULL(tblEmployee.empno),' --NA-- ',tblEmployee.empno) as executivename, ");
            //dbQry.Append("Select tblSalesitems.ItemCode,tblProductMaster.ProductName,tblProductMaster.ProductDesc,tblSalesitems.Rate,tblProductMaster.Measure_Unit, tblSalesitems.Qty,IIF((tblEmployee.empno IS NULL),'0',tblEmployee.empno) as executivename, ");
            //dbQry.Append("tblSalesitems.discount,tblSalesitems.Vat,tblSalesitems.CST,tblSalesitems.Vatamount,tblSalesitems.Totalmrp,tblSalesitems.subtotal,tblSalesitems.billno,tblSalesItems.SlNo,tblSalesItems.RoleID,tblSalesItems.isRole,tblSalesItems.TotalPrice,tblSalesItems.PrdReturnStatus,tblSalesItems.ReturnQty,tblProductMaster.Model,tblSalesItems.Bundles,tblSalesItems.Rods,tblSalesItems.ExecIncharge,tblProductmaster.Stock,tblSalesItems.ExecCharge,tblSalesItems.PriceBeforeVATAmt FROM ((tblSalesitems INNER JOIN tblProductmaster ON tblSalesitems.itemCode = tblProductMaster.itemCode ) LEFT JOIN tblEmployee ON tblEmployee.empno = tblSalesItems.executivename)");
            //dbQry.Append(" Where tblSalesitems.Billno = " + Billno);

            //dbQry.Append("SELECT tblSalesItems.ItemCode, tblSalesItems.Rate, tblSalesItems.Qty, tblSalesItems.Discount, tblSalesItems.Vat, tblSalesItems.CST,");
            //dbQry.Append("tblSalesItems.Vatamount,tblSalesItems.TotalMrp, tblSalesItems.SubTotal, tblSalesItems.BillNo, tblSalesItems.SlNo, ");
            //dbQry.Append("tblSalesItems.RoleID, tblSalesItems.IsRole, tblSalesItems.TotalPrice,tblSalesItems.PrdReturnStatus, tblSalesItems.ReturnQty, ");
            //dbQry.Append("tblSalesItems.Bundles, tblSalesItems.Rods, tblSalesItems.ExecIncharge, tblSalesItems.ExecCharge, ");
            //dbQry.Append("tblSalesItems.PriceBeforeVATAmt, tblProductStock.Stock, tblProductStock.BranchCode, tblProductMaster.ProductName, tblProductMaster.ProductDesc, ");
            //dbQry.Append("tblProductMaster.Measure_Unit,IIF((tblEmployee.empno IS NULL),'0',tblEmployee.empno) as executivename,tblSales.BranchCode ");
            //dbQry.Append("FROM tblSalesItems INNER JOIN ");
            //dbQry.Append("tblProductMaster ON tblSalesItems.ItemCode = tblProductMaster.ItemCode INNER JOIN ");
            //dbQry.Append("tblProductStock ON tblSalesItems.ItemCode = tblProductStock.ItemCode INNER JOIN ");
            //dbQry.Append("tblSales ON tblSalesItems.BillNo = tblSales.BillNo ");
            //dbQry.Append("LEFT JOIN tblEmployee ON tblEmployee.empno = tblSalesItems.executivename ");
            //dbQry.Append("Where tblProductStock.BranchCode='" + branchcode + "' and tblSalesitems.Billno = " + Billno);


            dbQry.Append(" SELECT tblSales.BillNo, tblSales.BranchCode, tblSalesItems.ItemCode, tblProductMaster.ProductName, tblProductMaster.ProductDesc, tblProductMaster.Measure_Unit, ");
            dbQry.Append(" tblProductStock.Stock, tblSalesItems.Rate, tblSalesItems.Qty, tblSalesItems.Discount, tblSalesItems.Vat, tblSalesItems.CST, tblSalesItems.Vatamount,  ");
            dbQry.Append(" tblSalesItems.TotalMrp, tblSalesItems.SubTotal, tblSalesItems.BillNo AS Expr1, tblSalesItems.SlNo, tblSalesItems.RoleID, tblSalesItems.IsRole,  ");
            dbQry.Append(" tblSalesItems.TotalPrice, tblSalesItems.PrdReturnStatus, tblSalesItems.ReturnQty, tblSalesItems.Bundles, tblSalesItems.Rods, tblSalesItems.ExecIncharge,  ");
            dbQry.Append(" tblSalesItems.ExecCharge, tblSalesItems.PriceBeforeVATAmt,IIF((tblEmployee.empno IS NULL),'0',tblEmployee.empno) as executivename ");
            dbQry.Append(" FROM tblProductMaster INNER JOIN ");
            dbQry.Append(" tblSalesItems ON tblProductMaster.ItemCode = tblSalesItems.ItemCode INNER JOIN ");
            dbQry.Append(" tblProductStock ON tblProductMaster.ItemCode = tblProductStock.ItemCode AND tblSalesItems.BranchCode = tblProductStock.BranchCode INNER JOIN ");
            dbQry.Append(" tblSales ON tblSalesItems.BillNo = tblSales.BillNo AND tblSalesItems.BranchCode = tblSales.BranchCode ");
            dbQry.Append(" LEFT JOIN tblEmployee ON tblEmployee.empno = tblSalesItems.executivename");
            dbQry.Append(" Where tblSales.BranchCode='" + branchcode + "' and tblSalesItems.Billno = " + Billno);

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetSalesItemsForId(int Billno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            //dbQry.Append("Select tblSalesitems.ItemCode,tblProductMaster.ProductName,tblProductMaster.ProductDesc,tblSalesitems.Rate,tblProductMaster.Measure_Unit, tblSalesitems.Qty,IIF(ISNULL(tblEmployee.empno),' --NA-- ',tblEmployee.empno) as executivename, ");
            //dbQry.Append("Select tblSalesitems.ItemCode,tblProductMaster.ProductName,tblProductMaster.ProductDesc,tblSalesitems.Rate,tblProductMaster.Measure_Unit, tblSalesitems.Qty,IIF((tblEmployee.empno IS NULL),'0',tblEmployee.empno) as executivename, ");
            //dbQry.Append("tblSalesitems.discount,tblSalesitems.Vat,tblSalesitems.CST,tblSalesitems.Vatamount,tblSalesitems.Totalmrp,tblSalesitems.subtotal,tblSalesitems.billno,tblSalesItems.SlNo,tblSalesItems.RoleID,tblSalesItems.isRole,tblSalesItems.TotalPrice,tblSalesItems.PrdReturnStatus,tblSalesItems.ReturnQty,tblProductMaster.Model,tblSalesItems.Bundles,tblSalesItems.Rods,tblSalesItems.ExecIncharge,tblProductmaster.Stock,tblSalesItems.ExecCharge,tblSalesItems.PriceBeforeVATAmt FROM ((tblSalesitems INNER JOIN tblProductmaster ON tblSalesitems.itemCode = tblProductMaster.itemCode ) LEFT JOIN tblEmployee ON tblEmployee.empno = tblSalesItems.executivename)");
            //dbQry.Append(" Where tblSalesitems.Billno = " + Billno);
            dbQry.Append("SELECT tblSalesItems.ItemCode, tblSalesItems.Rate, tblSalesItems.Qty, tblSalesItems.Discount, tblSalesItems.Vat, tblSalesItems.CST,");
            dbQry.Append("tblSalesItems.Vatamount,tblSalesItems.TotalMrp, tblSalesItems.SubTotal, tblSalesItems.BillNo, tblSalesItems.SlNo, ");
            dbQry.Append("tblSalesItems.RoleID, tblSalesItems.IsRole, tblSalesItems.TotalPrice,tblSalesItems.PrdReturnStatus, tblSalesItems.ReturnQty, ");
            dbQry.Append("tblSalesItems.Bundles, tblSalesItems.Rods, tblSalesItems.ExecIncharge, tblSalesItems.ExecCharge, ");
            dbQry.Append("tblSalesItems.PriceBeforeVATAmt, tblProductStock.Stock, tblProductStock.BranchCode, tblProductMaster.ProductName, tblProductMaster.ProductDesc, ");
            dbQry.Append("tblProductMaster.Measure_Unit,IIF((tblEmployee.empno IS NULL),'0',tblEmployee.empno) as executivename ");
            dbQry.Append("FROM tblSalesItems INNER JOIN ");
            dbQry.Append("tblProductMaster ON tblSalesItems.ItemCode = tblProductMaster.ItemCode INNER JOIN ");
            dbQry.Append("tblProductStock ON tblSalesItems.ItemCode = tblProductStock.ItemCode ");
            dbQry.Append("LEFT JOIN tblEmployee ON tblEmployee.empno = tblSalesItems.executivename ");
            dbQry.Append("Where tblSalesitems.Billno = " + Billno);

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void DeleteSales(int Billno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldDebitID = 0;
        int oldCreditID = 0;
        double oldAmt = 0;
        string transdate = string.Empty;

        string sNarration = string.Empty;

        int creditorID = 0;
        int DebtorID = 3;



        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID
            dsOld = GetSalesForId(Billno,"");


            if (dsOld.Tables[0].Rows[0]["JournalID"] != null)
            {
                if (dsOld.Tables[0].Rows[0]["JournalID"].ToString() != string.Empty)
                {
                    TransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["JournalID"].ToString());
                }
            }
            dbQry = string.Format("Select DebtorID,CreditorID,Amount,transDate from tblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                    transdate = Convert.ToString(dsOld.Tables[0].Rows[0]["transDate"]);
                }

            }

            //Step 1 - Start

            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", oldDebitID);
            double DebitDel = 0;
            object retDebitDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebitDel != null) && (retDebitDel != DBNull.Value))
            {
                DebitDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", DebitDel - oldAmt, oldDebitID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", oldCreditID);
            double CreditDel = 0;
            object retCreditDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCreditDel != null) && (retCreditDel != DBNull.Value))
            {
                CreditDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", CreditDel - oldAmt, oldCreditID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //Step 1 - End


            //Step 2 - Start
            //Start Delete the old record
            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("SELECT Qty,ItemCode,RoleID,isRole From tblSalesItems Where Billno={0}", Billno);
            DataSet salesDS = (DataSet)manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (salesDS != null)
            {
                if (salesDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in salesDS.Tables[0].Rows)
                    {
                        dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock + {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]));
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        if (dr["isRole"] != null)
                        {
                            if (Convert.ToString(dr["isrole"]) == "Y")
                            {
                                dbQry = string.Format("Update tblItemRoleMaster SET Qty_Available = Qty_Available + {1}  WHERE RoleID={0}", Convert.ToInt32(dr["RoleID"]), Convert.ToDouble(dr["Qty"]));
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);
                            }
                        }
                    }
                }
            }
            dbQry = string.Format("Delete From tblSales Where BillNo={0}", Billno);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblSalesItems Where BillNo={0}", Billno);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Deleting the old record


            sAuditStr = "Sales Transaction: " + TransNo + " got deleted old Record Details : DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Delete", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);




            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }
    #endregion

    public DataSet getCompanyInfo(string company)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            dbQry = "SELECT CompanyName,Address,City,State,PinCode,Phone,Tinno,Gstno FROM tblCompanyInfo";
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet getCompanyInfo()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            dbQry = "SELECT CompanyName FROM tblCompanyInfo";
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet getAddressInfo(int ledgerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            dbQry = "SELECT LedgerName,ContactName,Add1,Add2,Add3,phone,tinnumber,Mobile,LedgerCategory FROM tblLedger Where LedgerID=" + ledgerID;
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet getProdInfo(string ProdCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            dbQry = " SELECT tblProductMaster.ItemCode, tblProductMaster.ProductName, tblProductMaster.Model, tblProductMaster.ProductDesc, " +
                    " tblProductMaster.Rate, tblProductMaster.Unit, tblProductMaster.VAT, tblProductMaster.Discount, tblProductMaster.CST,tblProductMaster.ExecutiveCommission " +
                    " FROM tblProductMaster Where ItemCode='" + ProdCode + "'";
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }



    #region "Employee Methods"

    public DataSet ListManager(string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        DataSet dsd = new DataSet();
        DataSet dsdd = new DataSet();
        string dbQry3 = string.Empty;
        string dbQry4 = string.Empty;
        int managerid = 0;

        bool branchcheck =false;
        manager.Open();
        dbQry4 = "SELECT  * From tblUserInfo WHERE tblUserinfo.Username='" + Username + "'";
       // manager.Open();
      //  dsd = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
        dsdd = manager.ExecuteDataSet(CommandType.Text, dbQry4);

        if (dsdd.Tables[0].Rows.Count > 0)
            branchcheck = Convert.ToBoolean(dsdd.Tables[0].Rows[0]["branchcheck"].ToString());

        manager.Open();

        if (branchcheck == true)
        {
            dbQry3 = "SELECT  * From tblEmployee inner join tblUserInfo on tblUserInfo.Empno = tblEmployee.empno WHERE tblUserinfo.Username='" + Username + "'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry3);
        }
        else
        {
            dbQry3 = "SELECT  *,tblUserInfo.DefaultBranch From tblEmployee inner join tblUserInfo on tblUserInfo.Empno = tblEmployee.empno WHERE tblUserinfo.Username='" + Username + "'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry3);
        }

        if (dsd.Tables[0].Rows.Count > 0)
            managerid = Convert.ToInt32(dsd.Tables[0].Rows[0]["Empno"].ToString());
        //dbQry = "Select empno,empFirstName From tblEmployee Order By empFirstName";
        //dbQry.Append("Select tblEmployee.empno,tblEmployee.empFirstName");
        //dbQry.Append(" FROM tblEmployee Inner Join tblUserInfo On tblUserInfo.Empno = tblEmployee.empno ");

        dbQry.Append(" WITH EmpCTE(empno, empFirstName, ManagerID) AS (SELECT empno, empFirstName, ManagerID FROM [tblEmployee] WHERE empno = " + managerid + " UNION ALL ");
        dbQry.Append(" SELECT E.empno, E.empFirstName, E.ManagerID FROM [tblEmployee] AS E JOIN EmpCTE AS M ON E.ManagerID = M.empno) SELECT * FROM EmpCTE ");
        // dbQry.Append(" Where UserName = '" + Username + "'");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListOwner(string connection, string Usernam)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        //dbQry = "Select empno,empFirstName From tblEmployee Order By empFirstName";
        dbQry.Append("Select tblEmployee.empno,tblEmployee.empFirstName");
        dbQry.Append(" FROM tblEmployee Inner Join tblUserInfo on tblEmployee.ManagerId=tblUserInfo.Empno");
        dbQry.Append(" Where tblUserInfo.UserName = '" + Usernam + "'");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }




    public DataSet GetDependencytask(string connection, int Project_Id)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        //dbQry = "Select empno,empFirstName From tblEmployee Order By empFirstName";
        dbQry.Append("Select tblTasks.Task_Id,tblTasks.Task_Name,tblProjects.Unit_Of_Measure");
        dbQry.Append(" FROM tblTasks Inner Join tblProjects On tblProjects.Project_Id = tblTasks.Project_Code ");
        dbQry.Append(" Where tblTasks.Project_Code = " + Project_Id + "");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }



    public DataSet GettaskforProjectName(string connection, string Project_Name, string condition, string flag, int status)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        //dbQry = "Select empno,empFirstName From tblEmployee Order By empFirstName";


        if (flag == "NA" && status == 0)
        {

            dbQry.Append("Select tblTasks.Task_Id,tblTasks.Task_Name,tblProjects.Unit_Of_Measure,tblTasks.Expected_Start_Date,tblTasks.Expected_End_Date,tblTasks.IsActive,tblTasks.Task_Date,tblEmployee.empfirstname as Ownername,tblTaskTypes.Task_Type_Name as TaskName ");

            dbQry.Append(" FROM ((tblTasks Inner Join tblProjects On tblProjects.Project_Id = tblTasks.Project_Code) Inner join tblEmployee on tblEmployee.empno = tblTasks.Owner) Inner join tblTaskTypes on tblTaskTypes.Task_Type_Id = tblTasks.Task_Type ");
        }
        else
        {
            dbQry.Append("Select tblTasks.Task_Id,tblTasks.Task_Name,tblProjects.Unit_Of_Measure,tblTasks.Expected_Start_Date,tblTasks.Expected_End_Date,tblTasks.IsActive,tblTasks.Task_Date,tblEmployee.empfirstname as Ownername,tblTaskTypes.Task_Type_Name as TaskName,tblTaskStatus.Task_status_Name as TaskStatusName ");

            dbQry.Append("  FROM (((((tblTasks  INNER JOIN  tblEmployee ON tblTasks.Owner = tblEmployee.empno) inner join tblProjects ON tblTasks.Project_Code = tblProjects.Project_Id) inner join tblUserInfo on tblEmployee.ManagerID = tblUserInfo.empno) Inner join tblTaskUpdates on tblTasks.task_Id=tblTaskUpdates.Task_Id) Inner join tblTaskStatus on tblTaskStatus.Task_Status_Id=tblTaskUpdates.Task_Status) Inner join tblTaskTypes on tblTaskTypes.Task_Type_Id = tblTasks.Task_Type ");
            // dbQry.Append(" FROM ((tblTasks Inner Join tblProjects On tblProjects.Project_Id = tblTasks.Project_Code) Inner join tblEmployee on tblEmployee.empno = tblTasks.Owner) Inner join tblTaskTypes on tblTaskTypes.Task_Type_Id = tblTasks.Task_Type ");
        }
        dbQry.Append(" Where tblProjects.Project_Name = '" + Project_Name + "' and " + condition + " ");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }



    public DataSet Getactivetask(string connection, int Project_Id)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        //dbQry = "Select empno,empFirstName From tblEmployee Order By empFirstName";
        dbQry.Append("Select tblTasks.Task_Id,tblTasks.Task_Name,tblProjects.Unit_Of_Measure");
        dbQry.Append(" FROM tblTasks Inner Join tblProjects On tblProjects.Project_Id = tblTasks.Project_Code ");
        dbQry.Append(" Where tblTasks.IsActive='Y' and tblTasks.Project_Code = " + Project_Id + "");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet Getinactivetask(string connection, int Project_Id)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        //dbQry = "Select empno,empFirstName From tblEmployee Order By empFirstName";
        dbQry.Append("Select tblTasks.Task_Id,tblTasks.Task_Name,tblProjects.Unit_Of_Measure");
        dbQry.Append(" FROM tblTasks Inner Join tblProjects On tblProjects.Project_Id = tblTasks.Project_Code ");
        dbQry.Append(" Where tblTasks.IsActive='N' and tblTasks.Project_Code = " + Project_Id + "");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public DataSet Getstatustasksyes(string connection, int stat_Id, int pro_Id)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        //dbQry = "Select empno,empFirstName From tblEmployee Order By empFirstName";
        dbQry.Append("Select tblTasks.Task_Id,tblTasks.Task_Name,tblTaskStatus.Task_Status_Name,tblTaskUpdates.Blocked_Flag,tblTasks.IsActive ");
        dbQry.Append(" FROM ((tblTasks Inner Join tblProjects On tblProjects.Project_Id = tblTasks.Project_Code) Inner Join tblTaskUpdates On tblTaskUpdates.Task_Id = tblTasks.Task_Id)  Inner join  tblTaskStatus on  tblTaskStatus.Task_Status_Id=tblTaskUpdates.Task_Status ");
        dbQry.Append(" Where tblTasks.IsActive='Y' and  tblTaskUpdates.Blocked_Flag='Y' and tblTaskStatus.Task_Status_Id=" + stat_Id + " and tblProjects.Project_Id=" + pro_Id + " ");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }



    public DataSet Gettaskfromemployee(string connection, int emp_no)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        //dbQry = "Select empno,empFirstName From tblEmployee Order By empFirstName";
        dbQry.Append("SELECT A.Task_Name,A.Owner,A.Task_Id ");
        dbQry.Append(" from tblTasks As A INNER JOIN  tblEmployee ON A.Owner = tblEmployee.empno ");
        dbQry.Append(" where tblEmployee.empno=" + emp_no + " ");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet Getstatustasksno(string connection, int stat_Id, int pro_Id)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        //dbQry = "Select empno,empFirstName From tblEmployee Order By empFirstName";
        dbQry.Append("Select tblTasks.Task_Id,tblTasks.Task_Name,tblTaskStatus.Task_Status_Name,tblTaskUpdates.Blocked_Flag ");
        dbQry.Append(" FROM ((tblTasks Inner Join tblProjects On tblProjects.Project_Id = tblTasks.Project_Code) Inner Join tblTaskUpdates On tblTaskUpdates.Task_Id = tblTasks.Task_Id)  Inner join  tblTaskStatus on  tblTaskStatus.Task_Status_Id=tblTaskUpdates.Task_Status ");
        dbQry.Append(" Where tblTasks.IsActive='Y' and tblTaskUpdates.Blocked_Flag='N' and tblTaskStatus.Task_Status_Id=" + stat_Id + " and tblProjects.Project_Id=" + pro_Id + " ");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public DataSet Getstatustasksnostatus(string connection, int stat_Id, int pro_Id)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        //dbQry = "Select empno,empFirstName From tblEmployee Order By empFirstName";
        dbQry.Append("Select tblTasks.Task_Id,tblTasks.Task_Name,tblTaskStatus.Task_Status_Name,tblTaskUpdates.Blocked_Flag,tblTasks.IsActive ");
        dbQry.Append(" FROM ((tblTasks Inner Join tblProjects On tblProjects.Project_Id = tblTasks.Project_Code) Inner Join tblTaskUpdates On tblTaskUpdates.Task_Id = tblTasks.Task_Id)  Inner join  tblTaskStatus on  tblTaskStatus.Task_Status_Id=tblTaskUpdates.Task_Status ");
        dbQry.Append(" Where tblTaskStatus.Task_Status_Id=" + stat_Id + " and tblProjects.Project_Id=" + pro_Id + " ");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public DataSet GetblocktaskNO(string connection, int Project_Id)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        //dbQry = "Select empno,empFirstName From tblEmployee Order By empFirstName";
        dbQry.Append(" Select tblTasks.Task_Id,tblTasks.Task_Name ");
        dbQry.Append(" FROM (tblTasks Inner Join tblProjects On tblProjects.Project_Id = tblTasks.Project_Code) Inner Join tblTaskUpdates On tblTaskUpdates.Task_Id = tblTasks.Task_Id  ");
        dbQry.Append(" Where tblTaskUpdates.Blocked_Flag='N' and tblProjects.Project_Id  = " + Project_Id + "");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetblocktaskYES(string connection, int Project_Id)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        //dbQry = "Select empno,empFirstName From tblEmployee Order By empFirstName";
        dbQry.Append(" Select tblTasks.Task_Id,tblTasks.Task_Name ");
        dbQry.Append(" FROM (tblTasks Inner Join tblProjects On tblProjects.Project_Id = tblTasks.Project_Code) Inner Join tblTaskUpdates On tblTaskUpdates.Task_Id = tblTasks.Task_Id  ");
        dbQry.Append(" Where tblTaskUpdates.Blocked_Flag='Y' and tblProjects.Project_Id  = " + Project_Id + "");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetDependencytaskupdate(string connection, int Project_Id)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        //dbQry = "Select empno,empFirstName From tblEmployee Order By empFirstName";
        dbQry.Append("Select tblTaskUpdatesHistory.Task_Update_Id,tblTaskUpdatesHistory.Task_update,tblProjects.Unit_Of_Measure");
        dbQry.Append(" FROM tblTaskUpdatesHistory Inner Join tblProjects On tblProjects.Project_Id = tblTaskUpdatesHistory.Task_id ");
        dbQry.Append(" Where tblTaskUpdatesHistory.Task_id = " + Project_Id + "");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListPurchaseID(string branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry2 = string.Empty;
        StringBuilder dbQry = new StringBuilder();
        DataSet ds = new DataSet();


        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                dbQry.Append("Select PurchaseID From tblPurchase where SalesReturn='NO' and InternalTransfer='NO' and DeliveryNote='NO' and InvoiceReturnStatus='NO'");
                dbQry.Append("and BranchCode='" + branchcode + "' and tblPurchase.InvoiceDate > '" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "'  Order By PurchaseID");
            }
            else
            {
                dbQry.Append("Select PurchaseID From tblPurchase where SalesReturn='NO' and InternalTransfer='NO' and DeliveryNote='NO' and InvoiceReturnStatus='NO'");
                dbQry.Append("and BranchCode='" + branchcode + "' Order By PurchaseID");
            }
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListExecutive()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select empno,empFirstName From tblEmployee Order By empFirstName";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListBranchLogin(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select BranchName,Branchcode From tblBranch where IsActive='YES' Order By BranchName";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListBranch()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select BranchName,Branchcode From tblBranch where IsActive='YES' Order By BranchName";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListBranchexecution(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select BranchName,Branchcode From tblBranch where IsActive='YES' Order By BranchName";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListReferenceType(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();


        dbQry = "Select ReferenceType,TypeID From tblLeadReferenceType Order By TypeID";
        //dbQry = " SELECT tblLeadReferenceType.TypeID, tblLeadReferenceType.ReferenceType, tblBranch.BranchName, tblBranch.Branchcode " +
        // " FROM tblLeadReferenceType INNER JOIN tblBranch ON tblLeadReferenceType.BranchCode = tblBranch.Branchcode Order By TypeID";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListActivityName()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select TextValue,ID From tblLeadReferences where TypeName='Activity Name' Order By ID";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListNextActivity()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select TextValue,ID From tblLeadReferences where TypeName='Next Activity' Order By ID";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListModeofContact()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select TextValue,ID From tblLeadReferences where TypeName='Mode of Contact' Order By ID";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListInformation2()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select TextValue,ID From tblLeadReferences where TypeName='Additional Information 2' Order By ID";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListInformation5()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select TextValue,ID From tblLeadReferences where TypeName='Additional Information 5' Order By ID";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListInformation3()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select TextValue,ID From tblLeadReferences where TypeName='Additional Information 3' Order By ID";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListInformation4()//Information 5
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select TextValue,ID From tblLeadReferences where TypeName='Additional Information 4' Order By ID";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListBusinessType()//Information 5
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select TextValue,ID From tblLeadReferences where TypeName='Business Type' Order By ID";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListCategory()//Information 5
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select TextValue,ID From tblLeadReferences where TypeName='Category' Order By ID";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public DataSet ListArea()//Information 5
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select TextValue,ID From tblLeadReferences where TypeName='Area' Order By ID";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListInterestLevel()//Information 5
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select TextValue,ID From tblLeadReferences where TypeName='Interest level' Order By ID";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public DataSet ListExecutive(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select empno,empFirstName+ ' '+ empSurName as empFirstName From tblEmployee";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }
    public DataSet SearchEmp(int empNO, string sEmpName, string sDesig, string sDate)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        String searchStr = string.Empty;

        if (empNO > 0)
            searchStr = " empno=" + empNO;

        if (sEmpName != string.Empty)
        {
            if (searchStr == string.Empty)
                searchStr = searchStr + " empFirstName LIKE '" + sEmpName + "%'";
            else
                searchStr = searchStr + " AND empFirstName LIKE '" + sEmpName + "%'";

        }

        if (sDesig != string.Empty)
        {
            if (searchStr == string.Empty)
                searchStr = searchStr + " empDesig LIKE '" + sDesig + "%'";
            else
                searchStr = searchStr + " AND empDesig LIKE '" + sDesig + "%'";

        }

        if (sDate.ToString() != string.Empty && sDate.ToString() != null)
        {
            if (searchStr == string.Empty)
                searchStr = searchStr + "empDOJ=#" + Convert.ToDateTime(sDate).ToString("MM/dd/yyyy").Trim() + "#";
            else
                searchStr = searchStr + " AND empDOJ=#" + Convert.ToDateTime(sDate).ToString("MM/dd/yyyy").Trim() + "#";
        }

        if (searchStr != string.Empty)
        {
            dbQry.Append("SELECT empno,empTitle ,empFirstName,empMiddleName,empSurName,empdesig,empDOJ,empDOB,empRemarks FROM tblEmployee");
            dbQry.AppendFormat(" Where {0} ORDER BY empno,empFirstname", searchStr);

        }
        else
        {
            dbQry.Append("SELECT empno,empTitle,empFirstName,empMiddleName,empSurName,empdesig,empDOJ,empDOB,empRemarks FROM tblEmployee ORDER BY empno,empFirstname");
        }


        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet SearchEmployee(string connection, string txtSearch, string dropDown, string branchcode)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        String searchStr = string.Empty;

        if (dropDown == "DOJ" || dropDown == "PartnerNo")
            txtSearch = txtSearch;
        else
            txtSearch = "%" + txtSearch + "%";


        //if (empNO > 0)
        //    searchStr = " empno=" + empNO;

        //if (sEmpName != string.Empty)
        //{
        //    if (searchStr == string.Empty)
        //        searchStr = searchStr + " empFirstName LIKE '" + sEmpName + "%'";
        //    else
        //        searchStr = searchStr + " AND empFirstName LIKE '" + sEmpName + "%'";

        //}

        //if (sDesig != string.Empty)
        //{
        //    if (searchStr == string.Empty)
        //        searchStr = searchStr + " empDesig LIKE '" + sDesig + "%'";
        //    else
        //        searchStr = searchStr + " AND empDesig LIKE '" + sDesig + "%'";

        //}

        //if (sDate.ToString() != string.Empty && sDate.ToString() != null)
        //{
        //    if (searchStr == string.Empty)
        //        searchStr = searchStr + "empDOJ=#" + Convert.ToDateTime(sDate).ToString("MM/dd/yyyy").Trim() + "#";
        //    else
        //        searchStr = searchStr + " AND empDOJ=#" + Convert.ToDateTime(sDate).ToString("MM/dd/yyyy").Trim() + "#";
        //}

        //if (searchStr != string.Empty)
        //{
        //    dbQry.Append("SELECT empno,empTitle ,empFirstName,empMiddleName,empSurName,empdesig,empDOJ,empDOB,empRemarks FROM tblEmployee");
        //    dbQry.AppendFormat(" Where {0} ORDER BY empno,empFirstname", searchStr);

        //}
        //else
        //{
        //dbQry.Append("SELECT empno,empTitle,empFirstName,empMiddleName,empSurName,empdesig,empDOJ,empDOB,empRemarks,emptype FROM tblEmployee ");
        dbQry.Append("SELECT empno,empTitle,empFirstName,empMiddleName,empSurName,empdesig,empDOJ,empDOB,empRemarks,ManagerId,UserGroup,BranchCode FROM tblEmployee ");
        //}

        if (txtSearch != "")
        {
            if (dropDown == "PartnerNo" && txtSearch != null)
            {
                if (branchcode != "All")
                {
                    dbQry.AppendFormat("Where BranchCode = '" + branchcode + "' and empno = {0} ", txtSearch);
                }
                else
                {
                    dbQry.AppendFormat("Where empno = {0} ", txtSearch);
                }
            }
            else if (dropDown == "DOJ" && txtSearch != null)
            {
                if (branchcode != "All")
                {
                    dbQry.AppendFormat("WHERE BranchCode = '" + branchcode + "' and Format([empDOJ], 'dd/mm/yyyy') = '{0}' ", Convert.ToDateTime(txtSearch).ToShortDateString());
                }
                else
                {
                    dbQry.AppendFormat("WHERE BranchCode = '" + branchcode + "' and Format([empDOJ], 'dd/mm/yyyy') = '{0}' ", Convert.ToDateTime(txtSearch).ToShortDateString());
                }
            }
            else if (dropDown == "Partner" && txtSearch != null)
            {
                if (branchcode != "All")
                {
                    dbQry.AppendFormat("Where BranchCode = '" + branchcode + "' and empFirstName like '{0}' ", txtSearch);
                }
                else
                {
                    dbQry.AppendFormat("Where BranchCode = '" + branchcode + "' and empFirstName like '{0}' ", txtSearch);
                }
            }
            else if (dropDown == "Designation" && txtSearch != null)
            {
                if (branchcode != "All")
                {
                    dbQry.AppendFormat("Where BranchCode = '" + branchcode + "' and empDesig like '{0}' ", txtSearch);
                }
                else
                {
                    dbQry.AppendFormat("Where BranchCode = '" + branchcode + "' and empDesig like '{0}' ", txtSearch);
                }
            }
            else if (dropDown == "All" || dropDown == "0" && txtSearch != null)
            {
                if (branchcode != "All")
                {
                    // dbQry.AppendFormat("Where empDesig like '{0}' ", txtSearch);
                    dbQry.AppendFormat("Where BranchCode = '" + branchcode + "' and (empno like '" + txtSearch + "'" + " Or empFirstName like '" + txtSearch + "'" + " Or empDesig like '" + txtSearch + "'" + " )");
                }
                else
                {
                    dbQry.AppendFormat("Where (empno like '" + txtSearch + "'" + " Or empFirstName like '" + txtSearch + "'" + " Or empDesig like '" + txtSearch + "'" + " )");
                }
            }
            else if (branchcode != "All")
            {
                dbQry.Append("Where 1=1 ");
            }
            else
            {
                dbQry.Append("Where 1=1 ");
            }
        }
        else
        {
            dbQry.Append("Where 1=1 ");
        }

        dbQry.Append("  ORDER BY empno,empFirstname ");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetEmployeeDetails(int empNO)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        String searchStr = string.Empty;

        dbQry.Append("SELECT empno,empTitle,empFirstName,empMiddleName,empSurName,empdesig,empDOJ,empDOB,empRemarks,ManagerId,UserGroup,EmployeeRoleId,EmailID,MobileNo,BranchCode FROM tblEmployee Where empno=" + empNO.ToString());

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }
    public int GetNextEmpno()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);

        try
        {

            manager.ConnectionString = CreateConnectionString(this.ConnectionString);
            int empno = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(empno) FROM tblEmployee");
            return empno;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }
    //public int InsertEmpDetails(int empno, string sTitle, string sEmpFName, string sEmpMName, string sEmpSName, string sDesig, string sRemarks, string dDOJ, string dDOB, string stype)
    //{
    //    DBManager manager = new DBManager(DataProvider.SqlServer);
    //    manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
    //    DataSet ds = new DataSet();
    //    string dbQry = string.Empty;

    //    try
    //    {
    //        manager.Open();
    //        manager.ProviderType = DataProvider.SqlServer;

    //        dbQry = string.Format("INSERT INTO tblEmployee(empno,empTitle,empFirstName,empMiddleName,empSurName,empDOJ,empDOB,empDesig,empRemarks,emptype) VALUES({0},'{1}','{2}','{3}','{4}',Format('{5}', 'dd/mm/yyyy'),Format('{6}', 'dd/mm/yyyy'),'{7}','{8}','{9}')",
    //        empno, sTitle, sEmpFName, sEmpMName, sEmpSName, dDOJ, dDOB, sDesig, sRemarks, stype);
    //        manager.ExecuteNonQuery(CommandType.Text, dbQry);
    //        int NewEmpNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(empno) FROM tblEmployee");

    //        manager.Dispose();
    //        return NewEmpNo;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }

    //    //finally
    //    //{
    //    //    if (manager != null)
    //    //        manager.Dispose();
    //    //}

    //}

    ////UpdateEmpDetails
    //public int UpdateEmpDetails(int empno, string sTitle, string sEmpFName, string sEmpMName, string sEmpSName, string sDesig, string sRemarks, string dDOJ, string dDOB, string stype)
    //{
    //    DBManager manager = new DBManager(DataProvider.SqlServer);
    //    manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
    //    DataSet ds = new DataSet();
    //    string dbQry = string.Empty;

    //    try
    //    {
    //        manager.Open();
    //        manager.ProviderType = DataProvider.SqlServer;
    //        dbQry = string.Format("UPDATE tblEmployee SET empno={0},empTitle='{1}',empFirstName='{2}',empMiddleName='{3}',empSurName='{4}',empDOJ=Format('{5}', 'dd/mm/yyyy'),empDOB=Format('{6}', 'dd/mm/yyyy'),empDesig='{7}',empRemarks='{8}',emptype='{9}' Where empno={0}",
    //        empno, sTitle, sEmpFName, sEmpMName, sEmpSName, dDOJ, dDOB, sDesig, sRemarks, stype);
    //        manager.ExecuteNonQuery(CommandType.Text, dbQry);


    //        manager.Dispose();
    //        return empno;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    //finally
    //    //{
    //    //    if (manager != null)
    //    //        manager.Dispose();
    //    //}
    //}

    public int InsertEmpDetails(int empno, string sTitle, string sEmpFName, string sEmpMName, string sEmpSName, string sDesig, string sRemarks, DateTime dDOJ, DateTime dDOB, int ManagerId, string UserGroup, string EmailID, string MobNo, string branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            dbQry = string.Format("INSERT INTO tblEmployee(empno,empTitle,empFirstName,empMiddleName,empSurName,empDOJ,empDOB,empDesig,empRemarks,ManagerId,UserGroup,EmailID,MobileNo,BranchCode) VALUES({0},'{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}',{9},'{10}','{11}','{12}','{13}')",
            empno, sTitle, sEmpFName, sEmpMName, sEmpSName, dDOJ.ToString("yyyy-MM-dd"), dDOB.ToString("yyyy-MM-dd"), sDesig, sRemarks, ManagerId, UserGroup, EmailID, MobNo, branchcode);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            int NewEmpNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(empno) FROM tblEmployee");

            manager.Dispose();
            return NewEmpNo;
        }
        catch (Exception ex)
        {
            throw ex;
        }

        //finally
        //{
        //    if (manager != null)
        //        manager.Dispose();
        //}

    }

    //UpdateEmpDetails
    public int UpdateEmpDetails(int empno, string sTitle, string sEmpFName, string sEmpMName, string sEmpSName, string sDesig, string sRemarks, DateTime dDOJ, DateTime dDOB, int ManagerId, string UserGroup, string EmailID, string MobNo, string branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            dbQry = string.Format("UPDATE tblEmployee SET empno={0},empTitle='{1}',empFirstName='{2}',empMiddleName='{3}',empSurName='{4}',empDOJ='{5}',empDOB='{6}',empDesig='{7}',empRemarks='{8}',ManagerId={9},UserGroup='{10}',EmailID='{11}',MobileNo='{12}',BranchCode='{13}' Where empno={0}",
            empno, sTitle, sEmpFName, sEmpMName, sEmpSName, dDOJ.ToString("yyyy-MM-dd"), dDOB.ToString("yyyy-MM-dd"), sDesig, sRemarks, ManagerId, UserGroup, EmailID, MobNo, branchcode);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            manager.Dispose();
            return empno;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        //finally
        //{
        //    if (manager != null)
        //        manager.Dispose();
        //}
    }

    public int DeleteEmpDetails(int EmpNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();


            dbQry = string.Format("DELETE FROM tblEmployee WHERE empno={0}", EmpNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);



            manager.CommitTransaction();

            return EmpNo;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }
    #endregion

    #region Stock Reconcilation
    //SELECT itemCode,ProductName,Model,ProductDesc,Stock FROM tblProductmaster;
    //SELECT itemCode,ClosingDate,Stock FROM ClosingStock;

    public DataSet GetStockItems(string sDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        if (sDate != "")
            dbQry = "SELECT tblProductMaster.itemCode,ClosingStock.ClosingDate,ClosingStock.Stock,tblProductMaster.ProductName,tblProductMaster.ProductDesc,tblProductMaster.Model FROM ClosingStock,tblProductMaster WHERE tblProductMaster.itemcode=ClosingStock.itemcode AND ClosingDate='" + Convert.ToDateTime(sDate).ToString("MM/dd/yyyy").Trim() + "'  ORDER BY tblProductMaster.itemcode";
        else
            //dbQry = "SELECT tblProductMaster.itemCode,ClosingStock.ClosingDate,ClosingStock.Stock,tblProductMaster.ProductName,tblProductMaster.ProductDesc,tblProductMaster.Model FROM ClosingStock,tblProductMaster WHERE tblProductMaster.itemcode=ClosingStock.itemcode   ORDER BY tblProductMaster.CATEGORYID,tblProductMaster.itemcode";
            dbQry = "SELECT itemCode,ProductName,Model,ProductDesc,Stock FROM tblProductmaster ORDER BY CategoryID,itemcode ";
        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0 || DateTime.Now.ToString("MM/dd/yyyy") != Convert.ToDateTime(sDate).ToString("MM/dd/yyyy"))
            {
                return ds;
            }
            else
            {
                dbQry = "SELECT itemCode,ProductName,Model,ProductDesc,Stock FROM tblProductmaster ORDER BY CategoryID,itemcode ";
                ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    return ds;
                }
                else
                {
                    return null;
                }
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    public DataSet GetStockOpeningItems(string sDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        if (sDate != "")
            dbQry = "SELECT tblProductMaster.itemCode,ClosingStock.ClosingDate,ClosingStock.Stock,tblProductMaster.ProductName,tblProductMaster.ProductDesc,tblProductMaster.Model FROM ClosingStock,tblProductMaster WHERE tblProductMaster.itemcode=ClosingStock.itemcode AND ClosingDate=#" + Convert.ToDateTime(sDate).AddDays(-1).ToString("MM/dd/yyyy").Trim() + "#  ORDER BY tblProductMaster.CATEGORYID,tblProductMaster.itemcode";
        else
            dbQry = "SELECT tblProductMaster.itemCode,ClosingStock.ClosingDate,ClosingStock.Stock,tblProductMaster.ProductName,tblProductMaster.ProductDesc,tblProductMaster.Model FROM ClosingStock,tblProductMaster WHERE tblProductMaster.itemcode=ClosingStock.itemcode AND ClosingDate=#" + DateTime.Now.AddDays(-1).ToString("MM/dd/yyyy").Trim() + "#  ORDER BY tblProductMaster.CATEGORYID,tblProductMaster.itemcode";
        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
            {
                return ds;
            }
            else
            {
                dbQry = "SELECT itemCode,ProductName,Model,ProductDesc,(Stock-Stock) As Stock FROM tblProductmaster ORDER BY CategoryID,itemcode ";
                ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    return ds;
                }
                else
                {
                    return null;
                }
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    public DataSet GetStockItems(string sDate, string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        //manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        if (sDate != "")
            dbQry = "SELECT tblProductMaster.itemCode,ClosingStock.ClosingDate,ClosingStock.Stock,tblProductMaster.ProductName,tblProductMaster.ProductDesc,tblProductMaster.Model FROM ClosingStock,tblProductMaster WHERE tblProductMaster.itemcode=ClosingStock.itemcode AND ClosingDate=#" + Convert.ToDateTime(sDate).ToString("MM/dd/yyyy").Trim() + "#";
        else
            dbQry = "SELECT tblProductMaster.itemCode,ClosingStock.ClosingDate,ClosingStock.Stock,tblProductMaster.ProductName,tblProductMaster.ProductDesc,tblProductMaster.Model FROM ClosingStock,tblProductMaster WHERE tblProductMaster.itemcode=ClosingStock.itemcode";
        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
            {
                return ds;
            }
            else
            {
                dbQry = "SELECT itemCode,ProductName,Model,ProductDesc,(Stock-Stock) As Stock FROM tblProductmaster";
                ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    return ds;
                }
                else
                {
                    return null;
                }
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet GetClosingStock(string sDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = "SELECT tblProductMaster.itemCode,ClosingStock.ClosingDate,ClosingStock.Stock,tblProductMaster.ProductName,tblProductMaster.ProductDesc,tblProductMaster.Model FROM ClosingStock,tblProductMaster WHERE tblProductMaster.itemcode=ClosingStock.itemcode AND ClosingDate='" + Convert.ToDateTime(sDate).ToString("MM/dd/yyyy").Trim() + "'  ORDER BY tblProductMaster.CATEGORYID,tblProductMaster.itemcode";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void InsertClosingStock(string itemCode, string cDate, double stock)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("INSERT INTO ClosingStock(itemcode,ClosingDate,Stock) VALUES('{0}','{1}',{2})",
            itemCode, DateTime.Parse(cDate).ToString("yyyy-MM-dd"), stock);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            manager.CommitTransaction();
        }
        catch (Exception ex)
        {
            manager.Transaction.Rollback();
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void DeleteClosingStock(string cDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        manager.BeginTransaction();

        dbQry = string.Format("DELETE FROM ClosingStock WHERE ClosingDate='{0}'", DateTime.Parse(cDate).ToString("MM/dd/yyyy"));
        manager.ExecuteNonQuery(CommandType.Text, dbQry);

        manager.CommitTransaction();

        manager.Dispose();

    }

    #endregion

    #region Trail Balance
    public DataSet GetTrailGroups()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "SELECT tblGroups.GroupID, tblGroups.GroupName,tblAccHeading.TrailBalance FROM tblGroups, tblAccHeading WHERE tblAccHeading.HeadingID = tblGroups.HeadingID";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    //Select SUM(Amount)As DebitSum FROM tblDayBook WHERE  DebtorID IN (Select LedgerID FROM tblLedger Where GroupID=13)
    public double GetDebitSum(int GroupID)
    {
        double debitSum = 0;
        double oB = 0;
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        manager.BeginTransaction();

        dbQry = string.Format("Select Sum(OpenBalanceDR) As OB FROM tblLedger WHERE  GroupID={0}", GroupID);
        object retOB = manager.ExecuteScalar(CommandType.Text, dbQry);

        if (retOB != null && retOB != DBNull.Value)
        {
            oB = Convert.ToDouble(manager.ExecuteScalar(CommandType.Text, dbQry));
        }

        dbQry = string.Format("Select SUM(Amount) As DebitSum FROM tblDayBook WHERE  DebtorID IN (Select LedgerID FROM tblLedger Where GroupID={0})", GroupID);
        object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

        if (retVal != null && retVal != DBNull.Value)
        {
            debitSum = Convert.ToDouble(manager.ExecuteScalar(CommandType.Text, dbQry));
        }
        manager.CommitTransaction();

        debitSum = debitSum + oB;

        manager.Dispose();
        return debitSum;

    }

    public double GetCreditSum(int GroupID)
    {
        double creditSum = 0;
        double oB = 0;
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        manager.BeginTransaction();

        dbQry = string.Format("Select Sum(OpenBalanceCR) As OB FROM tblLedger WHERE  GroupID={0}", GroupID);
        object retOB = manager.ExecuteScalar(CommandType.Text, dbQry);

        if (retOB != null && retOB != DBNull.Value)
        {
            oB = Convert.ToDouble(manager.ExecuteScalar(CommandType.Text, dbQry));
        }

        dbQry = string.Format("Select SUM(Amount) As CreditSum FROM tblDayBook WHERE  CreditorID IN (Select LedgerID FROM tblLedger Where GroupID={0})", GroupID);
        object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

        if (retVal != null && retVal != DBNull.Value)
        {
            creditSum = Convert.ToDouble(manager.ExecuteScalar(CommandType.Text, dbQry));
        }
        manager.CommitTransaction();
        creditSum = creditSum + oB;
        manager.Dispose();
        return creditSum;

    }

    public DataSet GetLedgerTrail(int iGroupID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "SELECT LedgerID,ledgerName FROM tblLedger WHERE GroupID=" + iGroupID;

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    public double GetCreditTrailSum(int LedgerID)
    {
        double creditSum = 0;
        double oB = 0;
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        manager.BeginTransaction();
        dbQry = string.Format("Select OpenBalanceCR As OB FROM tblLedger WHERE  LedgerID={0}", LedgerID);
        object retOB = manager.ExecuteScalar(CommandType.Text, dbQry);

        if (retOB != null && retOB != DBNull.Value)
        {
            oB = Convert.ToDouble(manager.ExecuteScalar(CommandType.Text, dbQry));
        }
        //dbQry = string.Format("SELECT Credit-Debit as CreditAmt FROM tblLedger WHERE  LedgerID={0}", LedgerID);
        dbQry = string.Format("SELECT SUM(tblDayBook.Amount) as CreditAmt FROM tblDayBook WHERE  tblDayBook.CreditorID IN (SELECT LedgerID FROM tblLedger WHERE LedgerID={0})  HAVING SUM(tblDayBook.Amount) <> 0", LedgerID);
        object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

        if (retVal != null && retVal != DBNull.Value)
        {
            creditSum = Convert.ToDouble(manager.ExecuteScalar(CommandType.Text, dbQry));
        }
        manager.CommitTransaction();

        manager.Dispose();
        creditSum = creditSum + oB;
        return creditSum;

    }
    public double GetDebitTrailSum(int LedgerID)
    {
        double debitSum = 0;
        double oB = 0;
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        manager.BeginTransaction();

        dbQry = string.Format("Select OpenBalanceDR As OB FROM tblLedger WHERE  LedgerID={0}", LedgerID);
        object retOB = manager.ExecuteScalar(CommandType.Text, dbQry);

        if (retOB != null && retOB != DBNull.Value)
        {
            oB = Convert.ToDouble(manager.ExecuteScalar(CommandType.Text, dbQry));
        }
        // dbQry = string.Format("SELECT Debit-Credit as DebitAmt FROM tblLedger WHERE  LedgerID={0}", LedgerID);
        dbQry = string.Format("SELECT SUM(tblDayBook.Amount) as DebitAmt FROM tblDayBook WHERE  tblDayBook.DebtorID IN (SELECT LedgerID FROM tblLedger WHERE LedgerID={0})  HAVING SUM(tblDayBook.Amount) <> 0", LedgerID);
        object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

        if (retVal != null && retVal != DBNull.Value)
        {
            debitSum = Convert.ToDouble(manager.ExecuteScalar(CommandType.Text, dbQry));
        }
        manager.CommitTransaction();

        manager.Dispose();
        debitSum = debitSum + oB;
        return debitSum;

    }


    public double getLedgerOpeningBalance(int ledgerID, string type)
    {
        double oB = 0;
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        manager.BeginTransaction();

        if (type == "debit")
            dbQry = "SELECT Sum(OpenBalanceDr)  FROM tblLedger Where  ledgerID=" + ledgerID;
        else
            dbQry = "SELECT Sum(OpenBalanceCr)  FROM tblLedger Where  ledgerID=" + ledgerID;

        object retOB = manager.ExecuteScalar(CommandType.Text, dbQry);

        if (retOB != null && retOB != DBNull.Value)
        {
            oB = Convert.ToDouble(manager.ExecuteScalar(CommandType.Text, dbQry));
        }


        manager.CommitTransaction();

        manager.Dispose();
        return oB;


    }
    public double getLedgerOpeningBalanceGp(int GpID, string type)
    {
        double oB = 0;
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        manager.BeginTransaction();

        if (type == "debit")
            dbQry = "SELECT Sum(OpenBalanceDr)  FROM tblLedger Where  GroupID=" + GpID;
        else
            dbQry = "SELECT Sum(OpenBalanceCr)  FROM tblLedger Where  GroupID=" + GpID;

        object retOB = manager.ExecuteScalar(CommandType.Text, dbQry);

        if (retOB != null && retOB != DBNull.Value)
        {
            oB = Convert.ToDouble(manager.ExecuteScalar(CommandType.Text, dbQry));
        }


        manager.CommitTransaction();

        manager.Dispose();
        return oB;


    }

    public double GetDebitSum(int GroupID, DateTime sDate, DateTime eDate)
    {
        double debitSum = 0;
        double oB = 0;
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        manager.BeginTransaction();


        oB = GetOpeningBalanceSum(GroupID, sDate, "debit");

        //AND (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) 
        dbQry = "Select SUM(Amount) As DebitSum FROM tblDayBook WHERE  DebtorID IN (Select LedgerID FROM tblLedger Where GroupID=" + GroupID + ") AND (TransDate >=#" + sDate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + eDate.ToString("MM/dd/yyyy") + "#)";
        object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

        if (retVal != null && retVal != DBNull.Value)
        {
            debitSum = Convert.ToDouble(manager.ExecuteScalar(CommandType.Text, dbQry));
        }
        manager.CommitTransaction();

        debitSum = debitSum + oB;

        manager.Dispose();
        return debitSum;

    }
    public double GetOpeningBalanceSum(int GroupID, DateTime oDate, string type)
    {

        double oB = 0;
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        string dbQry = string.Empty;
        double oBal = 0;
        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        manager.BeginTransaction();

        if (type == "debit")
            dbQry = "SELECT SUM(Amount)  As OpeningBal  FROM tblDayBook Where DebtorID IN (Select LedgerID From tblLedger Where  GroupID=" + GroupID + ")  AND TransDate <#" + oDate.ToString("MM/dd/yyyy") + "#";
        else
            dbQry = "SELECT SUM(Amount)  As OpeningBal  FROM tblDayBook Where CreditorID IN (Select LedgerID From tblLedger Where GroupID=" + GroupID + ")  AND TransDate <#" + oDate.ToString("MM/dd/yyyy") + "#";

        object retOB = manager.ExecuteScalar(CommandType.Text, dbQry);

        if (retOB != null && retOB != DBNull.Value)
        {
            oB = Convert.ToDouble(manager.ExecuteScalar(CommandType.Text, dbQry));
        }

        oBal = getLedgerOpeningBalanceGp(GroupID, type);
        manager.CommitTransaction();
        oB = oB + oBal;
        manager.Dispose();
        return oB;

    }
    public double GetCreditSum(int GroupID, DateTime sDate, DateTime eDate)
    {
        double creditSum = 0;
        double oB = 0;
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        manager.BeginTransaction();

        oB = GetOpeningBalanceSum(GroupID, sDate, "credit");

        dbQry = "Select SUM(Amount) As CreditSum FROM tblDayBook WHERE  CreditorID IN (Select LedgerID FROM tblLedger Where GroupID=" + GroupID + ") AND (TransDate >=#" + sDate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + eDate.ToString("MM/dd/yyyy") + "#)";
        //dbQry = string.Format("Select SUM(Amount) As CreditSum FROM tblDayBook WHERE  CreditorID IN (Select LedgerID FROM tblLedger Where GroupID={0})", GroupID);
        object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

        if (retVal != null && retVal != DBNull.Value)
        {
            creditSum = Convert.ToDouble(manager.ExecuteScalar(CommandType.Text, dbQry));
        }
        manager.CommitTransaction();
        creditSum = creditSum + oB;
        manager.Dispose();
        return creditSum;

    }


    #endregion

    #region New DB
    public void changeReconDate(string sDataSource)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(sDataSource);
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            dbQry = string.Format("Update last_recon set recon_date=#{0}#", DateTime.Now.ToString("MM/dd/yyyy"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            manager.CommitTransaction();

        }
        catch (Exception ex)
        {

            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool CreateNewAccount(string connection, string fileName, string sXmlPath, string oldName)
    {
        SqlConnection oleConn, oleSubConn, oleSubConn2;
        int transno = 0;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        DataSet dsChildQry;
        DataSet dsChildQry2;

        oleConn = new SqlConnection(CreateConnectionString(connection));

        //sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource;
        //oleConn = new SqlConnection(CreateConnectionString(sConStr));
        connStr = System.Configuration.ConfigurationManager.ConnectionStrings[connection].ToString();

        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        DataSet dsdata = new DataSet();
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID

            int iGroupID = 0;
            BusinessLogic bl = new BusinessLogic();

            string sXmlNodeName = "Outstanding";
            string sLedger = string.Empty;
            string sFilename = string.Empty;
            double obD = 0;
            double obC = 0;

            dsdata = bl.generateOutStandingReport(iGroupID, sXmlNodeName, connection, sXmlPath);

            if (dsdata != null)
            {
                if (dsdata.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsdata.Tables[0].Rows)
                    {
                        obD = Convert.ToDouble(dr["Debit"]);
                        obC = Convert.ToDouble(dr["Credit"]);
                        sLedger = dr["LedgerName"].ToString();
                        dbQry = string.Format("Update tblLedger SET Debit={0},Credit={1},OpenBalanceDr={2},OpenBalanceCr={3} Where LedgerName = '{4}'", 0, 0, obD, obC, sLedger);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }
            }


            dbQry = string.Format("Delete From ClosingStock");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblPayment");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblReceipt");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblReceivedAmount");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblPurchaseItems");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblPurchase");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblItemRoleMaster");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblSalesRole");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblSalesItems");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblSales");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblAudit");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblCompProduct");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblExecution");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblFormula");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblStock");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "Update tblCompanyinfo set companyname = companyname  +  '" + " " + oldName + "'";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Insert into tblStock(itemcode,openingstock,productname,model,productdesc,categoryid) SELECT itemcode,stock,productname,model,productdesc,categoryid From tblProductMaster where stock > 0");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            string dateRecon = DateTime.Now.ToString("MM/dd/yyyy");
            manager.ExecuteNonQuery(CommandType.Text, "Update last_recon Set recon_date=Format('" + dateRecon + "', 'MM/dd/yyyy')");

            dbQry = string.Format("Delete From tblDaybook");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblAuditLedger");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblAuditDayBook");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblAuditPayment");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblAuditReceipt");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblAuditPaymentAmount");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblAuditReceivedAmount");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblAuditProductMaster");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblAuditBrand");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblAuditCategories");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblAuditCreditDebitNote");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblAuditPurchase");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblAuditPurchaseItems");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblAuditSales");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblAuditSalesItems");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblLog");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblBankRec");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblBankRecon");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblCheque");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblCommission");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblCommissionItems");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblChequeItems");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Delete From tblHirePurchase");
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Delete From tblHireContact");
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblPurchaseName");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblSaveg");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From saveddata");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblLeadMaster");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblLeadContact");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblTimeSheetEntry");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            manager.CommitTransaction();

            return true;
        }
        catch (Exception ex)
        {

            return false;
        }
        finally
        {
            manager.Dispose();
        }

    }
    #endregion

    #region Balance Sheet
    //SELECT HeadingID,Heading FROM tblAccHeading WHERE  BalanceSheet = 'Asset'
    //Type = Asset or Liability
    public DataSet GetBalanceSheetHeadings(string type)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "SELECT HeadingID,Heading,Order FROM tblAccHeading WHERE  BalanceSheet = '" + type + "' Order by 3";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    //SELECT GroupID,GroupName FROM tblGroups Where HeadingID = 7
    public DataSet GetGroupsForHeadiing(int HeadingID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "SELECT GroupID,GroupName FROM tblGroups Where HeadingID =  " + HeadingID;
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    #endregion

    #region "VAT  Summary"

    public DataSet purchaseVatSummary(DateTime sDate, DateTime eDate, double vat, string sType)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            if (sType == "No")
                //dbQry = "SELECT SUM((pi.PurchaseRate * pi.Qty) - ((pi.purchaseRate * pi.Qty ) * (pi.discount/100))) As ActualPaid ,  SUM((pi.PurchaseRate* pi.Qty ) - ((pi.purchaseRate* pi.Qty ) * (pi.discount/100)) + ((pi.purchaseRate* pi.Qty ) * (pi.VAT/100)))-SUM((pi.PurchaseRate* pi.Qty ) - ((pi.purchaseRate* pi.Qty ) * (pi.discount/100))) As VatPaid    FROM tblPurchaseItems pi,tblPurchase p WHERE pi.VAT = " + vat + "   AND p.PurchaseID = pi.purchaseID  AND  (p.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND p.BillDate <= #" + eDate.ToString("MM/dd/yyyy") + "#)  AND (p.SalesReturn='No' or p.SalesReturn is null) ";
                dbQry = "SELECT SUM((pi.PurchaseRate * pi.Qty) - ((pi.purchaseRate * pi.Qty ) * (pi.discount/100))) As ActualPaid ,  SUM(((pi.PurchaseRate* pi.Qty ) - ((pi.purchaseRate* pi.Qty ) * (pi.discount/100))) * (pi.VAT/100))  As VatPaid    FROM tblPurchaseItems pi,tblPurchase p WHERE pi.VAT = " + vat + "  AND p.PurchaseID = pi.purchaseID  AND  (p.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND p.BillDate <= #" + eDate.ToString("MM/dd/yyyy") + "#)  AND (p.SalesReturn='No' or p.SalesReturn is null) ";
            else
                //dbQry = "SELECT SUM((pi.PurchaseRate * pi.Qty) - ((pi.purchaseRate * pi.Qty ) * (pi.discount/100))) As ActualPaid ,  SUM((pi.PurchaseRate* pi.Qty ) - ((pi.purchaseRate* pi.Qty ) * (pi.discount/100)) + ((pi.purchaseRate* pi.Qty ) * (pi.VAT/100)))-SUM((pi.PurchaseRate* pi.Qty ) - ((pi.purchaseRate* pi.Qty ) * (pi.discount/100))) As VatPaid    FROM tblPurchaseItems pi,tblPurchase p WHERE pi.VAT = " + vat + "   AND p.PurchaseID = pi.purchaseID  AND  (p.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND p.BillDate <= #" + eDate.ToString("MM/dd/yyyy") + "#)  AND p.SalesReturn='Yes' ";
                dbQry = "SELECT SUM((pi.PurchaseRate * pi.Qty) - ((pi.purchaseRate * pi.Qty ) * (pi.discount/100))) As ActualPaid ,  SUM(((pi.PurchaseRate* pi.Qty ) - ((pi.purchaseRate* pi.Qty ) * (pi.discount/100))) * (pi.VAT/100))  As VatPaid    FROM tblPurchaseItems pi,tblPurchase p WHERE pi.VAT = " + vat + "  AND p.PurchaseID = pi.purchaseID  AND  (p.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND p.BillDate <= #" + eDate.ToString("MM/dd/yyyy") + "#)  AND (p.SalesReturn='Yes')";
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet salesVatSummary(DateTime sDate, DateTime eDate, double vat, string sType)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            if (sType == "No")
                //dbQry = "SELECT SUM((pi.PurchaseRate * pi.Qty) - ((pi.purchaseRate * pi.Qty ) * (pi.discount/100))) As ActualPaid ,  SUM((pi.PurchaseRate* pi.Qty ) - ((pi.purchaseRate* pi.Qty ) * (pi.discount/100)) + ((pi.purchaseRate* pi.Qty ) * (pi.VAT/100)))-SUM((pi.PurchaseRate* pi.Qty ) - ((pi.purchaseRate* pi.Qty ) * (pi.discount/100))) As VatPaid    FROM tblPurchaseItems pi,tblPurchase p WHERE pi.VAT = " + vat + "   AND p.PurchaseID = pi.purchaseID  AND  (p.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND p.BillDate <= #" + eDate.ToString("MM/dd/yyyy") + "#)  AND (p.SalesReturn='No' or p.SalesReturn is null) ";
                //dbQry = "SELECT SUM((si.Rate * si.qty) - ((si.Rate * si.qty)* (si.discount/100))) As ActualPaid ,  SUM((si.Rate * si.qty) - ((si.Rate * si.qty) * (si.discount/100)) + ((si.Rate * si.qty) * (si.VAT/100)))-SUM((si.Rate * si.qty) - ((si.Rate * si.qty) * (si.discount/100))) As VatPaid    FROM tblSalesItems si,tblSales s WHERE si.VAT = " + vat + "   AND s.Billno = si.Billno  AND  (s.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND s.BillDate <= #" + eDate.ToString("MM/dd/yyyy") + "#) AND (s.PurchaseReturn='No' OR s.PurchaseReturn is null) ;";
                dbQry = "SELECT SUM((pi.Rate * pi.Qty) - ((pi.Rate * pi.Qty ) * (pi.discount/100))) As ActualPaid ,  SUM(((pi.Rate* pi.Qty ) - ((pi.Rate* pi.Qty ) * (pi.discount/100))) * (pi.VAT/100))  As VatPaid    FROM tblSalesItems pi,tblSales p WHERE pi.VAT = " + vat + "  AND p.Billno = pi.Billno  AND  (p.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND p.BillDate <= #" + eDate.ToString("MM/dd/yyyy") + "#)  AND (p.PurchaseReturn='No' or p.PurchaseReturn is null) and (p.cancelled<>true)  ";
            else
                //dbQry = "SELECT SUM((si.Rate * si.qty) - ((si.Rate * si.qty)* (si.discount/100))) As ActualPaid ,  SUM((si.Rate * si.qty) - ((si.Rate * si.qty) * (si.discount/100)) + ((si.Rate * si.qty) * (si.VAT/100)))-SUM((si.Rate * si.qty) - ((si.Rate * si.qty) * (si.discount/100))) As VatPaid    FROM tblSalesItems si,tblSales s WHERE si.VAT = " + vat + "   AND s.Billno = si.Billno  AND  (s.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND s.BillDate <= #" + eDate.ToString("MM/dd/yyyy") + "#) AND (s.PurchaseReturn='Yes') ;";
                dbQry = "SELECT SUM((pi.Rate * pi.Qty) - ((pi.Rate * pi.Qty ) * (pi.discount/100))) As ActualPaid ,  SUM(((pi.Rate* pi.Qty ) - ((pi.Rate* pi.Qty ) * (pi.discount/100))) * (pi.VAT/100))  As VatPaid    FROM tblSalesItems pi,tblSales p WHERE pi.VAT = " + vat + "  AND p.Billno = pi.Billno  AND  (p.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND p.BillDate <= #" + eDate.ToString("MM/dd/yyyy") + "#)  AND (p.PurchaseReturn='Yes')  and (p.cancelled<>true) ";
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet avlVAT(string sType, string sDataSource)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds;
        string sQry = string.Empty;
        try
        {
            manager.Open();
            if (sType == "sales")
                sQry = "SELECT Distinct(VAT) from tblSalesitems";
            else
                sQry = "SELECT Distinct(VAT) from tblPurchaseitems;";

            ds = manager.ExecuteDataSet(CommandType.Text, sQry);
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    #endregion

    #region "CST  Summary Section"

    public DataSet purchaseCSTSummary(DateTime sDate, DateTime eDate, double CST, string sType)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            if (sType == "No")
                // dbQry = "SELECT SUM((pi.PurchaseRate * pi.Qty) - ((pi.purchaseRate * pi.Qty ) * (pi.discount/100))) As ActualPaid ,  SUM((pi.PurchaseRate* pi.Qty ) - ((pi.purchaseRate* pi.Qty ) * (pi.discount/100)) + ((pi.purchaseRate* pi.Qty ) * (pi.CST/100)))-SUM((pi.PurchaseRate* pi.Qty ) - ((pi.purchaseRate* pi.Qty ) * (pi.discount/100))) As CSTPaid    FROM tblPurchaseItems pi,tblPurchase p WHERE pi.CST = " + CST + "   AND p.PurchaseID = pi.purchaseID  AND  (p.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND p.BillDate <= #" + eDate.ToString("MM/dd/yyyy") + "#)  AND (p.SalesReturn='No' or p.SalesReturn is null) ";
                dbQry = "SELECT SUM((pi.PurchaseRate * pi.Qty) - ((pi.purchaseRate * pi.Qty ) * (pi.discount/100))) As ActualPaid ,  SUM(((pi.PurchaseRate* pi.Qty ) - ((pi.purchaseRate* pi.Qty ) * (pi.discount/100))) * (pi.CST/100))  As CSTPaid    FROM tblPurchaseItems pi,tblPurchase p WHERE pi.CST = " + CST + "  AND p.PurchaseID = pi.purchaseID  AND  (p.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND p.BillDate <= #" + eDate.ToString("MM/dd/yyyy") + "#)  AND (p.SalesReturn='No' or p.SalesReturn is null) ";
            else
                //dbQry = "SELECT SUM((pi.PurchaseRate * pi.Qty) - ((pi.purchaseRate * pi.Qty ) * (pi.discount/100))) As ActualPaid ,  SUM((pi.PurchaseRate* pi.Qty ) - ((pi.purchaseRate* pi.Qty ) * (pi.discount/100)) + ((pi.purchaseRate* pi.Qty ) * (pi.CST/100)))-SUM((pi.PurchaseRate* pi.Qty ) - ((pi.purchaseRate* pi.Qty ) * (pi.discount/100))) As CSTPaid    FROM tblPurchaseItems pi,tblPurchase p WHERE pi.CST = " + CST + "   AND p.PurchaseID = pi.purchaseID  AND  (p.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND p.BillDate <= #" + eDate.ToString("MM/dd/yyyy") + "#)  AND p.SalesReturn='Yes' ";
                dbQry = "SELECT SUM((pi.PurchaseRate * pi.Qty) - ((pi.purchaseRate * pi.Qty ) * (pi.discount/100))) As ActualPaid ,  SUM(((pi.PurchaseRate* pi.Qty ) - ((pi.purchaseRate* pi.Qty ) * (pi.discount/100))) * (pi.CST/100))  As CSTPaid    FROM tblPurchaseItems pi,tblPurchase p WHERE pi.CST = " + CST + "  AND p.PurchaseID = pi.purchaseID  AND  (p.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND p.BillDate <= #" + eDate.ToString("MM/dd/yyyy") + "#)  AND (p.SalesReturn='Yes') ";

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }


    public DataSet salesCSTSummary(DateTime sDate, DateTime eDate, double CST, string sType)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            if (sType == "No")
                //dbQry = "SELECT SUM((pi.PurchaseRate * pi.Qty) - ((pi.purchaseRate * pi.Qty ) * (pi.discount/100))) As ActualPaid ,  SUM((pi.PurchaseRate* pi.Qty ) - ((pi.purchaseRate* pi.Qty ) * (pi.discount/100)) + ((pi.purchaseRate* pi.Qty ) * (pi.VAT/100)))-SUM((pi.PurchaseRate* pi.Qty ) - ((pi.purchaseRate* pi.Qty ) * (pi.discount/100))) As VatPaid    FROM tblPurchaseItems pi,tblPurchase p WHERE pi.VAT = " + vat + "   AND p.PurchaseID = pi.purchaseID  AND  (p.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND p.BillDate <= #" + eDate.ToString("MM/dd/yyyy") + "#)  AND (p.SalesReturn='No' or p.SalesReturn is null) ";
                // dbQry = "SELECT SUM((si.Rate * si.qty) - ((si.Rate * si.qty)* (si.discount/100))) As ActualPaid ,  SUM((si.Rate * si.qty) - ((si.Rate * si.qty) * (si.discount/100)) + ((si.Rate * si.qty) * (si.CST/100)))-SUM((si.Rate * si.qty) - ((si.Rate * si.qty) * (si.discount/100))) As CSTPaid    FROM tblSalesItems si,tblSales s WHERE si.CST = " + CST + "   AND s.Billno = si.Billno  AND  (s.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND s.BillDate <= #" + eDate.ToString("MM/dd/yyyy") + "#) AND (s.PurchaseReturn='No' OR s.PurchaseReturn is null) ;";
                dbQry = "SELECT SUM((pi.Rate * pi.Qty) - ((pi.Rate * pi.Qty ) * (pi.discount/100))) As ActualPaid ,  SUM(((pi.Rate* pi.Qty ) - ((pi.Rate* pi.Qty ) * (pi.discount/100))) * (pi.CST/100))  As CSTPaid    FROM tblSalesItems pi,tblSales p WHERE pi.CST = " + CST + "  AND p.Billno = pi.Billno  AND  (p.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND p.BillDate <= #" + eDate.ToString("MM/dd/yyyy") + "#)  AND (p.PurchaseReturn='No' or p.PurchaseReturn is null) ";
            else
                //    dbQry = "SELECT SUM((si.Rate * si.qty) - ((si.Rate * si.qty)* (si.discount/100))) As ActualPaid ,  SUM((si.Rate * si.qty) - ((si.Rate * si.qty) * (si.discount/100)) + ((si.Rate * si.qty) * (si.CST/100)))-SUM((si.Rate * si.qty) - ((si.Rate * si.qty) * (si.discount/100))) As CSTPaid    FROM tblSalesItems si,tblSales s WHERE si.CST = " + CST + "   AND s.Billno = si.Billno  AND  (s.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND s.BillDate <= #" + eDate.ToString("MM/dd/yyyy") + "#) AND (s.PurchaseReturn='Yes') ;";
                dbQry = "SELECT SUM((pi.Rate * pi.Qty) - ((pi.Rate * pi.Qty ) * (pi.discount/100))) As ActualPaid ,  SUM(((pi.Rate* pi.Qty ) - ((pi.Rate* pi.Qty ) * (pi.discount/100))) * (pi.CST/100))  As CSTPaid    FROM tblSalesItems pi,tblSales p WHERE pi.CST = " + CST + "  AND p.Billno = pi.Billno  AND  (p.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND p.BillDate <= #" + eDate.ToString("MM/dd/yyyy") + "#)  AND (p.PurchaseReturn='Yes') ";
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet avlCST(string sType, string sDataSource)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds;
        string sQry = string.Empty;
        try
        {
            manager.Open();
            if (sType == "sales")
                sQry = "SELECT Distinct(CST) from tblSalesitems";
            else
                sQry = "SELECT Distinct(CST) from tblPurchaseitems;";

            ds = manager.ExecuteDataSet(CommandType.Text, sQry);
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }


    #endregion

    #region Formula

    public DataSet GetFormulaForName(string name)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();

            if ((name != null) && (name != ""))
            {
                // dbQry.Append("SELECT FormulaName ,(Select count(*) from tblFormula where A.FormulaID>=FormulaID) as Row ");
                //  dbQry.Append("  from tblFormula as A ");
                dbQry.Append("SELECT FormulaName");
                dbQry.Append(" FROM tblFormula");
                dbQry.Append(" Where A.FormulaName like %" + name + "%");
                dbQry.Append(" Group By A.FormulaName ");
            }
            else
            {
                // dbQry.Append("SELECT FormulaName ,(Select count(*) from tblFormula where A.FormulaID>=FormulaID) as Row ");
                // dbQry.Append("  from tblFormula as A ");
                // dbQry.Append(" Group By A.FormulaName ");
                dbQry.Append("SELECT FormulaName");
                dbQry.Append(" FROM tblFormula");
                dbQry.Append(" Group By FormulaName ");
            }

            //dbQry.Append(" ORDER BY FormulaID Asc ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetFormulaForName(string name, string branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();

            if ((name != null) && (name != ""))
            {
                // dbQry.Append("SELECT FormulaName ,(Select count(*) from tblFormula where A.FormulaID>=FormulaID) as Row ");
                //  dbQry.Append("  from tblFormula as A ");
                if (branchcode != "All")
                {
                    dbQry.Append("SELECT FormulaName,BranchCode");
                    dbQry.Append(" FROM tblFormula");
                    dbQry.Append(" Where A.BranchCode='" + branchcode + "' and A.FormulaName like %" + name + "%");
                    dbQry.Append(" Group By A.FormulaName,A.BranchCode ");
                }
            }
            else
            {
                // dbQry.Append("SELECT FormulaName ,(Select count(*) from tblFormula where A.FormulaID>=FormulaID) as Row ");
                // dbQry.Append("  from tblFormula as A ");
                // dbQry.Append(" Group By A.FormulaName ");
                if (branchcode != "All")
                {
                    dbQry.Append("SELECT FormulaName,BranchCode");
                    dbQry.Append(" FROM tblFormula");
                    dbQry.Append(" Where BranchCode='" + branchcode + "'");
                    dbQry.Append(" Group By FormulaName,BranchCode ");
                }
                else
                {
                    dbQry.Append("SELECT FormulaName");
                    dbQry.Append(" FROM tblFormula");
                    dbQry.Append(" Group By FormulaName ");
                }
            }

            //dbQry.Append(" ORDER BY FormulaID Asc ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }



    public DataSet GetFormulaForID(string formName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();

            if (formName != "")
            {
                dbQry.Append("SELECT FormulaID,FormulaName,tblFormula.ItemCode,ProductName,ProductDesc,Qty,InOut,Unit_Of_Measure ");
                dbQry.Append(" FROM tblFormula Inner Join tblProductMaster On tblFormula.ItemCode = tblProductMaster.ItemCode ");
                dbQry.Append(" Where FormulaName = '" + formName + "'");
            }
            else
            {
                dbQry.Append("SELECT FormulaID,FormulaName,tblFormula.ItemCode,ProductName,ProductDesc,Qty,InOut,Unit_Of_Measure ");
                dbQry.Append(" FROM tblFormula Inner Join tblProductMaster On tblFormula.ItemCode = tblProductMaster.ItemCode ");
            }

            dbQry.Append(" ORDER BY FormulaName Asc");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }



    public DataSet GetINsForFromula(string formula,string branch)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();

            dbQry.Append("SELECT FormulaID as ID,FormulaName,tblFormula.ItemCode,ProductName,ProductDesc,Qty,InOut,Stock ");
            dbQry.Append(" FROM tblFormula Inner Join tblProductStock On tblFormula.ItemCode = tblProductStock.ItemCode ");

            if (formula != "")
            {
                dbQry.Append(" Where tblProductStock.BranchCode='"+ branch +"' And InOut = 'Raw Material' and FormulaName = '" + formula + "'");
            }

            dbQry.Append(" ORDER BY FormulaName Asc");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public DataSet GetINsForFromulaitem(string formula,string branch)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();

            //dbQry.Append("SELECT FormulaID as ID,FormulaName,tblFormula.ItemCode,ProductName,ProductDesc,Qty,InOut,Stock,tblFormula.BranchCode  ");
            //dbQry.Append(" FROM tblFormula Inner Join tblProductStock On tblFormula.ItemCode = tblProductStock.ItemCode where tblFormula.BranchCode='" + branch + "'");
            dbQry.Append("SELECT tblFormula.FormulaID as ID,tblFormula.FormulaName,tblFormula.ItemCode,tblProductStock.ProductName,tblProductStock.ProductDesc, ");
            dbQry.Append("tblFormula.Qty, tblFormula.InOut, tblFormula.Unit_Of_Measure, tblProductStock.BranchCode, tblProductStock.Stock FROM tblFormula INNER JOIN ");
            dbQry.Append("tblProductStock ON  tblFormula.ItemCode = tblProductStock.ItemCode where tblFormula.FormulaName='" + formula + "' And tblProductStock.BranchCode='" + branch + "'");

            if (formula != "")
            {
                dbQry.Append("and InOut = 'Raw Material' and FormulaName = '" + formula + "'");
            }

            dbQry.Append(" ORDER BY FormulaName Asc");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public DataSet GetOUTsForFromula(string formula,string branch)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();

            //dbQry.Append("SELECT FormulaID as ID,FormulaName,tblFormula.ItemCode,ProductName,ProductDesc,Qty,InOut,Stock ");
            //dbQry.Append(" FROM tblFormula Inner Join tblProductMaster On tblFormula.ItemCode = tblProductMaster.ItemCode ");

            dbQry.Append("SELECT tblFormula.FormulaID as ID,tblFormula.FormulaName,tblFormula.ItemCode,tblProductStock.ProductName,tblProductStock.ProductDesc, ");
            dbQry.Append("tblFormula.Qty, tblFormula.InOut, tblFormula.Unit_Of_Measure, tblFormula.BranchCode, tblProductStock.Stock FROM tblFormula INNER JOIN ");
            dbQry.Append("tblProductStock ON tblFormula.BranchCode = tblProductStock.BranchCode AND tblFormula.ItemCode = tblProductStock.ItemCode where tblFormula.BranchCode='" + branch + "'");



            if (formula != "")
            {
                dbQry.Append(" and InOut = 'Product' and FormulaName = '" + formula + "'");
            }

            dbQry.Append(" ORDER BY FormulaName Asc");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public DataSet GetOUTsForFromula(string formula)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();

            dbQry.Append("SELECT FormulaID as ID,FormulaName,tblFormula.ItemCode,ProductName,ProductDesc,Qty,InOut,Stock ");
            dbQry.Append(" FROM tblFormula Inner Join tblProductMaster On tblFormula.ItemCode = tblProductMaster.ItemCode ");

            if (formula != "")
            {
                dbQry.Append(" Where InOut = 'Product' and FormulaName = '" + formula + "'");
            }

            dbQry.Append(" ORDER BY FormulaName Asc");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetProdOUTsForCompID(int CompID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();

            dbQry.Append("SELECT ItemCode,Qty ");
            dbQry.Append("FROM tblExecution ");
            dbQry.Append(" Where InOut = 'Product' and CompID = " + CompID.ToString() + "");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetFromulaDetails(string formula)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();

            dbQry.Append("SELECT Top 1 FormulaName,Date,IsAssembly ");
            dbQry.Append(" FROM tblExecution ");

            if (formula != "")
            {
                dbQry.Append(" Where FormulaName = '" + formula + "'");
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }




    public void ReportFormulaItem(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        //DBManager manager = new DBManager(DataProvider.SqlServer);
        //manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        //DataSet ds = new DataSet();
        //string dbQry = string.Empty;

        try
        {
            dbQry.Append("Select * from tblExecution");
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry.ToString());
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }



    //public void UpdateFormulaItem(string ID, string Qty, string inOut)
    //{
    //    DBManager manager = new DBManager(DataProvider.SqlServer);
    //    manager.ConnectionString = CreateConnectionString(this.ConnectionString);
    //    DataSet ds = new DataSet();
    //    string dbQry = string.Empty;

    //    try
    //    {
    //        dbQry = string.Format("Update tblFormula Set Qty={0},InOut='{1}' Where FormulaID={2}", Qty, inOut, ID);
    //        manager.Open();
    //        manager.ExecuteNonQuery(CommandType.Text, dbQry);
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }

    //}

    public void UpdateFormulaItem(string ID, string Qty, string inOut)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("Update tblFormula Set Qty={0},InOut='{1}' Where FormulaID={2}", Qty, inOut, ID);
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    //public void InsertFormulaItem(string FormulaName, DataSet ds,string branchcode,string username)
    //{
    //    DBManager manager = new DBManager(DataProvider.SqlServer);
    //    manager.ConnectionString = CreateConnectionString(this.ConnectionString);
    //    string dbQry = string.Empty;
    //    string sAuditStr = string.Empty;
    //    // DataRow dr = new DataRow();

    //    try
    //    {
    //        manager.Open();
    //        manager.BeginTransaction();

    //        if (ds != null)
    //        {
    //            if (ds.Tables.Count > 0)
    //            {
    //                foreach (DataRow dr in ds.Tables[0].Rows)
    //                {
    //                    dbQry = string.Format("Insert Into tblFormula(FormulaName,ItemCode,Qty,InOut,Unit_Of_Measure,BranchCode) Values('{0}','{1}',{2},'{3}','{4}','{5}')", FormulaName, dr["ItemCode"].ToString(), Convert.ToDouble(dr["Qty"].ToString()), dr["InOut"].ToString(), dr["Unit_Of_Measure"].ToString(), branchcode);
    //                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
    //                }
    //            }
    //            sAuditStr = "FormulaName : " + FormulaName + " added. Record Details : User : " + username + " Branch : " + branchcode;
    //            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
    //            manager.ExecuteNonQuery(CommandType.Text, dbQry);
    //        }
    //        manager.CommitTransaction();
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }

    //}

    public void InsertFormulaItem(string FormulaName, DataSet ds)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        // DataRow dr = new DataRow();

        try
        {
            manager.Open();
            manager.BeginTransaction();

            if (ds != null)
            {
                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        dbQry = string.Format("Insert Into tblFormula(FormulaName,ItemCode,Qty,InOut,Unit_Of_Measure) Values('{0}','{1}',{2},'{3}','{4}')", FormulaName, dr["ItemCode"].ToString(), Convert.ToDouble(dr["Qty"].ToString()), dr["InOut"].ToString(), dr["Unit_Of_Measure"].ToString());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }
            }
            manager.CommitTransaction();
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }



    public void InsertExecutionItem(string FormulaName, DataSet ds)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.BeginTransaction();

            if (ds != null)
            {
                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        dbQry = string.Format("Insert Into tblExecution(FormulaName,ItemCode,Qty,InOut,CDate,IsAssembly) Values('{0}','{1}',{2},'{3}',Format('{4}', 'dd/mm/yyyy'),'{5}')", FormulaName, dr["ItemCode"].ToString(), dr["Qty"].ToString(), dr["InOut"].ToString(), dr["CDate"].ToString(), dr["isAssembly"].ToString());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }
            }
            manager.CommitTransaction();
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    //public void UpdateFormulaItem(string FormulaName, DataSet ds,string branchcode,string username)
    //{
    //    DBManager manager = new DBManager(DataProvider.SqlServer);
    //    manager.ConnectionString = CreateConnectionString(this.ConnectionString);
    //    string dbQry = string.Empty;
    //    DataSet oldData = new DataSet();
    //    string sAuditStr = string.Empty;

    //    try
    //    {
    //        manager.Open();
    //        manager.BeginTransaction();

    //        if (ds != null)
    //        {
    //            if (ds.Tables.Count > 0)
    //            {

    //                dbQry = string.Format("Delete from tblFormula Where FormulaName = '" + FormulaName + "' ");
    //                manager.ExecuteNonQuery(CommandType.Text, dbQry);

    //                foreach (DataRow dr in ds.Tables[0].Rows)
    //                {
    //                    dbQry = string.Format("Insert Into tblFormula(FormulaName,ItemCode,Qty,InOut,Unit_Of_Measure,BranchCode) Values('{0}','{1}',{2},'{3}','{4}','{5}')", FormulaName, dr["ItemCode"].ToString(), Convert.ToDouble(dr["Qty"].ToString()), dr["InOut"].ToString(), dr["Unit_Of_Measure"].ToString(), branchcode);
    //                    //dbQry = string.Format("Insert Into tblFormula(FormulaName,ItemCode,Qty,InOut) Values('{0}','{1}',{2},'{3}')", FormulaName, dr["ItemCode"].ToString(), Convert.ToInt32(dr["Qty"].ToString()), dr["InOut"].ToString());
    //                    // dbQry = string.Format("Update tblFormula Set FormulaName='{0}', ItemCode='{1}', Qty={2}, InOut='{3}',Unit_Of_Measure='{4}' Where FormulaID={5}", FormulaName, dr["ItemCode"].ToString(), Convert.ToInt32(dr["Qty"].ToString()), dr["InOut"].ToString(),dr["Unit_Of_Measure"].ToString(), dr["FormulaID"].ToString());
    //                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
    //                }
    //            }
    //            sAuditStr = "FormulaName : " + FormulaName + " added. Record Details : User : " + username + " Branch : " + branchcode;
    //            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit and Update", DateTime.Now.ToString("yyyy-MM-dd"));
    //            manager.ExecuteNonQuery(CommandType.Text, dbQry);
    //        }

    //        manager.CommitTransaction();

    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }

    //}

    public void UpdateFormulaItem(string FormulaName, DataSet ds)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        DataSet oldData = new DataSet();

        try
        {
            manager.Open();
            manager.BeginTransaction();

            if (ds != null)
            {
                if (ds.Tables.Count > 0)
                {

                    dbQry = string.Format("Delete from tblFormula Where FormulaName = '" + FormulaName + "' ");
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        dbQry = string.Format("Insert Into tblFormula(FormulaName,ItemCode,Qty,InOut,Unit_Of_Measure) Values('{0}','{1}',{2},'{3}','{4}')", FormulaName, dr["ItemCode"].ToString(), Convert.ToDouble(dr["Qty"].ToString()), dr["InOut"].ToString(), dr["Unit_Of_Measure"].ToString());
                        //dbQry = string.Format("Insert Into tblFormula(FormulaName,ItemCode,Qty,InOut) Values('{0}','{1}',{2},'{3}')", FormulaName, dr["ItemCode"].ToString(), Convert.ToInt32(dr["Qty"].ToString()), dr["InOut"].ToString());
                        // dbQry = string.Format("Update tblFormula Set FormulaName='{0}', ItemCode='{1}', Qty={2}, InOut='{3}',Unit_Of_Measure='{4}' Where FormulaID={5}", FormulaName, dr["ItemCode"].ToString(), Convert.ToInt32(dr["Qty"].ToString()), dr["InOut"].ToString(),dr["Unit_Of_Measure"].ToString(), dr["FormulaID"].ToString());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }
            }

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }



    public DataSet listCompProducts(DateTime startDate, DateTime endDate, bool isProcessed, string branch)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();

            dbQry.Append("SELECT * FROM tblCompProduct");

            if (isProcessed)
                dbQry.Append(" Where IsReleased ='Y' ");
            else
                dbQry.Append(" Where IsReleased ='N' ");


            dbQry.Append(" AND CDate >= '" + startDate.ToString("yyyy-MM-dd").Trim() + "' ");

            dbQry.Append(" AND CDate <= '" + endDate.ToString("yyyy-MM-dd").Trim() + "' ");

            if (branch != "All")
            {
                dbQry.Append(" and BranchCode='" + branch + "' Order By CDate Desc");
            }
            else
            {
            dbQry.Append(" Order By CDate Desc");
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }







    public DataSet listCompProductsreport(string connection,string productid,DateTime date,DateTime date1,string inout,string branch,bool ispros)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();
            dbQry.Append(" SELECT tblExecution.FormulaName, tblExecution.ItemCode, tblExecution.Qty, tblExecution.InOut, tblExecution.BranchCode,tblProductStock.ProductName, tblProductStock.Model, tblProductStock.Stock, tblProductStock.ProductDesc, tblCompProduct.CDate,tblCompProduct.IsReleased,tblCompProduct.Comments FROM tblExecution INNER JOIN tblCompProduct ON tblExecution.CompID = tblCompProduct.CompID INNER JOIN tblProductStock ON tblExecution.ItemCode = tblProductStock.ItemCode ");
           // dbQry.Append("SELECT tblExecution.CompID, tblExecution.FormulaName,tblExecution.CompID,tblExecution.BranchCode,tblExecution.ItemCode,tblExecution.Qty,tblExecution.InOut,tblCompProduct.CDate,tblCompProduct.Comments,tblCompProduct.IsReleased FROM tblCompProduct inner join tblExecution on tblExecution.CompId=tblCompProduct.CompId ");

            if (ispros)
                dbQry.Append(" Where IsReleased ='Y' ");
            else
                dbQry.Append(" Where IsReleased ='N' ");

            if (productid == "---All---")
            {
            }
            else
            {

                dbQry.Append(" AND tblExecution.FormulaName ='" + productid + "' ");
            }

            dbQry.Append(" AND CDate >= '" + date.ToString("MM/dd/yyyy").Trim() + "' ");

            dbQry.Append(" AND CDate <= '" + date1.ToString("MM/dd/yyyy").Trim() + "' ");

            if (inout == "All")
            {


            }
            else
            {
                dbQry.Append(" AND tblExecution.InOut ='" + inout + "' ");
            }

            dbQry.Append(" AND tblExecution.BranchCode ='" + branch + "' ");

            dbQry.Append(" Order By CDate Desc");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    #endregion

    #region "Company Info"

    public string GetStockEdit()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string stockEdit = string.Empty;

        string sQry = string.Empty;
        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        sQry = "SELECT KEYVALUE from tblSettings Where KEY = 'STOCKEDIT'";
        ds = manager.ExecuteDataSet(CommandType.Text, sQry);
        if (ds.Tables[0].Rows.Count > 0)
            stockEdit = Convert.ToString(ds.Tables[0].Rows[0]["KEYVALUE"]);
        else
            stockEdit = "N";

        manager.Dispose();
        return stockEdit;
    }

    public int InsertCompanyInfo(clsCompany clscmp)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;

        //DeleteClosingStock(cDate);
        dbQry = "Delete From tblCompanyInfo";
        manager.ExecuteNonQuery(CommandType.Text, dbQry);
        dbQry = string.Format("INSERT INTO tblCompanyInfo(CompanyName,Address,City,state,Pincode,phone,Fax,eMail,TINno,GstNo) VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}')",
        clscmp.Company, clscmp.Address, clscmp.City, clscmp.State, clscmp.Pincode, clscmp.Phone, clscmp.Fax, clscmp.Email, clscmp.TIN, clscmp.CST);
        int rows = manager.ExecuteNonQuery(CommandType.Text, dbQry);
        return rows;
        manager.Dispose();
    }

    public DataSet getCompanyDetails()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            dbQry = "SELECT CompanyName,Address,City,State,PinCode,Phone,Tinno,Gstno,FAX,email FROM tblCompanyInfo";
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    #endregion

    #region Year End Report
    public void UpdateLedgerFolio(int ledgerID, int pageNum)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        manager.BeginTransaction();


        dbQry = string.Format("UPDATE tblLedger SET FolioNumber={1} WHERE ledgerid={0}", ledgerID, pageNum);
        manager.ExecuteNonQuery(CommandType.Text, dbQry);



        manager.CommitTransaction();

        manager.Dispose();

    }
    #endregion

    #region Job Management
    public int InsertJobDetails(string refno, string JobTitle, string JobDesc, int AssgnTo, string sAssignDate, string sExpReturnDate, double QtyAss, double QtyRet, string isComp)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;

        dbQry = string.Format("INSERT INTO tblJobDetails(Ref,JobTitle,JobDesc,AssignedDate,AssignedTo,Qty_Assigned,Qty_Returned,ExpReturnDate,IsCompleted) VALUES('{0}','{1}','{2}',Format('{3}', 'dd/mm/yyyy'),{4},{5},{6},Format('{7}', 'dd/mm/yyyy'),'{8}')",
        refno, JobTitle, JobDesc, sAssignDate, AssgnTo, QtyAss, QtyRet, sExpReturnDate, isComp);
        manager.ExecuteNonQuery(CommandType.Text, dbQry);
        int NewJobID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(JobID) FROM tblJobDetails");

        manager.Dispose();
        return NewJobID;
    }

    public int UpdateJobDetails(string refno, string JobTitle, string JobDesc, int AssgnTo, string sAssignDate, string sExpReturnDate, double QtyAss, double QtyRet, int JobID, string isComp)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        dbQry = string.Format("UPDATE tblJobDetails SET ref='{0}',JobTitle='{1}',JobDesc='{2}',AssignedDate=Format('{3}', 'dd/mm/yyyy'),AssignedTo={4},Qty_Assigned={5},Qty_Returned={6},ExpReturnDate=Format('{7}', 'dd/mm/yyyy'),IsCompleted='{8}' Where JobID={9}",
        refno, JobTitle, JobDesc, sAssignDate, AssgnTo, QtyAss, QtyRet, sExpReturnDate, isComp, JobID);
        manager.ExecuteNonQuery(CommandType.Text, dbQry);


        manager.Dispose();
        return JobID;
    }
    public int DeleteJobDetails(int jobID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        manager.BeginTransaction();


        dbQry = string.Format("DELETE FROM tblJobDetails WHERE jobID={0}", jobID);
        manager.ExecuteNonQuery(CommandType.Text, dbQry);

        dbQry = string.Format("DELETE FROM tblJobCompletedDetails WHERE jobID={0}", jobID);
        manager.ExecuteNonQuery(CommandType.Text, dbQry);


        manager.CommitTransaction();

        manager.Dispose();
        return jobID;
    }
    public DataSet ListJobDetails(string JobTitle)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        string dbQry = string.Empty;
        DataSet ds = new DataSet();

        if (JobTitle != "0")
            dbQry = "Select JobID,Ref,JobTitle,JobDesc,AssignedDate,AssignedTo,Qty_Assigned,Qty_Returned,ExpReturnDate,IsCompleted,JobCompletedDate FROM tblJobDetails  WHERE JobTitle LIKE '%" + JobTitle.Trim() + "%'";
        else
            dbQry = "Select JobID,Ref,JobTitle,JobDesc,AssignedDate,AssignedTo,Qty_Assigned,Qty_Returned,ExpReturnDate,IsCompleted,JobCompletedDate FROM tblJobDetails";

        dbQry = dbQry + " Order By Qty_Assigned Desc";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    public DataSet ListJobDetails(int jobID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select JobID, Ref,JobTitle,JobDesc,AssignedDate,AssignedTo,Qty_Assigned,Qty_Returned,ExpReturnDate,IsCompleted,JobCompletedDate FROM tblJobDetails Where jobID=" + jobID;

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    public DataSet ListJobDetails(int jobID, int empno, string status)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        if (jobID != 0 && empno != 0 && status == "ALL")
            dbQry = "Select JobID, Ref,JobTitle,JobDesc,AssignedDate,AssignedTo,Qty_Assigned,Qty_Returned,ExpReturnDate,IsCompleted,JobCompletedDate FROM tblJobDetails Where jobID=" + jobID + " AND AssignedTo=" + empno;
        else if (jobID != 0 && empno != 0 && status != "ALL")
            dbQry = "Select JobID, Ref,JobTitle,JobDesc,AssignedDate,AssignedTo,Qty_Assigned,Qty_Returned,ExpReturnDate,IsCompleted,JobCompletedDate FROM tblJobDetails Where jobID=" + jobID + " AND AssignedTo=" + empno + " AND IsCompleted='" + status + "'";
        else if (jobID != 0 && empno == 0 && status == "ALL")
            dbQry = "Select JobID, Ref,JobTitle,JobDesc,AssignedDate,AssignedTo,Qty_Assigned,Qty_Returned,ExpReturnDate,IsCompleted,JobCompletedDate FROM tblJobDetails Where jobID=" + jobID;
        else if (jobID != 0 && empno == 0 && status != "ALL")
            dbQry = "Select JobID, Ref,JobTitle,JobDesc,AssignedDate,AssignedTo,Qty_Assigned,Qty_Returned,ExpReturnDate,IsCompleted,JobCompletedDate FROM tblJobDetails Where jobID=" + jobID + " AND IsCompleted='" + status + "'";
        else if (jobID == 0 && empno != 0 && status != "ALL")
            dbQry = "Select JobID, Ref,JobTitle,JobDesc,AssignedDate,AssignedTo,Qty_Assigned,Qty_Returned,ExpReturnDate,IsCompleted,JobCompletedDate FROM tblJobDetails Where AssignedTo=" + empno + " AND IsCompleted='" + status + "'";
        else if (jobID == 0 && empno != 0 && status == "ALL")
            dbQry = "Select JobID, Ref,JobTitle,JobDesc,AssignedDate,AssignedTo,Qty_Assigned,Qty_Returned,ExpReturnDate,IsCompleted,JobCompletedDate FROM tblJobDetails Where AssignedTo=" + empno;
        else
            dbQry = "Select JobID, Ref,JobTitle,JobDesc,AssignedDate,AssignedTo,Qty_Assigned,Qty_Returned,ExpReturnDate,IsCompleted,JobCompletedDate FROM tblJobDetails Where IsCompleted='" + status + "'";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    public DataSet ListJobAssignee(int AssignTo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select JobID,JobTitle FROM tblJobDetails Where AssignedTo=" + AssignTo;

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    public string ListExecutive(int empno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select empFirstName From tblEmployee Where empno=" + empno;

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds.Tables[0].Rows[0]["empFirstName"].ToString();
            else
                return "";
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    public int InsertJobReturnDetails(string Remarks, int jobID, double QtyRet, string sReturnDate, double QtyAss)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        manager.BeginTransaction();
        dbQry = string.Format("INSERT INTO tblJobCompletedDetails(JobID,Qty_Return,ReturnedDate,Remarks) VALUES({0},{1},Format('{2}', 'dd/mm/yyyy'),'{3}')",
        jobID, QtyRet, sReturnDate, Remarks);
        manager.ExecuteNonQuery(CommandType.Text, dbQry);
        int NewJobID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(JobCompletedID) FROM tblJobCompletedDetails");
        dbQry = "UPDATE tblJobDetails SET Qty_Returned = Qty_Returned + " + Convert.ToDouble(QtyRet) + " Where JobID=" + jobID;
        manager.ExecuteNonQuery(CommandType.Text, dbQry);

        dbQry = "SELECT Sum(Qty_Return) FROM tblJobCompletedDetails Where JobID=" + jobID;
        double qtyJob = 0;
        double qtyRetJob = 0;
        object retval = manager.ExecuteScalar(CommandType.Text, dbQry);
        if (retval != null)
        {

            qtyRetJob = (double)retval;

        }
        dbQry = "SELECT Qty_Assigned FROM tblJobDetails Where JobID=" + jobID;
        object retjobval = manager.ExecuteScalar(CommandType.Text, dbQry);
        if (retjobval != null)
        {
            qtyJob = (double)retjobval;
        }
        if (qtyRetJob == qtyJob)
        {
            dbQry = string.Format("UPDATE tblJobDetails SET IsCompleted = 'Y',JobCompletedDate=Format('{1}', 'dd/mm/yyyy') Where JobID={0}", jobID, sReturnDate);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        else if (qtyRetJob > qtyJob)
        {

            manager.Dispose();
            return -1;
        }


        manager.CommitTransaction();
        manager.Dispose();
        return NewJobID;
    }
    public void DeleteJobReturnDetails(int jobCmpID, double QtyRet, int jobID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        manager.BeginTransaction();


        dbQry = "UPDATE tblJobDetails SET Qty_Returned = Qty_Returned - " + Convert.ToDouble(QtyRet) + " Where JobID=" + jobID;
        manager.ExecuteNonQuery(CommandType.Text, dbQry);

        dbQry = string.Format("DELETE FROM tblJobCompletedDetails WHERE jobCompletedID={0}", jobCmpID);
        manager.ExecuteNonQuery(CommandType.Text, dbQry);


        manager.CommitTransaction();

        manager.Dispose();

    }
    public DataSet ListJobReturn(int jobID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select Qty_Return,ReturnedDate,Remarks,JobCompletedID FROM tblJobCompletedDetails WHERE JobID=" + jobID;

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    #endregion

    #region QtyRturn

    public DataSet ListQtyReturns(string connection, int LedgerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            if (LedgerID != 0)
                dbQry = string.Format("select r.LedgerID, l.LedgerName, Qty,DateEntered, Comments, ReturnID from tblQtyReturn r inner join tblLedger l on r.LedgerID = l.LedgerID Where r.LedgerID = {0} And DateEntered >= (Select Format(KeyValue,'MM/dd/yyyy') From tblSettings Where Key = 'QTYDATE') Order by DateEntered", LedgerID);
            else
                dbQry = string.Format("select r.LedgerID, l.LedgerName, Qty,DateEntered, Comments, ReturnID from tblQtyReturn r inner join tblLedger l on r.LedgerID = l.LedgerID Where DateEntered >= (Select Format(KeyValue,'MM/dd/yyyy') From tblSettings Where Key = 'QTYDATE') Order by DateEntered");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void InsertQtyReturns(string connection, int LedgerID, string dateEntered, int Qty, string Comments)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {

            dbQry = string.Format("Insert Into tblQtyReturn(LedgerID,DateEntered,Qty,Comments) Values ({0},Format('{1}','dd/MM/yyyy'),{2},'{3}')", LedgerID, dateEntered, Qty, Comments);
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetQtyReturnForId(string connection, int retunID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select ReturnID,r.LedgerID,r.DateEntered,r.Qty,r.Comments From tblQtyReturn r inner join tblLedger l on l.LedgerID = r.LedgerID where r.ReturnID = " + retunID.ToString();
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void UpdateQtyReturns(string connection, int ReturnID, int LedgerID, string DateEntered, double Qty, string Comments)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        dbQry = string.Format("UPDATE tblQtyReturn SET LedgerID={0},DateEntered=Format('{1}','dd/MM/yyyy'),Qty='{2}',Comments='{3}' Where ReturnID ={4}",
        LedgerID, DateEntered, Qty, Comments, ReturnID);
        manager.ExecuteNonQuery(CommandType.Text, dbQry);
        manager.Dispose();

    }

    public void DeleteQtyReturns(string connection, int ReturnID)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;

        dbQry = string.Format("Delete From tblQtyReturn Where ReturnID ={0}", ReturnID);

        manager.ExecuteNonQuery(CommandType.Text, dbQry);
        manager.Dispose();

    }


    #endregion

    #region DeleteItems

    public DataSet lsPayments(string connection, string criteria, string value, bool isDeleted)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();


        if (criteria == "TransDate")
            value = value;
        else if (criteria == "RefNo")
            value = value;
        else
            value = "%" + value + "%";

        try
        {
            manager.Open();
            object reconDate = manager.ExecuteScalar(CommandType.Text, "Select recon_date from last_recon");

            if (!isDeleted)
            {
                dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
                dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo, Payment.Paymode FROM  (((tblDayBook INNER JOIN ");
                dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) INNER JOIN ");
                dbQry.Append("tblPayMent Payment ON tblDayBook.TransNo = Payment.JournalID) ");

                if (criteria == "RefNo" && value != null)
                {
                    dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.RefNo = {0} ", value);
                }
                else if (criteria == "TransDate" && value != null)
                {
                    dbQry.AppendFormat("WHERE tblDayBook.VoucherType = 'Payment' and Format([tblDayBook.TransDate], 'dd/mm/yyyy') = '{0}' ", Convert.ToDateTime(value).ToShortDateString());
                }
                else if (criteria == "LedgerName" && value != null)
                {
                    dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and Debitor.LedgerName like '{0}' ", value);
                }
                else if (criteria == "Narration" && value != null)
                {
                    dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.Narration like '{0}' ", value);
                }
                else
                {
                    dbQry.Append("Where tblDayBook.VoucherType = 'Payment' ");
                }

                dbQry.Append(" AND tblDayBook.TransDate > #" + DateTime.Parse(reconDate.ToString()).ToString("MM/dd/yyyy") + "#");
                dbQry.Append(" Order By tblDayBook.TransDate Desc ");

            }
            else
            {
                dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
                dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo, Payment.Paymode FROM  (((TemptblDayBook tblDayBook INNER JOIN ");
                dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) INNER JOIN ");
                dbQry.Append("TemptblPayMent Payment ON tblDayBook.TransNo = Payment.JournalID) ");

                if (criteria == "RefNo" && value != null)
                {
                    dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.RefNo = {0} ", value);
                }
                else if (criteria == "TransDate" && value != null)
                {
                    dbQry.AppendFormat("WHERE tblDayBook.VoucherType = 'Payment' and Format([tblDayBook.TransDate], 'dd/mm/yyyy') = '{0}' ", Convert.ToDateTime(value).ToShortDateString());
                }
                else if (criteria == "LedgerName" && value != null)
                {
                    dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and Debitor.LedgerName like '{0}' ", value);
                }
                else if (criteria == "Narration" && value != null)
                {
                    dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.Narration like '{0}' ", value);
                }
                else
                {
                    dbQry.Append("Where tblDayBook.VoucherType = 'Payment' ");
                }

                dbQry.Append(" AND tblDayBook.TransDate > #" + DateTime.Parse(reconDate.ToString()).ToString("MM/dd/yyyy") + "#");
                dbQry.Append(" Order By tblDayBook.TransDate Desc ");
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet lsReceipts(string connection, string txtSearch, string dropDown, bool isDeleted)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        //if (criteria == "TransDate")
        //    value = value;
        //else if (criteria == "RefNo")
        //    value = value;
        //else
        //    value = "%" + value + "%";
        if (txtSearch == "TransDate")
            dropDown = dropDown;
        else if (txtSearch == "RefNo")
            dropDown = dropDown;
        else
            dropDown = "%" + dropDown + "%";

        try
        {
            manager.Open();
            object reconDate = manager.ExecuteScalar(CommandType.Text, "Select recon_date from last_recon");
            if (isDeleted)
            {
                dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
                dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo, Receipt.Paymode FROM  (((TemptblDayBook tblDayBook INNER JOIN ");
                dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
                dbQry.Append("TemptblReceipt Receipt ON tblDayBook.TransNo = Receipt.JournalID) ");

                if (txtSearch == "RefNo" && dropDown != null)
                {
                    dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and tblDayBook.RefNo = {0} ", dropDown);
                }
                else if (txtSearch == "TransDate" && dropDown != null)
                {
                    dbQry.AppendFormat("WHERE tblDayBook.VoucherType= 'Receipt' and Format([tblDayBook.TransDate], 'dd/mm/yyyy') = '{0}' ", Convert.ToDateTime(dropDown).ToShortDateString());
                }
                else if (txtSearch == "LedgerName" && dropDown != null)
                {
                    dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and Creditor.LedgerName like '{0}' ", dropDown);
                }
                else if (txtSearch == "Narration" && dropDown != null)
                {
                    dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and tblDayBook.Narration like '{0}' ", dropDown);
                }
                else
                {
                    dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' ");
                }

                dbQry.Append(" AND tblDayBook.TransDate > #" + DateTime.Parse(reconDate.ToString()).ToString("MM/dd/yyyy") + "#");
                dbQry.Append("Order By tblDayBook.TransDate Desc");

            }
            else
            {
                dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
                dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo, Receipt.Paymode FROM  (((tblDayBook INNER JOIN ");
                dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
                dbQry.Append("tblReceipt Receipt ON tblDayBook.TransNo = Receipt.JournalID) ");

                if (txtSearch == "RefNo" && dropDown != null)
                {
                    dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and tblDayBook.RefNo = {0} ", dropDown);
                }
                else if (txtSearch == "TransDate" && dropDown != null)
                {
                    dbQry.AppendFormat("WHERE tblDayBook.VoucherType= 'Receipt' and Format([tblDayBook.TransDate], 'dd/mm/yyyy') = '{0}' ", Convert.ToDateTime(dropDown).ToShortDateString());
                }
                else if (txtSearch == "LedgerName" && dropDown != null)
                {
                    dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and Creditor.LedgerName like '{0}' ", dropDown);
                }
                else if (txtSearch == "Narration" && dropDown != null)
                {
                    dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and tblDayBook.Narration like '{0}' ", dropDown);
                }
                else
                {
                    dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' ");
                }

                dbQry.Append(" AND tblDayBook.TransDate > #" + DateTime.Parse(reconDate.ToString()).ToString("MM/dd/yyyy") + "#");
                dbQry.Append("Order By tblDayBook.TransDate Desc ");
            }
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet lsJournal(string sRefno, string sNaration, string sDate, string sPath, bool isDeleted)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(sPath);
        string dbQry2 = string.Empty;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        String searchStr = string.Empty;
        if (!isDeleted)
        {
            if (sRefno != string.Empty && sRefno != null)
                searchStr = "tblDayBook.Refno=" + sRefno.Trim();
            if (sNaration != string.Empty && sNaration != null)
            {
                if (searchStr == string.Empty)
                    searchStr = searchStr + "tblDayBook.Narration LIKE '%" + sNaration.Trim() + "%'";
                else
                    searchStr = searchStr + " AND tblDayBook.Narration LIKE '%" + sNaration.Trim() + "%'";
            }
            if (sDate != string.Empty && sDate != null)
            {
                if (searchStr == string.Empty)
                    searchStr = searchStr + "tblDayBook.TransDate=#" + Convert.ToDateTime(sDate).ToString("MM/dd/yyyy").Trim() + "#";
                else
                    searchStr = searchStr + " AND tblDayBook.TransDate=#" + Convert.ToDateTime(sDate).ToString("MM/dd/yyyy").Trim() + "#";
            }
            dbQry2 = "Select recon_date from last_recon";
            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if (searchStr != string.Empty)
            {
                dbQry.Append("SELECT  tblDayBook.TransNo,  Format(tblDayBook.TransDate, 'dd/mm/yyyy') As TransDate, Creditor.LedgerName As Cred, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
                dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo FROM  (((tblDayBook INNER JOIN ");
                dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID))");

                dbQry.AppendFormat("Where {0} AND VoucherType='Journal' AND tblDayBook.TransDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "#  Order By tblDayBook.TransDate Desc", searchStr);

            }
            else
            {
                dbQry.Append("SELECT  tblDayBook.TransNo, Format(tblDayBook.TransDate, 'dd/mm/yyyy') As TransDate, Creditor.LedgerName As Cred, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
                dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo FROM  (((tblDayBook INNER JOIN ");
                dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID))");

                dbQry.AppendFormat(" Where VoucherType='Journal' AND tblDayBook.TransDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "#   Order By tblDayBook.TransDate Desc");
            }

        }
        else
        {
            if (sRefno != string.Empty && sRefno != null)
                searchStr = "tblDayBook.Refno=" + sRefno.Trim();
            if (sNaration != string.Empty && sNaration != null)
            {
                if (searchStr == string.Empty)
                    searchStr = searchStr + "tblDayBook.Narration LIKE '%" + sNaration.Trim() + "%'";
                else
                    searchStr = searchStr + " AND tblDayBook.Narration LIKE '%" + sNaration.Trim() + "%'";
            }
            if (sDate != string.Empty && sDate != null)
            {
                if (searchStr == string.Empty)
                    searchStr = searchStr + "tblDayBook.TransDate=#" + Convert.ToDateTime(sDate).ToString("MM/dd/yyyy").Trim() + "#";
                else
                    searchStr = searchStr + " AND tblDayBook.TransDate=#" + Convert.ToDateTime(sDate).ToString("MM/dd/yyyy").Trim() + "#";
            }
            dbQry2 = "Select recon_date from last_recon";
            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if (searchStr != string.Empty)
            {
                dbQry.Append("SELECT  tblDayBook.TransNo,  Format(tblDayBook.TransDate, 'dd/mm/yyyy') As TransDate, Creditor.LedgerName As Cred, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
                dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo FROM  (((TemptblDayBook tblDayBook INNER JOIN ");
                dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID))");

                dbQry.AppendFormat("Where {0} AND VoucherType='Journal' AND tblDayBook.TransDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "#  Order By tblDayBook.TransDate Desc", searchStr);

            }
            else
            {
                dbQry.Append("SELECT  tblDayBook.TransNo, Format(tblDayBook.TransDate, 'dd/mm/yyyy') As TransDate, Creditor.LedgerName As Cred, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
                dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo FROM  (((TemptblDayBook tblDayBook INNER JOIN ");
                dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID))");

                dbQry.AppendFormat(" Where VoucherType='Journal' AND tblDayBook.TransDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "#   Order By tblDayBook.TransDate Desc");
            }

        }
        try
        {

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public DataSet lsPurchase(bool isDeleted)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";

            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);
            if (!isDeleted)
            {
                if ((retVal != null) && (retVal != DBNull.Value))
                {
                    dbQry.Append("SELECT tblPurchase.PurchaseId,tblPurchase.Billno,Format(tblPurchase.Billdate, 'dd/mm/yyyy') As BillDate,tblPurchase.Paymode,tblPurchase.SupplierID,tblDaybook.Chequeno,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.narration,tblPurchase.JournalID,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason");
                    dbQry.Append(" FROM (((tblDayBook  INNER JOIN  tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID)) Where tblPurchase.BillDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ORDER BY tblPurchase.BillDate Desc");

                }
                else
                {
                    dbQry.Append("SELECT tblPurchase.PurchaseId,tblPurchase.Billno,Format(tblPurchase.Billdate, 'dd/mm/yyyy') As BillDate,tblPurchase.Paymode,tblPurchase.SupplierID,tblDaybook.Chequeno,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.narration,tblPurchase.JournalID,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason");
                    dbQry.Append(" FROM (((tblDayBook  INNER JOIN  tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID)) ORDER BY tblPurchase.BillDate Desc");
                }
            }
            else
            {
                if ((retVal != null) && (retVal != DBNull.Value))
                {
                    dbQry.Append("SELECT tblPurchase.PurchaseId,tblPurchase.Billno,Format(tblPurchase.Billdate, 'dd/mm/yyyy') As BillDate,tblPurchase.Paymode,tblPurchase.SupplierID,tblDaybook.Chequeno,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.narration,tblPurchase.JournalID,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason");
                    dbQry.Append(" FROM (((TempTblDayBook tblDayBook  INNER JOIN TemptblPurchase tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID)) Where tblPurchase.BillDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ORDER BY tblPurchase.BillDate Desc");

                }
                else
                {
                    dbQry.Append("SELECT tblPurchase.PurchaseId,tblPurchase.Billno,Format(tblPurchase.Billdate, 'dd/mm/yyyy') As BillDate,tblPurchase.Paymode,tblPurchase.SupplierID,tblDaybook.Chequeno,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.narration,tblPurchase.JournalID,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason");
                    dbQry.Append(" FROM (((TempTblDayBook tblDayBook  INNER JOIN TemptblPurchase tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID)) ORDER BY tblPurchase.BillDate Desc");
                }

            }
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet lsPurchaseForId(String Billno, bool isDeleted)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);
            if (!isDeleted)
            {
                if ((retVal != null) && (retVal != DBNull.Value))
                {
                    dbQry.Append("SELECT tblPurchase.PurchaseId,tblPurchase.Billno,Format(tblPurchase.Billdate, 'dd/mm/yyyy') As BillDate,tblPurchase.Paymode,tblPurchase.SupplierID,tblDaybook.Chequeno,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.narration,tblPurchase.JournalID,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason");
                    dbQry.Append(" FROM (((tblDayBook  INNER JOIN  tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID))");
                    dbQry.Append(" Where tblPurchase.Billno='" + Billno.Trim() + "' AND tblPurchase.BillDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ORDER BY tblPurchase.BillDate Desc");
                }
                else
                {
                    dbQry.Append("SELECT tblPurchase.PurchaseId,tblPurchase.Billno,Format(tblPurchase.Billdate, 'dd/mm/yyyy') As BillDate,tblPurchase.Paymode,tblPurchase.SupplierID,tblDaybook.Chequeno,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.narration,tblPurchase.JournalID,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason");
                    dbQry.Append(" FROM (((tblDayBook  INNER JOIN  tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID))");
                    dbQry.Append(" ORDER BY tblPurchase.BillDate Desc");

                }
            }
            else
            {
                if ((retVal != null) && (retVal != DBNull.Value))
                {
                    dbQry.Append("SELECT tblPurchase.PurchaseId,tblPurchase.Billno,Format(tblPurchase.Billdate, 'dd/mm/yyyy') As BillDate,tblPurchase.Paymode,tblPurchase.SupplierID,tblDaybook.Chequeno,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.narration,tblPurchase.JournalID,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason");
                    dbQry.Append(" FROM (((TemptblDaybook tblDayBook  INNER JOIN TemptblPurchase tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID))");
                    dbQry.Append(" Where tblPurchase.Billno='" + Billno.Trim() + "' AND tblPurchase.BillDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ORDER BY tblPurchase.BillDate Desc");
                }
                else
                {
                    dbQry.Append("SELECT tblPurchase.PurchaseId,tblPurchase.Billno,Format(tblPurchase.Billdate, 'dd/mm/yyyy') As BillDate,tblPurchase.Paymode,tblPurchase.SupplierID,tblDaybook.Chequeno,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.narration,tblPurchase.JournalID,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason");
                    dbQry.Append(" FROM (((TemptblDaybook tblDayBook  INNER JOIN TemptblPurchase tblPurchase ON  tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID))");
                    dbQry.Append(" ORDER BY tblPurchase.BillDate Desc");

                }
            }
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet lsSales(bool isDeleted)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {

            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);
            if (!isDeleted)
            {
                if ((retVal != null) && (retVal != DBNull.Value))
                {
                    dbQry.Append("SELECT tblSales.Billno,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload");
                    dbQry.Append(" FROM (((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID )) Where tblSales.BillDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "#  ORDER BY tblSales.BillDate Desc");
                }
                else
                {
                    dbQry.Append("SELECT tblSales.Billno,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload");
                    dbQry.Append(" FROM (((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID ))   ORDER BY tblSales.BillDate Desc");
                }
            }
            else
            {
                if ((retVal != null) && (retVal != DBNull.Value))
                {
                    dbQry.Append("SELECT tblSales.Billno,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload");
                    dbQry.Append(" FROM (((TemptblDayBook tblDayBook  INNER JOIN TemptblSales tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID )) Where tblSales.BillDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "#  ORDER BY tblSales.BillDate Desc");
                }
                else
                {
                    dbQry.Append("SELECT tblSales.Billno,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload");
                    dbQry.Append(" FROM (((TemptblDayBook tblDayBook  INNER JOIN TemptblSales tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID ))   ORDER BY tblSales.BillDate Desc");
                }
            }
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet lsSalesForId(int Billno, bool isDeleted)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            // object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);
            if (!isDeleted)
            {
                if ((retVal != null) && (retVal != DBNull.Value))
                {

                    dbQry.Append("SELECT tblSales.Billno,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload");
                    dbQry.Append(" FROM (((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID))");
                    dbQry.Append(" Where tblSales.Billno=" + Billno + " AND tblSales.BillDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ORDER BY tblSales.BillDate Desc");
                }
                else
                {
                    dbQry.Append("SELECT tblSales.Billno,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload");
                    dbQry.Append(" FROM (((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID))");
                    dbQry.Append(" ORDER BY tblSales.BillDate Desc");
                }
            }
            else
            {
                if ((retVal != null) && (retVal != DBNull.Value))
                {

                    dbQry.Append("SELECT tblSales.Billno,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload");
                    dbQry.Append(" FROM (((TemptblDaybook tblDayBook  INNER JOIN TemptblSales tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID))");
                    dbQry.Append(" Where tblSales.Billno=" + Billno + " AND tblSales.BillDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ORDER BY tblSales.BillDate Desc");
                }
                else
                {
                    dbQry.Append("SELECT tblSales.Billno,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload");
                    dbQry.Append(" FROM (((TemptblDaybook tblDayBook  INNER JOIN TemptblSales  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID))");
                    dbQry.Append(" ORDER BY tblSales.BillDate Desc");
                }

            }
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public void InsertTempReceipt(string connection, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string ChequeNo, string Paymode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {

            if (!IsValidDate(connection, TransDate))
            {
                throw new Exception("Invalid Date");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("INSERT INTO TemptblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int TransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM TemptblDayBook");

            dbQry = string.Format("Insert Into TemptblReceipt(CreditorID,JournalID,Paymode) Values({0},{1},'{2}')", CreditorID, TransNo, Paymode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);

            double Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);

            double Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void InsertTempJournal(string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string sPath)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(sPath);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("INSERT INTO TemptblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}',{6})",
            TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, RefNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int TransNo = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM TemptblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                TransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM TemptblDayBook");
            }
            else
            {
                TransNo = TransNo + 1;
            }

            //dbQry = string.Format("Insert Into tblPayment(JournalID,Paymode) Values({0},'{1}')", TransNo, PaymentMode);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);
            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);
            double Debit = 0;

            object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebit != null) && (retDebit != DBNull.Value))
            {
                Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }



            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);
            double Credit = 0;

            object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCredit != null) && (retCredit != DBNull.Value))
            {
                Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }


            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void InsertTempPayment(string connection, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string ChequeNo, string PaymentMode, string BillNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {

            if (!IsValidDate(connection, TransDate))
            {
                throw new Exception("Invalid Date");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("INSERT INTO TemptblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int TransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM TemptblDayBook");

            dbQry = string.Format("Insert Into TemptblPayment(JournalID,Paymode,BillNo) Values({0},'{1}','{2}')", TransNo, PaymentMode, BillNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);

            double Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);

            double Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

            manager.Dispose();

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public int InsertSalesHideNew(int Tbillno, string BillDate, int sCustomerID, string sCustomerName, string sCustomerAddress, string sCustomerContact, int paymode, string sCreditCardno, int BankName, double Amount, string purchasereturn, string prreason, int executive, double freight, double dLU, DataSet salesDS)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        DateTime sBilldate;
        string[] sDate;
        string delim = "/";
        char[] delimA = delim.ToCharArray();
        CultureInfo culture = new CultureInfo("pt-BR");
        string sVoucherType = string.Empty;
        string strRole = string.Empty;
        string[] roleArr;
        string sRoleID = string.Empty;
        string sQty = string.Empty;
        string[] roleSpl;
        int iSno = 0;

        try
        {
            sDate = BillDate.Trim().Split(delimA);


            sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));

        }
        catch (Exception ex)
        {
            //Response.Write("<b><font face='Trebuchet MS' size=2 color=red>Invalid Bill Date Format</font></b>");
            throw new Exception("Invalid Bill Date Format", ex);
        }


        double oldAmt = 0;
        string sNarration = string.Empty;
        int creditorID = 2;
        int DebtorID = 0;
        int salesID = 0;
        int BillNo = 0;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID

            if (paymode == 1)
                DebtorID = 1;
            else if (paymode == 2)
                DebtorID = BankName;
            else
                DebtorID = sCustomerID;

            //End Retriving the old Debtor and CreditorID

            //Sales A/c -2 will always be the Creditor


            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebtorID);
            double Debit = 0;

            object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebit != null) && (retDebit != DBNull.Value))
            {
                Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }
            //double Payment = (double)manager.ExecuteScalar(CommandType.Text, "Select Amount from tblDayBook Where TransNo=" + TransNo);
            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebtorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", creditorID);
            double Credit = 0;
            object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCredit != null) && (retCredit != DBNull.Value))
            {
                Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, creditorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Updating the Debit and credit
            //Start Delete the old record
            if (purchasereturn == "NO")
                sVoucherType = "Sales";
            else
                sVoucherType = "Purchase Return";

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,CreditCardNo,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
             sBilldate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, sCreditCardno, 0);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            int NewTransNo = 0;

            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NewTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }

            //object retBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM tblSales");
            //if ((retBillVal != null) && (retBillVal != DBNull.Value))
            //{
            //    BillNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM tblSales");
            //}
            //else
            //{
            //    BillNo = BillNo + 1;
            //}
            BillNo = Tbillno;
            dbQry = string.Format("INSERT INTO tblSales(Billno,BillDate,JournalID,CustomerID,CustomerName,CustomerAddress,CustomerContacts,Paymode,purchaseReturn,purchaseReturnReason,executive,freight,LoadUnload) VALUES({0},Format('{1}', 'dd/mm/yyyy'),{2},{3},'{4}','{5}','{6}',{7},'{8}','{9}','{10}',{11},{12})",
           BillNo, sBilldate.ToShortDateString(), NewTransNo, sCustomerID, sCustomerName, sCustomerAddress, sCustomerContact, paymode, purchasereturn, prreason, executive, freight, dLU);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);



            object retSalesVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo) FROM tblSales");
            if ((retSalesVal != null) && (retSalesVal != DBNull.Value))
            {
                salesID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo) FROM tblSales");
            }
            else
            {
                salesID = salesID + 1;
            }


            sNarration = sVoucherType + " - Bill No:" + BillNo;
            dbQry = string.Format("Update tblDayBook SET Narration = '{0}' Where TransNo={1}", sNarration, NewTransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int iBundle = 0;
            int iRod = 0;
            double cst = 0;


            //Adding the Purchase Items Table
            if (salesDS != null)
            {
                if (salesDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in salesDS.Tables[0].Rows)
                    {
                        iSno = iSno + 1;
                        object returnStock = manager.ExecuteScalar(CommandType.Text, "Select stock from tblProductMaster WHERE itemCode='" + Convert.ToString(dr["ItemCode"]) + "'");
                        if ((returnStock != null) && (returnStock != DBNull.Value))
                        {
                            if (Convert.ToDouble(returnStock) < Convert.ToDouble(dr["Qty"]))
                            {
                                salesID = -1;
                                return salesID;
                            }

                        }
                        if (dr["Bundles"] != null && dr["Bundles"] != DBNull.Value)
                            iBundle = Convert.ToInt32(dr["Bundles"]);

                        if (dr["Rods"] != null && dr["Rods"] != DBNull.Value)
                            iRod = Convert.ToInt32(dr["Rods"]);

                        if (dr["cst"] != null && dr["cst"] != DBNull.Value)
                            cst = Convert.ToInt32(dr["cst"]);
                        if (dr["isRole"].ToString() == "Y")
                        {
                            if (dr["Roles"].ToString() != "NO ROLE" && dr["Roles"].ToString().Trim() != "")
                            {
                                strRole = dr["Roles"].ToString();
                                if (strRole.EndsWith(","))
                                    strRole = strRole.Remove(strRole.Length - 1, 1);
                                roleArr = strRole.Split(',');
                                for (int k = 0; k < roleArr.Length; k++)
                                {
                                    if (roleArr[k].ToString() != "")
                                    {
                                        roleSpl = roleArr[k].Split('_');
                                        dbQry = string.Format("INSERT INTO tblSalesRole(BillNo,ItemCode,Qty_Bought,RoleID) VALUES({0},'{1}',{2},{3})", salesID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(roleSpl[1]), Convert.ToInt32((roleSpl[0])));
                                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                                        dbQry = string.Format("Update tblItemRoleMaster SET Qty_Available = Qty_Available - {0} WHERE roleid={1}", Convert.ToDouble(roleSpl[1]), Convert.ToDouble(roleSpl[0]));
                                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                                    }
                                }

                                dbQry = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,isrole,CST,Bundles,Rods) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10})", salesID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), iSno, Convert.ToString(dr["isRole"]), cst, iBundle, iRod);
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);


                            }
                        }
                        else
                        {
                            dbQry = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,isrole,CST,Bundles,Rods) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10})", salesID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), iSno, Convert.ToString(dr["isRole"]), cst, iBundle, iRod);
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        }


                        dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock - {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        cst = 0;
                        iBundle = 0;
                        iRod = 0;
                    }
                    iSno = 0;
                }
            }

            manager.CommitTransaction();
            return salesID;
        }

        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public int InsertTempSalesNew(int bill, string BillDate, int sCustomerID, string sCustomerName, string sCustomerAddress, string sCustomerContact, int paymode, string sCreditCardno, int BankName, double Amount, string purchasereturn, string prreason, int executive, double freight, double dLU, DataSet salesDS)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        DateTime sBilldate;
        string[] sDate;
        string delim = "/";
        char[] delimA = delim.ToCharArray();
        CultureInfo culture = new CultureInfo("pt-BR");
        string sVoucherType = string.Empty;
        string strRole = string.Empty;
        string[] roleArr;
        string sRoleID = string.Empty;
        string sQty = string.Empty;
        string[] roleSpl;
        int iSno = 0;

        try
        {
            sDate = BillDate.Trim().Split(delimA);


            sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));

        }
        catch (Exception ex)
        {
            //Response.Write("<b><font face='Trebuchet MS' size=2 color=red>Invalid Bill Date Format</font></b>");
            throw new Exception("Invalid Bill Date Format", ex);
        }


        double oldAmt = 0;
        string sNarration = string.Empty;
        int creditorID = 2;
        int DebtorID = 0;
        int salesID = 0;
        int BillNo = 0;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID

            if (paymode == 1)
                DebtorID = 1;
            else if (paymode == 2)
                DebtorID = BankName;
            else
                DebtorID = sCustomerID;

            //End Retriving the old Debtor and CreditorID

            //Sales A/c -2 will always be the Creditor


            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebtorID);
            double Debit = 0;

            object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebit != null) && (retDebit != DBNull.Value))
            {
                Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }
            //double Payment = (double)manager.ExecuteScalar(CommandType.Text, "Select Amount from tblDayBook Where TransNo=" + TransNo);
            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebtorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", creditorID);
            double Credit = 0;
            object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCredit != null) && (retCredit != DBNull.Value))
            {
                Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, creditorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Updating the Debit and credit
            //Start Delete the old record
            if (purchasereturn == "No")
                sVoucherType = "Sales";
            else
                sVoucherType = "Purchase Return";

            dbQry = string.Format("INSERT INTO TemptblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,CreditCardNo,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
             sBilldate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, sCreditCardno, 0);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            int NewTransNo = 0;

            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM TemptblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NewTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM TemptblDayBook");
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }

            //object retBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM TemptblSales");
            //if ((retBillVal != null) && (retBillVal != DBNull.Value))
            //{
            //    BillNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM TemptblSales");
            //}
            //else
            //{
            //    BillNo = BillNo + 1;
            //}

            dbQry = string.Format("INSERT INTO TemptblSales(Billno,BillDate,JournalID,CustomerID,CustomerName,CustomerAddress,CustomerContacts,Paymode,purchaseReturn,purchaseReturnReason,executive,freight,LoadUnload) VALUES({0},Format('{1}', 'dd/mm/yyyy'),{2},{3},'{4}','{5}','{6}',{7},'{8}','{9}','{10}',{11},{12})",
            bill, sBilldate.ToShortDateString(), NewTransNo, sCustomerID, sCustomerName, sCustomerAddress, sCustomerContact, paymode, purchasereturn, prreason, executive, freight, dLU);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);



            object retSalesVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo) FROM TemptblSales");
            if ((retSalesVal != null) && (retSalesVal != DBNull.Value))
            {
                salesID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo) FROM TemptblSales");
            }
            else
            {
                salesID = salesID + 1;
            }

            salesID = bill;
            sNarration = sVoucherType + " - Bill No:" + BillNo;
            dbQry = string.Format("Update TemptblDayBook SET Narration = '{0}' Where TransNo={1}", sNarration, NewTransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int iBundle = 0;
            int iRod = 0;
            double cst = 0;


            //Adding the Purchase Items Table
            if (salesDS != null)
            {
                if (salesDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in salesDS.Tables[0].Rows)
                    {
                        iSno = iSno + 1;
                        object returnStock = manager.ExecuteScalar(CommandType.Text, "Select stock from tblProductMaster WHERE itemCode='" + Convert.ToString(dr["ItemCode"]) + "'");
                        if ((returnStock != null) && (returnStock != DBNull.Value))
                        {
                            if (Convert.ToDouble(returnStock) < Convert.ToDouble(dr["Qty"]))
                            {
                                salesID = -1;
                                return salesID;
                            }

                        }
                        if (dr["Bundles"] != null && dr["Bundles"] != DBNull.Value)
                            iBundle = Convert.ToInt32(dr["Bundles"]);

                        if (dr["Rods"] != null && dr["Rods"] != DBNull.Value)
                            iRod = Convert.ToInt32(dr["Rods"]);

                        if (dr["cst"] != null && dr["cst"] != DBNull.Value)
                            cst = Convert.ToInt32(dr["cst"]);

                        if (dr["isRole"].ToString() == "Y")
                        {
                            if (dr["Roles"].ToString() != "NO ROLE" && dr["Roles"].ToString().Trim() != "")
                            {
                                strRole = dr["Roles"].ToString();
                                if (strRole.EndsWith(","))
                                    strRole = strRole.Remove(strRole.Length - 1, 1);
                                roleArr = strRole.Split(',');
                                for (int k = 0; k < roleArr.Length; k++)
                                {
                                    if (roleArr[k].ToString() != "")
                                    {
                                        roleSpl = roleArr[k].Split('_');
                                        dbQry = string.Format("INSERT INTO TemptblSalesRole(BillNo,ItemCode,Qty_Bought,RoleID) VALUES({0},'{1}',{2},{3})", salesID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(roleSpl[1]), Convert.ToInt32((roleSpl[0])));
                                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                                        dbQry = string.Format("Update TemptblItemRoleMaster SET Qty_Available = Qty_Available - {0} WHERE roleid={1}", Convert.ToDouble(roleSpl[1]), Convert.ToDouble(roleSpl[0]));
                                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                                    }
                                }

                                dbQry = string.Format("INSERT INTO TemptblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,isrole,CST,Bundles,Rods) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10})", salesID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), iSno, Convert.ToString(dr["IsRole"]), cst, iBundle, iRod);
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);


                            }
                        }
                        else
                        {
                            dbQry = string.Format("INSERT INTO TemptblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,isrole,CST,Bundles,Rods) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10})", salesID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), iSno, Convert.ToString(dr["IsRole"]), cst, iBundle, iRod);
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        }


                        // dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock - {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                        // manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        cst = 0;
                        iBundle = 0;
                        iRod = 0;
                    }
                    iSno = 0;
                }
            }

            manager.CommitTransaction();
            return salesID;
        }

        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public int InsertHidePurchase(int TpurchaseID, string Billno, DateTime BillDate, int SupplierID, int paymode, string Chequeno, int BankName, double Amount, string salesreturn, string srReason, double freight, double dLU, DataSet purchaseDS)
    {
        /*End Purchase Loading / Unloading Freight Change - March 16*/
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldSupplierID = 0;
        double oldAmt = 0;
        string sNarration = string.Empty;
        int creditorID = 0;
        int DebtorID = 3;
        int purchaseID = 0;
        string sVoucherType = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID

            if (paymode == 1)
                creditorID = 1;
            else if (paymode == 2)
                creditorID = BankName;
            else
                creditorID = SupplierID;

            //End Retriving the old Debtor and CreditorID
            if (salesreturn == "No")
                sVoucherType = "Purchase";
            else
                sVoucherType = "Sales Return";

            sNarration = sVoucherType + " - Bill No:" + Billno;
            //Purchase A/c - 3 will always be the debtor
            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebtorID);
            double Debit = 0;

            object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebit != null) && (retDebit != DBNull.Value))
            {
                Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            //double Payment = (double)manager.ExecuteScalar(CommandType.Text, "Select Amount from tblDayBook Where TransNo=" + TransNo);
            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebtorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", creditorID);
            double Credit = 0;
            object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCredit != null) && (retCredit != DBNull.Value))
            {
                Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }
            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, creditorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Updating the Debit and credit
            //Start Delete the old record


            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,Chequeno,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
            BillDate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, Chequeno, 0);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int NewTransNo = 0;

            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NewTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }

            /*Start Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/
            dbQry = string.Format("INSERT INTO tblPurchase(Billno,BillDate,SupplierID,JournalID,Paymode,TotalAmt,salesreturn,salesreturnreason,freight,LoadUnload) VALUES('{0}',Format('{1}', 'dd/mm/yyyy'),{2},{3},{4},{5},'{6}','{7}',{8},{9})",
            Billno, BillDate.ToShortDateString(), SupplierID, NewTransNo, paymode, Amount, salesreturn, srReason, freight, dLU);
            /*Start Purchase Loading / Unloading Freight Change - March 16*/
            manager.ExecuteNonQuery(CommandType.Text, dbQry);




            object retPurchase = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(PurchaseID) FROM tblPurchase");

            if ((retPurchase != null) && (retPurchase != DBNull.Value))
            {
                purchaseID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(PurchaseID) FROM tblPurchase");
            }
            else
            {
                purchaseID = purchaseID + 1;
            }
            //purchaseID = TpurchaseID;

            //Store the details in the Audit Table.
            //sAuditStr = "Transaction: " + TransNo + " got edited and deleted Record Details : SupplierID=" + SupplierID + ",CreditorID=3,Amount=" + oldAmt + " New Trans No :" + NewTransNo;
            //dbQry = string.Format("INSERT INTO  tblAudit(Description,Command) VALUES('{0}','{1}')", sAuditStr, "Edit and Update");
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //Adding the Purchase Items Table
            object retRole = null;
            int roleID = 0;
            string rolename = string.Empty;

            double vat = 0;
            double discount = 0;
            double cst = 0;

            if (purchaseDS != null)
            {
                if (purchaseDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in purchaseDS.Tables[0].Rows)
                    {

                        if (dr["vat"] != null && dr["vat"] != DBNull.Value)
                            vat = Convert.ToInt32(dr["vat"]);

                        if (dr["discount"] != null && dr["discount"] != DBNull.Value)
                            discount = Convert.ToInt32(dr["discount"]);

                        if (dr["cst"] != null && dr["cst"] != DBNull.Value)
                            cst = Convert.ToInt32(dr["cst"]);

                        if (dr["isRole"] != DBNull.Value)
                        {
                            if (dr["isRole"].ToString().ToUpper() == "Y")
                            {
                                dbQry = string.Format("INSERT INTO tblItemRoleMaster(Role_Date,ItemCode,Qty_Bought,Qty_Available) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}',{2},{3})", DateTime.Now.ToShortDateString(), Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Qty"]));
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);
                                retRole = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(RoleID) FROM tblItemRoleMaster");

                                if ((retRole != null) && (retRole != DBNull.Value))
                                {
                                    roleID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(roleID) FROM tblItemRoleMaster");
                                }
                                else
                                {
                                    roleID = roleID + 1;
                                }
                                rolename = Convert.ToString(dr["isRole"]);
                            }

                        }
                        dbQry = string.Format("INSERT INTO tblPurchaseItems(purchaseID,itemcode,Qty,PurchaseRate,discount,vat,roleid,isRole,cst) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8})", purchaseID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["PurchaseRate"]), discount, vat, roleID, rolename, cst);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock + {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }
                }
            }
            manager.CommitTransaction();
            return purchaseID;
        }

        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public int InsertTempPurchase(string Billno, DateTime BillDate, int SupplierID, int paymode, string Chequeno, int BankName, double Amount, string salesreturn, string srReason, double freight, double dLU, DataSet purchaseDS)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldSupplierID = 0;
        double oldAmt = 0;
        string sNarration = string.Empty;
        int creditorID = 0;
        int DebtorID = 3;
        int purchaseID = 0;
        string sVoucherType = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID

            if (paymode == 1)
                creditorID = 1;
            else if (paymode == 2)
                creditorID = BankName;
            else
                creditorID = SupplierID;

            //End Retriving the old Debtor and CreditorID
            if (salesreturn == "No")
                sVoucherType = "Purchase";
            else
                sVoucherType = "Sales Return";

            sNarration = sVoucherType + " - Bill No:" + Billno;
            //Purchase A/c - 3 will always be the debtor
            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebtorID);
            double Debit = 0;

            object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebit != null) && (retDebit != DBNull.Value))
            {
                Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            //double Payment = (double)manager.ExecuteScalar(CommandType.Text, "Select Amount from tblDayBook Where TransNo=" + TransNo);
            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebtorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", creditorID);
            double Credit = 0;
            object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCredit != null) && (retCredit != DBNull.Value))
            {
                Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }
            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, creditorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Updating the Debit and credit
            //Start Delete the old record


            dbQry = string.Format("INSERT INTO TemptblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,Chequeno,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
            BillDate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, Chequeno, 0);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int NewTransNo = 0;

            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM TemptblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NewTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM TemptblDayBook");
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }

            /*Start Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/
            dbQry = string.Format("INSERT INTO TemptblPurchase(Billno,BillDate,SupplierID,JournalID,Paymode,TotalAmt,salesreturn,salesreturnreason,freight,LoadUnload) VALUES('{0}',Format('{1}', 'dd/mm/yyyy'),{2},{3},{4},{5},'{6}','{7}',{8},{9})",
            Billno, BillDate.ToShortDateString(), SupplierID, NewTransNo, paymode, Amount, salesreturn, srReason, freight, dLU);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            /*End Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/




            object retPurchase = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(PurchaseID) FROM TemptblPurchase");

            if ((retPurchase != null) && (retPurchase != DBNull.Value))
            {
                purchaseID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(PurchaseID) FROM TemptblPurchase");
            }
            else
            {
                purchaseID = purchaseID + 1;
            }

            //Store the details in the Audit Table.
            //sAuditStr = "Transaction: " + TransNo + " got edited and deleted Record Details : SupplierID=" + SupplierID + ",CreditorID=3,Amount=" + oldAmt + " New Trans No :" + NewTransNo;
            //dbQry = string.Format("INSERT INTO  tblAudit(Description,Command) VALUES('{0}','{1}')", sAuditStr, "Edit and Update");
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //Adding the Purchase Items Table
            object retRole = null;
            int roleID = 0;
            string rolename = string.Empty;


            double discount = 0;
            double vat = 0;
            double cst = 0;
            if (purchaseDS != null)
            {
                if (purchaseDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in purchaseDS.Tables[0].Rows)
                    {

                        if (dr["vat"] != null && dr["vat"] != DBNull.Value)
                            vat = Convert.ToInt32(dr["vat"]);

                        if (dr["discount"] != null && dr["discount"] != DBNull.Value)
                            discount = Convert.ToInt32(dr["discount"]);

                        if (dr["cst"] != null && dr["cst"] != DBNull.Value)
                            cst = Convert.ToInt32(dr["cst"]);
                        if (dr["isRole"] != DBNull.Value)
                        {
                            if (dr["isRole"] != DBNull.Value)
                            {
                                if (dr["isRole"].ToString().ToUpper() == "Y")
                                {
                                    dbQry = string.Format("INSERT INTO TemptblItemRoleMaster(Role_Date,ItemCode,Qty_Bought,Qty_Available) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}',{2},{3})", DateTime.Now.ToShortDateString(), Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Qty"]));
                                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                                    retRole = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(RoleID) FROM TemptblItemRoleMaster");

                                    if ((retRole != null) && (retRole != DBNull.Value))
                                    {
                                        roleID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(roleID) FROM TemptblItemRoleMaster");
                                    }
                                    else
                                    {
                                        roleID = roleID + 1;
                                    }
                                }
                                rolename = Convert.ToString(dr["isRole"]);
                            }
                        }

                        dbQry = string.Format("INSERT INTO TemptblPurchaseItems(purchaseID,itemcode,Qty,PurchaseRate,discount,vat,roleid,isRole,cst) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8})", purchaseID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["PurchaseRate"]), discount, vat, roleID, rolename, cst);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        //dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock + {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                        //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }
                }
            }
            manager.CommitTransaction();
            return purchaseID;
        }

        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void DeleteTempPayment(string connection, int TransNo, bool requireValidation)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            ds = manager.ExecuteDataSet(CommandType.Text, "Select Amount,DebtorID,CreditorID,TransDate from TemptblDayBook Where TransNo=" + TransNo);

            int DebitorID = Convert.ToInt32(ds.Tables[0].Rows[0]["DebtorID"].ToString());
            int CreditorID = Convert.ToInt32(ds.Tables[0].Rows[0]["CreditorID"].ToString());
            double Amount = Convert.ToDouble(ds.Tables[0].Rows[0]["Amount"].ToString());
            DateTime TransDate = Convert.ToDateTime(ds.Tables[0].Rows[0]["TransDate"].ToString());

            if (requireValidation)
            {
                if (!IsValidDate(connection, TransDate))
                {
                    throw new Exception("Invalid Date");
                }
            }

            dbQry = string.Format("Update tblLedger SET Debit = Debit - {0} Where LedgerID={1}", Amount, DebitorID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Update tblLedger SET Credit = Credit - {0} Where LedgerID={1}", Amount, CreditorID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From TemptblDayBook Where TransNo={0}", TransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From TemptblPayment Where JournalID = {0}", TransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {

            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void DeleteTempReceipt(string connection, int TransNo, bool requireValidation)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            ds = manager.ExecuteDataSet(CommandType.Text, "Select Amount,DebtorID,CreditorID,TransDate from TemptblDayBook Where TransNo=" + TransNo);

            int DebitorID = Convert.ToInt32(ds.Tables[0].Rows[0]["DebtorID"].ToString());
            int CreditorID = Convert.ToInt32(ds.Tables[0].Rows[0]["CreditorID"].ToString());
            double Amount = Convert.ToDouble(ds.Tables[0].Rows[0]["Amount"].ToString());
            DateTime TransDate = Convert.ToDateTime(ds.Tables[0].Rows[0]["TransDate"].ToString());

            if (requireValidation)
            {
                if (!IsValidDate(connection, TransDate))
                {
                    throw new Exception("Invalid Date");
                }
            }

            dbQry = string.Format("Update tblLedger SET Debit = Debit - {0} Where LedgerID={1}", Amount, DebitorID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Update tblLedger SET Credit = Credit - {0} Where LedgerID={1}", Amount, CreditorID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From TemptblDayBook Where TransNo={0}", TransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From TemptblReceipt Where JournalID = {0}", TransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void DeleteTempSalesNew(int Billno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldDebitID = 0;
        int oldCreditID = 0;
        double oldAmt = 0;
        string transdate = string.Empty;
        DataSet roleDs = new DataSet();
        string sNarration = string.Empty;

        int creditorID = 0;
        int DebtorID = 3;



        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID
            dsOld = GetTempSalesForId(Billno);

            if (dsOld != null)
            {
                if (dsOld.Tables[0].Rows.Count > 0)
                {
                    if (dsOld.Tables[0].Rows[0]["JournalID"] != null)
                    {
                        if (dsOld.Tables[0].Rows[0]["JournalID"].ToString() != string.Empty)
                        {
                            TransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["JournalID"].ToString());
                        }
                    }
                }
            }
            dbQry = string.Format("Select DebtorID,CreditorID,Amount,transDate from TemptblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables[0].Rows.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                    transdate = Convert.ToString(dsOld.Tables[0].Rows[0]["transDate"]);
                }

            }

            //Step 1 - Start

            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", oldDebitID);
            double DebitDel = 0;
            object retDebitDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebitDel != null) && (retDebitDel != DBNull.Value))
            {
                DebitDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", DebitDel - oldAmt, oldDebitID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", oldCreditID);
            double CreditDel = 0;
            object retCreditDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCreditDel != null) && (retCreditDel != DBNull.Value))
            {
                CreditDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", CreditDel - oldAmt, oldCreditID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //Step 1 - End


            //Step 2 - Start
            //Start Delete the old record
            dbQry = string.Format("Delete From TemptblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("SELECT Qty,ItemCode,RoleID,isRole From TemptblSalesItems Where Billno={0}", Billno);
            DataSet salesDS = (DataSet)manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (salesDS != null)
            {
                if (salesDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in salesDS.Tables[0].Rows)
                    {
                        //dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock + {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                        // manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        if (dr["isRole"] != null)
                        {
                            if (Convert.ToString(dr["isrole"]) == "Y")
                            {
                                sQry = "SELECT roleID,Qty_bought FROM TemptblSalesRole WHERE itemcode='" + Convert.ToString(dr["ItemCode"]).Trim() + "' AND Billno=" + Billno;
                                roleDs = manager.ExecuteDataSet(CommandType.Text, sQry);
                                if (roleDs != null)
                                {
                                    if (roleDs.Tables[0].Rows.Count > 0)
                                    {
                                        foreach (DataRow dR in roleDs.Tables[0].Rows)
                                        {
                                            dbQry = string.Format("Update TemptblItemRoleMaster SET Qty_Available = Qty_Available + {1}  WHERE RoleID={0}", Convert.ToInt32(dR["RoleID"]), Convert.ToDouble(dR["Qty_bought"]));
                                            manager.ExecuteNonQuery(CommandType.Text, dbQry);
                                        }
                                        sQry = "DELETE FROM TemptblSalesRole WHERE itemcode='" + Convert.ToString(dr["ItemCode"]).Trim() + "' AND Billno=" + Billno;
                                        manager.ExecuteNonQuery(CommandType.Text, sQry);
                                    }
                                }

                            }
                        }
                    }
                }
            }
            dbQry = string.Format("Delete From TemptblSales Where BillNo={0}", Billno);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From TemptblSalesItems Where BillNo={0}", Billno);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Deleting the old record


            sAuditStr = "Sales Transaction: " + TransNo + " got deleted old Record Details : DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}', Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Delete", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);




            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void DeleteTempPurchase(int purchaseID, string Billno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldDebitID = 0;
        int oldCreditID = 0;
        double oldAmt = 0;


        string sNarration = string.Empty;

        int creditorID = 0;
        int DebtorID = 3;



        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID
            dsOld = GetTempPurchaseForId(purchaseID);


            if (dsOld.Tables[0].Rows[0]["JournalID"] != null)
            {
                if (dsOld.Tables[0].Rows[0]["JournalID"].ToString() != string.Empty)
                {
                    TransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["JournalID"].ToString());
                }
            }
            dbQry = string.Format("Select DebtorID,CreditorID,Amount from TemptblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                }

            }

            //Step 1 - Start

            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", oldDebitID);
            double DebitDel = 0;

            object retDebitDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebitDel != null) && (retDebitDel != DBNull.Value))
            {
                DebitDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", DebitDel - oldAmt, oldDebitID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", oldCreditID);
            double CreditDel = 0;

            object retCreditDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCreditDel != null) && (retCreditDel != DBNull.Value))
            {
                CreditDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", CreditDel - oldAmt, oldCreditID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //Step 1 - End


            //Step 2 - Start
            //Start Delete the old record
            dbQry = string.Format("Delete From TemptblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = string.Format("SELECT Qty,ItemCode,RoleID,isRole From TemptblPurchaseItems WHERE PurchaseID={0}", purchaseID);
            DataSet purchaseDS = (DataSet)manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (purchaseDS != null)
            {
                if (purchaseDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in purchaseDS.Tables[0].Rows)
                    {
                        // dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock - {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                        //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        if (dr["isRole"] != null)
                        {
                            if (Convert.ToString(dr["isrole"]) == "Y")
                            {
                                dbQry = string.Format("DELETE FROM TemptblItemRoleMaster  WHERE RoleID={0}", Convert.ToInt32(dr["RoleID"]));
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);
                            }
                        }
                    }
                }
            }

            dbQry = string.Format("Delete From TemptblPurchase Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From TemptblPurchaseItems Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Deleting the old record


            sAuditStr = "Purchase Transaction: " + TransNo + " got deleted old Record Details : DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}', Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Delete", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);




            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void DeleteTempJournal(int TransNo, string sPath)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        //manager.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings[sPath].ConnectionString; ;
        manager.ConnectionString = CreateConnectionString(sPath);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        DataSet dsOld = new DataSet();
        int oldDebtorID = 0;
        int oldCreditorID = 0;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();
            dsOld = GetTempJournalForId(TransNo, sPath);
            if (dsOld.Tables[0].Rows[0]["DebtorID"] != null)
            {
                if (dsOld.Tables[0].Rows[0]["DebtorID"].ToString() != string.Empty)
                {
                    oldDebtorID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"].ToString());
                }
            }
            if (dsOld.Tables[0].Rows[0]["CreditorID"] != null)
            {
                if (dsOld.Tables[0].Rows[0]["CreditorID"].ToString() != string.Empty)
                {
                    oldCreditorID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"].ToString());
                }
            }

            //Start Updating the Debit and credit 
            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", oldDebtorID);
            double Debit = 0;

            object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebit != null) && (retDebit != DBNull.Value))
            {
                Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }


            double Amount = (double)manager.ExecuteScalar(CommandType.Text, "Select Amount from TemptblDayBook Where TransNo=" + TransNo);
            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit - Amount, oldDebtorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", oldCreditorID);
            double Credit = 0;

            object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCredit != null) && (retCredit != DBNull.Value))
            {
                Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }


            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit - Amount, oldCreditorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Updating the Debit and credit

            dbQry = string.Format("Delete From TemptblDayBook Where TransNo={0}", TransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Delete From tblPayment Where JournalID = {0}", TransNo);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);
            sAuditStr = "Transaction: " + TransNo + " got deleted old Record Details : DebtorID=" + oldDebtorID + ",CreditorID=" + oldCreditorID + ",Amount=" + Amount;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Delete", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public DataSet GetTempJournalForId(int TransNo, String ConStr)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        //manager.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings[ConStr].ConnectionString;
        manager.ConnectionString = CreateConnectionString(ConStr);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName,tblDayBook.CreditorID,tblDayBook.DebtorID, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo FROM  (((TemptblDaybook tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID)) ");
            dbQry.AppendFormat("Where tblDayBook.TransNo = {0} AND tblDayBook.TransDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "#   Order By tblDayBook.TransDate Desc", TransNo);


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetTempPaymentForId(string connection, int TransNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT  TemptblDayBook.TransNo, TemptblDayBook.TransDate, Creditor.LedgerName,TemptblDayBook.CreditorID,TemptblDayBook.DebtorID, Debitor.LedgerName AS Debi, TemptblDayBook.Amount, TemptblDayBook.Narration, ");
            dbQry.Append("TemptblDayBook.VoucherType, TemptblDayBook.RefNo, TemptblDayBook.ChequeNo, Payment.Paymode,Payment.BillNo FROM  (((TemptblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON TemptblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON TemptblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
            dbQry.Append(" TemptblPayMent Payment ON TemptblDayBook.TransNo = Payment.JournalID)");
            dbQry.AppendFormat("Where TemptblDayBook.TransNo = {0}", TransNo);

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetTempPurchaseForId(int purchaseID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                /*Start Purchase Loading / Unloading Freight Change - March 16*/
                dbQry.Append("SELECT tblDayBook.Creditorid, tblPurchase.PurchaseId,tblPurchase.Billno,tblPurchase.Billdate,tblPurchase.Paymode,tblPurchase.SupplierID,tblDaybook.Chequeno,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.narration,tblPurchase.JournalID,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason,LoadUnload,Freight");
                /*End Purchase Loading / Unloading Freight Change - March 16*/
                dbQry.Append(" FROM (((TemptblDaybook tblDayBook  INNER JOIN TemptblPurchase tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID))");
                dbQry.Append(" Where tblPurchase.purchaseID=" + purchaseID + " AND tblPurchase.BillDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ORDER BY tblPurchase.BillDate Desc");
            }
            else
            {
                /*Start Purchase Loading / Unloading Freight Change - March 16*/
                dbQry.Append("SELECT tblDayBook.Creditorid,tblPurchase.PurchaseId,tblPurchase.Billno,tblPurchase.Billdate,tblPurchase.Paymode,tblPurchase.SupplierID,tblDaybook.Chequeno,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.narration,tblPurchase.JournalID,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason,LoadUnload,Freight ");
                /*End Purchase Loading / Unloading Freight Change - March 16*/
                dbQry.Append(" FROM (((TemptblDaybook tblDayBook  INNER JOIN TemptblPurchase  tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID))");
                dbQry.Append("  ORDER BY tblPurchase.BillDate Desc");
            }
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetTempSalesForId(int Billno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            // object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {

                dbQry.Append("SELECT tblDayBook.Debtorid, tblSales.Billno,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload");
                dbQry.Append(" FROM (((TemptblDayBook tblDayBook  INNER JOIN  TemptblSales tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID))");
                dbQry.Append(" Where tblSales.Billno=" + Billno + " AND tblSales.BillDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ORDER BY tblSales.BillDate Desc");
            }
            else
            {
                dbQry.Append("SELECT tblDayBook.Debtorid,, tblSales.Billno,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload");
                dbQry.Append(" FROM (((TemptblDayBook tblDayBook  INNER JOIN TemptblSales tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID))");
                dbQry.Append(" ORDER BY tblSales.BillDate Desc");
            }
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetTempReceiptForId(string connection, int TransNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName,tblDayBook.CreditorID,tblDayBook.DebtorID, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo, Receipt.Paymode FROM  (((TemptblDaybook tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
            dbQry.Append(" TemptblReceipt Receipt ON tblDayBook.TransNo = Receipt.JournalID)");
            dbQry.AppendFormat("Where tblDayBook.TransNo = {0}", TransNo);

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetTempPurchaseItemsForId(int purchaseId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("Select tblPurchaseitems.ItemCode,tblProductMaster.ProductName,tblProductMaster.ProductDesc,tblPurchaseitems.PurchaseRate,tblPurchaseitems.Qty,");
            dbQry.Append("tblPurchaseitems.discount,tblPurchaseitems.Vat,tblPurchaseItems.CST,tblPurchaseItems.PurchaseID,tblPurchaseItems.RoleID,tblpurchaseitems.isRole,tblProductMaster.Model FROM TemptblPurchaseItems tblPurchaseItems INNER JOIN tblProductmaster ON tblPurchaseItems.itemCode = tblProductMaster.itemCode");
            dbQry.Append(" Where tblPurchaseItems.purchaseID = " + purchaseId);
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet GetTempSalesItemsForId(int Billno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("Select tblSalesitems.ItemCode,tblProductMaster.ProductName,tblProductMaster.ProductDesc,tblSalesitems.Rate,tblSalesitems.Qty,");
            dbQry.Append("tblSalesitems.discount,tblSalesitems.Vat,tblSalesitems.CST,tblSalesitems.billno,tblSalesItems.SlNo,tblSalesItems.RoleID,tblSalesItems.isRole,tblProductMaster.Model,tblSalesItems.Bundles,tblSalesItems.Rods FROM TemptblSalesItems tblSalesitems INNER JOIN tblProductmaster ON tblSalesitems.itemCode = tblProductMaster.itemCode");
            dbQry.Append(" Where tblSalesitems.Billno = " + Billno);
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListTempRoles(int Billno, string itemcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;



        //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
        dbQry = "SELECT Qty_bought As Qty,RoleID   FROM TemptblSalesRole WHERE Billno = " + Billno + " AND itemCode = '" + itemcode + "'";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    #endregion

    #region CST General Report

    public DataSet FirstLevelSales(DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT Sum(tblSalesItems.Qty) AS Quantity, Sum(tblSalesItems.Qty*Rate) As NetRate , Sum((tblSalesItems.qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*rate)) AS SalesDiscount,");
            dbQry.Append(" Sum(((tblSalesItems.discount/100)*tblSalesItems.qty*rate)) AS ActualDiscount,");
            dbQry.Append("Sum((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)+((VAT/100)*((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((tblSalesItems.Qty*rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)) * VAT/100 ) AS ActualVAT,");
            dbQry.Append(" Sum((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)+((CST/100)*((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)))) AS SumCST,");
            dbQry.Append(" Sum(tblSales.Freight) AS SumFreight,Sum(tblSales.LoadUnload) As Loading,");
            dbQry.Append(" Sum( ((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)) * CST/100 ) AS ActualCST FROM tblSalesItems,tblSales WHERE tblSales.Billno=tblSalesItems.Billno and tblsales.cancelled<>true and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
            manager.Dispose();
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelSales(DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT CustomerID,CustomerName, Sum(tblSalesItems.Qty* Rate) As SalesRate, Sum((tblSalesItems.qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*rate)) AS SalesDiscount,");
            dbQry.Append(" Sum(((tblSalesItems.discount/100)*tblSalesItems.qty*rate)) AS ActualDiscount,");
            dbQry.Append(" Sum((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)+((VAT/100)*((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((tblSalesItems.Qty*rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)) * VAT/100 ) AS ActualVAT,");
            dbQry.Append(" Sum((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)+((CST/100)*((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)))) AS SumCST,");
            dbQry.Append(" Sum(tblSales.Freight) AS SumFreight,Sum(tblSales.LoadUnload) As Loading,");
            dbQry.Append("  Sum( ((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)) * CST/100 ) AS ActualCST");
            dbQry.Append(" FROM tblSalesItems,tblSales Where tblSales.Billno = tblSalesitems.billno and tblsales.cancelled<>true and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By       CustomerName,CustomerID ");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
            manager.Dispose();
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ThirdLevelSales(int customerid, string customername, DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblSalesItems.Billno,tblSales.Billdate, Sum(tblSalesItems.Qty* Rate) As SalesRate, Sum((tblSalesItems.qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*rate)) AS SalesDiscount,");
            dbQry.Append(" Sum(((tblSalesItems.discount/100)*tblSalesItems.qty*rate)) AS ActualDiscount,");
            dbQry.Append(" Sum((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)+((VAT/100)*((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((tblSalesItems.Qty*rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)) * VAT/100 ) AS ActualVAT,");
            dbQry.Append(" Sum((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)+((CST/100)*((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)))) AS SumCST,");
            dbQry.Append(" Sum(tblSales.Freight) AS SumFreight,Sum(tblSales.LoadUnload) As Loading,");
            dbQry.Append("  Sum( ((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)) * CST/100 ) AS ActualCST");
            dbQry.Append(" FROM tblSalesItems,tblSales Where tblSales.Billno = tblSalesitems.billno and customerID=" + customerid + " and customername='" + customername + "' and  tblsales.cancelled<>true and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# Group By tblSales.CustomerID,tblSales.CustomerName, tblSalesItems.billno,tblSales.Billdate");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
            manager.Dispose();
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    #endregion

    #region table Settings

    public void InsertSettings(string itemCode, string strIP, string strQtyReturn, string strDate, string strBillFormat, string Currency, string dealer, string barcode, string stockEdit, string SMSrequired, string BiltRequired, string OwnerMobile, string VATReconDate, string VATAmount, string DiscType, string exceedLimit, string strBillMethod, string strobsolute, string droundoff, string dsalesseries, string autolock, string savelog, string enablevat, string emailRequired, string macaddress, string tinnoman, string enabledate, string salesdiscount, string openingbalance, string deviationprice, string pwdexpday)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            if (itemCode.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='ITEMCODE' ", itemCode);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (strQtyReturn.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='QTYRETURN' ", strQtyReturn.ToUpper());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (DiscType.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='DISCTYPE' ", DiscType.ToUpper());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (strDate.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='QTYDATE' ", strDate);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (strBillFormat.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='BILLFORMAT' ", strBillFormat);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (strIP.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='IPBLOCKING' ", strIP.ToUpper());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (BiltRequired.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='BLITREQ' ", BiltRequired.ToUpper());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (exceedLimit.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='CREDITEXD' ", exceedLimit.ToUpper());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (OwnerMobile.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='OWNERMOB' ", OwnerMobile.ToUpper());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }

            if (Currency.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='CURRENCY' ", Currency.ToUpper());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (dealer.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='DEALER' ", dealer.ToUpper());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (barcode.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='BARCODE' ", barcode.ToUpper());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (stockEdit.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='STOCKEDIT' ", stockEdit.ToUpper());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (SMSrequired.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='SMSREQ' ", SMSrequired.ToUpper());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }

            if (VATReconDate.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='VATRECDATE' ", VATReconDate.ToString());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }

            if (VATAmount.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='VATAMOUNT' ", VATAmount.ToString());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (strBillMethod.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='BILLMETHOD' ", strBillMethod.ToString());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (strobsolute.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='OBSOLUTE' ", strobsolute.ToString());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (droundoff.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='ROUNDOFF' ", droundoff.ToString());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (dsalesseries.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='SALBILLNO' ", dsalesseries.ToString());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (autolock.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='AUTOLOCK' ", autolock.ToString());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (savelog.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='SAVELOG' ", savelog.ToString());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (enablevat.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='ENBLVAT' ", enablevat.ToString());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (emailRequired.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='EMAILREQ' ", emailRequired.ToString());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (macaddress.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='MACBLOCK' ", macaddress.ToString());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (tinnoman.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='TINREQ' ", tinnoman.ToString());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (enabledate.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='ENBLDATE' ", enabledate.ToString());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (salesdiscount.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='SDISCOUNT' ", salesdiscount.ToString());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (openingbalance.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='OPBAL' ", openingbalance.ToString());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (deviationprice.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='PRICE' ", deviationprice.ToString());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }
            if (pwdexpday.Trim() != "")
            {
                dbQry = string.Format("UPDATE tblSettings SET KEYVALUE='{0}' WHERE KEYNAME='PWDEXPDAY' ", pwdexpday.ToUpper());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }

            manager.Dispose();
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet GetSettings()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select KEYNAME,KeyValue FROM tblSettings";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    #endregion

    #region Sales Summary Report
    public DataSet FirstLevelDaywise(DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT BillDate As LinkName,Sum(tblSalesItems.Qty) AS Quantity, Sum(tblSalesItems.Qty*Rate) As NetRate , Sum((tblSalesItems.qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*rate)) AS SalesDiscount,");
            dbQry.Append(" Sum(((tblSalesItems.discount/100)*tblSalesItems.qty*rate)) AS ActualDiscount,");
            dbQry.Append("Sum((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)+((VAT/100)*((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((tblSalesItems.Qty*rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)) * VAT/100 ) AS ActualVAT,");
            dbQry.Append(" Sum((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)+((CST/100)*((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)))) AS SumCST,");
            dbQry.Append(" Sum(tblSales.Freight) AS SumFreight,Sum(tblSales.LoadUnload) As Loading,");
            dbQry.Append(" Sum( ((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)) * CST/100 ) AS ActualCST FROM tblSalesItems,tblSales WHERE tblSales.Billno=tblSalesItems.Billno and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# Group By BillDate");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet SecondLevelDaywise(DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblSalesItems.billno, tblSalesItems.ItemCode,ProductDesc,tblSalesItems.Qty* tblSalesItems.Rate As NetRate, ");
            /*March 21*/
            dbQry.Append(" (tblSalesItems.Rate) As SRate ,tblSalesItems.Qty As Quantity,");
            /*March 21*/
            dbQry.Append(" (tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) AS SalesDiscount,");
            dbQry.Append(" ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) AS ActualDiscount,");
            dbQry.Append(" (tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate))) AS SumVAT, ");
            dbQry.Append("  ((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate))) AS SumCST, ");
            dbQry.Append(" ((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and tblSales.purchaseReturn<>'Yes' AND  tblSales.BillDate=#" + eDate.ToString("MM/dd/yyyy") + "#  Order By tblSales.Billno");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelDaywiseBillWise(DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblSales.billno as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append("  SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<> true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' AND  tblSales.BillDate=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSales.Billno,tblSales.Freight,tblSales.LoadUnload ");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelGeneralSales(DateTime sDate, DateTime eDate, string itemWise, string FirstLevelColumn, string SecondLevelColumn, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblSales." + SecondLevelColumn + " as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append("  SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");

            if (FirstLevelColumn == "BillNo")
                dbQry.Append(" FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSales." + FirstLevelColumn + " = " + itemWise + " AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and  UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate <=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSales." + SecondLevelColumn + ",tblSales.Freight,tblSales.LoadUnload ");
            else if (FirstLevelColumn == "ItemCode")
                dbQry.Append(" FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems." + FirstLevelColumn + " = '" + itemWise + "' AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate <=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSales." + SecondLevelColumn + ",tblSales.Freight,tblSales.LoadUnload ");
            else if (FirstLevelColumn == "Model" || FirstLevelColumn == "ProductDesc" || FirstLevelColumn == "ProductName" || FirstLevelColumn == "Category")
                dbQry.Append(" FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblProductMaster." + FirstLevelColumn + " = '" + itemWise + "' AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate <=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSales." + SecondLevelColumn + ",tblSales.Freight,tblSales.LoadUnload ");
            else if (FirstLevelColumn == "TransDate")
                dbQry.Append(" FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSales.Billdate =#" + itemWise + "# AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate <=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSales." + SecondLevelColumn + ",tblSales.Freight,tblSales.LoadUnload ");
            else if (FirstLevelColumn == "Executive")
                dbQry.Append("  FROM (((tblSales inner join tblSalesItems on tblSales.billno=tblSalesItems.billno)  inner join tblProductMaster on tblSalesItems.itemcode = tblProductMaster.itemcode)  inner join tblEmployee on tblEmployee.empno=tblSales.Executive) inner join tblLedger on tblSales.customerid = tblLedger.ledgerid WHERE tblsales.cancelled<>true and tblSales.purchaseReturn ='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' AND UCASE(tblSales.InternalTransfer)='" + intTrans + "' And tblSales.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# and tblEmployee.empno in (select empno from tblEmployee where empFirstname='" + itemWise + "')  Group By tblSales." + SecondLevelColumn + ",tblSales.Freight,tblSales.LoadUnload ");
            else
                dbQry.Append(" FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSales." + FirstLevelColumn + " = '" + itemWise + "' AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate <=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSales." + SecondLevelColumn + ",tblSales.Freight,tblSales.LoadUnload ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelGeneralSalesItemWise(DateTime sDate, DateTime eDate, string itemWise, string FirstLevelColumn, string SecondLevelColumn, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblSalesItems." + SecondLevelColumn + " as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append("  SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");

            if (FirstLevelColumn == "BillNo")
                dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblSalesItems." + FirstLevelColumn + " = " + itemWise + " AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND  tblSales.BillDate <=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSalesItems." + SecondLevelColumn + ",tblSales.Freight,tblSales.LoadUnload ");
            else if (FirstLevelColumn == "CustomerName")
                dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblSales." + FirstLevelColumn + " = '" + itemWise + "' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND  tblSales.BillDate <=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSalesItems." + SecondLevelColumn + ",tblSales.Freight,tblSales.LoadUnload ");
            else if (FirstLevelColumn == "ProductDesc")
                dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblProductMaster." + FirstLevelColumn + " = '" + itemWise + "' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND  tblSales.BillDate <=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSalesItems." + SecondLevelColumn + ",tblSales.Freight,tblSales.LoadUnload ");
            else if (FirstLevelColumn == "ProductName")
                dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblProductMaster." + FirstLevelColumn + " = '" + itemWise + "' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND  tblSales.BillDate <=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSalesItems." + SecondLevelColumn + ",tblSales.Freight,tblSales.LoadUnload ");
            else
                dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblSalesItems." + FirstLevelColumn + " = '" + itemWise + "' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND  tblSales.BillDate <=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSalesItems." + SecondLevelColumn + ",tblSales.Freight,tblSales.LoadUnload ");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelCustomerWiseItemWise(DateTime sDate, DateTime eDate, string itemWise, string FirstLevelColumn, string SecondLevelColumn, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblProductMaster." + SecondLevelColumn + " as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append("  SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");

            if (FirstLevelColumn == "CustomerName")
                dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblSales." + FirstLevelColumn + " = '" + itemWise + "' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND  tblSales.BillDate <=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster." + SecondLevelColumn + ",tblSales.Freight,tblSales.LoadUnload ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelBillWiseItemWise(DateTime sDate, DateTime eDate, string itemWise, string FirstLevelColumn, string SecondLevelColumn, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblProductMaster." + SecondLevelColumn + " as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append("  SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");

            if (FirstLevelColumn == "BillNo")
                dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblSalesItems." + FirstLevelColumn + " = " + itemWise + " AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND  tblSales.BillDate <=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster." + SecondLevelColumn + ",tblSales.Freight,tblSales.LoadUnload ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelModelWiseItemWise(DateTime sDate, DateTime eDate, string itemWise, string FirstLevelColumn, string SecondLevelColumn, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblProductMaster." + SecondLevelColumn + " as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append("  SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblProductMaster." + FirstLevelColumn + " = '" + itemWise + "' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND  tblSales.BillDate <=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster." + SecondLevelColumn + ",tblSales.Freight,tblSales.LoadUnload ");


            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelBrandWiseItemWise(DateTime sDate, DateTime eDate, string itemWise, string FirstLevelColumn, string SecondLevelColumn, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblProductMaster." + SecondLevelColumn + " as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append("  SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblProductMaster.ProductDesc = '" + itemWise + "' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND  tblSales.BillDate <=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster.ProductName,tblSales.Freight,tblSales.LoadUnload ");


            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelGeneralProductWise(DateTime sDate, DateTime eDate, string itemWise, string FirstLevelColumn, string SecondLevelColumn, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblProductMaster." + SecondLevelColumn + " as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append("  SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");

            if (FirstLevelColumn == "BillNo")
                dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblSales." + FirstLevelColumn + " = " + itemWise + " AND tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND tblSales.BillDate <=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster." + SecondLevelColumn + ",tblSales.Freight,tblSales.LoadUnload ");
            else if (FirstLevelColumn == "Model")
                dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblProductMaster." + FirstLevelColumn + " = '" + itemWise + "' AND tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND tblSales.BillDate <=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster." + SecondLevelColumn + ",tblSales.Freight,tblSales.LoadUnload ");
            else if (FirstLevelColumn == "ProductDesc")
                dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblProductMaster." + FirstLevelColumn + " = '" + itemWise + "' AND tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND tblSales.BillDate <=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster." + SecondLevelColumn + ",tblSales.Freight,tblSales.LoadUnload ");
            else if (FirstLevelColumn == "ProductName")
                dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblProductMaster." + FirstLevelColumn + " = '" + itemWise + "' AND tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND tblSales.BillDate <=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster." + SecondLevelColumn + ",tblSales.Freight,tblSales.LoadUnload ");
            else if (FirstLevelColumn == "Executive")
                dbQry.Append("  FROM (((tblSales inner join tblSalesItems on tblSales.billno=tblSalesItems.billno)  inner join tblProductMaster on tblSalesItems.itemcode = tblProductMaster.itemcode)  inner join tblEmployee on tblEmployee.empno=tblSales.Executive) inner join tblLedger on tblSales.customerid = tblLedger.ledgerid WHERE tblsales.cancelled<>true and tblSales.purchaseReturn='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblSales.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# and tblEmployee.empno in (select empno from tblEmployee where empFirstname='" + itemWise + "')  Group By tblProductMaster." + SecondLevelColumn + ",tblSales.Freight,tblSales.LoadUnload ");
            else
                dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblSales." + FirstLevelColumn + " = '" + itemWise + "' AND tblsales.cancelled<>true and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND tblSales.BillDate <=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster." + SecondLevelColumn + ",tblSales.Freight,tblSales.LoadUnload ");


            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelBrandWiseCustomerWise(DateTime sDate, DateTime eDate, string itemWise, string FirstLevelColumn, string SecondLevelColumn, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblSales.CustomerName as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append("  SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblProductMaster." + FirstLevelColumn + " = '" + itemWise + "' AND tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND tblSales.BillDate <=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSales." + SecondLevelColumn + ",tblSales.Freight,tblSales.LoadUnload ");


            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelBrandWiseDayWise(DateTime sDate, DateTime eDate, string itemWise, string FirstLevelColumn, string SecondLevelColumn, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblProductMaster.ProductDesc as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append("  SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append(" FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblProductMaster." + FirstLevelColumn + " = '" + itemWise + "' AND tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "#  AND tblSales.BillDate <=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster." + SecondLevelColumn + ",tblSales.Freight,tblSales.LoadUnload ");


            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelDaywiseBrandWise(DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblProductMaster.ProductDesc as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append("  SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND  tblSales.BillDate=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster.ProductDesc,tblSales.Freight,tblSales.LoadUnload ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelDaywiseCustWise(DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblSales.CustomerName as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append("  SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' AND  tblSales.BillDate=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSales.CustomerName,tblSales.Freight,tblSales.LoadUnload ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelDaywiseItemWise(DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblProductMaster.ProductName as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append("  SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<> true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND  tblSales.BillDate=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster.ProductName,tblSales.Freight,tblSales.LoadUnload ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelDaywiseDayWise(DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblSales.BillDate as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append("  SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND  tblSales.BillDate=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSales.BillDate,tblSales.Freight,tblSales.LoadUnload ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelDaywiseModelWise(DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblProductMaster.Model as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append("  SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' AND  tblSales.BillDate=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster.Model,tblSales.Freight,tblSales.LoadUnload ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet FirstLevelCategorywise(DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT  tblCategories.CategoryName As LinkName,Sum(tblSalesItems.Qty) AS Quantity, ");
            dbQry.Append(" Sum(tblSalesItems.Qty*tblSalesItems.Rate) As NetRate , Sum((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount, ");
            dbQry.Append(" Sum(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" Sum((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100 ) AS ActualVAT, ");
            dbQry.Append(" Sum((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST,");
            dbQry.Append("  Sum(tblSales.Freight) AS SumFreight,Sum(tblSales.LoadUnload) As Loading, ");
            dbQry.Append("  Sum( ((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100 ) AS ActualCST FROM tblSalesItems,tblSales,tblProductMaster,tblCategories WHERE tblSales.Billno=tblSalesItems.Billno and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and  tblSalesItems.ItemCode = tblProductmaster.ItemCode And tblProductMaster.CategoryID=tblCategories.CategoryID AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# Group By tblCategories.CategoryName");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet SecondLevelCategorywise(string categoryName, DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {


            dbQry.Append("SELECT tblSalesItems.billno, tblSalesItems.ItemCode,ProductDesc,tblSalesItems.Qty* tblSalesItems.Rate As NetRate, ");
            /*March 21*/
            dbQry.Append(" (tblSalesItems.Rate) As SRate ,tblSalesItems.Qty As Quantity,");
            /*March 21*/
            dbQry.Append(" (tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) AS SalesDiscount,");
            dbQry.Append(" ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) AS ActualDiscount,");
            dbQry.Append(" (tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate))) AS SumVAT, ");
            dbQry.Append("  ((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate))) AS SumCST, ");
            dbQry.Append(" ((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster,tblCategories WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode AND tblCategories.CategoryID = tblProductMaster.CategoryID and tblsales.cancelled<>true and tblSales.purchaseReturn<>'Yes' AND tblCategories.CategoryName='" + categoryName + "' and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Order By tblSales.Billno");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelCategorywiseBillWise(string categoryName, DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {


            dbQry.Append("SELECT tblSales.billno as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append(" FROM tblSales,tblSalesItems,tblProductMaster,tblCategories WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode AND tblCategories.CategoryID = tblProductMaster.CategoryID and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblCategories.CategoryName='" + categoryName + "' and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSales.Billno,tblSales.Freight,tblSales.LoadUnload");


            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelCategorywiseModelWise(string categoryName, DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {


            dbQry.Append("SELECT tblProductMaster.Model as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster,tblCategories WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode AND tblCategories.CategoryID = tblProductMaster.CategoryID and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblCategories.CategoryName='" + categoryName + "' and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster.Model,tblSales.Freight,tblSales.LoadUnload ");


            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelCategorywiseBrandWise(string categoryName, DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblProductMaster.ProductDesc as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster,tblCategories WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode AND tblCategories.CategoryID = tblProductMaster.CategoryID and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblCategories.CategoryName='" + categoryName + "' and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster.ProductDesc,tblSales.Freight,tblSales.LoadUnload ");


            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelCategorywiseItemWise(string categoryName, DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblProductMaster.ProductName as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster,tblCategories WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode AND tblCategories.CategoryID = tblProductMaster.CategoryID and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblCategories.CategoryName='" + categoryName + "' and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster.ProductName,tblSales.Freight,tblSales.LoadUnload ");


            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelCategorywiseCustWise(string categoryName, DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblSales.CustomerName as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster,tblCategories WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode AND tblCategories.CategoryID = tblProductMaster.CategoryID and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND tblCategories.CategoryName='" + categoryName + "' and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSales.CustomerName,tblSales.Freight,tblSales.LoadUnload ");


            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet FirstLevelBrandwise(DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT  tblProductMaster.ProductDesc As LinkName,Sum(tblSalesItems.Qty) AS Quantity, ");
            dbQry.Append(" Sum(tblSalesItems.Qty*tblSalesItems.Rate) As NetRate , Sum((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount, ");
            dbQry.Append(" Sum(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" Sum((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100 ) AS ActualVAT, ");
            dbQry.Append(" Sum((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST,");
            dbQry.Append("  Sum(tblSales.Freight) AS SumFreight,Sum(tblSales.LoadUnload) As Loading, ");
            dbQry.Append("  Sum( ((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100 ) AS ActualCST FROM tblSalesItems,tblSales,tblProductMaster WHERE tblSales.Billno=tblSalesItems.Billno and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' and tblSalesItems.ItemCode = tblProductmaster.ItemCode And  tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# Group By tblProductMaster.ProductDesc ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelBrandwise(string BrandName, DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblSalesItems.billno, tblSalesItems.ItemCode,ProductDesc,tblSalesItems.Qty* tblSalesItems.Rate As NetRate, ");
            /*March 21*/
            dbQry.Append(" (tblSalesItems.Rate) As SRate ,tblSalesItems.Qty As Quantity,");
            /*March 21*/
            dbQry.Append(" (tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) AS SalesDiscount,");
            dbQry.Append(" ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) AS ActualDiscount,");
            dbQry.Append(" (tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate))) AS SumVAT, ");
            dbQry.Append("  ((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate))) AS SumCST, ");
            dbQry.Append(" ((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and tblSales.purchaseReturn<>'Yes' AND   tblProductMaster.ProductName ='" + BrandName + "' and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Order By tblSales.Billno");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelBrandwiseBillWise(string BrandName, DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblSales.BillNo as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append("  SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND   tblProductMaster.ProductDesc ='" + BrandName + "' and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSales.Billno,tblSales.Freight,tblSales.LoadUnload ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelBrandwiseBrandWise(string BrandName, DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblProductMaster.ProductDesc as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append("  SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND   tblProductMaster.ProductDesc ='" + BrandName + "' and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster.ProductDesc,tblSales.Freight,tblSales.LoadUnload ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }



    public DataSet SecondLevelBrandwiseModelWise(string BrandName, DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblProductMaster.Model as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append("  SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' AND   tblProductMaster.ProductDesc ='" + BrandName + "' and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster.Model,tblSales.Freight,tblSales.LoadUnload ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet FirstLevelModelwise(DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT  tblProductMaster.Model As LinkName,Sum(tblSalesItems.Qty) AS Quantity, ");
            dbQry.Append(" Sum(tblSalesItems.Qty*tblSalesItems.Rate) As NetRate , Sum((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount, ");
            dbQry.Append(" Sum(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" Sum((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100 ) AS ActualVAT, ");
            dbQry.Append(" Sum((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST,");
            dbQry.Append("  Sum(tblSales.Freight) AS SumFreight,Sum(tblSales.LoadUnload) As Loading, ");
            dbQry.Append("  Sum( ((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100 ) AS ActualCST FROM tblSalesItems,tblSales,tblProductMaster WHERE tblSales.Billno=tblSalesItems.Billno and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and  tblSalesItems.ItemCode = tblProductmaster.ItemCode And  tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# Group By tblProductMaster.Model ");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelModelwise(string ModelName, DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblSalesItems.billno, tblSalesItems.ItemCode,ProductDesc,tblSalesItems.Qty* tblSalesItems.Rate As NetRate, ");
            /*March 21*/
            dbQry.Append(" (tblSalesItems.Rate) As SRate ,tblSalesItems.Qty As Quantity,");
            /*March 21*/
            dbQry.Append(" (tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) AS SalesDiscount,");
            dbQry.Append(" ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) AS ActualDiscount,");
            dbQry.Append(" (tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate))) AS SumVAT, ");
            dbQry.Append("  ((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate))) AS SumCST, ");
            dbQry.Append(" ((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and tblSales.purchaseReturn<>'Yes' AND  tblProductMaster.Model ='" + ModelName + "' and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Order By tblSales.Billno");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelModelwiseBillWise(string ModelName, DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblSales.billno as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append("  SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND  tblProductMaster.Model ='" + ModelName + "' and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSales.Billno,tblSales.Freight,tblSales.LoadUnload ");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelModelwiseModelWise(string ModelName, DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblProductMaster.Model as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append("  SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND  tblProductMaster.Model ='" + ModelName + "' and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster.Model,tblSales.Freight,tblSales.LoadUnload ");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelModelwiseBrandWise(string ModelName, DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblProductMaster.ProductDesc as GroupItem,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append("  SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' AND  tblProductMaster.Model ='" + ModelName + "' and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster.ProductDesc,tblSales.Freight,tblSales.LoadUnload ");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet FirstLevelBillwise(DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT  tblSales.Billno As LinkName,Sum(tblSalesItems.Qty) AS Quantity, ");
            dbQry.Append(" Sum(tblSalesItems.Qty*tblSalesItems.Rate) As NetRate , Sum((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount, ");
            dbQry.Append(" Sum(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" Sum((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100 ) AS ActualVAT, ");
            dbQry.Append(" Sum((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST,");
            dbQry.Append("  Sum(tblSales.Freight) AS SumFreight,Sum(tblSales.LoadUnload) As Loading, ");
            dbQry.Append("  Sum( ((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100 ) AS ActualCST FROM tblSalesItems,tblSales WHERE tblSales.Billno=tblSalesItems.Billno and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and  tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# Group By tblSales.Billno ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet SecondLevelBillwise(int billno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblSales.billno, tblSalesItems.ItemCode,tblProductMaster.ProductDesc,tblSalesItems.Qty* tblSalesItems.Rate As NetRate, ");
            /*March 21*/
            dbQry.Append(" (tblSalesItems.Rate) As SRate ,tblSalesItems.Qty As Quantity,");
            /*March 21*/
            dbQry.Append(" (tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) AS SalesDiscount,");
            dbQry.Append(" ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) AS ActualDiscount,");
            dbQry.Append(" (tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate))) AS SumVAT, ");
            dbQry.Append("  ((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate))) AS SumCST, ");
            dbQry.Append(" ((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblProductMaster.ItemCode = tblSalesItems.Itemcode and tblsales.cancelled<>true and tblSales.purchaseReturn<>'Yes' AND  tblSales.Billno =" + billno + "  Order By tblSales.Billno");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }



    public DataSet SecondLevelBillwiseBiillWise(int billno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblSales.billno,SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append("  SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblProductMaster.ItemCode = tblSalesItems.Itemcode and tblsales.cancelled<>true and tblSales.purchaseReturn<>'Yes' AND  tblSales.Billno =" + billno + "  Order By tblSales.Billno");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet FirstLevelCustomerwise(DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT CustomerName As LinkName,Sum(tblSalesItems.Qty) AS Quantity, Sum(tblSalesItems.Qty*Rate) As NetRate , Sum((tblSalesItems.qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*rate)) AS SalesDiscount,");
            dbQry.Append(" Sum(((tblSalesItems.discount/100)*tblSalesItems.qty*rate)) AS ActualDiscount,");
            dbQry.Append("Sum((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)+((VAT/100)*((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((tblSalesItems.Qty*rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)) * VAT/100 ) AS ActualVAT,");
            dbQry.Append(" Sum((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)+((CST/100)*((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)))) AS SumCST,");
            dbQry.Append(" Sum(tblSales.Freight) AS SumFreight,Sum(tblSales.LoadUnload) As Loading,");
            dbQry.Append(" Sum( ((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)) * CST/100 ) AS ActualCST FROM tblSalesItems,tblSales WHERE tblSales.Billno=tblSalesItems.Billno and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# Group By CustomerName");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet SecondLevelCustomerwise(string customername, DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblSales.billno, tblSalesItems.ItemCode,tblProductMaster.ProductDesc,tblSalesItems.Qty* tblSalesItems.Rate As NetRate, ");
            /*March 21*/
            dbQry.Append(" (tblSalesItems.Rate) As SRate ,tblSalesItems.Qty As Quantity,");
            /*March 21*/
            dbQry.Append(" (tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) AS SalesDiscount,");
            dbQry.Append(" ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) AS ActualDiscount,");
            dbQry.Append(" (tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate))) AS SumVAT, ");
            dbQry.Append("  ((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate))) AS SumCST, ");
            dbQry.Append(" ((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblProductMaster.ItemCode = tblSalesItems.Itemcode and tblsales.cancelled<>true and tblSales.purchaseReturn<>'Yes' AND  tblSales.Customername ='" + customername + "' and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Order By tblSales.Billno");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet FirstLevelExecutivewise(DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT empFirstName As LinkName,Sum(tblSalesItems.Qty) AS Quantity, Sum(tblSalesItems.Qty*Rate) As NetRate , Sum((tblSalesItems.qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*rate)) AS SalesDiscount,");
            dbQry.Append(" Sum(((tblSalesItems.discount/100)*tblSalesItems.qty*rate)) AS ActualDiscount,");
            dbQry.Append("Sum((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)+((VAT/100)*((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((tblSalesItems.Qty*rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)) * VAT/100 ) AS ActualVAT,");
            dbQry.Append(" Sum((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)+((CST/100)*((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)))) AS SumCST,");
            dbQry.Append(" Sum(tblSales.Freight) AS SumFreight,Sum(tblSales.LoadUnload) As Loading,");
            dbQry.Append(" Sum( ((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)) * CST/100 ) AS ActualCST FROM tblSalesItems,tblSales,tblEmployee,tblLedger WHERE tblSales.Billno=tblSalesItems.Billno and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# And tblEmployee.empno=tblSales.Executive and tblLedger.LedgerID=tblSales.CustomerID Group By empFirstName");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet SecondLevelExecutivewise(string executive, DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblSalesItems.billno as GroupItem, tblSalesItems.ItemCode,ProductDesc,tblSalesItems.Qty* tblSalesItems.Rate As NetRate, ");
            /*March 21*/
            dbQry.Append(" (tblSalesItems.Rate) As SRate ,tblSalesItems.Qty As Quantity,");
            /*March 21*/
            dbQry.Append(" (tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) AS SalesDiscount,");
            dbQry.Append(" ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) AS ActualDiscount,");
            dbQry.Append(" (tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate))) AS SumVAT, ");
            dbQry.Append("  ((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate))) AS SumCST, ");
            dbQry.Append(" ((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster,tblEmployee,tblLedger WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and tblSales.purchaseReturn<>'Yes' AND tblSales.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# and tblEmployee.empno=tblLedger.ExecutiveIncharge and tblLedger.LedgerID=tblSales.CustomerID and tblEmployee.empno in (select empno from tblEmployee where empFirstname='" + executive + "')  Order By tblSales.Billno");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    /*Start Itemwise Report Change*/
    public DataSet FirstLevelItemwise(DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT  tblProductMaster.ProductName As LinkName, Sum(tblSalesItems.Qty) AS Quantity, ");
            dbQry.Append(" Sum(tblSalesItems.Qty*tblSalesItems.Rate) As NetRate , Sum((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount, ");
            dbQry.Append(" Sum(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" Sum((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100 ) AS ActualVAT, ");
            dbQry.Append(" Sum((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST,");
            dbQry.Append("  Sum(tblSales.Freight) AS SumFreight,Sum(tblSales.LoadUnload) As Loading, ");
            dbQry.Append("  Sum( ((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100 ) AS ActualCST FROM tblSalesItems,tblSales,tblProductMaster WHERE tblSales.Billno=tblSalesItems.Billno and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and  tblSalesItems.ItemCode = tblProductmaster.ItemCode And  tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# Group By tblProductMaster.ProductName ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet SecondLevelItemwise(string DescName, DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblSalesItems.billno, tblSalesItems.ItemCode,ProductDesc,tblSalesItems.Qty* tblSalesItems.Rate As NetRate, ");
            /*March 21*/
            dbQry.Append(" (tblSalesItems.Rate) As SRate ,tblSalesItems.Qty As Quantity,");
            /*March 21*/
            dbQry.Append(" (tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) AS SalesDiscount,");
            dbQry.Append(" ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) AS ActualDiscount,");
            dbQry.Append(" (tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate))) AS SumVAT, ");
            dbQry.Append("  ((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate))) AS SumCST, ");
            dbQry.Append(" ((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append("  FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode and tblsales.cancelled<>true and tblSales.purchaseReturn<>'Yes' AND   tblProductMaster.ItemCode ='" + DescName + "' and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Order By tblSales.Billno");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    /*End Itemwise Report Change*/

    #endregion

    #region Purchase Summary Report


    public DataSet FirstLevelDaywisePurchase(DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT BillDate As LinkName,Sum(tblPurchaseItems.Qty) AS Quantity, Sum(tblPurchaseItems.Qty*PurchaseRate) As NetPurchaseRate , Sum((tblPurchaseItems.qty*PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*PurchaseRate)) AS SalesDiscount,");
            dbQry.Append(" Sum(((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*PurchaseRate)) AS ActualDiscount,");
            dbQry.Append("Sum((tblPurchaseItems.Qty*PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*PurchaseRate)+((VAT/100)*((tblPurchaseItems.Qty*PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*PurchaseRate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((tblPurchaseItems.Qty*PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*PurchaseRate)) * VAT/100 ) AS ActualVAT,");
            dbQry.Append(" Sum((tblPurchaseItems.Qty*PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*PurchaseRate)+((CST/100)*((tblPurchaseItems.Qty*PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*PurchaseRate)))) AS SumCST");
            /*Start MArch 17 */
            dbQry.Append(",Sum(tblPurchase.Freight) AS SumFreight,Sum(tblPurchase.LoadUnload) As Loading");
            /*End MArch 17 */
            dbQry.Append(",Sum( ((tblPurchaseItems.Qty*PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*PurchaseRate)) * CST/100 ) AS ActualCST FROM tblPurchaseItems,tblPurchase WHERE tblPurchase.purchaseID=tblPurchaseItems.purchaseID And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) and UCASE(tblPurchase.DeliveryNote)='" + delNote + "' and ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# Group By BillDate");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet SecondLevelDaywisePurchase(DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblPurchase.BillNo,tblPurchaseItems.purchaseID, tblPurchaseItems.ItemCode,ProductDesc,tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate As NetPurchaseRate, ");
            /*March 21*/
            dbQry.Append("  (tblPurchaseItems.PurchaseRate) As PRate ,tblPurchaseItems.Qty As Quantity,");
            /*March 21*/
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            /*Start MArch 17 */
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            /*End MArch 17 */
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");

            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode AND tblPurchase.BillDate=#" + eDate.ToString("MM/dd/yyyy") + "#  Order By tblPurchase.purchaseID");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet FirstLevelCategorywisePurchase(DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT  tblCategories.CategoryName As LinkName,Sum(tblPurchaseItems.Qty) AS Quantity, ");
            dbQry.Append(" Sum(tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate) As NetPurchaseRate , Sum((tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)) AS SalesDiscount, ");
            dbQry.Append(" Sum(((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)) AS ActualDiscount,");
            dbQry.Append(" Sum((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100 ) AS ActualVAT, ");
            dbQry.Append(" Sum((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)))) AS SumCST,");
            /*Start MArch 17 */
            dbQry.Append(" Sum(tblPurchase.Freight) AS SumFreight,Sum(tblPurchase.LoadUnload) As Loading,");
            /*End MArch 17 */
            dbQry.Append("  Sum( ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100 ) AS ActualCST FROM tblPurchaseItems,tblPurchase,tblProductMaster,tblCategories WHERE tblPurchase.purchaseID=tblPurchaseItems.purchaseID And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) and  tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And tblProductMaster.CategoryID=tblCategories.CategoryID AND tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# Group By tblCategories.CategoryName");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet SecondLevelCategorywisePurchase(string categoryName, DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblPurchaseItems.purchaseID,tblPurchase.BillNo, tblPurchaseItems.ItemCode,ProductDesc,tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate As NetPurchaseRate, ");
            /*March 21*/
            dbQry.Append("  (tblPurchaseItems.PurchaseRate) As PRate ,tblPurchaseItems.Qty As Quantity,");
            /*March 21*/
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            /*Start MArch 17 */
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            /*End MArch 17 */
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster,tblCategories WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode AND tblCategories.CategoryID = tblProductMaster.CategoryID And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND tblCategories.CategoryName='" + categoryName + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Order By tblPurchase.purchaseID");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet FirstLevelBrandwisePurchase(DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT  tblProductMaster.ProductDesc As LinkName,Sum(tblPurchaseItems.Qty) AS Quantity, ");
            dbQry.Append(" Sum(tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate) As NetPurchaseRate , Sum((tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)) AS SalesDiscount, ");
            dbQry.Append(" Sum(((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)) AS ActualDiscount,");
            dbQry.Append(" Sum((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100 ) AS ActualVAT, ");
            dbQry.Append(" Sum((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)))) AS SumCST,");
            /*Start MArch 17 */
            dbQry.Append(" Sum(tblPurchase.Freight) AS SumFreight,Sum(tblPurchase.LoadUnload) As Loading,");
            /*End MArch 17 */


            dbQry.Append("  Sum( ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100 ) AS ActualCST FROM tblPurchaseItems,tblPurchase,tblProductMaster WHERE  tblPurchase.purchaseID=tblPurchaseItems.purchaseID and UCASE(tblPurchase.DeliveryNote)='" + delNote + "' And  ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) and  tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And  tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# Group By tblProductMaster.ProductDesc ");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet SecondLevelBrandwisePurchase(string BrandName, DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblPurchaseItems.purchaseID, tblPurchase.BillNo, tblPurchaseItems.ItemCode,ProductDesc,tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate As NetPurchaseRate, ");
            /*March 21*/
            dbQry.Append("  (PurchaseRate) As PRate ,tblPurchaseItems.Qty As Quantity,");
            /*March 21*/
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            /*Start MArch 17 */
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            /*End MArch 17 */
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblProductMaster.ProductDesc ='" + BrandName + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Order By tblPurchase.purchaseID");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet FirstLevelModelwisePurchase(DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT  tblProductMaster.Model As LinkName,Sum(tblPurchaseItems.Qty) AS Quantity, ");
            dbQry.Append(" Sum(tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate) As NetPurchaseRate , Sum((tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)) AS SalesDiscount, ");
            dbQry.Append(" Sum(((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)) AS ActualDiscount,");
            dbQry.Append(" Sum((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100 ) AS ActualVAT, ");
            dbQry.Append(" Sum((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)))) AS SumCST,");
            /*Start MArch 17 */
            dbQry.Append(" Sum(tblPurchase.Freight) AS SumFreight,Sum(tblPurchase.LoadUnload) As Loading,");
            /*End MArch 17 */

            dbQry.Append("  Sum( ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100 ) AS ActualCST FROM tblPurchaseItems,tblPurchase,tblProductMaster WHERE tblPurchase.purchaseID=tblPurchaseItems.purchaseID And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) and UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) and  tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And  tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# Group By tblProductMaster.Model ");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet SecondLevelModelwisePurchase(string ModelName, DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblPurchaseItems.purchaseID,tblPurchase.BillNo, tblPurchaseItems.ItemCode,ProductDesc,tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate As NetPurchaseRate, ");
            /*March 21*/
            dbQry.Append("  (tblPurchaseItems.PurchaseRate) As PRate ,tblPurchaseItems.Qty As Quantity,");
            /*March 21*/
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            /*Start MArch 17 */
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            /*End MArch 17 */
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblProductMaster.Model ='" + ModelName + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Order By tblPurchase.purchaseID");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet FirstLevelBillwisePurchase(DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT  tblPurchase.BillNo As LinkName,Sum(tblPurchaseItems.Qty) AS Quantity, ");
            dbQry.Append(" Sum(tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate) As NetPurchaseRate , Sum((tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)) AS SalesDiscount, ");
            dbQry.Append(" Sum(((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)) AS ActualDiscount,");
            dbQry.Append(" Sum((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100 ) AS ActualVAT, ");
            dbQry.Append(" Sum((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)))) AS SumCST,");

            /*Start MArch 17 */
            dbQry.Append(" Sum(tblPurchase.Freight) AS SumFreight,Sum(tblPurchase.LoadUnload) As Loading,");
            /*End MArch 17 */
            dbQry.Append("  Sum( ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100 ) AS ActualCST FROM tblPurchaseItems,tblPurchase WHERE tblPurchase.purchaseID=tblPurchaseItems.purchaseID And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) and UCASE(tblPurchase.DeliveryNote)='" + delNote + "' and  tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# Group By tblPurchase.BillNo ");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet SecondLevelBillwisePurchase(int billno, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblPurchase.BillNo, tblPurchaseItems.ItemCode,tblProductMaster.ProductDesc,tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate As NetPurchaseRate, ");
            /*March 21*/
            dbQry.Append("  (tblPurchaseItems.PurchaseRate) As PRate ,tblPurchaseItems.Qty As Quantity,");
            /*March 21*/
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            /*Start MArch 17 */
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            /*End MArch 17 */
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblProductMaster.ItemCode = tblPurchaseItems.Itemcode And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblPurchase.BillNo ='" + billno + "'  Order By tblPurchase.purchaseID");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet FirstLevelCustomerwisePurchase(DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblLedger.LedgerName As LinkName,Sum(tblPurchaseItems.Qty) AS Quantity, Sum(tblPurchaseItems.Qty*PurchaseRate) As NetPurchaseRate , Sum((tblPurchaseItems.qty*PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*PurchaseRate)) AS SalesDiscount,");
            dbQry.Append(" Sum(((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*PurchaseRate)) AS ActualDiscount,");
            dbQry.Append("Sum((tblPurchaseItems.Qty*PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*PurchaseRate)+((VAT/100)*((tblPurchaseItems.Qty*PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*PurchaseRate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((tblPurchaseItems.Qty*PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*PurchaseRate)) * VAT/100 ) AS ActualVAT,");
            dbQry.Append(" Sum((tblPurchaseItems.Qty*PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*PurchaseRate)+((CST/100)*((tblPurchaseItems.Qty*PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*PurchaseRate)))) AS SumCST,");

            /*Start MArch 17 */
            dbQry.Append(" Sum(tblPurchase.Freight) AS SumFreight,Sum(tblPurchase.LoadUnload) As Loading,");
            /*End MArch 17 */
            dbQry.Append(" Sum( ((tblPurchaseItems.Qty*PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*PurchaseRate)) * CST/100 ) AS ActualCST FROM tblPurchaseItems,tblPurchase,tblLedger WHERE tblPurchase.purchaseID=tblPurchaseItems.purchaseID And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) and UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) And tblPurchase.Invoicedate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.Invoicedate<=#" + eDate.ToString("MM/dd/yyyy") + "# AND tblLedger.LedgerID = tblPurchase.SupplierID  Group By  tblLedger.LedgerName");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet SecondLevelCustomerwisePurchase(string customername, DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblPurchase.PurchaseID,tblPurchase.BillNo, tblPurchaseItems.ItemCode,tblProductMaster.ProductDesc,tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate As NetPurchaseRate, ");
            /*March 21*/
            dbQry.Append("  (tblPurchaseItems.PurchaseRate) As PRate ,tblPurchaseItems.Qty As Quantity,");
            /*March 21*/
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            /*Start MArch 17 */
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            /*End MArch 17 */
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster,tblLedger WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblProductMaster.ItemCode = tblPurchaseItems.Itemcode And tblLedger.LedgerID=tblPurchase.SupplierID AND ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblLedger.LedgerName='" + customername + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Order By tblPurchase.purchaseID");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    /*Start Itemwise Report Change*/
    public DataSet FirstLevelItemwisePurchase(DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT  tblProductMaster.ItemCode As LinkName,tblProductMaster.ProductName,Sum(tblPurchaseItems.Qty) AS Quantity, ");
            dbQry.Append(" Sum(tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate) As NetPurchaseRate , Sum((tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)) AS SalesDiscount, ");
            dbQry.Append(" Sum(((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)) AS ActualDiscount,");
            dbQry.Append(" Sum((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100 ) AS ActualVAT, ");
            dbQry.Append(" Sum((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)))) AS SumCST,");
            /*Start MArch 17 */
            dbQry.Append(" Sum(tblPurchase.Freight) AS SumFreight,Sum(tblPurchase.LoadUnload) As Loading,");
            /*End MArch 17 */
            dbQry.Append("  Sum( ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100 ) AS ActualCST FROM tblPurchaseItems,tblPurchase,tblProductMaster WHERE  tblPurchase.purchaseID=tblPurchaseItems.purchaseID And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) and UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) and  tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And  tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# Group By tblProductMaster.ItemCode,tblProductMaster.ProductName Order By 1 ");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet SecondLevelItemwisePurchase(string DescName, DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblPurchaseItems.purchaseID,tblPurchase.BillNo, tblPurchaseItems.ItemCode,ProductDesc,tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate As NetPurchaseRate, ");
            /*March 21*/
            dbQry.Append("  (tblPurchaseItems.PurchaseRate) As PRate ,tblPurchaseItems.Qty As Quantity,");
            /*March 21*/
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            /*Start MArch 17 */
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            /*End MArch 17 */
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblProductMaster.ItemCode ='" + DescName + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Order By tblPurchase.purchaseID");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    /*End Itemwise Report Change*/

    #endregion

    #region Gross Profit Summary Report
    public DataSet GetPurchaseChargesTotal()
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbChildQry = string.Empty;
        DataSet dsChildQry = new DataSet();
        try
        {

            manager.Open();
            /*Start March 17*/
            /*Start Itemwise Report Change*/
            dbQry.Append("SELECT tblPurchase.purchaseID,  Sum(tblPurchaseItems.PurchaseRate*Qty) As Total,LoadUnload,freight  FROM tblPurchase,tblPurchaseItems");
            dbQry.Append(" WHERE tblPurchase.PurchaseID=tblPurchaseItems.PurchaseID  Group By tblPurchase.PurchaseID,LoadUnload,freight ");
            /*End Itemwise Report Change*/
            /*End March 17*/

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            int purchaseID = 0;
            double Total = 0;
            double loadUnload = 0;
            double freight = 0;
            string itemcode = string.Empty;
            double itemTotal = 0;
            double itemQty = 0;
            double FreightTotal = 0;
            double LoadingTotal = 0;
            DataSet gpDs = new DataSet();
            DataTable dt;
            DataRow drNew;
            DataColumn dc;
            dt = new DataTable();

            dc = new DataColumn("PurchaseID");
            dt.Columns.Add(dc);

            dc = new DataColumn("ItemCode");
            dt.Columns.Add(dc);
            dc = new DataColumn("PurchaseLoading");
            dt.Columns.Add(dc);

            dc = new DataColumn("PurchaseFreight");
            dt.Columns.Add(dc);

            gpDs.Tables.Add(dt);


            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    if (dr["PurchaseID"] != null)
                    {
                        purchaseID = Convert.ToInt32(dr["PurchaseID"]);
                    }
                    if (dr["Total"] != null)
                    {
                        if (dr["Total"] != DBNull.Value)
                        {
                            Total = Convert.ToDouble(dr["Total"]);
                        }
                    }
                    if (dr["LoadUnload"] != null)
                    {
                        if (dr["LoadUnload"] != DBNull.Value)
                        {
                            loadUnload = Convert.ToDouble(dr["LoadUnload"]);
                        }
                    }
                    if (dr["Freight"] != null)
                    {
                        if (dr["Freight"] != DBNull.Value)
                        {
                            freight = Convert.ToDouble(dr["Freight"]);
                        }
                    }
                    dbChildQry = "SELECT purchaseID,Itemcode, Sum(Qty* PurchaseRate) As Total,Sum(Qty) As QtyTotal From tblPurchaseitems where tblPurchaseItems.PurchaseID=" + purchaseID + " group by purchaseID,itemcode";
                    dsChildQry = manager.ExecuteDataSet(CommandType.Text, dbChildQry.ToString());
                    foreach (DataRow drChild in dsChildQry.Tables[0].Rows)
                    {
                        if (drChild["itemcode"] != null)
                        {
                            itemcode = Convert.ToString(drChild["itemcode"]);
                        }
                        if (drChild["Total"] != null)
                        {
                            itemTotal = Convert.ToDouble(drChild["Total"]);
                        }
                        if (drChild["QtyTotal"] != null)
                        {
                            itemQty = Convert.ToDouble(drChild["QtyTotal"]);
                        }

                        LoadingTotal = ((itemTotal / Total) * loadUnload) / itemQty;
                        FreightTotal = ((itemTotal / Total) * freight) / itemQty;
                        drNew = gpDs.Tables[0].NewRow();
                        drNew["PurchaseLoading"] = LoadingTotal.ToString("f2");
                        drNew["PurchaseFreight"] = FreightTotal.ToString("f2");
                        drNew["PurchaseID"] = purchaseID.ToString();
                        drNew["ItemCode"] = itemcode;
                        gpDs.Tables[0].Rows.Add(drNew);
                    }
                }
            }

            return gpDs;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet GetPurchaseChargesTotalForNLP()
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbChildQry = string.Empty;
        DataSet dsChildQry = new DataSet();
        try
        {

            manager.Open();
            /*Start March 17*/
            /*Start Itemwise Report Change*/
            dbQry.Append("SELECT tblPurchase.purchaseID,  Sum(tblPurchaseItems.NLP*Qty) As Total,LoadUnload,freight  FROM tblPurchase,tblPurchaseItems");
            dbQry.Append(" WHERE tblPurchase.PurchaseID=tblPurchaseItems.PurchaseID  Group By tblPurchase.PurchaseID,LoadUnload,freight ");
            /*End Itemwise Report Change*/
            /*End March 17*/

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            int purchaseID = 0;
            double Total = 0;
            double loadUnload = 0;
            double freight = 0;
            string itemcode = string.Empty;
            double itemTotal = 0;
            double itemQty = 0;
            double FreightTotal = 0;
            double LoadingTotal = 0;
            DataSet gpDs = new DataSet();
            DataTable dt;
            DataRow drNew;
            DataColumn dc;
            dt = new DataTable();

            dc = new DataColumn("PurchaseID");
            dt.Columns.Add(dc);

            dc = new DataColumn("ItemCode");
            dt.Columns.Add(dc);
            dc = new DataColumn("PurchaseLoading");
            dt.Columns.Add(dc);

            dc = new DataColumn("PurchaseFreight");
            dt.Columns.Add(dc);

            gpDs.Tables.Add(dt);


            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    if (dr["PurchaseID"] != null)
                    {
                        purchaseID = Convert.ToInt32(dr["PurchaseID"]);
                    }
                    if (dr["Total"] != null)
                    {
                        if (dr["Total"] != DBNull.Value)
                        {
                            Total = Convert.ToDouble(dr["Total"]);
                        }
                    }
                    if (dr["LoadUnload"] != null)
                    {
                        if (dr["LoadUnload"] != DBNull.Value)
                        {
                            loadUnload = Convert.ToDouble(dr["LoadUnload"]);
                        }
                    }
                    if (dr["Freight"] != null)
                    {
                        if (dr["Freight"] != DBNull.Value)
                        {
                            freight = Convert.ToDouble(dr["Freight"]);
                        }
                    }
                    dbChildQry = "SELECT purchaseID,Itemcode, Sum(Qty* NLP) As Total,Sum(Qty) As QtyTotal From tblPurchaseitems where tblPurchaseItems.PurchaseID=" + purchaseID + " group by purchaseID,itemcode";
                    dsChildQry = manager.ExecuteDataSet(CommandType.Text, dbChildQry.ToString());
                    foreach (DataRow drChild in dsChildQry.Tables[0].Rows)
                    {
                        if (drChild["itemcode"] != DBNull.Value)
                        {
                            itemcode = Convert.ToString(drChild["itemcode"]);
                        }
                        if (drChild["Total"] != DBNull.Value)
                        {
                            itemTotal = Convert.ToDouble(drChild["Total"]);
                        }
                        if (drChild["QtyTotal"] != DBNull.Value)
                        {
                            itemQty = Convert.ToDouble(drChild["QtyTotal"]);
                        }

                        LoadingTotal = ((itemTotal / Total) * loadUnload) / itemQty;
                        FreightTotal = ((itemTotal / Total) * freight) / itemQty;
                        drNew = gpDs.Tables[0].NewRow();
                        drNew["PurchaseLoading"] = LoadingTotal.ToString("f2");
                        drNew["PurchaseFreight"] = FreightTotal.ToString("f2");
                        drNew["PurchaseID"] = purchaseID.ToString();
                        drNew["ItemCode"] = itemcode;
                        gpDs.Tables[0].Rows.Add(drNew);
                    }
                }
            }

            return gpDs;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet GetAllPurchase()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();
            /*Start March 22*/

            dbQry.Append("SELECT tblPurchase.purchaseID, tblPurchase.BillDate, tblPurchaseItems.ItemCode, tblPurchaseItems.PurchaseRate, ");
            dbQry.Append(" tblPurchaseItems.Qty,tblPurchaseItems.VAT,tblPurchaseItems.CST,tblPurchaseItems.Discount,tblPurchase.LoadUnload,tblPurchase.Freight,tblPurchaseItems.NLP FROM tblPurchaseItems, tblPurchase");
            dbQry.Append(" WHERE tblPurchase.PurchaseID=tblPurchaseItems.PurchaseID and (tblPurchase.SalesReturn<>'Yes' or tblPurchase.SalesReturn is null )    ORDER BY tblPurchase.Billdate,tblPurchase.PurchaseID;");

            /*End March 22*/
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetAllPurchaseNew(string itemcod)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {
            manager.Open();
            /*Start March 22*/

            dbQry.Append("SELECT tblPurchase.purchaseID, tblPurchase.BillDate, tblPurchaseItems.ItemCode, tblPurchaseItems.PurchaseRate as PRate, ");
            dbQry.Append(" tblPurchaseItems.Qty,tblPurchaseItems.VAT,tblPurchaseItems.CST,tblPurchaseItems.Discount,tblPurchase.LoadUnload,tblPurchase.Freight,tblPurchaseItems.NLP FROM tblPurchaseItems, tblPurchase");
            dbQry.Append(" WHERE tblPurchase.PurchaseID=tblPurchaseItems.PurchaseID and (tblPurchase.SalesReturn<>'Yes' or tblPurchase.SalesReturn is null ) and tblPurchaseItems.itemcode= '" + itemcod + "'  ORDER BY tblPurchase.Billdate,tblPurchase.PurchaseID;");

            /*End March 22*/
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet GetAllPurchaseForNLP()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();
            /*Start March 22*/

            dbQry.Append("SELECT tblPurchase.purchaseID, tblPurchase.BillDate, tblPurchaseItems.ItemCode, tblPurchaseItems.NLP as PurchaseRate, ");
            dbQry.Append(" tblPurchaseItems.Qty,0 as VAT,0 as Discount,0 as CST,tblPurchase.LoadUnload,tblPurchase.Freight FROM tblPurchaseItems, tblPurchase");
            dbQry.Append(" WHERE tblPurchase.PurchaseID=tblPurchaseItems.PurchaseID and (tblPurchase.SalesReturn<>'Yes' or tblPurchase.SalesReturn is null )    ORDER BY tblPurchase.Billdate,tblPurchase.PurchaseID;");

            /*End March 22*/
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public DataSet GetAllSales()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();

            /*Start March 22*/
            dbQry.Append("SELECT tblSales.Billno,tblSales.BillDate,tblSalesItems.ItemCode,tblSales.CustomerID,tblSales.CustomerName,tblSalesItems.Rate As Rate,");
            dbQry.Append(" tblSalesItems.Discount, tblSalesItems.Qty,tblSalesItems.VAT,tblSalesItems.CST,tblSales.Freight,tblSales.LoadUnload From tblSalesItems,tblSales ");
            dbQry.Append(" where tblSales.Billno=tblSalesItems.Billno AND tblSales.cancelled=false AND (tblSales.PurchaseReturn<>'Yes' or  tblSales.PurchaseReturn is null)  order by tblSales.Billdate,tblSales.Billno,tblSalesItems.ItemCode ");

            /*End March 22*/

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetAllSalesAndSalesReturn()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();

            /*Start March 22*/
            dbQry.Append("SELECT tblSales.Billno,tblSales.BillDate,tblSalesItems.ItemCode,");
            dbQry.Append(" tblSalesItems.Qty From tblSalesItems,tblSales ");
            dbQry.Append(" where tblSales.Billno=tblSalesItems.Billno AND tblSales.cancelled=false AND (tblSales.PurchaseReturn<>'Yes' or  tblSales.PurchaseReturn is null) ");
            dbQry.Append(" Union All ");
            dbQry.Append(" SELECT tblPurchase.Billno,tblPurchase.BillDate,tblPurchaseItems.ItemCode,");
            dbQry.Append(" tblPurchaseItems.Qty From tblPurchaseItems,tblPurchase ");
            dbQry.Append(" where tblPurchase.PurchaseID=tblPurchaseItems.PurchaseID AND (tblPurchase.SalesReturn = 'Yes')  order by tblSales.Billdate,tblSales.Billno,tblSalesItems.ItemCode ");

            /*End March 22*/

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetAllOpeningStock()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();

            dbQry.Append("SELECT ItemCode,OpeningStock From tblStock");




            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    /*Start March 17*/
    public DataSet GetProductGPForId()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select itemcode,Rate,VAT,Discount, CST, BuyRate,BuyVAT, BuyDiscount  from tblProductMaster";
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
            manager.CommitTransaction();
            manager.Dispose();
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    /*End March 17*/
    /*Start March 17*/
    public void InsertGP(DataSet ds)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        //DataSet ds = new DataSet();
        string dbQry = string.Empty;
        double salesQty = 0;
        string salesItemCode = string.Empty;
        double salesRate = 0;
        double salesDiscount = 0;
        double salesVat = 0;
        double salesCst = 0;
        double salesLoading = 0;
        double salesFreight = 0;
        string salesExecutive = string.Empty;
        int salesCustomerID = 0;
        string salesCustomer = string.Empty;
        int salesBillno = 0;
        int purchaseID = 0;
        double PurchaseRate = 0;
        double PurchaseDiscount = 0;
        double PurchaseVat = 0;
        double PurchaseCst = 0;
        double PurchaseLoading = 0;
        double PurchaseFreight = 0;
        DateTime salesBillDate = new DateTime();
        DateTime PurchaseBillDate = new DateTime();

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    salesBillno = Convert.ToInt32(dr["SalesBillno"]);
                    salesBillDate = Convert.ToDateTime(dr["SalesBillDate"]);
                    salesItemCode = Convert.ToString(dr["ItemCode"]);
                    salesRate = Convert.ToDouble(dr["SalesRate"]);
                    salesDiscount = Convert.ToDouble(dr["SalesDiscount"]);
                    salesVat = Convert.ToDouble(dr["SalesVat"]);
                    salesCst = Convert.ToDouble(dr["SalesCst"]);
                    salesFreight = Convert.ToDouble(dr["SalesFreight"]);
                    salesLoading = Convert.ToDouble(dr["SalesLoading"]);
                    salesQty = Convert.ToDouble(dr["SalesQty"]);
                    //salesExecutive = Convert.ToString(dr["Executive"]);
                    //salesCustomerID = Convert.ToInt32(dr["CustomerID"]);
                    //salesCustomer = Convert.ToString(dr["CustomerName"]) ;

                    if (dr["PurchaseRate"] != null)
                    {
                        if (dr["PurchaseRate"].ToString() != "")
                        {
                            PurchaseRate = Convert.ToDouble(dr["PurchaseRate"]);
                        }

                    }
                    if (dr["PurchaseDiscount"] != null)
                    {
                        if (dr["PurchaseDiscount"].ToString() != "")
                        {
                            PurchaseDiscount = Convert.ToDouble(dr["PurchaseDiscount"]);
                        }
                    }
                    if (dr["PurchaseVat"] != null)
                    {
                        if (dr["PurchaseVat"].ToString() != "")
                        {
                            PurchaseVat = Convert.ToDouble(dr["PurchaseVat"]);
                        }
                    }
                    if (dr["PurchaseCst"] != null)
                    {
                        if (dr["PurchaseCst"].ToString() != "")
                        {
                            PurchaseCst = Convert.ToDouble(dr["PurchaseCst"]);
                        }
                    }
                    if (dr["purchaseID"] != null)
                    {
                        if (dr["purchaseID"].ToString() != "")
                        {
                            purchaseID = Convert.ToInt32(dr["purchaseID"]);
                        }
                    }
                    if (dr["PurchaseBillDate"] != null)
                    {
                        if (dr["PurchaseBillDate"].ToString() != "")
                        {
                            PurchaseBillDate = Convert.ToDateTime(dr["PurchaseBillDate"]);
                        }
                    }
                    if (dr["PurchaseLoading"] != null)
                    {
                        if (dr["PurchaseLoading"].ToString() != "")
                        {
                            PurchaseLoading = Convert.ToDouble(dr["PurchaseLoading"]);
                        }
                    }
                    if (dr["PurchaseFreight"] != null)
                    {
                        if (dr["PurchaseFreight"].ToString() != "")
                        {
                            PurchaseFreight = Convert.ToDouble(dr["PurchaseFreight"]);
                        }
                    }

                    dbQry = string.Format("Insert Into tblGrossProfit(SalesBillno,SalesBillDate,ItemCode,SalesRate,SalesQty,SalesDiscount,SalesVat,SalesCst,SalesLoading,SalesFreight,PurchaseID,PurchaseBillDate,PurchaseRate,PurchaseVat,PurchaseCst,PurchaseDiscount,PurchaseLoading,PurchaseFreight) Values ({0},Format('{1}', 'MM/dd/yyyy'),'{2}',{3},{4},{5},{6},{7},{8},{9},{10},Format('{11}', 'dd/mm/yyyy'),{12},{13},{14},{15},{16},{17})", salesBillno, salesBillDate.ToString("MM/dd/yyyy"), salesItemCode, salesRate, salesQty, salesDiscount, salesVat, salesCst, salesLoading, salesFreight, purchaseID, PurchaseBillDate.ToString("MM/dd/yyyy"), PurchaseRate, PurchaseVat, PurchaseCst, PurchaseDiscount, PurchaseLoading, PurchaseFreight);

                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                }
            }
            manager.CommitTransaction();

            manager.Dispose();
        }
        catch (Exception ex)
        {
            manager.Dispose();
            throw ex;
        }

    }
    /*End March 17*/
    public void DeleteGP()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        manager.BeginTransaction();


        dbQry = "DELETE FROM tblGrossProfit";
        manager.ExecuteNonQuery(CommandType.Text, dbQry);



        manager.CommitTransaction();

        manager.Dispose();

    }
    public string GetExecutiveGP(int ledgerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        DataSet ds2 = new DataSet();

        string dbQry = string.Empty;
        try
        {

            manager.Open();

            dbQry = "SELECT executiveIncharge FROM tblLedger WHERE LedgerID=" + ledgerID;
            // int executive =0;
            // //ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            // if (manager.ExecuteScalar(CommandType.Text, dbQry) != null && manager.ExecuteScalar(CommandType.Text, dbQry).ToString()  != "")
            //     executive = (Int32)manager.ExecuteScalar(CommandType.Text, dbQry); 
            //return executive;
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            int executive = 0;
            if (ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0]["executiveincharge"] != null && ds.Tables[0].Rows[0]["executiveincharge"] != DBNull.Value)
                {
                    if (Convert.ToString(ds.Tables[0].Rows[0]["executiveincharge"]) == "")
                    {
                        executive = Convert.ToInt32(ds.Tables[0].Rows[0]["executiveincharge"]);
                        dbQry = "Select empfirstname from  tblEmployee where empno=" + executive;
                        ds2 = manager.ExecuteDataSet(CommandType.Text, dbQry);
                        if (ds2.Tables[0].Rows.Count > 0)
                        {
                            return Convert.ToString(ds2.Tables[0].Rows[0]["empFirstName"]);
                        }
                        else
                        {
                            return "";
                        }
                    }
                    else
                    {
                        return "";
                    }
                }
                else
                {
                    return "";
                }

            }
            else
                return "";
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public DataSet FirstLevelGrossReportDaywise(DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT SalesBillDate As LinkName,Sum(SalesQty) AS Quantity,");
            /*March 21*/
            dbQry.Append(" Sum(SalesRate) As SRate ,");
            /*March 21*/
            dbQry.Append(" Sum(SalesQty*SalesRate) As NetRate ,");
            dbQry.Append(" Sum((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)) AS SalesDis,");
            dbQry.Append(" Sum(((Salesdiscount/100)*SalesQty*SalesRate)) AS ActualDiscount,");
            dbQry.Append(" Sum((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)+((SalesVAT/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((SalesQty*SalesRate)- ((salesdiscount/100)*SalesQty*SalesRate)) * SalesVAT/100 ) AS ActualVAT, ");
            dbQry.Append("Sum((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)+((SalesCST/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumCST, ");
            dbQry.Append(" Sum(SalesFreight) AS SumFreight,Sum(SalesLoading) As Loading, ");
            dbQry.Append(" Sum(((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)) * SalesCST/100 ) AS ActualCST,");
            /*March 21*/
            dbQry.Append("  Sum(PurchaseRate) As PRate ,");
            /*March 21*/
            dbQry.Append("  Sum(SalesQty*PurchaseRate) As PurchaseNetRate ,");
            dbQry.Append("  Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseDis, ");
            dbQry.Append(" Sum(((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseActualDiscount,");
            dbQry.Append(" Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseVAT/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumVAT,");
            dbQry.Append("  Sum( ((SalesQty*PurchaseRate)- ((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseVAT/100 ) AS PurchaseActualVAT, ");
            dbQry.Append(" Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseCST/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumCST, ");
            /* Start March 17 */
            dbQry.Append(" Sum(PurchaseFreight*SalesQty) AS SumPurchaseFreight,Sum(PurchaseLoading*SalesQty) As PurLoading, ");
            /* End March 17 */
            dbQry.Append(" Sum(((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseCST/100 ) AS PurchaseActualCST ");
            dbQry.Append(" FROM tblGrossProfit  WHERE  tblGrossProfit.SalesBillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblGrossProfit.SalesBillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# Group By tblGrossProfit.SalesBillDate");




            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet SecondLevelGrossReportDaywise(DateTime sDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT SalesBillNo,tblGrossProfit.ItemCode,ProductDesc,");
            dbQry.Append(" (SalesQty) AS Quantity,(SalesQty*SalesRate) As NetRate ,");
            /*March 21*/
            dbQry.Append(" (SalesRate) As SRate ,");
            /*March 21*/
            dbQry.Append(" ((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)) AS SalesDis, ");
            dbQry.Append(" (((Salesdiscount/100)*SalesQty*SalesRate)) AS ActualDiscount,");
            dbQry.Append(" ((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)+((SalesVAT/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumVAT,");
            dbQry.Append(" ( ((SalesQty*SalesRate)- ((salesdiscount/100)*SalesQty*SalesRate)) * SalesVAT/100 ) AS ActualVAT, ");
            dbQry.Append(" ((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)+((SalesCST/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumCST, ");
            dbQry.Append(" (SalesFreight) AS SumFreight,(SalesLoading) As Loading, ");
            dbQry.Append(" (((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)) * SalesCST/100 ) AS ActualCST,");
            /*March 21*/
            dbQry.Append("  (PurchaseRate) As PRate ,");
            /*March 21*/
            dbQry.Append("  (SalesQty*PurchaseRate) As PurchaseNetRate ,");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseDis, ");
            dbQry.Append(" (((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseActualDiscount,");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseVAT/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumVAT,");
            dbQry.Append(" ( ((SalesQty*PurchaseRate)- ((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseVAT/100 ) AS PurchaseActualVAT, ");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseCST/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumCST, ");
            /* Start March 17 */
            dbQry.Append(" (PurchaseFreight) AS SumPurchaseFreight,(PurchaseLoading) As PurLoading, ");
            /* End March 17 */
            dbQry.Append(" (((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseCST/100 ) AS PurchaseActualCST ");
            dbQry.Append("FROM tblGrossProfit,tblProductMaster  WHERE tblGrossProfit.ItemCode = tblProductmaster.ItemCode AND  tblGrossProfit.SalesBillDate=#" + sDate.ToString("MM/dd/yyyy") + "# Order By SalesBillno");




            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet FirstLevelGrossReportCategorywise(DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblCategories.CategoryName As LinkName,Sum(SalesQty) AS Quantity,");
            /*March 21*/
            dbQry.Append(" Sum(SalesRate) As SRate ,");
            /*March 21*/
            dbQry.Append(" Sum(SalesQty*SalesRate) As NetRate ,");
            dbQry.Append(" Sum((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)) AS SalesDis,");
            dbQry.Append(" Sum(((Salesdiscount/100)*SalesQty*SalesRate)) AS ActualDiscount,");
            dbQry.Append(" Sum((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)+((SalesVAT/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((SalesQty*SalesRate)- ((salesdiscount/100)*SalesQty*SalesRate)) * SalesVAT/100 ) AS ActualVAT, ");
            dbQry.Append("Sum((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)+((SalesCST/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumCST, ");
            dbQry.Append(" Sum(SalesFreight) AS SumFreight,Sum(SalesLoading) As Loading, ");
            dbQry.Append(" Sum(((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)) * SalesCST/100 ) AS ActualCST,");
            /*March 21*/
            dbQry.Append("  Sum(PurchaseRate) As PRate ,");
            /*March 21*/
            dbQry.Append("  Sum(SalesQty*PurchaseRate) As PurchaseNetRate ,");
            dbQry.Append("  Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseDis, ");
            dbQry.Append(" Sum(((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseActualDiscount,");
            dbQry.Append(" Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseVAT/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumVAT,");
            dbQry.Append("  Sum( ((SalesQty*PurchaseRate)- ((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseVAT/100 ) AS PurchaseActualVAT, ");
            dbQry.Append(" Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseCST/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumCST, ");
            /* Start March 17 */
            dbQry.Append(" Sum(PurchaseFreight*SalesQty) AS SumPurchaseFreight,Sum(PurchaseLoading*SalesQty) As PurLoading, ");
            /* End March 17 */
            dbQry.Append(" Sum(((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseCST/100 ) AS PurchaseActualCST ");
            dbQry.Append(" FROM tblGrossProfit,tblProductMaster,tblCategories  WHERE tblGrossProfit.ItemCode = tblProductmaster.ItemCode And tblProductMaster.CategoryID=tblCategories.CategoryID AND  tblGrossProfit.SalesBillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblGrossProfit.SalesBillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# Group By tblCategories.CategoryName");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet FirstLevelGrossReportCategorywiseNew(DateTime sDate, DateTime eDate, string itemcod)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT SalesQty AS Quantity,");
            /*March 21*/
            dbQry.Append(" SalesRate As SRate ,");
            /*March 21*/
            dbQry.Append(" SalesQty*SalesRate As NetRate ,");
            dbQry.Append(" (SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate) AS SalesDis,");
            dbQry.Append(" ((Salesdiscount/100)*SalesQty*SalesRate) AS ActualDiscount,");
            dbQry.Append(" (SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)+((SalesVAT/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate))) AS SumVAT,");
            dbQry.Append("  ((SalesQty*SalesRate)- ((salesdiscount/100)*SalesQty*SalesRate)) * SalesVAT/100  AS ActualVAT, ");
            dbQry.Append("(SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)+((SalesCST/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate))) AS SumCST, ");
            dbQry.Append(" (SalesFreight) AS SumFreight,(SalesLoading) As Loading, ");
            dbQry.Append(" ((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)) * SalesCST/100  AS ActualCST,");
            /*March 21*/
            dbQry.Append("  PurchaseRate As PRate ,");
            /*March 21*/
            dbQry.Append("  (SalesQty*PurchaseRate) As PurchaseNetRate ,");
            dbQry.Append("  ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseDis, ");
            dbQry.Append(" (((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseActualDiscount,");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseVAT/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumVAT,");
            dbQry.Append("  ( ((SalesQty*PurchaseRate)- ((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseVAT/100 ) AS PurchaseActualVAT, ");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseCST/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumCST, ");
            /* Start March 17 */
            dbQry.Append(" (PurchaseFreight*SalesQty) AS SumPurchaseFreight,(PurchaseLoading*SalesQty) As PurLoading, ");
            /* End March 17 */
            dbQry.Append(" (((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseCST/100 ) AS PurchaseActualCST ");
            dbQry.Append(" FROM tblGrossProfit,tblProductMaster,tblCategories  WHERE tblGrossProfit.ItemCode = tblProductmaster.ItemCode And tblProductMaster.CategoryID=tblCategories.CategoryID AND  tblGrossProfit.SalesBillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblGrossProfit.SalesBillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  and tblProductMaster.itemcode= '" + itemcod + "' ");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelGrossReportCategorywise(string categoryName, DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT SalesBillNo,tblGrossProfit.ItemCode,ProductDesc,");
            dbQry.Append(" (SalesQty) AS Quantity,(SalesQty*SalesRate) As NetRate ,");
            /*March 21*/
            dbQry.Append(" (SalesRate) As SRate ,");
            /*March 21*/
            dbQry.Append(" ((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)) AS SalesDis, ");
            dbQry.Append(" (((Salesdiscount/100)*SalesQty*SalesRate)) AS ActualDiscount,");
            dbQry.Append(" ((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)+((SalesVAT/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumVAT,");
            dbQry.Append(" ( ((SalesQty*SalesRate)- ((salesdiscount/100)*SalesQty*SalesRate)) * SalesVAT/100 ) AS ActualVAT, ");
            dbQry.Append(" ((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)+((SalesCST/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumCST, ");
            dbQry.Append(" (SalesFreight) AS SumFreight,(SalesLoading) As Loading, ");
            dbQry.Append(" (((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)) * SalesCST/100 ) AS ActualCST,");

            /*March 21*/
            dbQry.Append("  (PurchaseRate) As PRate ,");
            /*March 21*/
            dbQry.Append("  (SalesQty*PurchaseRate) As PurchaseNetRate ,");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseDis, ");
            dbQry.Append(" (((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseActualDiscount,");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseVAT/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumVAT,");
            dbQry.Append(" ( ((SalesQty*PurchaseRate)- ((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseVAT/100 ) AS PurchaseActualVAT, ");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseCST/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumCST, ");
            /* Start March 17 */
            dbQry.Append(" (PurchaseFreight) AS SumPurchaseFreight,(PurchaseLoading) As PurLoading, ");
            /* End March 17 */
            dbQry.Append(" (((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseCST/100 ) AS PurchaseActualCST ");
            dbQry.Append(" FROM tblGrossProfit,tblProductMaster,tblCategories  WHERE tblGrossProfit.ItemCode = tblProductmaster.ItemCode AND tblCategories.CategoryID = tblProductMaster.CategoryID and tblGrossProfit.ItemCode = tblProductmaster.ItemCode AND tblCategories.CategoryName='" + categoryName + "'  AND  tblGrossProfit.SalesBillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblGrossProfit.SalesBillDate <=#" + eDate.ToString("MM/dd/yyyy") + "# Order By SalesBillno");


            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    //
    public DataSet FirstLevelGrossReportBrandwise(DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblProductMaster.ProductName As LinkName,Sum(SalesQty) AS Quantity,");
            /*March 21*/
            dbQry.Append(" Sum(SalesRate) As SRate ,");
            /*March 21*/
            dbQry.Append(" Sum(SalesQty*SalesRate) As NetRate ,");
            dbQry.Append(" Sum((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)) AS SalesDis,");
            dbQry.Append(" Sum(((Salesdiscount/100)*SalesQty*SalesRate)) AS ActualDiscount,");
            dbQry.Append(" Sum((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)+((SalesVAT/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((SalesQty*SalesRate)- ((salesdiscount/100)*SalesQty*SalesRate)) * SalesVAT/100 ) AS ActualVAT, ");
            dbQry.Append("Sum((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)+((SalesCST/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumCST, ");
            dbQry.Append(" Sum(SalesFreight) AS SumFreight,Sum(SalesLoading) As Loading, ");
            dbQry.Append(" Sum(((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)) * SalesCST/100 ) AS ActualCST,");
            /*March 21*/
            dbQry.Append("  Sum(PurchaseRate) As PRate ,");
            /*March 21*/
            dbQry.Append("  Sum(SalesQty*PurchaseRate) As PurchaseNetRate ,");
            dbQry.Append("  Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseDis, ");
            dbQry.Append(" Sum(((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseActualDiscount,");
            dbQry.Append(" Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseVAT/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumVAT,");
            dbQry.Append("  Sum( ((SalesQty*PurchaseRate)- ((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseVAT/100 ) AS PurchaseActualVAT, ");
            dbQry.Append(" Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseCST/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumCST, ");
            /* Start March 17 */
            dbQry.Append(" Sum(PurchaseFreight*SalesQty) AS SumPurchaseFreight,Sum(PurchaseLoading*SalesQty) As PurLoading, ");
            /* End March 17 */
            dbQry.Append(" Sum(((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseCST/100 ) AS PurchaseActualCST ");
            dbQry.Append(" FROM tblGrossProfit,tblProductMaster WHERE tblGrossProfit.ItemCode = tblProductmaster.ItemCode AND  tblGrossProfit.SalesBillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblGrossProfit.SalesBillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster.ProductName");




            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet SecondLevelGrossReportBrandwise(string BrandName, DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT SalesBillNo,tblGrossProfit.ItemCode,ProductDesc,");
            dbQry.Append(" (SalesQty) AS Quantity,(SalesQty*SalesRate) As NetRate ,");
            /*March 21*/
            dbQry.Append(" (SalesRate) As SRate ,");
            /*March 21*/
            dbQry.Append(" ((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)) AS SalesDis, ");
            dbQry.Append(" (((Salesdiscount/100)*SalesQty*SalesRate)) AS ActualDiscount,");
            dbQry.Append(" ((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)+((SalesVAT/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumVAT,");
            dbQry.Append(" ( ((SalesQty*SalesRate)- ((salesdiscount/100)*SalesQty*SalesRate)) * SalesVAT/100 ) AS ActualVAT, ");
            dbQry.Append(" ((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)+((SalesCST/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumCST, ");
            dbQry.Append(" (SalesFreight) AS SumFreight,(SalesLoading) As Loading, ");
            dbQry.Append(" (((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)) * SalesCST/100 ) AS ActualCST,");

            /*March 21*/
            dbQry.Append("  (PurchaseRate) As PRate ,");
            /*March 21*/
            dbQry.Append("  (SalesQty*PurchaseRate) As PurchaseNetRate ,");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseDis, ");
            dbQry.Append(" (((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseActualDiscount,");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseVAT/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumVAT,");
            dbQry.Append(" ( ((SalesQty*PurchaseRate)- ((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseVAT/100 ) AS PurchaseActualVAT, ");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseCST/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumCST, ");
            /* Start March 17 */
            dbQry.Append(" (PurchaseFreight) AS SumPurchaseFreight,(PurchaseLoading) As PurLoading, ");
            /* End March 17 */
            dbQry.Append(" (((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseCST/100 ) AS PurchaseActualCST ");
            dbQry.Append(" FROM tblGrossProfit,tblProductMaster  WHERE tblGrossProfit.ItemCode = tblProductmaster.ItemCode and tblGrossProfit.ItemCode = tblProductmaster.ItemCode AND tblProductMaster.ProductName='" + BrandName + "'  AND  tblGrossProfit.SalesBillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblGrossProfit.SalesBillDate <=#" + eDate.ToString("MM/dd/yyyy") + "# Order By SalesBillno");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public DataSet FirstLevelGrossReportModelwise(DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblProductMaster.Model As LinkName,Sum(SalesQty) AS Quantity,");
            /*March 21*/
            dbQry.Append(" Sum(SalesRate) As SRate ,");
            /*March 21*/
            dbQry.Append(" Sum(SalesQty*SalesRate) As NetRate ,");
            dbQry.Append(" Sum((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)) AS SalesDis,");
            dbQry.Append(" Sum(((Salesdiscount/100)*SalesQty*SalesRate)) AS ActualDiscount,");
            dbQry.Append(" Sum((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)+((SalesVAT/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((SalesQty*SalesRate)- ((salesdiscount/100)*SalesQty*SalesRate)) * SalesVAT/100 ) AS ActualVAT, ");
            dbQry.Append("Sum((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)+((SalesCST/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumCST, ");
            dbQry.Append(" Sum(SalesFreight) AS SumFreight,Sum(SalesLoading) As Loading, ");
            dbQry.Append(" Sum(((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)) * SalesCST/100 ) AS ActualCST,");
            /*March 21*/
            dbQry.Append("  Sum(PurchaseRate) As PRate ,");
            /*March 21*/
            dbQry.Append("  Sum(SalesQty*PurchaseRate) As PurchaseNetRate ,");
            dbQry.Append("  Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseDis, ");
            dbQry.Append(" Sum(((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseActualDiscount,");
            dbQry.Append(" Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseVAT/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumVAT,");
            dbQry.Append("  Sum( ((SalesQty*PurchaseRate)- ((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseVAT/100 ) AS PurchaseActualVAT, ");
            dbQry.Append(" Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseCST/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumCST, ");
            /* Start March 17 */
            dbQry.Append(" Sum(PurchaseFreight*SalesQty) AS SumPurchaseFreight,Sum(PurchaseLoading*SalesQty) As PurLoading, ");
            /* End March 17 */
            dbQry.Append(" Sum(((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseCST/100 ) AS PurchaseActualCST ");
            dbQry.Append(" FROM tblGrossProfit,tblProductMaster WHERE tblGrossProfit.ItemCode = tblProductmaster.ItemCode AND  tblGrossProfit.SalesBillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblGrossProfit.SalesBillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster.Model");




            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet SecondLevelGrossReportModelwise(string ModelName, DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT SalesBillNo,tblGrossProfit.ItemCode,ProductDesc,");
            dbQry.Append(" (SalesQty) AS Quantity,(SalesQty*SalesRate) As NetRate ,");
            /*March 21*/
            dbQry.Append(" (SalesRate) As SRate ,");
            /*March 21*/
            dbQry.Append(" ((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)) AS SalesDis, ");
            dbQry.Append(" (((Salesdiscount/100)*SalesQty*SalesRate)) AS ActualDiscount,");
            dbQry.Append(" ((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)+((SalesVAT/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumVAT,");
            dbQry.Append(" ( ((SalesQty*SalesRate)- ((salesdiscount/100)*SalesQty*SalesRate)) * SalesVAT/100 ) AS ActualVAT, ");
            dbQry.Append(" ((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)+((SalesCST/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumCST, ");
            dbQry.Append(" (SalesFreight) AS SumFreight,(SalesLoading) As Loading, ");
            dbQry.Append(" (((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)) * SalesCST/100 ) AS ActualCST,");
            /*March 21*/
            dbQry.Append("  (PurchaseRate) As PRate ,");
            /*March 21*/
            dbQry.Append("  (SalesQty*PurchaseRate) As PurchaseNetRate ,");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseDis, ");
            dbQry.Append(" (((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseActualDiscount,");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseVAT/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumVAT,");
            dbQry.Append(" ( ((SalesQty*PurchaseRate)- ((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseVAT/100 ) AS PurchaseActualVAT, ");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseCST/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumCST, ");
            /* Start March 17 */
            dbQry.Append(" (PurchaseFreight) AS SumPurchaseFreight,(PurchaseLoading) As PurLoading, ");
            /* End March 17 */
            dbQry.Append(" (((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseCST/100 ) AS PurchaseActualCST ");
            dbQry.Append(" FROM tblGrossProfit,tblProductMaster  WHERE tblGrossProfit.ItemCode = tblProductmaster.ItemCode and tblGrossProfit.ItemCode = tblProductmaster.ItemCode AND tblProductMaster.Model='" + ModelName + "'  AND  tblGrossProfit.SalesBillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblGrossProfit.SalesBillDate <=#" + eDate.ToString("MM/dd/yyyy") + "# Order By SalesBillno");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet FirstLevelGrossReportBillwise(DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT SalesBillno As LinkName,Sum(SalesQty) AS Quantity,");
            /*March 21*/
            dbQry.Append(" Sum(SalesRate) As SRate ,");
            /*March 21*/
            dbQry.Append(" Sum(SalesQty*SalesRate) As NetRate ,");
            dbQry.Append(" Sum((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)) AS SalesDis,");
            dbQry.Append(" Sum(((Salesdiscount/100)*SalesQty*SalesRate)) AS ActualDiscount,");
            dbQry.Append(" Sum((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)+((SalesVAT/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((SalesQty*SalesRate)- ((salesdiscount/100)*SalesQty*SalesRate)) * SalesVAT/100 ) AS ActualVAT, ");
            dbQry.Append("Sum((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)+((SalesCST/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumCST, ");
            dbQry.Append(" Sum(SalesFreight) AS SumFreight,Sum(SalesLoading) As Loading, ");
            dbQry.Append(" Sum(((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)) * SalesCST/100 ) AS ActualCST,");
            /*March 21*/
            dbQry.Append("  Sum(PurchaseRate) As PRate ,");
            /*March 21*/
            dbQry.Append("  Sum(SalesQty*PurchaseRate) As PurchaseNetRate ,");
            dbQry.Append("  Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseDis, ");
            dbQry.Append(" Sum(((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseActualDiscount,");
            dbQry.Append(" Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseVAT/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumVAT,");
            dbQry.Append("  Sum( ((SalesQty*PurchaseRate)- ((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseVAT/100 ) AS PurchaseActualVAT, ");
            dbQry.Append(" Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseCST/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumCST, ");
            /* Start March 17 */
            dbQry.Append(" Sum(PurchaseFreight*SalesQty) AS SumPurchaseFreight,Sum(PurchaseLoading*SalesQty) As PurLoading, ");
            /* End March 17 */
            dbQry.Append(" Sum(((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseCST/100 ) AS PurchaseActualCST ");
            dbQry.Append(" FROM tblGrossProfit  WHERE  tblGrossProfit.SalesBillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblGrossProfit.SalesBillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# Group By SalesBillNo");




            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet SecondLevelGrossReportBillwise(int billno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT SalesBillNo,tblGrossProfit.ItemCode,ProductDesc,");
            dbQry.Append(" (SalesQty) AS Quantity,(SalesQty*SalesRate) As NetRate ,");
            /*March 21*/
            dbQry.Append(" (SalesRate) As SRate ,");
            /*March 21*/
            dbQry.Append(" ((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)) AS SalesDis, ");
            dbQry.Append(" (((Salesdiscount/100)*SalesQty*SalesRate)) AS ActualDiscount,");
            dbQry.Append(" ((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)+((SalesVAT/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumVAT,");
            dbQry.Append(" ( ((SalesQty*SalesRate)- ((salesdiscount/100)*SalesQty*SalesRate)) * SalesVAT/100 ) AS ActualVAT, ");
            dbQry.Append(" ((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)+((SalesCST/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumCST, ");
            dbQry.Append(" (SalesFreight) AS SumFreight,(SalesLoading) As Loading, ");
            dbQry.Append(" (((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)) * SalesCST/100 ) AS ActualCST,");


            /*March 21*/
            dbQry.Append("  (PurchaseRate) As PRate ,");
            /*March 21*/
            dbQry.Append("  (SalesQty*PurchaseRate) As PurchaseNetRate ,");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseDis, ");
            dbQry.Append(" (((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseActualDiscount,");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseVAT/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumVAT,");
            dbQry.Append(" ( ((SalesQty*PurchaseRate)- ((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseVAT/100 ) AS PurchaseActualVAT, ");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseCST/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumCST, ");
            /* Start March 17 */
            dbQry.Append(" (PurchaseFreight) AS SumPurchaseFreight,(PurchaseLoading) As PurLoading, ");
            /* End March 17 */
            dbQry.Append(" (((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseCST/100 ) AS PurchaseActualCST ");
            dbQry.Append("FROM tblGrossProfit,tblProductMaster  WHERE tblGrossProfit.ItemCode = tblProductmaster.ItemCode AND  tblGrossProfit.SalesBillno =" + billno + "   Order By SalesBillno");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet FirstLevelGrossReportCustomerwise(DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblSales.CustomerName As LinkName,Sum(SalesQty) AS Quantity,");
            /*March 21*/
            dbQry.Append(" Sum(SalesRate) As SRate ,");
            /*March 21*/
            dbQry.Append(" Sum(SalesQty*SalesRate) As NetRate ,");
            dbQry.Append(" Sum((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)) AS SalesDis,");
            dbQry.Append(" Sum(((Salesdiscount/100)*SalesQty*SalesRate)) AS ActualDiscount,");
            dbQry.Append(" Sum((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)+((SalesVAT/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((SalesQty*SalesRate)- ((salesdiscount/100)*SalesQty*SalesRate)) * SalesVAT/100 ) AS ActualVAT, ");
            dbQry.Append("Sum((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)+((SalesCST/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumCST, ");
            dbQry.Append(" Sum(SalesFreight) AS SumFreight,Sum(SalesLoading) As Loading, ");
            dbQry.Append(" Sum(((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)) * SalesCST/100 ) AS ActualCST,");
            /*March 21*/
            dbQry.Append("  Sum(PurchaseRate) As PRate ,");
            /*March 21*/
            dbQry.Append("  Sum(SalesQty*PurchaseRate) As PurchaseNetRate ,");
            dbQry.Append("  Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseDis, ");
            dbQry.Append(" Sum(((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseActualDiscount,");
            dbQry.Append(" Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseVAT/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumVAT,");
            dbQry.Append("  Sum( ((SalesQty*PurchaseRate)- ((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseVAT/100 ) AS PurchaseActualVAT, ");
            dbQry.Append(" Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseCST/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumCST, ");
            /* Start March 17 */
            dbQry.Append(" Sum(PurchaseFreight*SalesQty) AS SumPurchaseFreight,Sum(PurchaseLoading*SalesQty) As PurLoading, ");
            /* End March 17 */
            dbQry.Append(" Sum(((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseCST/100 ) AS PurchaseActualCST ");
            dbQry.Append(" FROM tblGrossProfit,tblSales  WHERE tblSales.Billno = tblGrossProfit.SalesBillno and  tblGrossProfit.SalesBillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblGrossProfit.SalesBillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# Group By tblSales.CustomerName");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelGrossReportCustomerwise(string customername, DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT SalesBillNo,tblGrossProfit.ItemCode,ProductDesc,");
            dbQry.Append(" (SalesQty) AS Quantity,(SalesQty*SalesRate) As NetRate ,");
            /*March 21*/
            dbQry.Append(" (SalesRate) As SRate ,");
            /*March 21*/
            dbQry.Append(" ((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)) AS SalesDis, ");
            dbQry.Append(" (((Salesdiscount/100)*SalesQty*SalesRate)) AS ActualDiscount,");
            dbQry.Append(" ((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)+((SalesVAT/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumVAT,");
            dbQry.Append(" ( ((SalesQty*SalesRate)- ((salesdiscount/100)*SalesQty*SalesRate)) * SalesVAT/100 ) AS ActualVAT, ");
            dbQry.Append(" ((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)+((SalesCST/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumCST, ");
            dbQry.Append(" (SalesFreight) AS SumFreight,(SalesLoading) As Loading, ");
            dbQry.Append(" (((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)) * SalesCST/100 ) AS ActualCST,");
            /*March 21*/
            dbQry.Append("  (PurchaseRate) As PRate ,");
            /*March 21*/
            dbQry.Append("  (SalesQty*PurchaseRate) As PurchaseNetRate ,");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseDis, ");
            dbQry.Append(" (((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseActualDiscount,");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseVAT/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumVAT,");
            dbQry.Append(" ( ((SalesQty*PurchaseRate)- ((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseVAT/100 ) AS PurchaseActualVAT, ");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseCST/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumCST, ");
            /* Start March 17 */
            dbQry.Append(" (PurchaseFreight) AS SumPurchaseFreight,(PurchaseLoading) As PurLoading, ");
            /* End March 17 */
            dbQry.Append(" (((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseCST/100 ) AS PurchaseActualCST ");
            dbQry.Append("FROM tblGrossProfit,tblProductMaster,tblSales  WHERE tblSales.Billno = tblGrossProfit.SalesBillno AND  tblGrossProfit.ItemCode = tblProductmaster.ItemCode AND  tblSales.Customername ='" + customername + "' AND  tblGrossProfit.SalesBillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblGrossProfit.SalesBillDate <=#" + eDate.ToString("MM/dd/yyyy") + "#  Order By SalesBillno");


            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet FirstLevelGrossReportExecutivewise(DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT empFirstName As LinkName,Sum(SalesQty) AS Quantity,");
            /*March 21*/
            dbQry.Append(" Sum(SalesRate) As SRate ,");
            /*March 21*/
            dbQry.Append(" Sum(SalesQty*SalesRate) As NetRate ,");
            dbQry.Append(" Sum((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)) AS SalesDis,");
            dbQry.Append(" Sum(((Salesdiscount/100)*SalesQty*SalesRate)) AS ActualDiscount,");
            dbQry.Append(" Sum((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)+((SalesVAT/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((SalesQty*SalesRate)- ((salesdiscount/100)*SalesQty*SalesRate)) * SalesVAT/100 ) AS ActualVAT, ");
            dbQry.Append(" Sum((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)+((SalesCST/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumCST, ");
            dbQry.Append(" Sum(SalesFreight) AS SumFreight,Sum(SalesLoading) As Loading, ");
            dbQry.Append(" Sum(((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)) * SalesCST/100 ) AS ActualCST,");
            /*March 21*/
            dbQry.Append("  Sum(PurchaseRate) As PRate ,");
            /*March 21*/
            dbQry.Append("  Sum(SalesQty*PurchaseRate) As PurchaseNetRate ,");
            dbQry.Append("  Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseDis, ");
            dbQry.Append(" Sum(((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseActualDiscount,");
            dbQry.Append(" Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseVAT/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumVAT,");
            dbQry.Append("  Sum( ((SalesQty*PurchaseRate)- ((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseVAT/100 ) AS PurchaseActualVAT, ");
            dbQry.Append(" Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseCST/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumCST, ");
            /* Start March 17 */
            dbQry.Append(" Sum(PurchaseFreight*SalesQty) AS SumPurchaseFreight,Sum(PurchaseLoading*SalesQty) As PurLoading, ");
            /* End March 17 */
            dbQry.Append(" Sum(((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseCST/100 ) AS PurchaseActualCST ");
            dbQry.Append(" FROM tblGrossProfit,tblEmployee,tblLedger,tblSales WHERE tblSales.Billno = tblGrossProfit.SalesBillno and  tblGrossProfit.SalesBillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblGrossProfit.SalesBillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# And tblEmployee.empno=tblLedger.ExecutiveIncharge and tblLedger.LedgerID=tblSales.CustomerID Group By empFirstName");




            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet SecondLevelGrossReportExecutivewise(string executive, DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT SalesBillNo,tblGrossProfit.ItemCode,ProductDesc,");
            dbQry.Append(" (SalesQty) AS Quantity,(SalesQty*SalesRate) As NetRate ,");
            /*March 21*/
            dbQry.Append(" (SalesRate) As SRate ,");
            /*March 21*/
            dbQry.Append(" ((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)) AS SalesDis, ");
            dbQry.Append(" (((Salesdiscount/100)*SalesQty*SalesRate)) AS ActualDiscount,");
            dbQry.Append(" ((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)+((SalesVAT/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumVAT,");
            dbQry.Append(" ( ((SalesQty*SalesRate)- ((salesdiscount/100)*SalesQty*SalesRate)) * SalesVAT/100 ) AS ActualVAT, ");
            dbQry.Append(" ((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)+((SalesCST/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumCST, ");
            dbQry.Append(" (SalesFreight) AS SumFreight,(SalesLoading) As Loading, ");
            dbQry.Append(" (((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)) * SalesCST/100 ) AS ActualCST,");


            /*March 21*/
            dbQry.Append("  (PurchaseRate) As PRate ,");
            /*March 21*/
            dbQry.Append("  (SalesQty*PurchaseRate) As PurchaseNetRate ,");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseDis, ");
            dbQry.Append(" (((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseActualDiscount,");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseVAT/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumVAT,");
            dbQry.Append(" ( ((SalesQty*PurchaseRate)- ((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseVAT/100 ) AS PurchaseActualVAT, ");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseCST/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumCST, ");
            /* Start March 17 */
            dbQry.Append(" (PurchaseFreight) AS SumPurchaseFreight,(PurchaseLoading) As PurLoading, ");
            /* End March 17 */
            dbQry.Append(" (((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseCST/100 ) AS PurchaseActualCST ");
            dbQry.Append("FROM tblGrossProfit,tblProductMaster,tblSales,tblEmployee,tblLedger  WHERE tblSales.Billno = tblGrossProfit.SalesBillno AND  tblGrossProfit.ItemCode = tblProductmaster.ItemCode AND  tblGrossProfit.SalesBillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblGrossProfit.SalesBillDate <=#" + eDate.ToString("MM/dd/yyyy") + "# and tblEmployee.empno=tblLedger.ExecutiveIncharge and tblLedger.LedgerID=tblSales.CustomerID and tblEmployee.empno in (select empno from tblEmployee where empFirstname='" + executive + "')  Order By SalesBillno");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    /*Start Itemwise Report Change*/
    public DataSet FirstLevelGrossReportItemwise(DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblProductMaster.ItemCode As LinkName,Sum(SalesQty) AS Quantity,");
            /*March 21*/
            dbQry.Append(" Sum(SalesRate) As SRate ,");
            /*March 21*/
            dbQry.Append(" Sum(SalesQty*SalesRate) As NetRate ,");
            dbQry.Append(" Sum((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)) AS SalesDis,");
            dbQry.Append(" Sum(((Salesdiscount/100)*SalesQty*SalesRate)) AS ActualDiscount,");
            dbQry.Append(" Sum((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)+((SalesVAT/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((SalesQty*SalesRate)- ((salesdiscount/100)*SalesQty*SalesRate)) * SalesVAT/100 ) AS ActualVAT, ");
            dbQry.Append("Sum((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)+((SalesCST/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumCST, ");
            dbQry.Append(" Sum(SalesFreight) AS SumFreight,Sum(SalesLoading) As Loading, ");
            dbQry.Append(" Sum(((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)) * SalesCST/100 ) AS ActualCST,");
            /*March 21*/
            dbQry.Append("  Sum(PurchaseRate) As PRate ,");
            /*March 21*/
            dbQry.Append("  Sum(SalesQty*PurchaseRate) As PurchaseNetRate ,");
            dbQry.Append("  Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseDis, ");
            dbQry.Append(" Sum(((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseActualDiscount,");
            dbQry.Append(" Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseVAT/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumVAT,");
            dbQry.Append("  Sum( ((SalesQty*PurchaseRate)- ((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseVAT/100 ) AS PurchaseActualVAT, ");
            dbQry.Append(" Sum((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseCST/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumCST, ");
            /* Start March 17 */
            dbQry.Append(" Sum(PurchaseFreight*SalesQty) AS SumPurchaseFreight,Sum(PurchaseLoading*SalesQty) As PurLoading, ");
            /* End March 17 */
            dbQry.Append(" Sum(((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseCST/100 ) AS PurchaseActualCST ");
            dbQry.Append(" FROM tblGrossProfit,tblProductMaster WHERE tblGrossProfit.ItemCode = tblProductmaster.ItemCode AND  tblGrossProfit.SalesBillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblGrossProfit.SalesBillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblProductMaster.ItemCode");




            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet SecondLevelGrossReportItemwise(string DescName, DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT SalesBillNo,tblGrossProfit.ItemCode,ProductDesc,");
            dbQry.Append(" (SalesQty) AS Quantity,(SalesQty*SalesRate) As NetRate ,");
            /*March 21*/
            dbQry.Append(" (SalesRate) As SRate ,");
            /*March 21*/
            dbQry.Append(" ((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)) AS SalesDis, ");
            dbQry.Append(" (((Salesdiscount/100)*SalesQty*SalesRate)) AS ActualDiscount,");
            dbQry.Append(" ((SalesQty*SalesRate)-((Salesdiscount/100)*SalesQty*SalesRate)+((SalesVAT/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumVAT,");
            dbQry.Append(" ( ((SalesQty*SalesRate)- ((salesdiscount/100)*SalesQty*SalesRate)) * SalesVAT/100 ) AS ActualVAT, ");
            dbQry.Append(" ((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)+((SalesCST/100)*((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)))) AS SumCST, ");
            dbQry.Append(" (SalesFreight) AS SumFreight,(SalesLoading) As Loading, ");
            dbQry.Append(" (((SalesQty*SalesRate)-((salesdiscount/100)*SalesQty*SalesRate)) * SalesCST/100 ) AS ActualCST,");
            /*March 21*/
            dbQry.Append("  (PurchaseRate) As PRate ,");
            /*March 21*/
            dbQry.Append("  (SalesQty*PurchaseRate) As PurchaseNetRate ,");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseDis, ");
            dbQry.Append(" (((Purchasediscount/100)*SalesQty*PurchaseRate)) AS PurchaseActualDiscount,");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseVAT/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumVAT,");
            dbQry.Append(" ( ((SalesQty*PurchaseRate)- ((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseVAT/100 ) AS PurchaseActualVAT, ");
            dbQry.Append(" ((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)+((PurchaseCST/100)*((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)))) AS PurchaseSumCST, ");
            /* Start March 17 */
            dbQry.Append(" (PurchaseFreight*SalesQty) AS SumPurchaseFreight,(PurchaseLoading*SalesQty) As PurLoading, ");
            /* End March 17 */
            dbQry.Append(" (((SalesQty*PurchaseRate)-((Purchasediscount/100)*SalesQty*PurchaseRate)) * PurchaseCST/100 ) AS PurchaseActualCST ");
            dbQry.Append(" FROM tblGrossProfit,tblProductMaster  WHERE tblGrossProfit.ItemCode = tblProductmaster.ItemCode and tblGrossProfit.ItemCode = tblProductmaster.ItemCode AND tblProductMaster.ItemCode='" + DescName + "'  AND  tblGrossProfit.SalesBillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblGrossProfit.SalesBillDate <=#" + eDate.ToString("MM/dd/yyyy") + "# Order By SalesBillno");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();


            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    /*End Itemwise Report Change*/


    //

    #endregion

    #region Profit and Loss Report Section
    public double GetPurchaseBetween(DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT  Sum((tblpurchaseitems.qty * purchaserate) - ((tblpurchaseitems.qty * purchaserate) * (tblpurchaseitems.discount / 100)) + ");
            dbQry.Append("(((tblpurchaseitems.qty * purchaserate) - ((tblpurchaseitems.qty * purchaserate) * (tblpurchaseitems.discount / 100))) * (tblpurchaseitems.VAT / 100)) ");
            dbQry.Append("+ (((tblpurchaseitems.qty * purchaserate) - ((tblpurchaseitems.qty * purchaserate) * (tblpurchaseitems.discount / 100))) * (tblpurchaseitems.CST / ");
            dbQry.Append("100))) As PurchaseValue From tblPurchaseItems,tblPurchase  where (tblPurchase.SalesReturn <> 'Yes' OR tblPurchase.SalesReturn is null) AND tblPurchase.purchaseID=tblpurchaseitems.purchaseid AND billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# and billdate<=#" + eDate.ToString("MM/dd/yyyy") + "# ;");

            manager.Open();


            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry.ToString());

            double amtValue = 0;

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                amtValue = Convert.ToDouble(retVal);
            }
            manager.Dispose();
            return amtValue;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public double GetSalesReturnBetween(DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT  Sum((tblpurchaseitems.qty * purchaserate) - ((tblpurchaseitems.qty * purchaserate) * (tblpurchaseitems.discount / 100)) + ");
            dbQry.Append("(((tblpurchaseitems.qty * purchaserate) - ((tblpurchaseitems.qty * purchaserate) * (tblpurchaseitems.discount / 100))) * (tblpurchaseitems.VAT / 100)) ");
            dbQry.Append("+ (((tblpurchaseitems.qty * purchaserate) - ((tblpurchaseitems.qty * purchaserate) * (tblpurchaseitems.discount / 100))) * (tblpurchaseitems.CST / ");
            dbQry.Append("100))) As SalesReturnValue From tblPurchaseItems,tblPurchase  where (tblPurchase.SalesReturn = 'Yes') AND tblPurchase.purchaseID=tblpurchaseitems.purchaseid AND billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# and billdate<=#" + eDate.ToString("MM/dd/yyyy") + "# ;");

            manager.Open();


            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry.ToString());

            double amtValue = 0;

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                amtValue = Convert.ToDouble(retVal);
            }
            manager.Dispose();
            return amtValue;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public double GetPurchaseOpeningValue(DateTime sDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        StringBuilder sQry = new StringBuilder();
        try
        {

            dbQry.Append("SELECT  Sum((tblpurchaseitems.qty * purchaserate) - ((tblpurchaseitems.qty * purchaserate) * (tblpurchaseitems.discount / 100)) + ");
            dbQry.Append("(((tblpurchaseitems.qty * purchaserate) - ((tblpurchaseitems.qty * purchaserate) * (tblpurchaseitems.discount / 100))) * (tblpurchaseitems.VAT / 100)) ");
            dbQry.Append("+ (((tblpurchaseitems.qty * purchaserate) - ((tblpurchaseitems.qty * purchaserate) * (tblpurchaseitems.discount / 100))) * (tblpurchaseitems.CST / ");
            dbQry.Append("100))) As PurchaseOpeningValue From tblPurchaseItems,tblPurchase  where (tblPurchase.SalesReturn <> 'Yes' OR tblPurchase.SalesReturn is null) AND tblPurchase.purchaseID=tblpurchaseitems.purchaseid AND billdate<#" + sDate.ToString("MM/dd/yyyy") + "#");

            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry.ToString());

            double amtValue = 0;

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                amtValue = Convert.ToDouble(retVal);
            }

            sQry.Append("SELECT  Sum((tblStock.OPeningStock * Buyrate) - ((tblStock.OPeningStock * BuyRate) * (tblProductMaster.Buydiscount / 100)) + ");
            sQry.Append("(((tblStock.OPeningStock * Buyrate) - ((tblStock.OPeningStock * Buyrate) * (tblProductMaster.discount / 100))) * (tblProductMaster.BuyVAT / 100)) + ");
            sQry.Append("(((tblStock.OPeningStock * Buyrate) - ((tblStock.OPeningStock * Buyrate) * (tblProductMaster.Buydiscount / 100))) * (tblProductMaster.CST / 100))) As PurchaseOpeningValue ");
            sQry.Append("From tblStock,tblProductMaster  where tblStock.itemCode= tblProductMaster.itemCode AND tblStock.OpeningStock>0 ;");

            object retOVal = manager.ExecuteScalar(CommandType.Text, sQry.ToString());

            double amtOValue = 0;

            if ((retOVal != null) && (retOVal != DBNull.Value))
            {
                amtOValue = Convert.ToDouble(retOVal);
            }

            amtValue = amtValue + amtOValue;

            manager.Dispose();
            return amtValue;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public double GetSalesOpeningValue(DateTime sDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT  Sum((tblSalesitems.qty * rate) - ((tblSalesitems.qty * rate) * (tblSalesitems.discount / 100)) + ");
            dbQry.Append("(((tblSalesitems.qty * rate) - ((tblSalesitems.qty * rate) * (tblSalesitems.discount / 100))) * (tblSalesitems.VAT / 100)) ");
            dbQry.Append("+ (((tblSalesitems.qty * rate) - ((tblSalesitems.qty * rate) * (tblSalesitems.discount / 100))) * (tblSalesitems.CST / ");
            dbQry.Append("100))) As SalesValue From tblSalesitems,tblSales  where (tblSales.PurchaseReturn <> 'Yes' OR tblSales.PurchaseReturn is null) AND tblSales.cancelled=false AND tblSales.Billno=tblSalesitems.Billno AND billdate<#" + sDate.ToString("MM/dd/yyyy") + "#");

            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry.ToString());

            double amtValue = 0;

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                amtValue = Convert.ToDouble(retVal);
            }
            manager.Dispose();
            return amtValue;

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    public double GetSalesBetween(DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT  Sum((tblSalesitems.qty * rate) - ((tblSalesitems.qty * rate) * (tblSalesitems.discount / 100)) + ");
            dbQry.Append("(((tblSalesitems.qty * rate) - ((tblSalesitems.qty * rate) * (tblSalesitems.discount / 100))) * (tblSalesitems.VAT / 100)) ");
            dbQry.Append("+ (((tblSalesitems.qty * rate) - ((tblSalesitems.qty * rate) * (tblSalesitems.discount / 100))) * (tblSalesitems.CST / ");
            dbQry.Append("100))) As SalesValue From tblSalesitems,tblSales  where (tblSales.PurchaseReturn <> 'Yes' OR tblSales.PurchaseReturn is null) AND tblSales.cancelled=false AND tblSales.Billno=tblSalesitems.Billno AND billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# and billdate<=#" + eDate.ToString("MM/dd/yyyy") + "# ");

            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry.ToString());

            double amtValue = 0;

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                amtValue = Convert.ToDouble(retVal);
            }
            manager.Dispose();
            return amtValue;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public double GetPurchaseReturnBetween(DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT  Sum((tblSalesitems.qty * rate) - ((tblSalesitems.qty * rate) * (tblSalesitems.discount / 100)) + ");
            dbQry.Append("(((tblSalesitems.qty * rate) - ((tblSalesitems.qty * rate) * (tblSalesitems.discount / 100))) * (tblSalesitems.VAT / 100)) ");
            dbQry.Append("+ (((tblSalesitems.qty * rate) - ((tblSalesitems.qty * rate) * (tblSalesitems.discount / 100))) * (tblSalesitems.CST / ");
            dbQry.Append("100))) As PurchaseReturnValue From tblSalesitems,tblSales  where (tblSales.PurchaseReturn = 'Yes') AND tblSales.cancelled=false AND tblSales.Billno=tblSalesitems.Billno AND billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# and billdate<=#" + eDate.ToString("MM/dd/yyyy") + "# ");

            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry.ToString());

            double amtValue = 0;

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                amtValue = Convert.ToDouble(retVal);
            }
            manager.Dispose();
            return amtValue;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public double GetExpenseIncomeTotal(DateTime sDate, DateTime eDate, string expType)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string sQry = string.Empty;
        string obQry = string.Empty;
        string oQry = string.Empty;

        try
        {


            if (expType == "IDX")
            {
                sQry = "SELECT SUM(Amount) As Expenses FROM tblDayBook WHERE (TransDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND TransDate<=#" + eDate.ToString("MM/dd/yyyy") + "#) AND debtorID IN (SELECT LedgerID FROM tblLedger WHERE GroupID in(SELECT  GroupID From tblGroups Where HeadingID =11 ) )";
                obQry = "SELECT SUM(Amount) As Expenses FROM tblDayBook WHERE (TransDate<#" + sDate.ToString("MM/dd/yyyy") + "#) AND debtorID IN (SELECT LedgerID FROM tblLedger WHERE GroupID in(SELECT  GroupID From tblGroups Where HeadingID =11 ) )";
                oQry = "SELECT (OpenBalanceCR-OpenBalanceDR) AS OB FROM tblLedger Where GroupID IN (Select GroupID from tblGroups where headingID in( Select headingID from tblAccHeading where headingID=11))";
            }

            else if (expType == "DX")
            {
                sQry = "SELECT SUM(Amount) As Expenses FROM tblDayBook WHERE (TransDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND TransDate<=#" + eDate.ToString("MM/dd/yyyy") + "#) AND debtorID IN (SELECT LedgerID FROM tblLedger WHERE  GroupID in(SELECT  GroupID From tblGroups Where HeadingID =13 ) )";
                obQry = "SELECT SUM(Amount) As Expenses FROM tblDayBook WHERE (TransDate<#" + sDate.ToString("MM/dd/yyyy") + "#) AND debtorID IN (SELECT LedgerID FROM tblLedger WHERE GroupID in(SELECT  GroupID From tblGroups Where HeadingID =13 ) )";
                oQry = "SELECT (OpenBalanceCR-OpenBalanceDR) AS OB FROM tblLedger Where GroupID IN (Select GroupID from tblGroups where headingID in( Select headingID from tblAccHeading where headingID=13))";
            }
            else if (expType == "IDI")
            {
                oQry = "SELECT (OpenBalanceCR-OpenBalanceDR) AS OB FROM tblLedger Where GroupID IN (Select GroupID from tblGroups where headingID in( Select headingID from tblAccHeading where headingID=12))";
                sQry = "SELECT SUM(Amount) As Expenses FROM tblDayBook WHERE (TransDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND TransDate<=#" + eDate.ToString("MM/dd/yyyy") + "#) AND debtorID IN (SELECT LedgerID FROM tblLedger WHERE GroupID in(SELECT  GroupID From tblGroups Where HeadingID =12 ) )";
                obQry = "SELECT SUM(Amount) As Expenses FROM tblDayBook WHERE (TransDate<#" + sDate.ToString("MM/dd/yyyy") + "#) AND debtorID IN (SELECT LedgerID FROM tblLedger WHERE GroupID in(SELECT  GroupID From tblGroups Where HeadingID =12 ) )";
            }
            else
            {
                oQry = "SELECT (OpenBalanceCR-OpenBalanceDR) AS OB FROM tblLedger Where GroupID IN (Select GroupID from tblGroups where headingID in( Select headingID from tblAccHeading where headingID=14))";
                sQry = "SELECT SUM(Amount) As Expenses FROM tblDayBook WHERE (TransDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND TransDate<=#" + eDate.ToString("MM/dd/yyyy") + "#) AND debtorID IN (SELECT LedgerID FROM tblLedger WHERE GroupID in(SELECT  GroupID From tblGroups Where HeadingID  IN (14,9) ) )";
                obQry = "SELECT SUM(Amount) As Expenses FROM tblDayBook WHERE (TransDate<#" + sDate.ToString("MM/dd/yyyy") + "#) AND debtorID IN (SELECT LedgerID FROM tblLedger WHERE GroupID in(SELECT  GroupID From tblGroups Where HeadingID =14 ) )";
            }

            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, sQry.ToString());

            double amtValue = 0;

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                amtValue = Convert.ToDouble(retVal);
            }

            object retOBVal = manager.ExecuteScalar(CommandType.Text, obQry.ToString());
            double oBal = 0;
            if (retOBVal != null && (retOBVal != DBNull.Value))
            {
                oBal = (double)retOBVal;
                amtValue = amtValue + oBal;
            }


            object retOVal = manager.ExecuteScalar(CommandType.Text, oQry.ToString());
            double oB = 0;
            if (retOVal != null && (retOVal != DBNull.Value))
            {
                oB = (double)retOVal;
            }
            if (oB > 0)
            {
                amtValue = amtValue - oB;
                amtValue = Math.Abs(amtValue);
            }
            else
                amtValue = amtValue + Math.Abs(oB);



            manager.Dispose();
            return amtValue;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    #endregion

    #region Hide and Restore Methods
    //Start March 24
    public void HidePayment(int TransNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = "INSERT INTO TempTblDayBook SELECT * FROM tblDaybook WHERE Transno=" + TransNo;
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO TempTblPayment SELECT * FROM tblPayment WHERE JournalID=" + TransNo;
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblPayment Where JournalID = {0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO tblHideAudit(Command,AuditDate,Type,Refno) VALUES('Hide',#" + DateTime.Now.ToString("MM/dd/yyyy") + "#,'Payment'," + TransNo + ")";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

            manager.Dispose();
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public void RestorePayment(int TransNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = "INSERT INTO TblDayBook SELECT * FROM TemptblDaybook WHERE Transno=" + TransNo;
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO tblPayment SELECT * FROM TemptblPayment WHERE JournalID=" + TransNo;
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From TemptblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From TemptblPayment Where JournalID = {0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO tblHideAudit(Command,AuditDate,Type,Refno) VALUES('Restore',#" + DateTime.Now.ToString("MM/dd/yyyy") + "#,'Payment'," + TransNo + ")";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            manager.CommitTransaction();

            manager.Dispose();
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public void HideReceipt(int TransNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = "INSERT INTO TempTblDayBook SELECT * FROM tblDaybook WHERE Transno=" + TransNo;
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO TempTblReceipt SELECT * FROM tblReceipt WHERE JournalID=" + TransNo;
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblReceipt Where JournalID = {0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO tblHideAudit(Command,AuditDate,Type,Refno) VALUES('Hide',#" + DateTime.Now.ToString("MM/dd/yyyy") + "#,'Receipt'," + TransNo + ")";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            manager.CommitTransaction();

            manager.Dispose();
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public void RestoreReceipt(int TransNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = "INSERT INTO TblDayBook SELECT * FROM TemptblDaybook WHERE Transno=" + TransNo;
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO tblReceipt SELECT * FROM TemptblReceipt WHERE JournalID=" + TransNo;
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From TemptblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From TemptblReceipt Where JournalID = {0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO tblHideAudit(Command,AuditDate,Type,Refno) VALUES('Restore',#" + DateTime.Now.ToString("MM/dd/yyyy") + "#,'Receipt'," + TransNo + ")";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            manager.CommitTransaction();

            manager.Dispose();
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public void HideJournal(int TransNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = "INSERT INTO TempTblDayBook SELECT * FROM tblDaybook WHERE Transno=" + TransNo;
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO tblHideAudit(Command,AuditDate,Type,Refno) VALUES('Hide',#" + DateTime.Now.ToString("MM/dd/yyyy") + "#,'Journal'," + TransNo + ")";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            manager.CommitTransaction();
            manager.Dispose();
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public void RestoreJournal(int TransNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = "INSERT INTO TblDayBook SELECT * FROM TemptblDaybook WHERE Transno=" + TransNo;
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From TemptblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO tblHideAudit(Command,AuditDate,Type,Refno) VALUES('Restore',#" + DateTime.Now.ToString("MM/dd/yyyy") + "#,'Journal'," + TransNo + ")";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            manager.CommitTransaction();
            manager.Dispose();
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public void HideSales(int SalesID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = "INSERT INTO TempTblDayBook SELECT * FROM tblDaybook WHERE Transno=(SELECT JournalID From tblSales WHERE Billno=" + SalesID + ")";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO TempTblSales SELECT * FROM tblSales WHERE Billno=" + SalesID;
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO TempTblSalesItems SELECT * FROM tblSalesItems WHERE Billno=" + SalesID;
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO TempTblSalesRole SELECT * FROM tblSalesRole WHERE Billno=(SELECT Billno From tblSalesItems Where Billno=" + SalesID + ")";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "UPDATE tblProductMaster, tblSalesItems  SET tblProductMaster.STOCK = tblProductMaster.STOCK + tblSalesITems.Qty  WHERE tblSalesItems.Billno=" + SalesID + " AND  tblProductMaster.ItemCode = tblSalesItems.ITemcode ";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);



            dbQry = "UPDATE tblItemRoleMaster, tblSalesRole  SET tblItemRoleMaster.Qty_Available = tblItemRoleMaster.Qty_Available + tblSalesRole.Qty_bought  WHERE tblSalesRole.Billno=" + SalesID + " AND  tblItemRoleMaster.RoleID = tblSalesRole.RoleID ";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = string.Format("Delete From tblDayBook Where Transno=(SELECT JournalID From tblSales WHERE Billno={0})", SalesID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblSales Where Billno={0}", SalesID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblSalesItems Where Billno={0}", SalesID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblSalesRole Where Billno={0}", SalesID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO tblHideAudit(Command,AuditDate,Type,Refno) VALUES('Hide',#" + DateTime.Now.ToString("MM/dd/yyyy") + "#,'Sales'," + SalesID + ")";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            manager.CommitTransaction();
            manager.Dispose();
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public int RestoreSales(int SalesID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = "INSERT INTO TblDayBook SELECT * FROM TemptblDaybook WHERE Transno=(SELECT JournalID From TemptblSales WHERE Billno=" + SalesID + ")";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO TblSales SELECT * FROM TemptblSales WHERE Billno=" + SalesID;
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO TblSalesItems SELECT * FROM TemptblSalesItems WHERE Billno=" + SalesID;
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO TblSalesRole SELECT * FROM TemptblSalesRole WHERE Billno=(SELECT Billno From TemptblSalesItems Where Billno=" + SalesID + ")";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "UPDATE tblProductMaster, TemptblSalesItems  SET tblProductMaster.STOCK = tblProductMaster.STOCK - TemptblSalesITems.Qty  WHERE TemptblSalesItems.Billno=" + SalesID + " AND  tblProductMaster.ItemCode = TemptblSalesItems.ITemcode";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "SELECT Count(*) from TemptblSalesITems,tblProductMaster Where tempTblSalesItems.Billno=" + SalesID + " AND TemptblSalesItems.ItemCode= tblProductMaster.ItemCode and tblProductmaster.Stock<0";
            int cnt = (int)manager.ExecuteScalar(CommandType.Text, dbQry);
            if (cnt > 0)
            {
                manager.Transaction.Rollback();
                return -1;
            }

            dbQry = "UPDATE tblItemRoleMaster, TemptblSalesRole  SET tblItemRoleMaster.Qty_Available = tblItemRoleMaster.Qty_Available - TemptblSalesRole.Qty_bought  WHERE TemptblSalesRole.Billno=" + SalesID + " AND  tblItemRoleMaster.RoleID = TemptblSalesRole.RoleID ";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //Negative Check for Role Qty Available
            dbQry = "SELECT Count(*) From tblItemRoleMaster,TemptblSalesRole Where tblItemRoleMaster.RoleID = TemptblSalesRole.RoleID AND tblItemRoleMaster.Qty_Available<0  AND tblItemRoleMaster.Itemcode in (Select ItemCode From TemptblSalesItems Where Billno=" + SalesID + ")";
            int rolecnt = (int)manager.ExecuteScalar(CommandType.Text, dbQry);

            if (rolecnt > 0)
            {
                manager.Transaction.Rollback();
                return -1;
            }

            dbQry = string.Format("Delete From TemptblDayBook Where Transno=(SELECT JournalID From TemptblSales WHERE Billno={0})", SalesID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From TemptblSales Where Billno={0}", SalesID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From TemptblSalesItems Where Billno={0}", SalesID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From TemptblSalesRole Where Billno={0}", SalesID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO tblHideAudit(Command,AuditDate,Type,Refno) VALUES('Restore',#" + DateTime.Now.ToString("MM/dd/yyyy") + "#,'Sales'," + SalesID + ")";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();
            manager.Dispose();
            return 0;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public int HidePurchase(int purchaseID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = "INSERT INTO TempTblDayBook SELECT * FROM tblDaybook WHERE Transno=(SELECT JournalID From tblPurchase WHERE PurchaseID=" + purchaseID + ")";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO TempTblPurchase SELECT * FROM tblPurchase WHERE PurchaseID=" + purchaseID;
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO TempTblPurchaseItems SELECT * FROM tblPurchaseItems WHERE PurchaseID=" + purchaseID;
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "UPDATE tblItemRoleMaster, tblPurchaseItems  SET tblItemRoleMaster.Qty_Available = tblItemRoleMaster.Qty_Available - tblPurchaseITems.Qty  WHERE tblPurchaseItems.PurchaseID=" + purchaseID + " AND  TblItemRoleMaster.RoleID = tblPurchaseItems.RoleID ";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = "SELECT Count(*) From tblItemRoleMaster,tblPurchaseItems Where tblItemRoleMaster.RoleID = tblPurchaseItems.RoleID AND tblItemRoleMaster.Qty_Available<0 AND tblPurchaseItems.PurchaseID=" + purchaseID;
            int rolecnt = (int)manager.ExecuteScalar(CommandType.Text, dbQry);

            if (rolecnt > 0)
            {
                manager.Transaction.Rollback();
                return -1;
            }

            dbQry = "UPDATE tblProductMaster, tblPurchaseItems  SET tblProductMaster.STOCK = tblProductMaster.STOCK - tblPurchaseITems.Qty  WHERE tblPurchaseItems.PurchaseID=" + purchaseID + " AND  tblProductMaster.ItemCode = tblPurchaseItems.ITemcode ";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //To Check whether UPDATE of product master giving any negative stock

            dbQry = "SELECT Count(*) From tblProductMaster,tblPurchaseItems Where tblProductMaster.ItemCode = tblPurchaseItems.ItemCode AND tblProductMaster.STOCK< 0 AND  tblPurchaseItems.PurchaseID=" + purchaseID;
            int cnt = (int)manager.ExecuteScalar(CommandType.Text, dbQry);

            if (cnt > 0)
            {
                manager.Transaction.Rollback();
                return -1;
            }


            dbQry = string.Format("Delete From tblDayBook Where Transno=(SELECT JournalID From tblPurchase WHERE PurchaseID={0})", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblPurchase Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblPurchaseItems Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = "INSERT INTO tblHideAudit(Command,AuditDate,Type,Refno) VALUES('Hide',#" + DateTime.Now.ToString("MM/dd/yyyy") + "#,'Purchase'," + purchaseID + ")";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            manager.CommitTransaction();
            manager.Dispose();
            return 0;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public void RestorePurhase(int purchaseID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = "INSERT INTO tblDayBook SELECT * FROM TemptblDaybook WHERE Transno=(SELECT JournalID From TemptblPurchase WHERE PurchaseID=" + purchaseID + ")";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO tblPurchase SELECT * FROM TemptblPurchase WHERE PurchaseID=" + purchaseID;
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO tblPurchaseItems SELECT * FROM TemptblPurchaseItems WHERE PurchaseID=" + purchaseID;
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO tblItemRoleMaster SELECT * FROM TemptblItemRoleMaster WHERE RoleID=(SELECT RoleID From TemptblPurchaseItems Where PurchaseID=" + purchaseID + ")";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "UPDATE tblItemRoleMaster, TemptblPurchaseItems  SET TblItemRoleMaster.Qty_Available = TblItemRoleMaster.Qty_Available + TemptblPurchaseItems.Qty  WHERE TemptblPurchaseItems.PurchaseID=" + purchaseID + " AND  TblItemRoleMaster.RoleID = TemptblPurchaseItems.RoleID ";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "UPDATE tblProductMaster, TemptblPurchaseItems  SET tblProductMaster.STOCK = tblProductMaster.STOCK + TemptblPurchaseITems.Qty  WHERE TemptblPurchaseItems.PurchaseID=" + purchaseID + " AND  tblProductMaster.ItemCode = TemptblPurchaseItems.ITemcode ";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From TemptblDayBook Where Transno=(SELECT JournalID From TemptblPurchase WHERE PurchaseID={0})", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From TemptblPurchase Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From TemptblPurchaseItems Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "INSERT INTO tblHideAudit(Command,AuditDate,Type,Refno) VALUES('Restore',#" + DateTime.Now.ToString("MM/dd/yyyy") + "#,'Purchase'," + purchaseID + ")";
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            manager.CommitTransaction();
            manager.Dispose();
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    //End March 24
    #endregion

    #region Executive Outstanding Report.
    public DataSet GetExecutiveOuts()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT Empno, EmpFirstName FROM tblEmployee where empno IN (Select ExecutiveIncharge FROM tblLedger)");




            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    /*
     * Select tblSales.Billno,BillDate,Sum( ((Qty*Rate)-((qty*rate) *(tblSalesitems.Discount/100))) + (((Qty*Rate)-((qty*rate) *(tblSalesitems.Discount/100))) *(vat/100) )  + (((Qty*Rate)-((qty*rate) *(tblSalesitems.Discount/100))) *(cst/100) ) )  As Amount FROM tblSales,tblsalesitems  Where tblsalesitems.billno=tblsales.billno and journalID IN (SELECT Transno FROM tblDayBook WHERE (DebtorID=372)) and tblSales.Cancelled<>true Group By tblSales.Billno,BillDate
     */
    public DataSet GetSalesBillsCustomer(int iLedgerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            //dbQry.Append("Select tblSales.Billno,BillDate,Sum( ((Qty*Rate)-((qty*rate) *(tblSalesitems.Discount/100))) + (((Qty*Rate)-((qty*rate) *(tblSalesitems.Discount/100))) *(vat/100) )  + (((Qty*Rate)-((qty*rate) *(tblSalesitems.Discount/100))) *(cst/100) ) )  As Amount FROM tblSales,tblsalesitems  Where tblsalesitems.billno=tblsales.billno and journalID IN (SELECT Transno FROM tblDayBook WHERE (DebtorID=" + iLedgerID + ") and tblSales.Cancelled<>true) Group By tblSales.Billno,BillDate");
            dbQry.Append("Select tblSales.Billno,BillDate,tblDaybook.Amount As Amount FROM tblSales,tblsalesitems,tblDaybook  Where tblDaybook.transno=tblsales.journalid and tblsalesitems.billno=tblsales.billno  and tblDaybook.DebtorID=" + iLedgerID + " and tblSales.Cancelled<>true group by tblSales.billno,billdate,tblDaybook.Amount ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetReceivedAmountCustomer(int iLedgerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT Transno,TransDate,Amount,VoucherType FROM tblDayBook WHERE (CreditorID=" + iLedgerID + ")");




            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    //Select tblSales.CustomerName,Sum(tblDaybook.Amount) As Amount FROM tblSales,tblDaybook,tblLedger  Where tblDaybook.transno=tblsales.journalid  and tblSales.Cancelled<>true and tblLedger.LedgerID=tblSales.CustomerID and tblLedger.ExecutiveIncharge=1 and tblDaybook.DebtorID=tblSales.CustomerID group by tblSales.CustomerName
    public DataSet GetExecutiveSales(int iExecID, DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("Select tblSales.CustomerName,Sum(tblDaybook.Amount) As Amount FROM tblSales,tblDaybook,tblLedger  Where tblDaybook.transno=tblsales.journalid  and tblSales.Cancelled<>true and tblLedger.LedgerID=tblSales.CustomerID and tblLedger.ExecutiveIncharge=" + iExecID + " AND (tblSales.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#)  group by tblSales.CustomerName");




            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet GetExecutiveSalesReturn(int iExecID, DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("Select tblLedger.LedgerName,Sum(tblDaybook.Amount) As Amount FROM tblPurchase,tblDaybook,tblLedger  Where tblDaybook.transno=tblPurchase.journalid and voucherType='Sales Return'   and tblLedger.LedgerID=tblPurchase.SUpplierID and tblLedger.ExecutiveIncharge=" + iExecID + " AND (tblPurchase.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#)  group by tblLedger.LedgerName ");




            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet GenerateSalesExecutiveItemwise(int iExecID, DateTime sDate, DateTime eDate, string iLedgerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT  tblSalesItems.ItemCode, tblProductMaster.ProductName, tblProductMaster.Model, tblProductMaster.ProductDesc,  SUM(tblSalesItems.qty) AS Qty, Sum( (tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100) * tblSalesItems.Qty * tblSalesItems.Rate) + ((tblSalesItems.VAT/100) * ((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100) * tblSalesItems.Qty * tblSalesItems.Rate)))+ ((tblSalesItems.CST/100) * ((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100) * tblSalesItems.Qty * tblSalesItems.Rate))))  As Amount  FROM tblProductMaster,tblSales,tblSalesItems,tblDaybook Where tblDaybook.Transno = tblSales.JournalID AND tblSales.Billno=tblSalesItems.Billno  AND tblProductMaster.itemcode=tblSalesItems.Itemcode AND tblSales.Cancelled=False  AND (tblSales.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# And tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#)  AND (tblSales.PurchaseReturn='No' OR tblSales.PurchaseReturn is null) AND tblSales.CustomerID IN (" + iLedgerID + ")    GROUP BY tblSalesItems.ItemCode, tblProductMaster.ProductName, tblProductMaster.Model, tblProductMaster.ProductDesc");
            //            sQry = "SELECT  tblSalesItems.ItemCode, tblProductMaster.ProductName, tblProductMaster.Model, tblProductMaster.ProductDesc,  SUM(tblSalesItems.qty) AS Qty, Sum( (tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100) * tblSalesItems.Qty * tblSalesItems.Rate) + ((tblSalesItems.VAT/100) * ((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100) * tblSalesItems.Qty * tblSalesItems.Rate)))+ ((tblSalesItems.CST/100) * ((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100) * tblSalesItems.Qty * tblSalesItems.Rate))))  As Amount  FROM tblProductMaster,tblSales,tblSalesItems,tblDaybook Where tblDaybook.Transno = tblSales.JournalID AND tblSales.Billno=tblSalesItems.Billno  AND tblProductMaster.itemcode=tblSalesItems.Itemcode AND tblSales.Cancelled=False  AND (tblSales.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# And tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#)  AND (tblSales.PurchaseReturn='No' OR tblSales.PurchaseReturn is null) AND tblSales.CustomerID IN (372,748,727,611,654,120,673,588,694,325,270,407,643,305,655,603,771,770,773)    GROUP BY tblSalesItems.ItemCode, tblProductMaster.ProductName, tblProductMaster.Model, tblProductMaster.ProductDesc";



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet GenerateSalesReturnExecutiveItemwise(int iExecID, DateTime sDate, DateTime eDate, string iLedgerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT  tblPurchaseItems.ItemCode, tblProductMaster.ProductName, tblProductMaster.Model, tblProductMaster.ProductDesc, tblPurchase.SupplierID, SUM(tblPurchaseItems.qty) AS Qty, Sum( (tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100) * tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) + ((tblPurchaseItems.VAT/100) * ((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100) * tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate)))+ ((tblPurchaseItems.CST/100) * ((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100) * tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate)))) As Amount , tblPurchase.SalesReturn FROM tblProductMaster,tblPurchase,tblPurchaseItems,tblDaybook Where tblDaybook.Transno = tblPurchase.JournalID AND tblPurchase.PurchaseID=tblPurchaseItems.PurchaseID  AND tblProductMaster.itemcode=tblPurchaseITems.Itemcode AND  (tblPurchase.SalesReturn='Yes') AND (tblPurchase.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# And tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#) AND  tblPurchase.SUpplierID IN (" + iLedgerID + ")    GROUP BY tblPurchase.SupplierID,tblPurchase.salesreturn,tblPurchaseItems.ItemCode, tblProductMaster.ProductName, tblProductMaster.Model, tblProductMaster.ProductDesc");
            //            sQry = "SELECT  tblSalesItems.ItemCode, tblProductMaster.ProductName, tblProductMaster.Model, tblProductMaster.ProductDesc,  SUM(tblSalesItems.qty) AS Qty, Sum( (tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100) * tblSalesItems.Qty * tblSalesItems.Rate) + ((tblSalesItems.VAT/100) * ((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100) * tblSalesItems.Qty * tblSalesItems.Rate)))+ ((tblSalesItems.CST/100) * ((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100) * tblSalesItems.Qty * tblSalesItems.Rate))))  As Amount  FROM tblProductMaster,tblSales,tblSalesItems,tblDaybook Where tblDaybook.Transno = tblSales.JournalID AND tblSales.Billno=tblSalesItems.Billno  AND tblProductMaster.itemcode=tblSalesItems.Itemcode AND tblSales.Cancelled=False  AND (tblSales.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# And tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#)  AND (tblSales.PurchaseReturn='No' OR tblSales.PurchaseReturn is null) AND tblSales.CustomerID IN (372,748,727,611,654,120,673,588,694,325,270,407,643,305,655,603,771,770,773)    GROUP BY tblSalesItems.ItemCode, tblProductMaster.ProductName, tblProductMaster.Model, tblProductMaster.ProductDesc";



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet GetLedgerExec(int Executive)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT LedgerID,LedgerName FROM tblLedger WHERE ExecutiveIncharge=" + Executive + " AND GroupID=1 ORDER BY LedgerName ");
            //            sQry = "SELECT  tblSalesItems.ItemCode, tblProductMaster.ProductName, tblProductMaster.Model, tblProductMaster.ProductDesc,  SUM(tblSalesItems.qty) AS Qty, Sum( (tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100) * tblSalesItems.Qty * tblSalesItems.Rate) + ((tblSalesItems.VAT/100) * ((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100) * tblSalesItems.Qty * tblSalesItems.Rate)))+ ((tblSalesItems.CST/100) * ((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100) * tblSalesItems.Qty * tblSalesItems.Rate))))  As Amount  FROM tblProductMaster,tblSales,tblSalesItems,tblDaybook Where tblDaybook.Transno = tblSales.JournalID AND tblSales.Billno=tblSalesItems.Billno  AND tblProductMaster.itemcode=tblSalesItems.Itemcode AND tblSales.Cancelled=False  AND (tblSales.BillDate>=#" + sDate.ToString("MM/dd/yyyy") + "# And tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#)  AND (tblSales.PurchaseReturn='No' OR tblSales.PurchaseReturn is null) AND tblSales.CustomerID IN (372,748,727,611,654,120,673,588,694,325,270,407,643,305,655,603,771,770,773)    GROUP BY tblSalesItems.ItemCode, tblProductMaster.ProductName, tblProductMaster.Model, tblProductMaster.ProductDesc";



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    // sQry = "SELECT LedgerID,LedgerName FROM tblLedger WHERE ExecutiveIncharge=" + Executive + " AND GroupID=1 ORDER BY LedgerName ";
    #endregion

    #region Timesheet

    //Krishnavelu add  Code 20-04-2010   SearchTSE Function For Time Sheet Entry
    public DataSet SearchTSE(int EmployeeNumber, String sDate, String sAprroved)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        String searchStr = string.Empty;

        string searchSupervisorStr = string.Empty;
        string searchSubordinatesStr = string.Empty;

        if (EmployeeNumber > 0)
        {
            searchSupervisorStr = " Supervisor.Empno=" + EmployeeNumber;
            searchSubordinatesStr = " Subordinates.ManagerID=" + EmployeeNumber;
        }


        //if (sEmpName != string.Empty)
        //{
        //    if (searchStr == string.Empty)
        //        searchStr = searchStr + " empFirstName LIKE '" + sEmpName + "%'";
        //    else
        //        searchStr = searchStr + " AND empFirstName LIKE '" + sEmpName + "%'";

        //}

        if (sDate.ToString() != string.Empty && sDate.ToString() != null)
        {
            if (searchStr == string.Empty)
                searchStr = searchStr + "TSDate=#" + Convert.ToDateTime(sDate).ToString("MM/dd/yyyy").Trim() + "#";
            else
                searchStr = searchStr + " AND TSDate=#" + Convert.ToDateTime(sDate).ToString("MM/dd/yyyy").Trim() + "#";
        }

        if (sAprroved != string.Empty)
        {
            if (searchStr == string.Empty)
                searchStr = searchStr + " wte.IsApproved=false";
            else
            {
                if (sAprroved == "No")
                    searchStr = searchStr + " AND wte.IsApproved=false";
                else
                    searchStr = searchStr + " AND wte.IsApproved=true";
            }
        }

        //if (searchStr != string.Empty)
        //{
        //    dbQry.Append("SELECT TSDate,EmpNo,IIf(Approved=True,'YES','NO') as Approved FROM tblTimeSheets");
        //    dbQry.AppendFormat(" Where {0} ORDER BY TSDate Desc", searchStr);
        //}
        //else
        //{
        //    dbQry.Append("SELECT TSDate,EmpNo,IIf(Approved=True,'YES','NO') as Approved FROM tblTimeSheets ORDER BY TSDate Desc");
        //}

        if (searchStr != string.Empty)
        {
            dbQry.Append("SELECT Supervisor.ManagerID, DateSubmitted, FromToDateDesc as DateRange, Supervisor.Empno, Supervisor.Employees, ");
            dbQry.Append("(Select empFirstname from tblEmployee where Empno = Supervisor.ManagerID) as Pendingwith, StatusWeekly, Rejectreason,");
            dbQry.Append("IIf(wte.IsApproved=True,'Approved', StatusWeekly) as Approved, Supervisor.UserGroups,wte.WeekID FROM tblWeeklyTimeSheet as wte ");
            dbQry.Append("INNER JOIN ((SELECT DISTINCT e.ManagerID, ts.Empno As Empno, e.empFirstname as Employees, e.UserGroup as UserGroups FROM tblTimeSheet ts ");
            dbQry.Append("Inner join tblEmployee e on ts.Empno = e.Empno Where ts.Empno = " + EmployeeNumber.ToString() + ")  AS Supervisor) ON wte.EmployeeNumber = Supervisor.Empno ");
            dbQry.AppendFormat(" Where {0} ", searchSupervisorStr);
            //dbQry.AppendFormat(" ORDER BY tblWeeklyTimeSheet.BeginingweekDate desc");

            //dbQry.Append("Union ");
            //dbQry.Append("SELECT DISTINCT Subordinates.ManagerID, DateSubmitted, FromToDateDesc as DateRange, Subordinates.Empno, Subordinates.Employees, ");
            //dbQry.Append("(Select empFirstname from tblEmployee where Empno = Subordinates.ManagerID) as Pendingwith, StatusWeekly, Rejectreason, ");
            //dbQry.Append("IIf(wte.IsApproved=True,'YES','NO') as Approved, Subordinates.UserGroups FROM tblWeeklyTimeSheet as wte ");
            //dbQry.Append("INNER JOIN ((SELECT e.ManagerID, ts.Empno As Empno, e.empFirstname as Employees, ts.TSDate as SubTSDate, e.UserGroup as UserGroups FROM tblTimesheet ts ");
            //dbQry.Append("Inner join tblEmployee e on ts.Empno = e.Empno)  AS Subordinates) ON wte.EmployeeNumber = Subordinates.Empno ");
            //dbQry.AppendFormat(" Where {0} ", searchSubordinatesStr + "and wte.IsApproved=false");
        }


        //        dbQry.Append("Select  distinct Subordinates.ManagerID, Empno, SubordinatesName, SubTSDate, SubManagersStatus, SubManagersUserGroup from ");
        //dbQry.Append("(Select BetweenRange from lblRangeLookup rl Where rl.RangeID = ted.RangeID) as BtwnRange, RangeDescription from ");
        //      dbQry.Append(" (SELECT e.ManagerID, ts.Empno As Empno, e.empFirstname as SubordinatesName, ts.TSDate as SubTSDate, ");
        //    dbQry.Append("ts.Approved as SubManagersStatus, e.UserGroup as SubManagersUserGroup ");
        //    dbQry.Append(" FROM tblTimesheets ts Inner join tblEmployee e on ts.Empno = e.Empno Where e.UserGroup ='Members') as Subordinates ");
        //   dbQry.Append(" Inner Join tblEffortDescription ted on Subordinates.Empno = ted.Empno Where SubTSDate = ted.TSDate ");

        // if (searchStr != string.Empty)
        //   dbQry.AppendFormat(" and {0} Order By SubTSDate", searchStr);
        //else
        //  dbQry.AppendFormat(" ORDER BY SubTSDate");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            //ObjNLog.Error(string.Format("Exception Raised {0}", ex.Message));
            throw ex;
        }
    }

    public DataSet GetTSEDet(int empNO, String sDate, String sAprroved)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        String searchStr = string.Empty;

        if (empNO > 0)
            searchStr = " empno=" + empNO;

        //if (sEmpName != string.Empty)
        //{
        //    if (searchStr == string.Empty)
        //        searchStr = searchStr + " empFirstName LIKE '" + sEmpName + "%'";
        //    else
        //        searchStr = searchStr + " AND empFirstName LIKE '" + sEmpName + "%'";

        //}

        if (sDate.ToString() != string.Empty && sDate.ToString() != null)
        {
            if (searchStr == string.Empty)
                searchStr = searchStr + "TSDate=#" + Convert.ToDateTime(sDate).ToString("MM/dd/yyyy").Trim() + "#";
            else
                searchStr = searchStr + " AND TSDate=#" + Convert.ToDateTime(sDate).ToString("MM/dd/yyyy").Trim() + "#";
        }

        if (sAprroved != string.Empty)
        {
            if (searchStr == string.Empty)
                searchStr = searchStr + " Approved= " + sAprroved;
            else
                searchStr = searchStr + " AND Approved=" + sAprroved;

        }



        if (searchStr != string.Empty)
        {
            dbQry.Append("SELECT * FROM tblTimeSheetEntry");
            dbQry.AppendFormat(" Where {0} ORDER BY TSDate,empNo", searchStr);

        }
        else
        {
            dbQry.Append("SELECT * FROM tblTimeSheetEntry ORDER BY TSDate,EmpNO");
        }


        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void InsertTSEDetails(int empno, string TSEDate, string before8, string _8to9, string _9to10, string _10to11, string _11to12, string _12to1, string _1pmto2, string _2pmto3, string _3pmto4, string _4pmto5, string _5pmto6, string _6pmto7, string _7pmto8, string _8pmto9, string _9pmto10, string After10, string Approved)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;

        dbQry = string.Format("INSERT INTO tblTimeSheetEntry(TSDate,empNo,Before8,8to9,9to10,10to11,11to12,12to1,1pmto2,2pmto3,3pmto4,4pmto5,5pmto6,6pmto7,7pmto8,8pmto9,9pmto10,After10,Approved) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},'{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}',{18})",
        TSEDate, empno, before8, _8to9, _9to10, _10to11, _11to12, _12to1, _1pmto2, _2pmto3, _3pmto4, _4pmto5, _5pmto6, _6pmto7, _7pmto8, _8pmto9, _9pmto10, After10, Approved);
        manager.ExecuteNonQuery(CommandType.Text, dbQry);

        manager.Dispose();

    }

    public void UpdateTSEDetails(int empno, string TSEDate, string before8, string _8to9, string _9to10, string _10to11, string _11to12, string _12to1, string _1pmto2, string _2pmto3, string _3pmto4, string _4pmto5, string _5pmto6, string _6pmto7, string _7pmto8, string _8pmto9, string _9pmto10, string After10, string Approved)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        dbQry = string.Format("UPDATE tblTimeSheetEntry SET TSDate=format('{0}','dd/mm/yyyy'),empNo={1},Before8='{2}',8to9='{3}',9to10='{4}',10to11='{5}',11to12='{6}',12to1='{7}',1pmto2='{8}',2pmto3='{9}',3pmto4='{10}',4pmto5='{11}',5pmto6='{12}',6pmto7='{13}',7pmto8='{14}',8pmto9='{15}',9pmto10='{16}',After10='{17}',Approved={18} Where TSDate=format('{0}','dd/mm/yyyy') and empno={1}",
        TSEDate, empno, before8, _8to9, _9to10, _10to11, _11to12, _12to1, _1pmto2, _2pmto3, _3pmto4, _4pmto5, _5pmto6, _6pmto7, _7pmto8, _8pmto9, _9pmto10, After10, Approved);
        manager.ExecuteNonQuery(CommandType.Text, dbQry);


        manager.Dispose();

    }

    public void DeleteTSEDetails(string TSEDate, int EmpNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        manager.BeginTransaction();

        dbQry = string.Format("DELETE FROM tblTimeSheetEntry WHERE TSDate=Format('{0}','dd/mm/yyyy')  and empno={1}", TSEDate, EmpNo);
        manager.ExecuteNonQuery(CommandType.Text, dbQry);

        manager.CommitTransaction();
        manager.Dispose();

    }

    public DataSet generateTSEReportDS(string dtSdate, string dtEdate, int empNo, string SApproved, string sDataSource)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);


        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        String searchStr = string.Empty;

        if (empNo > 0)
            searchStr = " tblTimeSheetEntry.empno=" + empNo;

        if (dtSdate.ToString() != string.Empty && dtSdate.ToString() != null)
        {
            if (searchStr == string.Empty)
                searchStr = searchStr + "TSDate>=#" + Convert.ToDateTime(dtSdate).ToString("MM/dd/yyyy").Trim() + "#";
            else
                searchStr = searchStr + " AND TSDate>=#" + Convert.ToDateTime(dtSdate).ToString("MM/dd/yyyy").Trim() + "#";
        }

        if (dtEdate.ToString() != string.Empty && dtEdate.ToString() != null)
        {
            if (searchStr == string.Empty)
                searchStr = searchStr + "TSDate<=#" + Convert.ToDateTime(dtEdate).ToString("MM/dd/yyyy").Trim() + "#";
            else
                searchStr = searchStr + " AND TSDate<=#" + Convert.ToDateTime(dtEdate).ToString("MM/dd/yyyy").Trim() + "#";
        }

        if (SApproved != string.Empty)
        {
            if (searchStr == string.Empty)
                searchStr = searchStr + " Approved= " + SApproved;
            else
                searchStr = searchStr + " AND Approved=" + SApproved;

        }



        if (searchStr != string.Empty)
        {
            //dbQry.Append("SELECT * FROM tblTimeSheetEntry");
            //dbQry.AppendFormat(" Where {0} ORDER BY TSDate,empNo", searchStr);

            dbQry.Append("select  TSDate,tblEmployee.empFirstName,Before8,[8to9],[9to10],[10to11],[11to12],[12to1],[1pmto2],[2pmto3],[3pmto4],[4pmto5],[5pmto6],[6pmto7],[7pmto8],[8pmto9],[9pmto10],[After10],IIf(Approved=True,'YES','NO') AS Approved  FROM tblTimeSheetEntry INNER JOIN tblEmployee ON tblTimeSheetEntry.empNo = tblEmployee.empno");
            dbQry.AppendFormat(" Where {0} ORDER BY TSDate,tblEmployee.empNo", searchStr);


        }
        else
        {
            //dbQry.Append("SELECT * FROM tblTimeSheetEntry ORDER BY TSDate,EmpNO");
            dbQry.Append("select  TSDate,tblEmployee.empFirstName,Before8,[8to9],[9to10],[10to11],[11to12],[12to1],[1pmto2],[2pmto3],[3pmto4],[4pmto5],[5pmto6],[6pmto7],[7pmto8],[8pmto9],[9pmto10],After10,IIf(Approved=True,'YES','NO') AS Approved FROM tblTimeSheetEntry INNER JOIN tblEmployee ON tblTimeSheetEntry.empNo = tblEmployee.empno ORDER BY TSDate,empNo");
        }
        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SearchWME(int WorkId, int empNO, String startDate, String Enddate, String Creationdate, String Status)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        String searchStr = string.Empty;


        searchStr = searchStr + " workStatus<>'Closed'";

        if (WorkId > 0)
            searchStr = "WorkId=" + WorkId;


        if (empNO > 0)
        {
            if (searchStr == string.Empty)
                searchStr = searchStr + " EmpNo=" + empNO;
            else
                searchStr = searchStr + " AND EmpNo=" + empNO;

        }

        if (startDate.ToString() != string.Empty && startDate.ToString() != null)
        {
            if (searchStr == string.Empty)
                searchStr = searchStr + "ExpWrkStartDate>=#" + Convert.ToDateTime(startDate).ToString("MM/dd/yyyy").Trim() + "#";
            else
                searchStr = searchStr + " AND ExpWrkStartDate>=#" + Convert.ToDateTime(startDate).ToString("MM/dd/yyyy").Trim() + "#";
        }

        if (Enddate.ToString() != string.Empty && Enddate.ToString() != null)
        {
            if (searchStr == string.Empty)
                searchStr = searchStr + "ExpWrkEndDate<=#" + Convert.ToDateTime(Enddate).ToString("MM/dd/yyyy").Trim() + "#";
            else
                searchStr = searchStr + " AND ExpWrkEndDate<=#" + Convert.ToDateTime(Enddate).ToString("MM/dd/yyyy").Trim() + "#";
        }

        if (Creationdate.ToString() != string.Empty && Creationdate.ToString() != null)
        {
            if (searchStr == string.Empty)
                searchStr = searchStr + "Creationdate=#" + Convert.ToDateTime(Creationdate).ToString("MM/dd/yyyy").Trim() + "#";
            else
                searchStr = searchStr + " AND Creationdate=#" + Convert.ToDateTime(Creationdate).ToString("MM/dd/yyyy").Trim() + "#";
        }

        if (Status != string.Empty)
        {
            if (searchStr == string.Empty)
                searchStr = searchStr + " workStatus='" + Status + "'";
            else
                searchStr = searchStr + " AND WorkStatus='" + Status + "'";
        }


        if (searchStr != string.Empty)
        {
            dbQry.Append("SELECT *  FROM tblWorkManagement");
            dbQry.AppendFormat(" Where {0} ORDER BY CreationDate Desc", searchStr);
        }
        else
        {
            dbQry.Append("SELECT *  FROM tblWorkManagement ORDER BY CreationDate Desc");
        }


        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void InsertWMEDetails(int WorkId, String creationDate, string ExpWrkSDate, string ExpWrkEDate, int EmpNo, string WorkDetails, string ActStartDate, string ActEndDate, string resDet, string WrkStatus)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();

        //dbQry = string.Format("INSERT INTO tblWorkManagement(WorkId,CreationDate,ExpWrkStartDate,ExpWrkEndDate,EmpNo,Workdetails,ActStartDate,ActEndDate,ResolutionDet,WorkStatus) VALUES({0},Format('{1}', 'dd/mm/yyyy'),Format('{2}', 'dd/mm/yyyy'),Format('{3}', 'dd/mm/yyyy'),{4},'{5}',Format('{6}', 'dd/mm/yyyy'),Format('{7}', 'dd/mm/yyyy'),'{8}','{9}')",
        //WorkId, creationDate, ExpWrkSDate, ExpWrkEDate, EmpNo, WorkDetails, ActStartDate, ActEndDate, resDet, WrkStatus);
        dbQry = string.Format("INSERT INTO tblWorkManagement(WorkId,CreationDate,ExpWrkStartDate,ExpWrkEndDate,EmpNo,Workdetails,WorkStatus) VALUES({0},Format('{1}', 'dd/mm/yyyy'),Format('{2}', 'dd/mm/yyyy'),Format('{3}', 'dd/mm/yyyy'),{4},'{5}','{6}')",
        WorkId, creationDate, ExpWrkSDate, ExpWrkEDate, EmpNo, WorkDetails, WrkStatus);
        manager.ExecuteNonQuery(CommandType.Text, dbQry);

        manager.Dispose();

    }

    public void InsertWMEntry(int WorkId, String creationDate, string ExpWrkSDate, string ExpWrkEDate, int EmpNo, string WorkDetails, string ActStartDate, string ActEndDate, string resDet, string WrkStatus)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();

        //dbQry = string.Format("INSERT INTO tblWorkManagement(WorkId,CreationDate,ExpWrkStartDate,ExpWrkEndDate,EmpNo,Workdetails,ActStartDate,ActEndDate,ResolutionDet,WorkStatus) VALUES({0},Format('{1}', 'dd/mm/yyyy'),Format('{2}', 'dd/mm/yyyy'),Format('{3}', 'dd/mm/yyyy'),{4},'{5}',Format('{6}', 'dd/mm/yyyy'),Format('{7}', 'dd/mm/yyyy'),'{8}','{9}')",
        //WorkId, creationDate, ExpWrkSDate, ExpWrkEDate, EmpNo, WorkDetails, ActStartDate, ActEndDate, resDet, WrkStatus);
        dbQry = string.Format("INSERT INTO tblWorkManagement(WorkId,CreationDate,ExpWrkStartDate,ExpWrkEndDate,EmpNo,Workdetails,WorkStatus) VALUES({0},Format('{1}', 'dd/mm/yyyy'),Format('{2}', 'dd/mm/yyyy'),Format('{3}', 'dd/mm/yyyy'),{4},'{5}','{6}')",
        WorkId, creationDate, ExpWrkSDate, ExpWrkEDate, EmpNo, WorkDetails, WrkStatus);
        manager.ExecuteNonQuery(CommandType.Text, dbQry);

        manager.Dispose();

    }



    public String getMaxWorkID()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;


        String newWorkID = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(workId) FROM tblWorkManagement").ToString();

        manager.Dispose();
        return newWorkID;
    }

    public void UpdateWMClosure(int WorkId, String creationDate, string ExpWrkSDate, string ExpWrkEDate, int EmpNo, string WorkDetails, string ActStartDate, string ActEndDate, string resDet, string WrkStatus)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;


        if (ActStartDate == string.Empty)
        {
            dbQry = string.Format("UPDATE tblWorkManagement SET WorkStatus='{6}' Where WorkId={0}",
            WorkId, creationDate, ExpWrkSDate, ExpWrkEDate, EmpNo, WorkDetails, WrkStatus);
        }
        else
        {
            dbQry = string.Format("UPDATE tblWorkManagement SET WorkStatus='{9}' Where WorkId={0}",
            WorkId, creationDate, ExpWrkSDate, ExpWrkEDate, EmpNo, WorkDetails, ActStartDate, ActEndDate, resDet, WrkStatus);
        }

        manager.ExecuteNonQuery(CommandType.Text, dbQry);


        manager.Dispose();

    }

    public void UpdateWMEntry(int WorkId, String creationDate, string ExpWrkSDate, string ExpWrkEDate, int EmpNo, string WorkDetails, string ActStartDate, string ActEndDate, string resDet, string WrkStatus)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;


        dbQry = string.Format("UPDATE tblWorkManagement SET WorkId={0},CreationDate=Format('{1}', 'dd/mm/yyyy'),ExpWrkStartDate=Format('{2}', 'dd/mm/yyyy'),ExpWrkEndDate=Format('{3}', 'dd/mm/yyyy'),EmpNo={4},WorkDetails='{5}',WorkStatus='{6}' Where WorkId={0}",
        WorkId, creationDate, ExpWrkSDate, ExpWrkEDate, EmpNo, WorkDetails, WrkStatus);


        manager.ExecuteNonQuery(CommandType.Text, dbQry);

        manager.Dispose();

    }


    public void DeleteWMEDetails(int WorkID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        manager.BeginTransaction();

        dbQry = string.Format("DELETE FROM tblWorkManagement WHERE WorkId={0}", WorkID);
        manager.ExecuteNonQuery(CommandType.Text, dbQry);

        manager.CommitTransaction();
        manager.Dispose();

    }

    public DataSet generateWMEReportDS(int empNO, String startDate, String Enddate, String Status)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        String searchStr = string.Empty;



        if (empNO > 0)
        {
            if (searchStr == string.Empty)
                searchStr = searchStr + " tblWorkManagement.EmpNo=" + empNO;
            else
                searchStr = searchStr + " AND tblWorkManagement.EmpNo=" + empNO;

        }

        if (startDate.ToString() != string.Empty && startDate.ToString() != null)
        {
            if (searchStr == string.Empty)
                searchStr = searchStr + "ExpWrkStartDate>=#" + Convert.ToDateTime(startDate).ToString("MM/dd/yyyy").Trim() + "#";
            else
                searchStr = searchStr + " AND ExpWrkStartDate>=#" + Convert.ToDateTime(startDate).ToString("MM/dd/yyyy").Trim() + "#";
        }

        if (Enddate.ToString() != string.Empty && Enddate.ToString() != null)
        {
            if (searchStr == string.Empty)
                searchStr = searchStr + "ExpWrkEndDate<=#" + Convert.ToDateTime(Enddate).ToString("MM/dd/yyyy").Trim() + "#";
            else
                searchStr = searchStr + " AND ExpWrkEndDate<=#" + Convert.ToDateTime(Enddate).ToString("MM/dd/yyyy").Trim() + "#";
        }



        if (Status != string.Empty)
        {
            if (searchStr == string.Empty)
                searchStr = searchStr + " workStatus='" + Status + "'";
            else
                searchStr = searchStr + " AND WorkStatus='" + Status + "'";
        }


        if (searchStr != string.Empty)
        {

            dbQry.Append("select WorkID,CreationDate,ExpWrkStartdate,ExpWrkEndDate,tblEmployee.EmpFirstName,Workdetails,ActStartDate,ActEndDate,resolutiondet,WorkStatus FROM tblWorkManagement INNER JOIN tblEmployee ON tblWorkManagement.empNo = tblEmployee.empno");
            dbQry.AppendFormat(" Where {0} ORDER BY ExpWrkStartDate,tblEmployee.empNo", searchStr);

            //    dbQry.Append("SELECT *  FROM tblWorkManagement");
            //    dbQry.AppendFormat(" Where {0} ORDER BY ExpWrkStartDate", searchStr);
        }
        else
        {
            dbQry.Append("select WorkID,CreationDate,ExpWrkStartdate,ExpWrkEndDate,tblEmployee.EmpFirstName,Workdetails,ActStartDate,ActEndDate,resolutiondet,WorkStatus FROM tblWorkManagement INNER JOIN tblEmployee ON tblWorkManagement.empNo = tblEmployee.empno ORDER BY ExpWrkStartDate");
        }


        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void UpdateWMEDetails(int WorkId, String creationDate, string ExpWrkSDate, string ExpWrkEDate, int EmpNo, string WorkDetails, string ActStartDate, string ActEndDate, string resDet, string WrkStatus)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;

        dbQry = string.Format("UPDATE tblWorkManagement SET ActStartDate=Format('{6}', 'dd/mm/yyyy'),ActEndDate=Format('{7}', 'dd/mm/yyyy'),ResolutionDet='{8}',WorkStatus='{9}' Where WorkId={0}",
        WorkId, creationDate, ExpWrkSDate, ExpWrkEDate, EmpNo, WorkDetails, ActStartDate, ActEndDate, resDet, WrkStatus);


        manager.ExecuteNonQuery(CommandType.Text, dbQry);


        manager.Dispose();

    }


    #endregion

    #region Bundles

    public DataSet ListBundleStock(int BillNo, string itemcode, int BundleNo, int qty)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = "SELECT BundleNo,cstr(Qty) +' - ' + cstr(Coir)  as ComQty,Coir,ItemCode,Qty,PurchaseId,Billno  FROM tblBundle WHERE Billno =" + BillNo;
        if (itemcode != string.Empty)
            dbQry = dbQry + "  AND itemCode = '" + itemcode + "'";
        if (BundleNo > 0)
            dbQry = dbQry + "  AND bundleNo = " + BundleNo;
        if (qty > 0)
            dbQry = dbQry + "  AND Qty = " + qty;
        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public int DeletetblBundle(int PurchaseId, string ItemCode, int Qty)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = "SELECT * FROM tblBundle WHERE BillNo>0";
        if (PurchaseId > 0)
            dbQry = dbQry + " and PurchaseID =" + PurchaseId;
        if (ItemCode != string.Empty)
            dbQry = dbQry + " AND itemCode = '" + ItemCode + "'";
        if (Qty > 0)
            dbQry = dbQry + " and Qty=" + Qty;

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return -2;
            else
            {
                //dbQry = string.Format("Delete From tblBundle WHERE PurchaseID = {0} AND itemCode = '{1}' and Qty={3} and BillNo>0", PurchaseId, ItemCode, Qty);
                //manager.ExecuteNonQuery(CommandType.Text, dbQry);
                return 1;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public int InsertBundleSales(string BillDate, int sCustomerID, string sCustomerName, string sCustomerAddress, string sCustomerContact, int paymode, string sCreditCardno, int BankName, double Amount, string purchasereturn, string prreason, int executive, double freight, double dLU, DataSet salesDS)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        DateTime sBilldate;
        string[] sDate;
        string delim = "/";
        char[] delimA = delim.ToCharArray();
        CultureInfo culture = new CultureInfo("pt-BR");
        string sVoucherType = string.Empty;
        string strRole = string.Empty;
        string[] roleArr;
        string sRoleID = string.Empty;
        string sQty = string.Empty;
        string[] roleSpl;
        int iSno = 0;

        try
        {
            sDate = BillDate.Trim().Split(delimA);


            sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));

        }
        catch (Exception ex)
        {
            //Response.Write("<b><font face='Trebuchet MS' size=2 color=red>Invalid Bill Date Format</font></b>");
            throw new Exception("Invalid Bill Date Format", ex);
        }


        double oldAmt = 0;
        string sNarration = string.Empty;
        int creditorID = 2;
        int DebtorID = 0;
        int salesID = 0;
        int BillNo = 0;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID

            if (paymode == 1)
                DebtorID = 1;
            else if (paymode == 2)
                DebtorID = BankName;
            else
                DebtorID = sCustomerID;

            //End Retriving the old Debtor and CreditorID

            //Sales A/c -2 will always be the Creditor


            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebtorID);
            double Debit = 0;

            object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebit != null) && (retDebit != DBNull.Value))
            {
                Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }
            //double Payment = (double)manager.ExecuteScalar(CommandType.Text, "Select Amount from tblDayBook Where TransNo=" + TransNo);
            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebtorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", creditorID);
            double Credit = 0;
            object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCredit != null) && (retCredit != DBNull.Value))
            {
                Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, creditorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Updating the Debit and credit
            //Start Delete the old record
            if (purchasereturn == "No")
                sVoucherType = "Sales";
            else
                sVoucherType = "Purchase Return";

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,CreditCardNo,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
             sBilldate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, sCreditCardno, 0);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            int NewTransNo = 0;

            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NewTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }

            object retBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM tblSales");
            if ((retBillVal != null) && (retBillVal != DBNull.Value))
            {
                BillNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM tblSales");
            }
            else
            {
                BillNo = BillNo + 1;
            }

            /* Start March 21 - Duplicate Billno Check*/
            int tBillNo = 0;
            int salesBillno = 0;
            object retTBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM TemptblSales");
            if ((retTBillVal != null) && (retTBillVal != DBNull.Value))
            {
                tBillNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo)+1 FROM TemptblSales");
            }
            else
            {
                tBillNo = tBillNo + 1;
            }

            if (BillNo >= tBillNo)
            {
                salesBillno = BillNo;
            }
            else
            {
                salesBillno = tBillNo;
            }

            dbQry = string.Format("INSERT INTO tblSales(Billno,BillDate,JournalID,CustomerID,CustomerName,CustomerAddress,CustomerContacts,Paymode,purchaseReturn,purchaseReturnReason,executive,freight,LoadUnload) VALUES({0},Format('{1}', 'dd/mm/yyyy'),{2},{3},'{4}','{5}','{6}',{7},'{8}','{9}','{10}',{11},{12})",
           salesBillno, sBilldate.ToShortDateString(), NewTransNo, sCustomerID, sCustomerName, sCustomerAddress, sCustomerContact, paymode, purchasereturn, prreason, executive, freight, dLU);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            /*End March 21 - Duplicate Billno Check*/

            object retSalesVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo) FROM tblSales");
            if ((retSalesVal != null) && (retSalesVal != DBNull.Value))
            {
                salesID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BillNo) FROM tblSales");
            }
            else
            {
                salesID = salesID + 1;
            }


            sNarration = sVoucherType + " - Bill No.:" + BillNo;
            dbQry = string.Format("Update tblDayBook SET Narration = '{0}' Where TransNo={1}", sNarration, NewTransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            //Adding the Purchase Items Table
            DataSet DSBundle = new DataSet();
            if (salesDS != null)
            {
                if (salesDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in salesDS.Tables[0].Rows)
                    {
                        string s = string.Empty;
                        DSBundle = ListBundleStock(0, s, Convert.ToInt32(dr["BundleNo"]), 0);
                        if (DSBundle.Tables[0].Rows.Count == 0)
                        {
                            salesID = -1;
                            return salesID;
                        }
                        iSno = iSno + 1;
                        object returnStock = manager.ExecuteScalar(CommandType.Text, "Select stock from tblProductMaster WHERE itemCode='" + Convert.ToString(dr["ItemCode"]) + "'");
                        if ((returnStock != null) && (returnStock != DBNull.Value))
                        {
                            if (Convert.ToDouble(returnStock) < Convert.ToDouble(dr["Qty"]))
                            {
                                salesID = -1;
                                return salesID;
                            }

                        }
                        if (dr["isRole"].ToString() == "Y")
                        {
                            if (dr["Roles"].ToString() != "NO ROLE" && dr["Roles"].ToString().Trim() != "")
                            {
                                strRole = dr["Roles"].ToString();
                                if (strRole.EndsWith(","))
                                    strRole = strRole.Remove(strRole.Length - 1, 1);
                                roleArr = strRole.Split(',');
                                for (int k = 0; k < roleArr.Length; k++)
                                {
                                    if (roleArr[k].ToString() != "")
                                    {
                                        roleSpl = roleArr[k].Split('_');
                                        dbQry = string.Format("INSERT INTO tblSalesRole(BillNo,ItemCode,Qty_Bought,RoleID) VALUES({0},'{1}',{2},{3})", salesID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(roleSpl[1]), Convert.ToInt32((roleSpl[0])));
                                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                                        dbQry = string.Format("Update tblItemRoleMaster SET Qty_Available = Qty_Available - {0} WHERE roleid={1}", Convert.ToDouble(roleSpl[1]), Convert.ToDouble(roleSpl[0]));
                                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                                    }
                                }

                                dbQry = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,isrole,CST,Bundles,Rods) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10})", salesID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), iSno, Convert.ToString(dr["isRole"]), Convert.ToDouble(dr["CST"]), Convert.ToInt32(dr["Bundles"]), Convert.ToInt32(dr["Rods"]));
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);
                                dbQry = "Update tblBundle set BillNo=" + salesID + " where BundleNo=" + Convert.ToDouble(dr["BundleNo"]);
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);
                            }
                        }
                        else
                        {
                            dbQry = string.Format("INSERT INTO tblSalesItems(BillNo,ItemCode,Qty,Rate,Discount,Vat,SlNo,isrole,CST,Bundles,Rods) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10})", salesID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), iSno, Convert.ToString(dr["isRole"]), Convert.ToDouble(dr["CST"]), Convert.ToInt32(dr["Bundles"]), Convert.ToInt32(dr["Rods"]));
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);
                            dbQry = "Update tblBundle set BillNo=" + salesID + " where BundleNo=" + Convert.ToDouble(dr["BundleNo"]);
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        }


                        dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock - {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }
                    iSno = 0;
                }
            }

            manager.CommitTransaction();
            return salesID;
        }

        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void DeleteBundleSales(int Billno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldDebitID = 0;
        int oldCreditID = 0;
        double oldAmt = 0;
        string transdate = string.Empty;
        DataSet roleDs = new DataSet();
        string sNarration = string.Empty;

        int creditorID = 0;
        int DebtorID = 3;



        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID
            dsOld = GetSalesForId(Billno,"");

            if (dsOld != null)
            {
                if (dsOld.Tables[0].Rows.Count > 0)
                {
                    if (dsOld.Tables[0].Rows[0]["JournalID"] != null)
                    {
                        if (dsOld.Tables[0].Rows[0]["JournalID"].ToString() != string.Empty)
                        {
                            TransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["JournalID"].ToString());
                        }
                    }
                }
            }
            dbQry = string.Format("Select DebtorID,CreditorID,Amount,transDate from tblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables[0].Rows.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                    transdate = Convert.ToString(dsOld.Tables[0].Rows[0]["transDate"]);
                }

            }

            //Step 1 - Start

            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", oldDebitID);
            double DebitDel = 0;
            object retDebitDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebitDel != null) && (retDebitDel != DBNull.Value))
            {
                DebitDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", DebitDel - oldAmt, oldDebitID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", oldCreditID);
            double CreditDel = 0;
            object retCreditDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCreditDel != null) && (retCreditDel != DBNull.Value))
            {
                CreditDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", CreditDel - oldAmt, oldCreditID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //Step 1 - End


            //Step 2 - Start
            //Start Delete the old record
            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("SELECT Qty,ItemCode,RoleID,isRole From tblSalesItems Where Billno={0}", Billno);
            DataSet salesDS = (DataSet)manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (salesDS != null)
            {
                if (salesDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in salesDS.Tables[0].Rows)
                    {
                        dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock + {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        if (dr["isRole"] != null)
                        {
                            if (Convert.ToString(dr["isrole"]) == "Y")
                            {
                                sQry = "SELECT roleID,Qty_bought FROM tblSalesRole WHERE itemcode='" + Convert.ToString(dr["ItemCode"]).Trim() + "' AND Billno=" + Billno;
                                roleDs = manager.ExecuteDataSet(CommandType.Text, sQry);
                                if (roleDs != null)
                                {
                                    if (roleDs.Tables[0].Rows.Count > 0)
                                    {
                                        foreach (DataRow dR in roleDs.Tables[0].Rows)
                                        {
                                            dbQry = string.Format("Update tblItemRoleMaster SET Qty_Available = Qty_Available + {1}  WHERE RoleID={0}", Convert.ToInt32(dR["RoleID"]), Convert.ToDouble(dR["Qty_bought"]));
                                            manager.ExecuteNonQuery(CommandType.Text, dbQry);
                                        }
                                        sQry = "DELETE FROM tblSalesRole WHERE itemcode='" + Convert.ToString(dr["ItemCode"]).Trim() + "' AND Billno=" + Billno;
                                        manager.ExecuteNonQuery(CommandType.Text, sQry);
                                    }
                                }

                            }
                        }
                    }
                }
            }
            dbQry = string.Format("Delete From tblSales Where BillNo={0}", Billno);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblSalesItems Where BillNo={0}", Billno);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Update tblBundle set BillNo=0 where BillNo={0}", Billno);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Deleting the old record


            sAuditStr = "Sales Transaction: " + TransNo + " got deleted old Record Details : DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Delete", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);




            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetBundlePurchaseItemsForId(int purchaseId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("Select tblPurchaseitems.ItemCode,tblProductMaster.ProductName,tblProductMaster.ProductDesc,tblPurchaseitems.PurchaseRate,tblPurchaseitems.Qty,");
            dbQry.Append("(select coir from tblBundle where tblBundle.PurchaseId=tblPurchaseItems.purchaseID and tblBundle.Itemcode=tblPurchaseItems.Itemcode and tblBundle.Qty=tblPurchaseItems.Qty) as Coir,");
            dbQry.Append("tblPurchaseitems.discount,tblPurchaseitems.Vat,tblPurchaseItems.CST,tblPurchaseItems.NLP,tblPurchaseItems.PurchaseID,tblPurchaseItems.RoleID,tblpurchaseitems.isRole,tblProductMaster.Model FROM tblPurchaseItems INNER JOIN tblProductmaster ON tblPurchaseItems.itemCode = tblProductMaster.itemCode");
            dbQry.Append(" Where tblPurchaseItems.purchaseID = " + purchaseId);

            //dbQry.Append("SELECT tblPurchaseItems.ItemCode, tblProductmaster.ProductName, tblProductmaster.ProductDesc, tblPurchaseItems.PurchaseRate, tblPurchaseItems.Qty,");
            //dbQry.Append("tblPurchaseItems.discount, tblPurchaseItems.Vat, tblPurchaseItems.CST, tblPurchaseItems.NLP, tblPurchaseItems.PurchaseID, tblPurchaseItems.RoleID, tblPurchaseItems.isRole, tblProductmaster.Model, tblBundle.Coir ");
            //dbQry.Append(" FROM (tblPurchaseItems INNER JOIN tblProductmaster ON tblPurchaseItems.itemCode = tblProductmaster.itemCode) INNER JOIN tblBundle ON tblPurchaseItems.purchaseID = tblBundle.purchaseid ");
            //dbQry.Append(" WHERE (((tblPurchaseItems.PurchaseID)="+purchaseId +"))");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public int DeleteBundlePurchase(int purchaseID, string Billno)
    {
        /*End Purchase Stock Negative Change - March 16 -- (Commented the below method)*/
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldDebitID = 0;
        int oldCreditID = 0;
        double oldAmt = 0;


        string sNarration = string.Empty;

        int creditorID = 0;
        int DebtorID = 3;



        try
        {

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            int rtype = DeletetblBundle(purchaseID, "", 0);
            if (rtype == -2)
                return -2;
            else
                dbQry = string.Format("Delete From tblBundle WHERE PurchaseID = {0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //Start Retriving the old Debtor and CreditorID
            dsOld = GetPurchaseForId(purchaseID);


            if (dsOld.Tables[0].Rows[0]["JournalID"] != null)
            {
                if (dsOld.Tables[0].Rows[0]["JournalID"].ToString() != string.Empty)
                {
                    TransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["JournalID"].ToString());
                }
            }
            dbQry = string.Format("Select DebtorID,CreditorID,Amount from tblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                }

            }

            //Step 1 - Start

            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", oldDebitID);
            double DebitDel = 0;

            object retDebitDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebitDel != null) && (retDebitDel != DBNull.Value))
            {
                DebitDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", DebitDel - oldAmt, oldDebitID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", oldCreditID);
            double CreditDel = 0;

            object retCreditDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCreditDel != null) && (retCreditDel != DBNull.Value))
            {
                CreditDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", CreditDel - oldAmt, oldCreditID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //Step 1 - End


            //Step 2 - Start
            //Start Delete the old record
            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = string.Format("SELECT Qty,ItemCode,RoleID,isRole From tblPurchaseItems WHERE PurchaseID={0}", purchaseID);
            DataSet purchaseDS = (DataSet)manager.ExecuteDataSet(CommandType.Text, dbQry);
            /*Start Purchase Stock Negative Change - March 16 */
            double currStock = 0;
            double arrivedStock = 0;
            string itmCode = string.Empty;
            /*End Purchase Stock Negative Change - March 16 */
            if (purchaseDS != null)
            {
                if (purchaseDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in purchaseDS.Tables[0].Rows)
                    {
                        /*Start Purchase Stock Negative Change - March 16 */
                        itmCode = Convert.ToString(dr["ItemCode"]).Trim();
                        currStock = getStockInfo(Convert.ToString(dr["ItemCode"]).Trim(), "");
                        arrivedStock = currStock - Convert.ToDouble(dr["Qty"]);

                        if (arrivedStock >= 0)
                        {
                            /*End Purchase Stock Negative Change - March 16 */
                            dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock = tblProductMaster.Stock - {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());

                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                            if (dr["isRole"] != null)
                            {
                                if (Convert.ToString(dr["isrole"]) == "Y")
                                {
                                    dbQry = string.Format("DELETE FROM tblItemRoleMaster  WHERE RoleID={0}", Convert.ToInt32(dr["RoleID"]));
                                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                                }
                            }
                        }
                        /*Start Purchase Stock Negative Change - March 16 */
                        else
                        {
                            return -2;
                        }
                        /*End Purchase Stock Negative Change - March 16*/
                    }
                }
            }

            dbQry = string.Format("Delete From tblPurchase Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblPurchaseItems Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Deleting the old record


            sAuditStr = "Purchase Transaction: " + TransNo + " got deleted old Record Details : DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Delete", DateTime.Now.ToString());
            /*Start Purchase Stock Negative Change - March 16 -- (changed based on return type)*/
            int del = manager.ExecuteNonQuery(CommandType.Text, dbQry);
            /*End Purchase Stock Negative Change - March 16 -- (Commented the below method)*/




            manager.CommitTransaction();
            return del;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public int InsertBundlePurchase(string Billno, DateTime BillDate, int SupplierID, int paymode, string Chequeno, int BankName, double Amount, string salesreturn, string srReason, double freight, double dLU, DataSet purchaseDS)
    {
        /*End Purchase Loading / Unloading Freight Change - March 16*/
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldSupplierID = 0;
        double oldAmt = 0;
        string sNarration = string.Empty;
        int creditorID = 0;
        int DebtorID = 3;
        int purchaseID = 0;
        string sVoucherType = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID

            if (paymode == 1)
                creditorID = 1;
            else if (paymode == 2)
                creditorID = BankName;
            else
                creditorID = SupplierID;

            //End Retriving the old Debtor and CreditorID
            if (salesreturn == "No")
                sVoucherType = "Purchase";
            else
                sVoucherType = "Sales Return";

            sNarration = sVoucherType + " - Bill No.:" + Billno;
            //Purchase A/c - 3 will always be the debtor
            dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebtorID);
            double Debit = 0;

            object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retDebit != null) && (retDebit != DBNull.Value))
            {
                Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            //double Payment = (double)manager.ExecuteScalar(CommandType.Text, "Select Amount from tblDayBook Where TransNo=" + TransNo);
            dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebtorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", creditorID);
            double Credit = 0;
            object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            if ((retCredit != null) && (retCredit != DBNull.Value))
            {
                Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            }
            dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, creditorID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Updating the Debit and credit
            //Start Delete the old record


            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,Chequeno,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
            BillDate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, Chequeno, 0);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int NewTransNo = 0;

            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NewTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }

            /*Start Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/
            dbQry = string.Format("INSERT INTO tblPurchase(Billno,BillDate,SupplierID,JournalID,Paymode,TotalAmt,salesreturn,salesreturnreason,freight,LoadUnload) VALUES('{0}',Format('{1}', 'dd/mm/yyyy'),{2},{3},{4},{5},'{6}','{7}',{8},{9})",
            Billno, BillDate.ToShortDateString(), SupplierID, NewTransNo, paymode, Amount, salesreturn, srReason, freight, dLU);
            /*Start Purchase Loading / Unloading Freight Change - March 16*/
            manager.ExecuteNonQuery(CommandType.Text, dbQry);




            object retPurchase = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(PurchaseID) FROM tblPurchase");

            if ((retPurchase != null) && (retPurchase != DBNull.Value))
            {
                purchaseID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(PurchaseID) FROM tblPurchase");
            }
            else
            {
                purchaseID = purchaseID + 1;
            }

            //Store the details in the Audit Table.
            //sAuditStr = "Transaction: " + TransNo + " got edited and deleted Record Details : SupplierID=" + SupplierID + ",CreditorID=3,Amount=" + oldAmt + " New Trans No :" + NewTransNo;
            //dbQry = string.Format("INSERT INTO  tblAudit(Description,Command) VALUES('{0}','{1}')", sAuditStr, "Edit and Update");
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //Adding the Purchase Items Table
            object retRole = null;
            int roleID = 0;
            string rolename = string.Empty;
            if (purchaseDS != null)
            {
                if (purchaseDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in purchaseDS.Tables[0].Rows)
                    {
                        if (dr["isRole"] != DBNull.Value)
                        {
                            if (dr["isRole"].ToString().ToUpper() == "Y")
                            {
                                dbQry = string.Format("INSERT INTO tblItemRoleMaster(Role_Date,ItemCode,Qty_Bought,Qty_Available) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}',{2},{3})", DateTime.Now.ToShortDateString(), Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Qty"]));
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);
                                retRole = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(RoleID) FROM tblItemRoleMaster");

                                if ((retRole != null) && (retRole != DBNull.Value))
                                {
                                    roleID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(roleID) FROM tblItemRoleMaster");
                                }
                                else
                                {
                                    roleID = roleID + 1;
                                }
                                rolename = Convert.ToString(dr["isRole"]);
                            }

                        }
                        dbQry = string.Format("INSERT INTO tblPurchaseItems(purchaseID,itemcode,Qty,PurchaseRate,discount,vat,roleid,isRole,cst,nlp) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9})", purchaseID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["PurchaseRate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), roleID, rolename, Convert.ToDouble(dr["CST"]), Convert.ToDouble(dr["NLP"]));
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock + {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        dbQry = string.Format(" INSERT INTO tblBundle(Coir,ItemCode,qty,Purchaseid,Billno)values({0},'{1}',{2},{3},{4})", Convert.ToDouble(dr["Coir"]), Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), purchaseID, 0);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }
                }
            }
            manager.CommitTransaction();
            return purchaseID;
        }

        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public int ChkPurchaseBillNo(string connection, int transNo)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        try
        {
            dbQry = "select count(*) from tblBundle where purchaseid=" + transNo + " and billNo > 0";

            manager.Open();

            return (int)manager.ExecuteScalar(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public int ChkTableBundle()
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        try
        {
            dbQry = "select count(*) from tblBundle";

            manager.Open();

            return (int)manager.ExecuteScalar(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }



    #endregion

    //KRISHNAVELU 12 - JULY - 2010
    public DataSet ListVat()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select distinct vat from tblSalesItems order by vat";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);


            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet ListCst()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select distinct cst from tblSalesItems order by cst";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);


            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet ListVatCstAmtDet(DateTime FromDate, DateTime ToDate, int LedgerName, int Vat, int Cst)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;

        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        StringBuilder Cont = new StringBuilder();
        Cont.Append(" tblSales.BillDate >=#" + FromDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate <=#" + ToDate.ToString("MM/dd/yyyy") + "#");
        if (LedgerName != 0)
        {
            Cont.Append(" and tblSales.CustomerID=" + LedgerName);
        }
        if (Vat != 99)
        {
            if (Vat == 0)
            {
                Cont.Append(" and tblSalesItems.Vat=" + Vat + " and tblSalesItems.cst=0");
            }
            else
            {
                Cont.Append(" and tblSalesItems.Vat=" + Vat);
            }
        }
        if (Cst != 99)
        {
            Cont.Append(" and tblSalesItems.cst=" + Cst);
        }
        try
        {
            dbQry = "SELECT tblSales.BillNo, tblLedger.LedgerName, tblLedger.TINnumber ,Sum(tblSalesItems.Qty*tblSalesItems.Rate) as TotSal, Sum(tblSalesItems.Qty) AS SumOfQty, Sum(tblSalesItems.Rate) AS SumOfRate, tblSalesItems.Vat, tblSalesItems.Cst FROM (tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) INNER JOIN tblLedger ON tblSales.CustomerID = tblLedger.LedgerID where " + Cont + "  GROUP BY tblSales.BillNo, tblLedger.LedgerName, tblSalesItems.Vat,tblSalesItems.Cst, tblLedger.TINnumber order by  tblSales.BillNo, tblSalesItems.vat ";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet ListPurchaseVat()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select distinct vat from tblPurchaseItems order by vat";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);


            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet ListPurchaseCst()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select distinct cst from tblPurchaseItems order by cst";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);


            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet ListPurchaseVatCstAmtDet(DateTime FromDate, DateTime ToDate, int LedgerName, int Vat, int Cst)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;

        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        StringBuilder Cont = new StringBuilder();

        Cont.Append(" tblPurchase.BillDate >=#" + FromDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate <=#" + ToDate.ToString("MM/dd/yyyy") + "#");
        if (LedgerName != 0)
        {
            Cont.Append(" and tblPurchase.SupplierId=" + LedgerName);
        }
        if (Vat != 99)
        {
            if (Vat == 0)
            {
                Cont.Append(" and tblPurchaseItems.Vat=" + Vat + " and tblPurchaseItems.cst=0");
            }
            else
            {
                Cont.Append(" and tblPurchaseItems.Vat=" + Vat);
            }
        }
        if (Cst != 99)
        {
            Cont.Append(" and tblPurchaseItems.cst=" + Cst);
        }
        try
        {
            dbQry = "SELECT tblPurchase.PurchaseID, tblLedger.LedgerName, tblLedger.TINnumber ,Sum(tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate) as TotSal, Sum(tblPurchaseItems.Qty) AS SumOfQty, Sum(tblPurchaseItems.PurchaseRate) AS SumOfRate, tblPurchaseItems.Vat, tblPurchaseItems.Cst FROM (tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.PurchaseID = tblPurchaseItems.PurchaseID) INNER JOIN tblLedger ON tblPurchase.SupplierID = tblLedger.LedgerID where " + Cont + "  GROUP BY tblPurchase.PurchaseID, tblLedger.LedgerName, tblPurchaseItems.Vat,tblPurchaseItems.Cst, tblLedger.TINnumber order by  tblPurchase.PurchaseID, tblPurchaseItems.vat ";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    //END KRISHNAVELU 12 - JULY - 2010

    public DataSet GetCustomerDealerMobileNos(int iGroupID, string sDataSource)
    {
        /* Start Variable Declaration */

        Decimal dDebitAmt, dCreditAmt, dSumDr, dSumCr, dDiffDrCr, dOutAmt, dSumDebit, dSumCredit;
        string sLedgerName = string.Empty;
        string sAliasName = string.Empty;
        string sQry = string.Empty;
        string mQry = string.Empty;
        string sConStr = string.Empty;
        int iLedgerID = 0;
        SqlConnection oleConn;
        SqlCommand oleCmd, oleCmd2;
        SqlDataAdapter oleAdp, oleAdp2;
        DataSet dsParentQry, dsChild;


        /* End Variable Declaration */

        /* Start Ms Access Database Connection Information */
        //sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource;
        sConStr = sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(this.ConnectionString));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        /* Start DB Query Processing - Getting the Details of the Ledger int the Daybook */

        if (iGroupID == 1)
            sQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,tblGroups.GroupName,OpenBalanceDR,OpenBalanceCR,LedgerCategory,ExecutiveIncharge,Mobile from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where tblGroups.GroupID = " + iGroupID + " AND tblGroups.GroupName IN ('Sundry Debtors') Order By LedgerName";
        else
            sQry = "select LedgerID,LedgerName, AliasName, tblGroups.GroupID,tblGroups.GroupName,OpenBalanceDR,OpenBalanceCR,LedgerCategory,ExecutiveIncharge,Mobile from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID Where tblGroups.GroupName IN ('Sundry Debtors','Sundry Creditors') Order By LedgerName";


        //sQry = "SELECT LedgerID,LedgerName,AliasName,Debit,Credit,OpenBalanceDR,OpenBalanceCR FROM tblLedger WHERE (Debit <> 0 OR Credit <> 0 OR OpenBalanceDR <>0 OR OpenBalanceCR <> 0) ORDER BY LedgerName  ";

        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsParentQry = new DataSet();
        oleAdp.Fill(dsParentQry);
        /* End DB Query Processing - Getting the Details of the Ledger int the Daybook */

        /* Intialization of Sum of Debit and Credit and their Difference */
        dSumDr = 0;
        dSumCr = 0;
        dDiffDrCr = 0;
        dOutAmt = 0;
        dSumDebit = 0;
        dSumCredit = 0;
        bool noFlag = false;
        DataSet ds;
        DataTable dt;
        DataRow drNew;
        DataColumn dc;
        string mobileNo = string.Empty;


        ds = new DataSet();
        dt = new DataTable();

        dc = new DataColumn("LedgerID");
        dt.Columns.Add(dc);

        dc = new DataColumn("LedgerName");
        dt.Columns.Add(dc);

        dc = new DataColumn("AliasName");
        dt.Columns.Add(dc);

        dc = new DataColumn("Debit");
        dt.Columns.Add(dc);

        dc = new DataColumn("Credit");
        dt.Columns.Add(dc);

        dc = new DataColumn("Mobile");
        dt.Columns.Add(dc);

        ds.Tables.Add(dt);

        try
        {
            if (dsParentQry.Tables[0].Rows.Count == 0)
            {
                /* Empty XML Formation if there is no record */


                drNew = dt.NewRow();
                drNew["LedgerID"] = string.Empty;
                drNew["LedgerName"] = string.Empty;
                drNew["AliasName"] = string.Empty;
                drNew["Debit"] = "0.00";
                drNew["Credit"] = "0.00";
                drNew["Mobile"] = string.Empty;
                ds.Tables[0].Rows.Add(drNew);

            }
            else
            {
                foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
                {
                    dDebitAmt = 0;
                    dCreditAmt = 0;
                    dOutAmt = 0;
                    dSumCredit = 0;
                    dSumDebit = 0;

                    if (drParentQry["LedgerName"] != null)
                    {
                        sLedgerName = drParentQry["LedgerName"].ToString();
                    }

                    if (drParentQry["AliasName"] != null)
                    {
                        sAliasName = drParentQry["AliasName"].ToString();
                    }
                    if (drParentQry["LedgerID"] != null)
                    {
                        iLedgerID = Convert.ToInt32(drParentQry["LedgerID"]);
                    }

                    if (drParentQry["GroupID"] != null)
                    {
                        iGroupID = Convert.ToInt32(drParentQry["GroupID"]);
                    }

                    if (drParentQry["Mobile"] != null)
                    {
                        mobileNo = drParentQry["Mobile"].ToString();
                    }

                    mQry = "SELECT DebtorID,CreditorID,Amount FROM tblDayBook WHERE (DebtorID=" + iLedgerID + " OR CreditorID=" + iLedgerID + ")";

                    oleCmd2 = new SqlCommand();
                    oleCmd2.CommandText = mQry;
                    oleCmd2.CommandType = CommandType.Text;
                    oleCmd2.Connection = oleConn;
                    oleAdp2 = new SqlDataAdapter(oleCmd2);
                    dsChild = new DataSet();
                    oleAdp2.Fill(dsChild);

                    if (dsChild.Tables[0].Rows.Count > 0)
                    {
                        foreach (DataRow dr in dsChild.Tables[0].Rows)
                        {
                            if (Convert.ToInt32(dr["DebtorID"].ToString()) == iLedgerID)
                            {
                                dDebitAmt = Convert.ToDecimal(dr["Amount"].ToString());
                                dSumDr = dSumDr + dDebitAmt;
                                dSumDebit = dSumDebit + dDebitAmt;
                            }
                            if (Convert.ToInt32(dr["CreditorID"].ToString()) == iLedgerID)
                            {
                                dCreditAmt = Convert.ToDecimal(dr["Amount"].ToString());
                                dSumDr = dSumDr + dCreditAmt;
                                dSumCredit = dSumCredit + dCreditAmt;
                            }
                        }
                    }

                    if (iGroupID == 1)
                    {

                        if (drParentQry["OpenBalanceCR"] != null)
                        {
                            dOutAmt = dOutAmt + decimal.Parse(drParentQry["OpenBalanceCR"].ToString());
                        }
                        dOutAmt = dOutAmt + (dSumCredit - dSumDebit);
                        if (dOutAmt <= 0)
                        {
                            if (dOutAmt == 0)
                                noFlag = true;
                            else
                                noFlag = false;
                            if (noFlag == false)
                            {
                                dSumDr = dSumDr + dOutAmt;
                                drNew = dt.NewRow();
                                drNew["LedgerID"] = iLedgerID;
                                drNew["LedgerName"] = sLedgerName;
                                drNew["AliasName"] = sAliasName;
                                drNew["Debit"] = Math.Abs(dOutAmt).ToString("f2");
                                drNew["Credit"] = "0.00";
                                drNew["Mobile"] = mobileNo;
                                ds.Tables[0].Rows.Add(drNew);
                            }
                        }
                        else
                        {
                            dSumCr = dSumCr + Math.Abs(dOutAmt);
                            drNew = dt.NewRow();
                            drNew["LedgerID"] = iLedgerID;
                            drNew["LedgerName"] = sLedgerName;
                            drNew["AliasName"] = sAliasName;
                            drNew["Debit"] = "0.00";
                            drNew["Credit"] = Math.Abs(dOutAmt).ToString("f2");
                            drNew["Mobile"] = mobileNo;
                            ds.Tables[0].Rows.Add(drNew);

                        }
                    }
                    else
                    {
                        if (drParentQry["OpenBalanceCR"] != null)
                        {
                            dOutAmt = dOutAmt + decimal.Parse(drParentQry["OpenBalanceCR"].ToString());
                        }
                        dOutAmt = dOutAmt + (dSumCredit - dSumDebit);
                        if (dOutAmt <= 0)
                        {
                            if (dOutAmt == 0)
                                noFlag = true;
                            else
                                noFlag = false;
                            if (noFlag == false)
                            {
                                dSumDr = dSumDr + dOutAmt;
                                drNew = dt.NewRow();
                                drNew["LedgerID"] = iLedgerID;
                                drNew["LedgerName"] = sLedgerName;
                                drNew["AliasName"] = sAliasName;
                                drNew["Debit"] = Math.Abs(dOutAmt).ToString("f2");
                                drNew["Credit"] = "0.00";
                                drNew["Mobile"] = mobileNo;
                                ds.Tables[0].Rows.Add(drNew);
                            }
                        }
                        else
                        {
                            dSumCr = dSumCr + Math.Abs(dOutAmt);
                            drNew = dt.NewRow();
                            drNew["LedgerID"] = iLedgerID;
                            drNew["LedgerName"] = sLedgerName;
                            drNew["AliasName"] = sAliasName;
                            drNew["Debit"] = "0.00";
                            drNew["Credit"] = Math.Abs(dOutAmt).ToString("f2");
                            drNew["Mobile"] = mobileNo;
                            ds.Tables[0].Rows.Add(drNew);

                        }

                    }


                }


            }


            /* Clossing the DB Connection */
            oleConn.Close();

            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet GetCustomerDealerCreditAmount(int iLedgerID, int iGroupID, string sDataSource)
    {
        /* Start Variable Declaration */

        Decimal dDebitAmt, dCreditAmt, dSumDr, dSumCr, dDiffDrCr, dOutAmt, dSumDebit, dSumCredit;
        string sLedgerName = string.Empty;
        string sAliasName = string.Empty;
        string sQry = string.Empty;
        string mQry = string.Empty;
        string sConStr = string.Empty;
        SqlConnection oleConn;
        SqlCommand oleCmd, oleCmd2;
        SqlDataAdapter oleAdp, oleAdp2;
        DataSet dsParentQry, dsChild;


        /* End Variable Declaration */

        /* Start Ms Access Database Connection Information */
        //sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource;
        sConStr = sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(this.ConnectionString));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        /* Start DB Query Processing - Getting the Details of the Ledger int the Daybook */

        sQry = "select LedgerID,LedgerName, AliasName,OpenBalanceDR,OpenBalanceCR,LedgerCategory,ExecutiveIncharge,Mobile from tblLedger Where tblLedger.LedgerID = " + iLedgerID + " ";


        //sQry = "SELECT LedgerID,LedgerName,AliasName,Debit,Credit,OpenBalanceDR,OpenBalanceCR FROM tblLedger WHERE (Debit <> 0 OR Credit <> 0 OR OpenBalanceDR <>0 OR OpenBalanceCR <> 0) ORDER BY LedgerName  ";

        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsParentQry = new DataSet();
        oleAdp.Fill(dsParentQry);
        /* End DB Query Processing - Getting the Details of the Ledger int the Daybook */

        /* Intialization of Sum of Debit and Credit and their Difference */
        dSumDr = 0;
        dSumCr = 0;
        dDiffDrCr = 0;
        dOutAmt = 0;
        dSumDebit = 0;
        dSumCredit = 0;
        bool noFlag = false;
        DataSet ds;
        DataTable dt;
        DataRow drNew;
        DataColumn dc;
        string mobileNo = string.Empty;


        ds = new DataSet();
        dt = new DataTable();

        dc = new DataColumn("LedgerID");
        dt.Columns.Add(dc);

        dc = new DataColumn("LedgerName");
        dt.Columns.Add(dc);

        dc = new DataColumn("AliasName");
        dt.Columns.Add(dc);

        dc = new DataColumn("Debit");
        dt.Columns.Add(dc);

        dc = new DataColumn("Credit");
        dt.Columns.Add(dc);

        dc = new DataColumn("Mobile");
        dt.Columns.Add(dc);

        ds.Tables.Add(dt);

        try
        {
            if (dsParentQry.Tables[0].Rows.Count == 0)
            {
                /* Empty XML Formation if there is no record */
                drNew = dt.NewRow();
                drNew["LedgerID"] = string.Empty;
                drNew["LedgerName"] = string.Empty;
                drNew["AliasName"] = string.Empty;
                drNew["Debit"] = "0.00";
                drNew["Credit"] = "0.00";
                drNew["Mobile"] = string.Empty;
                ds.Tables[0].Rows.Add(drNew);

            }
            else
            {
                foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
                {
                    dDebitAmt = 0;
                    dCreditAmt = 0;
                    dOutAmt = 0;
                    dSumCredit = 0;
                    dSumDebit = 0;

                    if (drParentQry["LedgerName"] != null)
                    {
                        sLedgerName = drParentQry["LedgerName"].ToString();
                    }

                    if (drParentQry["AliasName"] != null)
                    {
                        sAliasName = drParentQry["AliasName"].ToString();
                    }
                    if (drParentQry["LedgerID"] != null)
                    {
                        iLedgerID = Convert.ToInt32(drParentQry["LedgerID"]);
                    }

                    if (drParentQry["Mobile"] != null)
                    {
                        mobileNo = drParentQry["Mobile"].ToString();
                    }

                    mQry = "SELECT DebtorID,CreditorID,Amount FROM tblDayBook WHERE (DebtorID=" + iLedgerID + " OR CreditorID=" + iLedgerID + ")";

                    oleCmd2 = new SqlCommand();
                    oleCmd2.CommandText = mQry;
                    oleCmd2.CommandType = CommandType.Text;
                    oleCmd2.Connection = oleConn;
                    oleAdp2 = new SqlDataAdapter(oleCmd2);
                    dsChild = new DataSet();
                    oleAdp2.Fill(dsChild);

                    if (dsChild.Tables[0].Rows.Count > 0)
                    {
                        foreach (DataRow dr in dsChild.Tables[0].Rows)
                        {
                            if (Convert.ToInt32(dr["DebtorID"].ToString()) == iLedgerID)
                            {
                                dDebitAmt = Convert.ToDecimal(dr["Amount"].ToString());
                                dSumDr = dSumDr + dDebitAmt;
                                dSumDebit = dSumDebit + dDebitAmt;
                            }
                            if (Convert.ToInt32(dr["CreditorID"].ToString()) == iLedgerID)
                            {
                                dCreditAmt = Convert.ToDecimal(dr["Amount"].ToString());
                                dSumDr = dSumDr + dCreditAmt;
                                dSumCredit = dSumCredit + dCreditAmt;
                            }
                        }
                    }

                    if (drParentQry["OpenBalanceCR"] != null)
                    {
                        dSumCredit = dSumCredit + decimal.Parse(drParentQry["OpenBalanceCR"].ToString());
                    }

                    if (drParentQry["OpenBalanceDR"] != null)
                    {
                        dSumDebit = dSumDebit + decimal.Parse(drParentQry["OpenBalanceDR"].ToString());
                    }

                    dOutAmt = (dSumCredit - dSumDebit);

                    if (dOutAmt <= 0)
                    {
                        if (dOutAmt == 0)
                            noFlag = true;
                        else
                            noFlag = false;

                        if (noFlag == false)
                        {
                            dSumDr = dSumDr + dOutAmt;
                            drNew = dt.NewRow();
                            drNew["LedgerID"] = iLedgerID;
                            drNew["LedgerName"] = sLedgerName;
                            drNew["AliasName"] = sAliasName;
                            drNew["Debit"] = Math.Abs(dOutAmt).ToString("f2");
                            drNew["Credit"] = "0.00";
                            drNew["Mobile"] = mobileNo;
                            ds.Tables[0].Rows.Add(drNew);
                        }
                    }
                    else
                    {
                        dSumCr = dSumCr + Math.Abs(dOutAmt);
                        drNew = dt.NewRow();
                        drNew["LedgerID"] = iLedgerID;
                        drNew["LedgerName"] = sLedgerName;
                        drNew["AliasName"] = sAliasName;
                        drNew["Debit"] = "0.00";
                        drNew["Credit"] = Math.Abs(dOutAmt).ToString("f2");
                        drNew["Mobile"] = mobileNo;
                        ds.Tables[0].Rows.Add(drNew);

                    }


                }


            }


            /* Clossing the DB Connection */
            oleConn.Close();

            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    #region "Bilit Info"

    public DataSet ListBiltis(string connection, string txtSearch, string dropDown)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        txtSearch = "%" + txtSearch + "%";

        try
        {
            manager.Open();
            object reconDate = manager.ExecuteScalar(CommandType.Text, "Select recon_date from last_recon");

            dbQry.Append("SELECT  ID,BiltiNo,ChalanNo,ReceiptDate, Creditor.LedgerName, Transporter,Quantity,Status ");
            dbQry.Append("FROM ((tblBilti LEFT JOIN ");
            dbQry.Append("tblLedger Creditor ON tblBilti.SupplierID = Creditor.LedgerID) Left Join tblTransporter ON tblTransporter.TransporterID = tblBilti.TransporterID) Where ");

            if (dropDown == "ChalanNo" && txtSearch != null)
            {
                dbQry.AppendFormat("tblBilti.ChalanNo like '{0}' AND ", txtSearch);
            }
            else if (dropDown == "BiltiNo" && txtSearch != null)
            {
                dbQry.AppendFormat("tblBilti.BiltiNo like '{0}' AND ", txtSearch);
            }
            else if (dropDown == "Transporter" && txtSearch != null)
            {
                dbQry.AppendFormat("tblTransporter.Transporter like '{0}' AND ", txtSearch);
            }
            else if (dropDown == "LedgerName" && txtSearch != null)
            {
                dbQry.AppendFormat("Creditor.LedgerName like '{0}' AND ", txtSearch);
            }
            else
            {

            }

            dbQry.Append(" tblBilti.Status <> 'Closed' AND tblBilti.ReceiptDate > #" + DateTime.Parse(reconDate.ToString()).ToString("MM/dd/yyyy") + "#");
            dbQry.Append(" Order By tblBilti.ReceiptDate Desc ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void InsertBilt(string connection, string ChalanNo, string BiltiNo, int SupplierID, int TransporterID, DateTime ReceiptDate, double Quantity, string QtyMeasure)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {

            if (!IsValidDate(connection, ReceiptDate))
            {
                throw new Exception("Invalid Date");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("SELECT Count(*) FROM tblBilti Where ChalanNo='{0}' AND BiltiNo='{1}'", ChalanNo, BiltiNo);

            var count = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (string.IsNullOrEmpty(count.ToString()))
            {
                throw new Exception("Bilty Exist");
            }

            dbQry = string.Format("INSERT INTO tblBilti(ChalanNo,BiltiNo,SupplierID,TransporterID,ReceiptDate,Quantity,QtyMeasure,Status) VALUES('{0}','{1}',{2},'{3}',Format('{4}', 'dd/mm/yyyy'),{5},'{6}','{7}')",
                ChalanNo, BiltiNo, SupplierID, TransporterID, ReceiptDate.ToShortDateString(), Quantity, QtyMeasure, "Open");

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

            manager.Dispose();

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void UpdateBilt(string connection, int ID, string ChalanNo, string BiltiNo, int SupplierID, int TransporterID, DateTime ReceiptDate, double Quantity, string QtyMeasure)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {

            if (!IsValidDate(connection, ReceiptDate))
            {
                throw new Exception("Invalid Date");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("SELECT Count(*) FROM tblBilti Where ChalanNo='{0}' AND BiltiNo='{1}'", ChalanNo, BiltiNo);

            var count = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (string.IsNullOrEmpty(count.ToString()))
            {
                throw new Exception("Bilty Exist");
            }

            dbQry = string.Format("UPDATE tblBilti SET ChalanNo = '{0}',BiltiNo='{1}',SupplierID={2},TransporterID={3},ReceiptDate=Format('{4}', 'dd/mm/yyyy'),Quantity={5},QtyMeasure='{7}' WHERE ID={6}",
                ChalanNo, BiltiNo, SupplierID, TransporterID, ReceiptDate.ToShortDateString(), Quantity, ID, QtyMeasure);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

            manager.Dispose();

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetBiltForId(string connection, int ID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT ID,ChalanNo,BiltiNo,SupplierID,TransporterID,ReceiptDate,Quantity,QtyMeasure FROM tblBilti LEFT JOIN tblLedger On tblBilti.SupplierID = tblLedger.ledgerID ");
            dbQry.AppendFormat("Where tblBilti.ID = {0}", ID);

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void DeleteBilit(string connection, int ID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("Delete From tblBilti Where ID = {0}", ID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    #endregion


    public DataSet GetSMSTextData(string connection)
    {
        if (connection == null)
        {
            throw new Exception("Connection Expired");
        }

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "Select 0 as ID,'' as SMSType, ''as SMSText From tblSMSText Where 1=0 Union select * from tblSMSText Order by SMSType Asc";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            //DataSet dsRet = new DataSet();
            DataTable dt = new DataTable();
            DataColumn dc;

            dc = new DataColumn("ID");
            dt.Columns.Add(dc);

            dc = new DataColumn("SMSType");
            dt.Columns.Add(dc);

            dc = new DataColumn("SMSText");
            dt.Columns.Add(dc);

            ds.Tables.Add(dt);

            DataRow dr = ds.Tables[0].NewRow();

            dr["ID"] = "0";
            dr["SMSType"] = string.Empty;
            dr["SMSText"] = string.Empty;
            ds.Tables[0].Rows.InsertAt(dr, 0);

            return ds;

            //return ds;

            //}
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void DeleteSMSText(string connection, int ID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("Delete From tblSMSText Where ID = {0}", ID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void UpdateSMSText(string connection, string SMSType, string SMSText, int ID, string Usernam)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        string dbQry = string.Format("Update tblSMSText Set SMSType = '{0}',SMSText = '{1}' Where ID = {2}", SMSType, SMSText, ID);

        string sAuditStr = string.Empty;

        try
        {
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "SMS Text " + SMSText + " Updated. Record Details : User = " + Usernam + " SMS Type = " + SMSType + " DateTime : " + DateTime.Now.ToString();
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Edit And Update", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListSMSText(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select SMSType,SMSText from tblSMSText Order By SMSType");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public double GetCustomerCreditLimit(string connection, string LedgerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select CreditLimit from tblLedger Where LedgerID =" + LedgerID);
            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (retVal != null)
            {
                if (retVal.ToString() != "")
                    return double.Parse(retVal.ToString());
                else
                    return 0.0;
            }
            else
                return 0.0;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetSMSText(string connection, string Type)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select SMSType,SMSText from tblSMSText Where SMSType = '{0}'", Type);
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetTransporterData(string connection)
    {
        if (connection == null)
        {
            throw new Exception("Connection Expired");
        }

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "Select '' as TransporterID, '' as Transporter From tblCategories Where 1=0 Union select * from tblTransporter Order by Transporter Asc";

            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            DataTable dt = new DataTable();
            DataColumn dc;

            dc = new DataColumn("TransporterID");
            dt.Columns.Add(dc);

            dc = new DataColumn("Transporter");
            dt.Columns.Add(dc);

            ds.Tables.Add(dt);

            DataRow dr = ds.Tables[0].NewRow();

            dr["TransporterID"] = "0";
            dr["Transporter"] = string.Empty;
            ds.Tables[0].Rows.InsertAt(dr, 0);


            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void UpdateTransporter(string connection, string Transporter, int TransporterID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        string dbQry = string.Format("Update tblTransporter Set Transporter = '{0}' Where TransporterID = {1}", Transporter, TransporterID);

        try
        {
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    #region "Complaint Info"

    public DataSet ListComplaints(string connection, string txtSearch, string dropDown, bool active)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        if (active)
            dbQry = "select ComplaintID,ComplaintDetails, ComplaintStatus,ComplaintDate,IsBilled,empFirstName+ ' ' + empSurName as AssignedTo, tblLedger.LedgerName as CustomerName from ((tblComplaint inner join tblLedger on tblLedger.LedgerID = tblComplaint.CustomerID) Left join tblEmployee On tblEmployee.EmpNo = tblComplaint.AssignedTo) Where ComplaintStatus IN ('In Progress','Resolved') ";
        else
            dbQry = "select ComplaintID,ComplaintDetails, ComplaintStatus,ComplaintDate,IsBilled,empFirstName+ ' ' + empSurName as AssignedTo, tblLedger.LedgerName as CustomerName from ((tblComplaint inner join tblLedger on tblLedger.LedgerID = tblComplaint.CustomerID) Left join tblEmployee On tblEmployee.EmpNo = tblComplaint.AssignedTo) Where ComplaintStatus IN ('Closed') ";

        if (dropDown == "Customer")
        {
            dbQry = dbQry + " AND LedgerName like '" + txtSearch + "'" + " Order By LedgerName Asc";
        }
        else if (dropDown == "ComplaintDetails")
        {
            dbQry = dbQry + " AND ComplaintDetails like '" + txtSearch + "'" + " Order By LedgerName Asc ";
        }
        else if (dropDown == "Status")
        {
            dbQry = dbQry + " AND ComplaintStatus like '" + txtSearch + "'" + " Order By LedgerName Asc ";
        }
        else if (dropDown == "AssignedTo")
        {
            dbQry = dbQry + " AND ((empFirstName like '" + txtSearch + "') OR (empSurName like '" + txtSearch + "'))" + " Order By empFirstName Asc";
        }
        else
        {
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void DeleteComplaint(int ComplaintID, string sPath)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(sPath);

        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("Delete From tblComplaint Where ComplaintID={0}", ComplaintID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry.ToString());

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void InsertComplaint(out int ComplaintID, string ComplaintDetails, int CustomerID, DateTime ComplaintDate, string ComplaintStatus, string AssignedTo, string IsBilled, string sPath)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(sPath);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {

            if (!IsValidDate(sPath, ComplaintDate))
            {
                throw new Exception("Invalid Date");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("INSERT INTO tblComplaint(ComplaintDetails,CustomerID,ComplaintStatus,ComplaintDate,AssignedTo,IsBilled) VALUES('{0}',{1},'{2}',Format('{3}', 'dd/mm/yyyy'),{4},'{5}')",
            ComplaintDetails, CustomerID, ComplaintStatus, ComplaintDate.ToShortDateString(), AssignedTo, IsBilled);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int TransNo = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(ComplaintID) FROM tblComplaint");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                TransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(ComplaintID) FROM tblComplaint");
            }
            else
            {
                TransNo = TransNo + 1;
            }

            manager.CommitTransaction();
            ComplaintID = TransNo;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            //manager.Dispose();
        }

    }

    public void UpdateComplaint(int ComplaintID, string ComplaintDetails, int CustomerID, DateTime ComplaintDate, string ComplaintStatus, int AssignedTo, string IsBilled, string sPath)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(sPath);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        DataSet dsOld = new DataSet();
        int oldDebtorID = 0;
        int oldCreditorID = 0;
        try
        {

            if (!IsValidDate(sPath, ComplaintDate))
            {
                throw new Exception("Invalid Date");
            }



            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("Update tblComplaint SET ComplaintDetails = '{0}',CustomerID={1},ComplaintDate=Format('{2}', 'dd/mm/yyyy'),ComplaintStatus='{3}',AssignedTo={4},IsBilled='{5}' Where ComplaintID={6}", ComplaintDetails,
                CustomerID, ComplaintDate.ToShortDateString(), ComplaintStatus, AssignedTo, IsBilled, ComplaintID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetComplaintForId(int ComplaintID, String ConStr)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(ConStr);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            dbQry.Append("SELECT  ComplaintID, ComplaintDate, CustomerID,AssignedTo,ComplaintDetails, IsBilled,ComplaintStatus ");
            dbQry.Append(" FROM  tblComplaint ");
            dbQry.AppendFormat("Where ComplaintID = {0} AND ComplaintDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "#   Order By ComplaintID Desc", ComplaintID);


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    #endregion

    public DataSet GetGroupCreditDebitData(int iGroupID, string iCategory, string sDataSource)
    {
        /* Start Variable Declaration */
        string sLedgerName = string.Empty;
        string sMobile = string.Empty;
        string sAliasName = string.Empty;
        string sQry = string.Empty;
        string mQry = string.Empty;
        string sConStr = string.Empty;
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;


        /* End Variable Declaration */

        /* Start Ms Access Database Connection Information */
        //sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource;
        sConStr = sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        /* Start DB Query Processing - Getting the Details of the Ledger int the Daybook */
        if (iGroupID == 1 && iCategory == "Customer")
        {
            sQry = "SELECT LedgerID,LedgerName,AliasName,Debit,Credit,OpenBalanceDR,OpenBalanceCR,Mobile FROM tblLedger WHERE GroupID=" + iGroupID + " AND LedgerCategory = '" + iCategory + "' ORDER BY LedgerName  ";
        }
        else if (iGroupID == 1 && iCategory == "Dealer")
        {
            sQry = "SELECT LedgerID,LedgerName,AliasName,Debit,Credit,OpenBalanceDR,OpenBalanceCR,Mobile FROM tblLedger WHERE GroupID=" + iGroupID + " AND LedgerCategory = '" + iCategory + "' ORDER BY LedgerName  ";
        }
        else if (iGroupID == 1 && iCategory == "CustomerDealer")
        {
            sQry = "SELECT LedgerID,LedgerName,AliasName,Debit,Credit,OpenBalanceDR,OpenBalanceCR,Mobile FROM tblLedger WHERE GroupID=" + iGroupID + " AND LedgerCategory IN ('Customer','Dealer') ORDER BY LedgerName  ";
        }
        else if (iGroupID == 2 && iCategory == "CustomerDealerSupplier")
        {
            sQry = "SELECT LedgerID,LedgerName,AliasName,Debit,Credit,OpenBalanceDR,OpenBalanceCR,Mobile FROM tblLedger WHERE GroupID IN (1,2) ORDER BY LedgerName  ";
        }
        else if (iGroupID != 0 && iCategory == "Ledger")
        {
            sQry = "SELECT LedgerID,LedgerName,AliasName,Debit,Credit,OpenBalanceDR,OpenBalanceCR,Mobile FROM tblLedger WHERE LedgerID=" + iGroupID + " ORDER BY LedgerName  ";
        }
        else
            sQry = "SELECT LedgerID,LedgerName,AliasName,Debit,Credit,OpenBalanceDR,OpenBalanceCR,Mobile FROM tblLedger ORDER BY LedgerName  ";

        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsParentQry = new DataSet();
        oleAdp.Fill(dsParentQry);
        /* End DB Query Processing - Getting the Details of the Ledger int the Daybook */




        /* Intialization of Sum of Debit and Credit and their Difference */
        bool noFlag = false;
        DataSet ds;
        DataTable dt;
        DataRow drNew;
        DataColumn dc;


        ds = new DataSet();
        dt = new DataTable();

        dc = new DataColumn("LedgerName");
        dt.Columns.Add(dc);

        dc = new DataColumn("Mobile");
        dt.Columns.Add(dc);


        ds.Tables.Add(dt);
        try
        {
            if (dsParentQry.Tables[0].Rows.Count == 0)
            {
                /* Empty XML Formation if there is no record */
                drNew = dt.NewRow();
                drNew["LedgerName"] = string.Empty;
                drNew["Mobile"] = string.Empty;
                ds.Tables[0].Rows.Add(drNew);

            }
            else
            {
                foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
                {

                    if (drParentQry["LedgerName"] != null)
                    {
                        sLedgerName = drParentQry["LedgerName"].ToString();
                    }
                    if (drParentQry["Mobile"] != null)
                    {
                        sMobile = drParentQry["Mobile"].ToString();
                    }

                    drNew = dt.NewRow();
                    drNew["LedgerName"] = sLedgerName;
                    drNew["Mobile"] = sMobile;
                    ds.Tables[0].Rows.Add(drNew);

                }

            }


            /* Clossing the DB Connection */
            oleConn.Close();

            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    #region "Credit Debit Note Info"

    public DataSet ListNotes(string connection, string txtSearch, string dropDown)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        if (dropDown != "NoteID")
            txtSearch = "%" + txtSearch + "%";

        try
        {
            manager.Open();
            object reconDate = manager.ExecuteScalar(CommandType.Text, "Select recon_date from last_recon");

            dbQry.Append("SELECT  NoteID,CDType,RefNo,NoteDate,L.LedgerName,Amount,TransNo,Note,billno ");
            dbQry.Append("FROM tblCreditDebitNote LEFT JOIN ");
            dbQry.Append("tblLedger L ON tblCreditDebitNote.LedgerID = L.LedgerID Where ");

            if (dropDown == "NoteID" && txtSearch != null)
            {
                dbQry.AppendFormat("tblCreditDebitNote.NoteID = {0} AND ", txtSearch);
            }
            else if (dropDown == "RefNo" && txtSearch != null)
            {
                dbQry.AppendFormat("tblCreditDebitNote.RefNo like '{0}' AND ", txtSearch);
            }
            else if (dropDown == "Ledger" && txtSearch != null)
            {
                dbQry.AppendFormat("L.LedgerName like '{0}' AND ", txtSearch);
            }
            else
            {

            }

            dbQry.Append(" tblCreditDebitNote.NoteDate > " + DateTime.Parse(reconDate.ToString()).ToString("yyyy-MM-dd") + "");
            dbQry.Append(" Order By tblCreditDebitNote.NoteDate Desc ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void InsertCreditDebitNote(string connection, string RefNo, string CDType, double Amount, int LedgerID, DateTime NoteDate, string Note, string BillNo, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        DataSet ds1 = new DataSet();

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {

            if (!IsValidDate(connection, NoteDate))
            {
                throw new Exception("Invalid Date");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            int CreditorID = 0;
            int DebtorID = 0;
            string sNarration = string.Empty;
            string sVoucherType = string.Empty;
            string sCreditCardno = string.Empty;

            int LedID = 0;

            dbQry = string.Format("Select ledgerid from tblledger Where ledgername='CreditDebitNoteId' ");
            ds1 = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (ds1 != null)
            {
                if (ds1.Tables.Count > 0)
                {
                    LedID = Convert.ToInt32(ds1.Tables[0].Rows[0]["ledgerid"]);

                }
            }



            if (CDType == "Credit")
            {
                CreditorID = LedgerID;
                DebtorID = LedID;
                sNarration = "Credit Note added.";
            }
            else
            {
                CreditorID = LedID;
                DebtorID = LedgerID;
                sNarration = "Debit Note added.";
            }

            if (CDType == "Credit")
            {
                sVoucherType = "Credit Note";
            }
            else
            {
                sVoucherType = "Debit Note";
            }

            dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,CreditCardNo,RefNo,BranchCode) VALUES(Format({0},{1},{2},{3},{4},{5},{6},{7},{8})",
                        NoteDate.ToShortDateString(), DebtorID, CreditorID, Amount, Note, sVoucherType, sCreditCardno, 0,"All");
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "InsertCreditDebitNote");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }


            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,CreditCardNo,RefNo,BranchCode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},'{8}')",
            NoteDate.ToString("yyyy-MM-dd"), DebtorID, CreditorID, Amount, Note, sVoucherType, sCreditCardno, 0, "All");

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int MaxNoteID = 0;

            object retMaxNoteID = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(NoteID) FROM tblCreditDebitNote Where CDType='" + CDType + "'");

            if ((retMaxNoteID != null) && (retMaxNoteID != DBNull.Value))
            {
                MaxNoteID = Int32.Parse(retMaxNoteID.ToString()) + 1;
            }
            else
            {
                MaxNoteID = MaxNoteID + 1;
            }

            int NewTransNo = 0;

            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NewTransNo = int.Parse(retVal.ToString());
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }


            if (Logsave == "YES")
            {
                logdescription = string.Format("INSERT INTO tblCreditDebitNote(NoteID,CDType,RefNo,Amount,NoteDate,LedgerID,[Note],TransNo,BillNo,BranchCode) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})",
                        MaxNoteID, CDType, RefNo, Amount, NoteDate.ToShortDateString(), LedgerID, Note, NewTransNo, BillNo, "All");
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "InsertCreditDebitNote");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }


            dbQry = string.Format("INSERT INTO tblCreditDebitNote(NoteID,CDType,RefNo,Amount,NoteDate,LedgerID,[Note],TransNo,BillNo,BranchCode) VALUES({0},'{1}','{2}',{3},'{4}',{5},'{6}',{7},'{8}','{9}')",
                MaxNoteID, CDType, RefNo, Amount, NoteDate.ToString("yyyy-MM-dd"), LedgerID, Note, NewTransNo, BillNo, "All");

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Credit Debit Note Transaction: " + NewTransNo + " added. Record Details :  User :" + Username + " Bill No=" + RefNo + " DebtorID=" + DebtorID + " ,CreditorID=" + CreditorID + " ,Amount=" + Amount + " DateTime: " + DateTime.Now.ToString();
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            manager.CommitTransaction();

            manager.Dispose();

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void InsertCreditDebitNote1122013(string connection, string RefNo, string CDType, double Amount, int LedgerID, DateTime NoteDate, string Note)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {

            if (!IsValidDate(connection, NoteDate))
            {
                throw new Exception("Invalid Date");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            int CreditorID = 0;
            int DebtorID = 0;
            string sNarration = string.Empty;
            string sVoucherType = string.Empty;
            string sCreditCardno = string.Empty;

            if (CDType == "Credit")
            {
                CreditorID = LedgerID;
                DebtorID = 0;
                sNarration = "Credit Note added.";
            }
            else
            {
                CreditorID = 0;
                DebtorID = LedgerID;
                sNarration = "Debit Note added.";
            }

            sVoucherType = "Note";

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,CreditCardNo,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
            NoteDate.ToShortDateString(), DebtorID, CreditorID, Amount, sNarration, sVoucherType, sCreditCardno, 0);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int MaxNoteID = 0;

            object retMaxNoteID = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(NoteID) FROM tblCreditDebitNote Where CDType='" + CDType + "'");

            if ((retMaxNoteID != null) && (retMaxNoteID != DBNull.Value))
            {
                MaxNoteID = Int32.Parse(retMaxNoteID.ToString()) + 1;
            }
            else
            {
                MaxNoteID = MaxNoteID + 1;
            }

            int NewTransNo = 0;

            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NewTransNo = int.Parse(retVal.ToString());
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }

            dbQry = string.Format("INSERT INTO tblCreditDebitNote(NoteID,CDType,RefNo,Amount,NoteDate,LedgerID,[Note],TransNo) VALUES({0},'{1}','{2}',{3},Format('{4}', 'dd/mm/yyyy'),{5},'{6}',{7})",
                MaxNoteID, CDType, RefNo, Amount, NoteDate.ToShortDateString(), LedgerID, Note, NewTransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

            manager.Dispose();

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void UpdateCreditDebitNote(string connection, int TransNo, int NoteID, string RefNo, string CDType, double Amount, int LedgerID, DateTime NoteDate, string Note, string BillNo, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string State = "N";
        DataSet dsOld = new DataSet();
        string sAuditStr = string.Empty;
        DataSet ds1 = new DataSet();

        int TTransNo = 0;
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;

        string oldtrandate = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {

            if (!IsValidDate(connection, NoteDate))
            {
                throw new Exception("Invalid Date");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            int LedID = 0;

            dbQry = string.Format("Select ledgerid from tblledger Where ledgername='CreditDebitNoteId' ");
            ds1 = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (ds1 != null)
            {
                if (ds1.Tables.Count > 0)
                {
                    LedID = Convert.ToInt32(ds1.Tables[0].Rows[0]["ledgerid"]);

                }
            }

            dbQry = string.Format("Select DebtorID,CreditorID,Amount,Transdate,RefNo from tblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                    oldtrandate = Convert.ToString(dsOld.Tables[0].Rows[0]["transdate"]);
                    oldBillNo = dsOld.Tables[0].Rows[0]["RefNo"].ToString();
                }

            }


            dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("UPDATE tblCreditDebitNote SET RefNo = {0},Amount={1},LedgerID={2},NoteDate={3},[Note]={4},CDType={5},BillNo={7} WHERE TransNo={6}",
                RefNo, Amount, LedgerID, NoteDate.ToShortDateString(), Note, CDType, TransNo, BillNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "UpdateCreditDebitNote");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }


            //dbQry = string.Format("UPDATE tblCreditDebitNote SET RefNo = '{0}',Amount={1},LedgerID={2},NoteDate=Format('{3}', 'dd/mm/yyyy'),[Note]='{4}',CDType='{5}' WHERE TransNo={6}",
            //    RefNo, Amount, LedgerID, NoteDate.ToShortDateString(), Note, CDType, TransNo);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = string.Format("UPDATE tblCreditDebitNote SET RefNo = '{0}',Amount={1},LedgerID={2},NoteDate='{3}',[Note]='{4}',CDType='{5}',BillNo='{7}' WHERE TransNo={6}",
                RefNo, Amount, LedgerID, NoteDate.ToString("yyyy-MM-dd"), Note, CDType, TransNo, BillNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int CreditorID = 0;
            int DebtorID = 0;

            if (CDType == "Credit")
            {
                CreditorID = LedgerID;
                DebtorID = LedID;
            }
            else
            {
                CreditorID = LedID;
                DebtorID = LedgerID;
            }

            if (Logsave == "YES")
            {
                logdescription = string.Format("UPDATE tblDayBook SET TransDate={0},DebtorID = {1},CreditorID = {2},Amount={3},Narration={5} WHERE TransNo={4}",
                    NoteDate.ToShortDateString(), DebtorID, CreditorID, Amount, TransNo, Note);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "UpdateCreditDebitNote");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("UPDATE tblDayBook SET TransDate='{0}',DebtorID = {1},CreditorID = {2},Amount={3},Narration='{5}' WHERE TransNo={4}",
            NoteDate.ToString("yyyy-MM-dd"), DebtorID, CreditorID, Amount, TransNo, Note);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Credit Debit Note Transaction: " + TransNo + " got edited. Updates Record Details :  User :" + Username + " Bill No=" + oldBillNo + " DebtorID=" + oldDebitID + " ,CreditorID=" + oldCreditID + " ,Amount=" + oldAmt + " New Trans No :" + TransNo + " DateTime: " + DateTime.Now.ToString();

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit and Update", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            manager.CommitTransaction();

            manager.Dispose();

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetCreditDebitNoteForId(string connection, int TransNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT NoteID,CDType,RefNo,Amount,LedgerID,NoteDate,TransNo,Note,billno FROM tblCreditDebitNote ");
            dbQry.AppendFormat("Where TransNo = {0}", TransNo);

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetCDNoteForId(string connection, int TransNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT NoteID,CDType,RefNo,Amount,tblLedger.LedgerID,LedgerName,NoteDate,TransNo,Note FROM tblCreditDebitNote Inner Join tblLedger On tblCreditDebitNote.LedgerID = tblLedger.LedgerID ");
            dbQry.AppendFormat("Where TransNo = {0}", TransNo);

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public void DeleteCreditDebitNote(string connection, int TransNo, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string State = "N";
        DataSet dsOld = new DataSet();
        string sAuditStr = string.Empty;

        int TTransNo = 0;
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;

        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("Select DebtorID,CreditorID,Amount,Transdate,RefNo from tblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                    oldBillNo = dsOld.Tables[0].Rows[0]["RefNo"].ToString();
                }

            }

            dbQry2 = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Delete From tblCreditDebitNote Where TransNo = {0}", TransNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, TransNo, "DeleteCreditDebitNote");
                manager.ExecuteNonQuery(CommandType.Text, description);

                logdescription = string.Format("Delete From tblDayBook Where TransNo = {0}", TransNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, TransNo, "DeleteCreditDebitNote");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            //dbQry = string.Format("INSERT INTO tblAuditCreditDebitNote Select * From tblCreditDebitNote Where TransNo = {0}", TransNo);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("INSERT INTO tblAuditDayBook Select * From tblDayBook Where TransNo = {0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblCreditDebitNote Where TransNo = {0}", TransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblDayBook Where TransNo = {0}", TransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Credit Debit Note Transaction: User = " + Username + " got deleted old Record Details : DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt;

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    #endregion

    #region "Company Divisions"

    public DataSet ListDivisions()
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            manager.Open();

            dbQry.Append("SELECT DivisionID,DivisionName,Address,City,State,PinCode,Phone,Fax,eMail,TINNo,GSTNo ");
            dbQry.Append("FROM tblDivisions ");
            dbQry.Append("Order By DivisionName Asc ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            DataTable dt = new DataTable();
            DataColumn dc;

            dc = new DataColumn("DivisionID");
            dt.Columns.Add(dc);

            dc = new DataColumn("DivisionName");
            dt.Columns.Add(dc);

            dc = new DataColumn("Address");
            dt.Columns.Add(dc);

            dc = new DataColumn("City");
            dt.Columns.Add(dc);

            dc = new DataColumn("State");
            dt.Columns.Add(dc);
            dc = new DataColumn("PinCode");
            dt.Columns.Add(dc);
            dc = new DataColumn("Phone");
            dt.Columns.Add(dc);
            dc = new DataColumn("Fax");
            dt.Columns.Add(dc);
            dc = new DataColumn("eMail");
            dt.Columns.Add(dc);
            dc = new DataColumn("TINNo");
            dt.Columns.Add(dc);
            dc = new DataColumn("GSTNo");
            dt.Columns.Add(dc);


            ds.Tables.Add(dt);

            DataRow dr = ds.Tables[0].NewRow();

            dr["DivisionID"] = "0";
            dr["DivisionName"] = string.Empty;
            dr["Address"] = string.Empty;
            dr["City"] = string.Empty;
            dr["State"] = string.Empty;
            dr["PinCode"] = string.Empty;
            dr["Phone"] = string.Empty;
            dr["Fax"] = string.Empty;
            dr["eMail"] = string.Empty;
            dr["TINNo"] = string.Empty;
            dr["GSTNo"] = string.Empty;

            //ds.Tables[0].Rows.InsertAt(dr, 0);


            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void InsertDivision(string connection, string Division, string Address, string City, string State, string PinCode, string Phone, string Fax, string eMail, string TINNo, string GSTNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("INSERT INTO tblDivisions(DivisionName,Address,City,State,PinCode,Phone,Fax,eMail,TINNo,GSTNo) VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}')",
            Division, Address, City, State, PinCode, Phone, Fax, eMail, TINNo, GSTNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

            manager.Dispose();

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void UpdateDivision(string connection, int DivisionID, string Division, string Address, string City, string State, string PinCode, string Phone, string Fax, string eMail, string TINNo, string GSTNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("UPDATE tblDivisions SET DivisionName= '{0}',Address='{1}',City='{2}',State='{3}',PinCode='{4}',Phone='{5}',Fax='{6}',eMail='{7}',TINNo='{8}',GSTNo='{9}' WHERE DivisionID={10}",
                Division, Address, City, State, PinCode, Phone, Fax, eMail, TINNo, GSTNo, DivisionID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

            manager.Dispose();

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetDivisionForId(string connection, int DivisionID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT DivisionID,DivisionName,Address,City,State,PinCode,Phone,Fax,eMail,TINNo,GSTNo FROM tblDivisions ");
            dbQry.AppendFormat("Where DivisionID = {0}", DivisionID);

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void DeleteDivision(string connection, int DivisionID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("Delete From tblDivisions Where DivisionID = {0}", DivisionID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    #endregion

    #region "Service Entry Info"

    public DataSet ListServiceEntries(string connection, string txtSearch, string dropDown)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        txtSearch = "%" + txtSearch + "%";

        try
        {
            manager.Open();
            object reconDate = manager.ExecuteScalar(CommandType.Text, "Select recon_date from last_recon");

            dbQry.Append("SELECT ServiceID,RefNumber,Details,CustomerID,IIF(Frequency = 1, 'Monthly' , IIF(Frequency = 3 ,'Quarterly','Annually')) AS Frequency,StartDate,EndDate,Amount, L.LedgerName ");
            dbQry.Append("FROM tblServiceMaster LEFT JOIN ");
            dbQry.Append("tblLedger L ON tblServiceMaster.CustomerID = L.LedgerID Where ");

            if (dropDown == "RefNumber" && txtSearch != null)
            {
                dbQry.AppendFormat("tblServiceMaster.RefNumber like '{0}' AND ", txtSearch);
            }
            else if (dropDown == "Details" && txtSearch != null)
            {
                dbQry.AppendFormat("tblServiceMaster.Details like '{0}' AND ", txtSearch);
            }
            else if (dropDown == "Ledger" && txtSearch != null)
            {
                dbQry.AppendFormat("L.LedgerName like '{0}' AND ", txtSearch);
            }
            else
            {

            }

            dbQry.Append(" tblServiceMaster.StartDate > #" + DateTime.Parse(reconDate.ToString()).ToString("MM/dd/yyyy") + "#");
            dbQry.Append(" Order By tblServiceMaster.ServiceID Desc ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetServiceDetailsForID(string ServiceID)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet dsMaster = new DataSet();
        DataSet dsVisits = new DataSet();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();



        try
        {
            manager.Open();
            object reconDate = manager.ExecuteScalar(CommandType.Text, "Select recon_date from last_recon");

            dbQry.Append("SELECT ServiceID,RefNumber,Details,CustomerID,Frequency,StartDate,EndDate,Amount, L.LedgerName ");
            dbQry.Append("FROM tblServiceMaster LEFT JOIN ");
            dbQry.Append("tblLedger L ON tblServiceMaster.CustomerID = L.LedgerID Where ");
            dbQry.Append(" tblServiceMaster.ServiceID = " + ServiceID + "");

            dsMaster = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            dbQry.Length = 0;

            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(VisitID) FROM tblServiceVisit Where ServiceID =" + ServiceID.ToString() + "");
            int VisitID = 0;

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                VisitID = int.Parse(retVal.ToString());
            }

            dbQry.Append("SELECT V.VisitID,V.Visited,V.ServiceID,E.RefNumber,E.Frequency,L.LedgerName,V.DueDate,V.VisitDate,V.Amount,V.Visited,V.PayMode,V.VisitDetails,D.CreditCardNo,V.CustomerID  ");
            dbQry.Append("FROM (((tblServiceVisit V Inner Join tblServiceMaster E ON V.ServiceID = E.ServiceID) INNER JOIN ");
            dbQry.Append("tblLedger L ON V.CustomerID = L.LedgerID) LEFT JOIN tblDayBook D ON D.TransNo = V.TransNo) ");
            dbQry.AppendFormat("Where V.ServiceID = {0}", ServiceID);

            if (VisitID != 0)
            {
                dbQry.AppendFormat(" AND V.VisitID = {0}", VisitID);
            }

            dsVisits = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            DataTable dt = new DataTable();
            DataColumn dc;
            string sServiceID = "";
            string sRefNmuber = "";
            string sDueDate = "";
            string sCustomerID = "";
            string sFrequency = "";
            string sAmount = "";

            dc = new DataColumn("ServiceID");
            dt.Columns.Add(dc);

            dc = new DataColumn("RefNumber");
            dt.Columns.Add(dc);

            dc = new DataColumn("DueDate");
            dt.Columns.Add(dc);

            dc = new DataColumn("CustomerID");
            dt.Columns.Add(dc);

            dc = new DataColumn("Amount");
            dt.Columns.Add(dc);

            ds.Tables.Add(dt);

            if (dsVisits != null)
            {
                if (dsVisits.Tables[0].Rows.Count != 0)
                {
                    DataRow dr = ds.Tables[0].NewRow();

                    sServiceID = dsVisits.Tables[0].Rows[0]["ServiceID"].ToString();
                    sRefNmuber = dsVisits.Tables[0].Rows[0]["RefNumber"].ToString();
                    sCustomerID = dsVisits.Tables[0].Rows[0]["CustomerID"].ToString();
                    sDueDate = dsVisits.Tables[0].Rows[0]["DueDate"].ToString();
                    sFrequency = dsVisits.Tables[0].Rows[0]["Frequency"].ToString();
                    sAmount = dsMaster.Tables[0].Rows[0]["Amount"].ToString();

                    DateTime dueDate = DateTime.Parse(sDueDate).AddMonths(int.Parse(sFrequency));


                    dr["ServiceID"] = sServiceID;
                    dr["RefNumber"] = sRefNmuber;
                    dr["DueDate"] = dueDate.ToShortDateString();
                    dr["CustomerID"] = sCustomerID;
                    dr["Amount"] = sAmount;

                    ds.Tables[0].Rows.Add(dr);
                }
                else
                {
                    DataRow dr = ds.Tables[0].NewRow();

                    sServiceID = dsMaster.Tables[0].Rows[0]["ServiceID"].ToString();
                    sRefNmuber = dsMaster.Tables[0].Rows[0]["RefNumber"].ToString();
                    sCustomerID = dsMaster.Tables[0].Rows[0]["CustomerID"].ToString();
                    sDueDate = dsMaster.Tables[0].Rows[0]["StartDate"].ToString();
                    sFrequency = dsMaster.Tables[0].Rows[0]["Frequency"].ToString();
                    sAmount = dsMaster.Tables[0].Rows[0]["Amount"].ToString();

                    DateTime dueDate = DateTime.Parse(sDueDate).AddMonths(int.Parse(sFrequency));

                    dr["ServiceID"] = sServiceID;
                    dr["RefNumber"] = sRefNmuber;
                    dr["DueDate"] = dueDate.ToShortDateString();
                    dr["CustomerID"] = sCustomerID;
                    dr["Amount"] = sAmount;

                    ds.Tables[0].Rows.Add(dr);
                }

            }
            else
            {

            }

            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void InsertServiceEntry(string connection, string RefNumber, string Details, int CustomerID, int Frequency, DateTime StartDate, DateTime EndDate, double Amount)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {

            if (!IsValidDate(connection, StartDate))
            {
                throw new Exception("Invalid Date");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("INSERT INTO tblServiceMaster(RefNumber,Details,CustomerID,Frequency,StartDate,EndDate,Amount) VALUES('{0}','{1}',{2},{3},Format('{4}', 'dd/mm/yyyy'),Format('{5}', 'dd/mm/yyyy'),{6})",
            RefNumber, Details, CustomerID, Frequency, StartDate.ToShortDateString(), EndDate.ToShortDateString(), Amount);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

            manager.Dispose();

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void UpdateServiceEntry(string connection, int ServiceID, string RefNumber, string Details, int CustomerID, int Frequency, DateTime StartDate, DateTime EndDate, double Amount)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {

            if (!IsValidDate(connection, StartDate))
            {
                throw new Exception("Invalid Date");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("UPDATE tblServiceMaster SET RefNumber = '{0}',Details='{1}',CustomerID={2},Frequency={3},StartDate=Format('{4}', 'dd/mm/yyyy'),EndDate=Format('{5}', 'dd/mm/yyyy'),Amount={6} WHERE ServiceID ={7}",
                RefNumber, Details, CustomerID, Frequency, StartDate.ToShortDateString(), EndDate.ToShortDateString(), Amount, ServiceID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

            manager.Dispose();

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetServiceEntryForId(string connection, int ServiceID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT ServiceID,RefNumber,Details,CustomerID,Frequency,StartDate,EndDate,Amount FROM tblServiceMaster ");
            dbQry.AppendFormat("Where ServiceID = {0}", ServiceID);

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void DeleteServiceEntry(string connection, int ServiceID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("Delete From tblServiceMaster Where ServiceID = {0}", ServiceID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    #endregion

    #region "Service Visiti Methods"

    public DataSet ListServiceVisits(string connection, string txtSearch, string dropDown)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        if (dropDown == "RefNumber" || dropDown == "Ledger")
            txtSearch = "%" + txtSearch + "%";

        try
        {

            manager.Open();

            object reconDate = manager.ExecuteScalar(CommandType.Text, "Select recon_date from last_recon");

            dbQry.Append("SELECT V.VisitID,V.Visited,V.ServiceID,E.RefNumber,L.LedgerName,V.DueDate,V.VisitDate,V.Amount,V.Visited ");
            dbQry.Append("FROM ((tblServiceVisit V Inner Join tblServiceMaster E ON V.ServiceID = E.ServiceID) INNER JOIN ");
            dbQry.Append("tblLedger L ON V.CustomerID = L.LedgerID) Where ");

            if (dropDown == "RefNumber" && txtSearch != null)
            {
                dbQry.AppendFormat("E.RefNumber like '{0}' AND ", txtSearch);
            }
            else if (dropDown == "Details" && txtSearch != null)
            {
                dbQry.AppendFormat("E.Details like '{0}' AND ", txtSearch);
            }
            else if (dropDown == "Ledger" && txtSearch != null)
            {
                dbQry.AppendFormat("L.LedgerName like '{0}' AND ", txtSearch);
            }
            else
            {

            }

            dbQry.Append(" V.DueDate > #" + DateTime.Parse(reconDate.ToString()).ToString("MM/dd/yyyy") + "#");
            dbQry.Append(" Order By V.VisitID Desc ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void InsertServiceVisit(string connection, int CustomerID, int ServiceID, DateTime DueDate, DateTime VisitDate, string VisitDetails, double Amount, int PayMode, string Visited, string CreditCardNo, int iBank)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {

            if (!IsValidDate(connection, VisitDate))
            {
                throw new Exception("Invalid Date");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            string sNarration = "Service Visited";
            int creditorID = 4;
            int DebtorID = 0;
            string VoucherType = string.Empty;
            int NewTransNo = 0;

            if (PayMode == 1)
                DebtorID = 1;
            else if (PayMode == 2)
                DebtorID = iBank;
            else
                DebtorID = CustomerID;

            VoucherType = "Service";


            if (Visited.ToUpper() == "TRUE")
            {

                dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,CreditCardNo,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
                    VisitDate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, VoucherType, CreditCardNo, 0);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

                if ((retVal != null) && (retVal != DBNull.Value))
                {
                    NewTransNo = int.Parse(retVal.ToString());
                }
                else
                {
                    NewTransNo = NewTransNo + 1;
                }
            }

            dbQry = string.Format("INSERT INTO tblServiceVisit(CustomerID,ServiceID,DueDate,VisitDate,VisitDetails,Amount,PayMode,BankID,Visited,TransNo) VALUES({0},{1},Format('{2}', 'dd/mm/yyyy'),Format('{3}', 'dd/mm/yyyy'),'{4}',{5},'{6}',{7},'{8}',{9})",
            CustomerID, ServiceID, DueDate.ToShortDateString(), VisitDate.ToShortDateString(), VisitDetails, Amount, PayMode, iBank, Visited, NewTransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

            manager.Dispose();

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void UpdateServiceVisit(string connection, int VisitID, int CustomerID, int ServiceID, DateTime DueDate, DateTime VisitDate, string VisitDetails, double Amount, int PayMode, string Visited, string CreditCardNo, int iBank)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        int TransNo = 0;
        string eVisited = "";

        try
        {

            if (!IsValidDate(connection, VisitDate))
            {
                throw new Exception("Invalid Date");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            var rdr = manager.ExecuteReader(CommandType.Text, "SELECT TransNo,Visited,ServiceID FROM tblServiceVisit Where VisitID=" + VisitID.ToString());

            while (rdr.Read())
            {
                TransNo = int.Parse(rdr.GetValue(0).ToString());
                eVisited = rdr.GetValue(1).ToString();
                ServiceID = int.Parse(rdr.GetValue(2).ToString());
            }

            dbQry = string.Format("Delete From tblServiceVisit Where VisitID = {0}", VisitID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            if (TransNo != 0)
            {
                dbQry = string.Format("Delete From tblDayBook Where TransNo = {0}", TransNo);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }

            string sNarration = "Service Visited";
            int creditorID = 4;
            int DebtorID = 0;
            string VoucherType = string.Empty;
            int NewTransNo = 0;

            if (PayMode == 1)
                DebtorID = 1;
            else if (PayMode == 2)
                DebtorID = iBank;
            else
                DebtorID = CustomerID;

            VoucherType = "Service";


            if (Visited.ToUpper() == "TRUE")
            {

                dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,CreditCardNo,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
                    VisitDate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, VoucherType, CreditCardNo, 0);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

                if ((retVal != null) && (retVal != DBNull.Value))
                {
                    NewTransNo = int.Parse(retVal.ToString());
                }
                else
                {
                    NewTransNo = NewTransNo + 1;
                }
            }

            dbQry = string.Format("INSERT INTO tblServiceVisit(CustomerID,ServiceID,DueDate,VisitDate,VisitDetails,Amount,PayMode,Visited,TransNo) VALUES({0},{1},Format('{2}', 'dd/mm/yyyy'),Format('{3}', 'dd/mm/yyyy'),'{4}',{5},'{6}','{7}',{8})",
            CustomerID, ServiceID, DueDate.ToShortDateString(), VisitDate.ToShortDateString(), VisitDetails, Amount, PayMode, Visited, NewTransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

            manager.Dispose();

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetServiceVisitForId(string connection, int VisitID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT V.VisitID,V.Visited,V.ServiceID,E.RefNumber,L.LedgerName,V.DueDate,V.VisitDate,V.Amount,V.Visited,V.PayMode,V.VisitDetails,D.CreditCardNo,V.CustomerID, V.BankID  ");
            dbQry.Append("FROM (((tblServiceVisit V Inner Join tblServiceMaster E ON V.ServiceID = E.ServiceID) INNER JOIN ");
            dbQry.Append("tblLedger L ON V.CustomerID = L.LedgerID) LEFT JOIN tblDayBook D ON D.TransNo = V.TransNo) ");
            dbQry.AppendFormat("Where V.VisitID = {0}", VisitID);

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void DeleteServiceVisit(string connection, int VisitID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("Delete From tblServiceVisit Where ServiceID = {0}", VisitID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    #endregion

    public DataSet ListProductsForCategoryID(string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;
        string obsolute = string.Empty;

        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }
            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
                    //dbQry = "SELECT Distinct ItemCode FROM tblProductMaster Where CategoryID=" + CategoryID + " and  ROL > " + block + " Order By ItemCode Asc";
                    dbQry = "SELECT Distinct ItemCode FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID = " + CategoryID + " and tblProductMaster.IsActive = 'YES' and tblBrand.IsActive = 'YES' Order By ItemCode Asc";
                }
                else
                {
                    dbQry = "SELECT Distinct ItemCode FROM tblProductMaster Where CategoryID=" + CategoryID + " Order By ItemCode Asc";
                }
            }
            else
            {
                dbQry = "SELECT Distinct ItemCode FROM tblProductMaster Where CategoryID=" + CategoryID + " Order By ItemCode Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListBrandsForCategoryID(string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;
        string obsolute = string.Empty;
        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }
            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
                    dbQry = "SELECT Distinct ProductDesc FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " and tblBrand.IsActive = 'YES' and tblProductMaster.IsActive = 'YES' Order By ProductDesc Asc";
                }
                else
                {
                    dbQry = "SELECT Distinct ProductDesc FROM tblProductMaster Where CategoryID=" + CategoryID + "  Order By ProductDesc Asc";
                }
            }
            else
            {
                dbQry = "SELECT Distinct ProductDesc FROM tblProductMaster Where CategoryID=" + CategoryID + "  Order By ProductDesc Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListProdNameForCategoryID(string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;
        string obsolute = string.Empty;
        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }

            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
                    dbQry = "SELECT Distinct ProductName,ItemCode FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " and tblBrand.IsActive = 'YES' and tblProductMaster.IsActive = 'YES' Order By ProductName Asc";
                }
                else
                {
                    dbQry = "SELECT Distinct ProductName,ItemCode FROM tblProductMaster Where CategoryID=" + CategoryID + " Order By ProductName Asc";
                }
            }
            else
            {
                dbQry = "SELECT Distinct ProductName,ItemCode FROM tblProductMaster Where CategoryID=" + CategoryID + " Order By ProductName Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListBrands()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;



        //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
        dbQry = "SELECT Distinct ProductDesc FROM tblProductMaster Order By ProductDesc Asc";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListModelsForCategoryID(string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsd = new DataSet();
        string obsolute = string.Empty;

        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }
            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();
            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
                    dbQry = "SELECT Distinct Model FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " and tblProductMaster.IsActive = 'YES' and tblBrand.IsActive = 'YES' Order By Model Asc";
                }
                else
                {
                    dbQry = "SELECT Distinct Model FROM tblProductMaster Where CategoryID=" + CategoryID + "  Order By Model Asc";
                }
            }
            else
            {
                dbQry = "SELECT Distinct Model FROM tblProductMaster Where CategoryID=" + CategoryID + "  Order By Model Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListBrandsForItemCode(string ItemCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;



        //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
        dbQry = "SELECT Distinct ProductDesc FROM tblProductMaster Where ItemCode='" + ItemCode + "' Order By ProductDesc Asc";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListBrandsForModel(string Model, string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;

        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;
        string obsolute = string.Empty;
        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }
            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
                    dbQry = "SELECT Distinct ProductDesc FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " AND Model='" + Model + "' and tblBrand.IsActive = 'YES' and tblProductMaster.IsActive = 'YES' Order By ProductDesc Asc";
                }
                else
                {
                    dbQry = "SELECT Distinct ProductDesc FROM tblProductMaster Where CategoryID=" + CategoryID + " AND Model='" + Model + "'  Order By ProductDesc Asc";
                }
            }
            else
            {
                dbQry = "SELECT Distinct ProductDesc FROM tblProductMaster Where CategoryID=" + CategoryID + " AND Model='" + Model + "'  Order By ProductDesc Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListProductNameForModel(string Model, string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;
        string obsolute = string.Empty;

        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }

            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
                    dbQry = "SELECT Distinct ProductName FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " AND Model='" + Model + "' and tblProductMaster.IsActive = 'YES' and tblBrand.IsActive = 'YES' Order By ProductName Asc";
                }
                else
                {
                    dbQry = "SELECT Distinct ProductName FROM tblProductMaster Where CategoryID=" + CategoryID + " AND Model='" + Model + "' Order By ProductName Asc";
                }
            }
            else
            {
                dbQry = "SELECT Distinct ProductName FROM tblProductMaster Where CategoryID=" + CategoryID + " AND Model='" + Model + "' Order By ProductName Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListAllModels()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = "SELECT Distinct Model FROM tblProductMaster Order By Model Asc";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListModelsForItemCode(string ItemCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;



        //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
        dbQry = "SELECT Distinct Model FROM tblProductMaster Where ItemCode='" + ItemCode + "' Order By Model Asc";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListProdcutsForProductName(string prodName, string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;
        string obsolute = string.Empty;
        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }

            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
                    dbQry = "SELECT ItemCode FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " AND ProductName='" + prodName + "' and tblBrand.IsActive = 'YES' and tblProductMaster.IsActive = 'YES' Order By ItemCode Asc";
                }
                else
                {
                    dbQry = "SELECT ItemCode FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductName='" + prodName + "' Order By ItemCode Asc";
                }
            }
            else
            {
                dbQry = "SELECT ItemCode FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductName='" + prodName + "' Order By ItemCode Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListBrandsForProductName(string prodName, string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        string obsolute = string.Empty;
        DataSet dsd = new DataSet();

        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }
            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
                    dbQry = "SELECT Distinct ProductDesc FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " AND ProductName='" + prodName + "' and tblBrand.IsActive = 'YES' and tblProductMaster.IsActive = 'YES' Order By ProductDesc Asc";
                }
                else
                {
                    dbQry = "SELECT Distinct ProductDesc FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductName='" + prodName + "' Order By ProductDesc Asc";
                }
            }
            else
            {
                dbQry = "SELECT Distinct ProductDesc FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductName='" + prodName + "' Order By ProductDesc Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListModelsForProductName(string prodName, string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsd = new DataSet();
        string obsolute = string.Empty;

        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }

            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
                    dbQry = "SELECT Distinct Model FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " AND ProductName='" + prodName + "' and tblBrand.IsActive = 'YES' and tblProductMaster.IsActive = 'YES' Order By Model Asc";
                }
                else
                {
                    dbQry = "SELECT Distinct Model FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductName='" + prodName + "' Order By Model Asc";
                }
            }
            else
            {
                dbQry = "SELECT Distinct Model FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductName='" + prodName + "' Order By Model Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListProdcutsForBrand(string brand, string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        string obsolute = string.Empty;
        DataSet dsd = new DataSet();

        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }

            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    dbQry = "SELECT ItemCode FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " AND ProductDesc='" + brand + "' and tblBrand.IsActive = 'YES' and tblProductMaster.IsActive = 'YES'  Order By ItemCode Asc";
                }
                else
                {
                    dbQry = "SELECT ItemCode FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductDesc='" + brand + "' Order By ItemCode Asc";
                }
            }
            else
            {
                dbQry = "SELECT ItemCode FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductDesc='" + brand + "' Order By ItemCode Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListProdcutNameForBrand(string brand, string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string obsolute = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsd = new DataSet();
        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }

            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
                    dbQry = "SELECT Distinct ProductName,ItemCode FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " AND ProductDesc='" + brand + "' and tblBrand.IsActive = 'YES' and tblProductMaster.IsActive = 'YES' Order By ProductName Asc";
                }
                else
                {
                    dbQry = "SELECT Distinct ProductName,ItemCode FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductDesc='" + brand + "' Order By ProductName Asc";
                }
            }
            else
            {
                dbQry = "SELECT Distinct ProductName,ItemCode FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductDesc='" + brand + "' Order By ProductName Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public DataSet ListModelsForBrand(string brand, string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsd = new DataSet();
        string obsolute = string.Empty;

        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }
            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
                    dbQry = "SELECT Distinct Model FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " AND ProductDesc ='" + brand + "' and tblProductMaster.IsActive = 'YES' and tblBrand.IsActive = 'YES' Order By Model Asc";
                }
                else
                {
                    dbQry = "SELECT Distinct Model FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductDesc ='" + brand + "' Order By Model Asc";
                }
            }
            else
            {
                dbQry = "SELECT Distinct Model FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductDesc ='" + brand + "' Order By Model Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListProdcutsForModel(string model, string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        string obsolute = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;
        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }

            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    dbQry = "SELECT Distinct ItemCode,ProductName FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " AND Model='" + model + "' and tblBrand.IsActive = 'YES' and tblProductMaster.IsActive = 'YES' Order By ItemCode Asc";
                }
                else
                {
                    dbQry = "SELECT Distinct ItemCode,ProductName FROM tblProductMaster Where CategoryID=" + CategoryID + " AND Model='" + model + "' Order By ItemCode Asc";
                }
            }
            else
            {
                dbQry = "SELECT Distinct ItemCode,ProductName FROM tblProductMaster Where CategoryID=" + CategoryID + " AND Model='" + model + "' Order By ItemCode Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListProductsForItemCode(string ItemCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;



        //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
        dbQry = "SELECT Distinct ItemCode FROM tblProductMaster Where ItemCode='" + ItemCode + "' Order By ItemCode Asc";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetAllCustCreditData()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            //dbQry.Append("SELECT SUM(tblDayBook.Amount) as Amount,tblLedger.OpenbalanceCR, tblLedger.LedgerName as Creditor,tblDayBook.CreditorID ");
            //dbQry.Append(" FROM ((tblDayBook LEFT JOIN tblLedger ON tblDayBook.CreditorID = tblLedger.LedgerID)");
            //dbQry.Append(" LEFT JOIN tblGroups ON tblGroups.GroupID = tblLedger.GroupID)");
            ////dbQry.Append(" Where tblDayBook.Amount is not null AND tblDayBook.DebtorID <> 0 AND");
            //dbQry.Append(" Where tblDayBook.Amount is not null AND ");
            //dbQry.Append(" tblGroups.GroupName = 'Sundry Debtors' AND (NOT EXISTS (SELECT ReceiptNo FROM tblReceivedAmount R WHERE (ReceiptNo = tblDayBook.TransNo))) Group By tblLedger.LedgerName,tblDayBook.CreditorID,tblLedger.OpenbalanceCR");
            //dbQry.Append(" ORDER BY tblLedger.LedgerName");

            dbQry.Append("SELECT Sum(tblDayBook.Amount) - Sum(iif(isnull(R.ramount),0,R.ramount )) AS Amount, tblLedger.OpenbalanceCR, tblLedger.LedgerName AS Creditor, tblDayBook.CreditorID ");
            dbQry.Append(" FROM ((tblDayBook LEFT JOIN tblLedger ON tblDayBook.CreditorID = tblLedger.LedgerID) LEFT JOIN tblGroups ON tblLedger.GroupID = tblGroups.GroupID) LEFT JOIN (SELECT ");
            dbQry.Append(" ReceiptNo,sum(Amount) as ramount FROM tblReceivedAmount  group by ReceiptNo )  AS R ON tblDayBook.TransNo = R.ReceiptNo");
            dbQry.Append(" WHERE (((tblDayBook.Amount) Is Not Null) AND ((tblGroups.GroupName)='Sundry Debtors'))");
            dbQry.Append(" GROUP BY tblLedger.OpenbalanceCR, tblLedger.LedgerName, tblDayBook.CreditorID");
            dbQry.Append(" having Sum(tblDayBook.Amount) - Sum(iif(isnull(R.ramount),0,R.ramount )) > 0 ORDER BY tblLedger.LedgerName ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetAllCustCreditDataNew()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            //dbQry.Append("SELECT SUM(tblDayBook.Amount) as Amount,tblLedger.OpenbalanceCR, tblLedger.LedgerName as Creditor,tblDayBook.CreditorID ");
            //dbQry.Append(" FROM ((tblDayBook LEFT JOIN tblLedger ON tblDayBook.CreditorID = tblLedger.LedgerID)");
            //dbQry.Append(" LEFT JOIN tblGroups ON tblGroups.GroupID = tblLedger.GroupID)");
            ////dbQry.Append(" Where tblDayBook.Amount is not null AND tblDayBook.DebtorID <> 0 AND");
            //dbQry.Append(" Where tblDayBook.Amount is not null AND ");
            //dbQry.Append(" tblGroups.GroupName = 'Sundry Debtors' AND (NOT EXISTS (SELECT ReceiptNo FROM tblReceivedAmount R WHERE (ReceiptNo = tblDayBook.TransNo))) Group By tblLedger.LedgerName,tblDayBook.CreditorID,tblLedger.OpenbalanceCR");
            //dbQry.Append(" ORDER BY tblLedger.LedgerName");

            dbQry.Append("SELECT Sum(tblDayBook.Amount) - Sum(iif(isnull(R.ramount),0,R.ramount )) AS Amount, tblLedger.OpenbalanceCR, tblLedger.LedgerName AS Creditor, tblDayBook.CreditorID ");
            dbQry.Append(" FROM ((tblDayBook LEFT JOIN tblLedger ON tblDayBook.CreditorID = tblLedger.LedgerID) LEFT JOIN tblGroups ON tblLedger.GroupID = tblGroups.GroupID) LEFT JOIN (SELECT ");
            dbQry.Append(" ReceiptNo,sum(Amount) as ramount FROM tblReceivedAmount  group by ReceiptNo )  AS R ON tblDayBook.TransNo = R.ReceiptNo");
            dbQry.Append(" WHERE (((tblDayBook.Amount) Is Not Null) AND ((tblGroups.GroupName)='Sundry Debtors'))");
            dbQry.Append(" GROUP BY tblLedger.OpenbalanceCR, tblLedger.LedgerName, tblDayBook.CreditorID");
            dbQry.Append(" having Sum(tblDayBook.Amount) - Sum(iif(isnull(R.ramount),0,R.ramount )) > 0 ORDER BY tblLedger.LedgerName ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetAllReceivedAmountNew()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT SUM(tblReceivedAmount.Amount) as Amount,tblLedger.OpenbalanceCR, tblLedger.LedgerName as Creditor,tblDayBook.CreditorID,tblReceivedAmount.BillNo ");
            dbQry.Append(" FROM (((tblDayBook LEFT JOIN tblLedger ON tblDayBook.CreditorID = tblLedger.LedgerID)");
            dbQry.Append(" LEFT JOIN tblGroups ON tblGroups.GroupID = tblLedger.GroupID) LEFT OUTER JOIN tblReceivedAmount ON tblReceivedAmount.ReceiptNo = tblDayBook.TransNo) ");
            //dbQry.Append(" Where tblDayBook.Amount is not null AND tblDayBook.DebtorID <> 0 AND");
            dbQry.Append(" Where tblDayBook.Amount is not null AND ");
            //dbQry.Append(" tblGroups.GroupName = 'Sundry Debtors' AND (EXISTS (SELECT ReceiptNo FROM tblReceivedAmount R WHERE (ReceiptNo = tblDayBook.TransNo))) Group By tblLedger.LedgerName,tblDayBook.CreditorID,tblLedger.OpenbalanceCR,tblReceivedAmount.BillNo");
            dbQry.Append(" tblGroups.GroupName = 'Sundry Debtors' Group By tblLedger.LedgerName,tblDayBook.CreditorID,tblLedger.OpenbalanceCR,tblReceivedAmount.BillNo HAVING SUM(tblReceivedAmount.Amount) >= 0");
            dbQry.Append(" ORDER BY tblLedger.LedgerName");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetAllReceivedAmount()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT SUM(tblReceivedAmount.Amount) as Amount,tblLedger.OpenbalanceCR, tblLedger.LedgerName as Creditor,tblDayBook.CreditorID,tblReceivedAmount.BillNo ");
            dbQry.Append(" FROM (((tblDayBook LEFT JOIN tblLedger ON tblDayBook.CreditorID = tblLedger.LedgerID)");
            dbQry.Append(" LEFT JOIN tblGroups ON tblGroups.GroupID = tblLedger.GroupID) LEFT OUTER JOIN tblReceivedAmount ON tblReceivedAmount.ReceiptNo = tblDayBook.TransNo) ");
            //dbQry.Append(" Where tblDayBook.Amount is not null AND tblDayBook.DebtorID <> 0 AND");
            dbQry.Append(" Where tblDayBook.Amount is not null AND ");
            //dbQry.Append(" tblGroups.GroupName = 'Sundry Debtors' AND (EXISTS (SELECT ReceiptNo FROM tblReceivedAmount R WHERE (ReceiptNo = tblDayBook.TransNo))) Group By tblLedger.LedgerName,tblDayBook.CreditorID,tblLedger.OpenbalanceCR,tblReceivedAmount.BillNo");
            dbQry.Append(" tblGroups.GroupName = 'Sundry Debtors' Group By tblLedger.LedgerName,tblDayBook.CreditorID,tblLedger.OpenbalanceCR,tblReceivedAmount.BillNo HAVING SUM(tblReceivedAmount.Amount) >= 0");
            dbQry.Append(" ORDER BY tblLedger.LedgerName");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetAllCustDebitData(string customer, string executive, string model, string brand, string category)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblDayBook.Amount,tblDayBook.TransNo,tblDayBook.TransDate,tblSales.executive,tblSalesItems.BillNo,tblCategories.CategoryName, tblDayBook.VoucherType,tblLedger.LedgerName as Customer,tblLedger.LedgerName,tblDayBook.DebtorID,tblDayBook.CreditorID,tblSalesItems.ItemCode, ");

            dbQry.Append(" tblProductMaster.ProductDesc,tblProductMaster.Model, tblSalesItems.Qty * tblSalesItems.Rate AS NetRate, ");

            dbQry.Append(" tblSalesItems.Rate AS SRate, tblSalesItems.Qty AS Quantity, ");
            /*March 21*/
            dbQry.Append(" (tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) AS SalesDiscount,");

            dbQry.Append(" ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) AS ActualDiscount,");

            dbQry.Append(" (tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate))) AS SumVAT, ");

            dbQry.Append("  ((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100  AS ActualVAT, ");

            dbQry.Append(" (tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate))) AS SumCST, ");

            dbQry.Append(" ((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");

            dbQry.Append(" FROM (((((((tblDayBook LEFT JOIN tblSales ON tblDayBook.TransNo = tblSales.JournalId)");

            dbQry.Append(" LEFT JOIN tblSalesItems ON tblSalesItems.BillNo = tblSales.BillNo)");
            dbQry.Append(" LEFT JOIN tblProductMaster ON tblSalesItems.ItemCode = tblProductMaster.ItemCode)");
            dbQry.Append(" LEFT JOIN tblLedger ON tblDayBook.DebtorID = tblLedger.LedgerID)");
            dbQry.Append(" LEFT JOIN tblGroups ON tblGroups.GroupID = tblLedger.GroupID)");
            dbQry.Append(" LEFT JOIN tblEmployee ON tblSales.executive = tblEmployee.empno)");
            dbQry.Append(" LEFT JOIN tblCategories  ON tblCategories.CategoryID = tblProductMaster.CategoryID)");
            dbQry.Append(" Where tblDayBook.DebtorID Not IN (1,2,3,4) AND tblDayBook.Amount is not null AND tblDayBook.DebtorID <> 0 AND");
            dbQry.Append(" tblGroups.GroupName = 'Sundry Debtors'");

            if (customer != "0")
                dbQry.Append(" AND tblDayBook.DebtorID = " + customer + "");

            if (executive != "0")
                dbQry.Append(" AND tblSales.Executive = '" + executive + "'");

            if (model != "0")
                dbQry.Append(" AND tblProductMaster.Model = '" + model + "'");

            if (brand != "0")
                dbQry.Append(" AND tblProductMaster.ProductDesc = '" + brand + "'");

            if (category != "0")
                dbQry.Append(" AND tblCategories.CategoryId = " + category + "");

            dbQry.Append(" ORDER BY tblDayBook.DebtorID,tblDayBook.TransDate Asc ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetCustomerDebtInfo(string customerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblDayBook.DebtorID, tblDayBook.TransDate, tblDayBook.Amount,tblSales.BillNo, tblDayBook.VoucherType ");
            dbQry.Append(" FROM (tblDayBook LEFT OUTER JOIN tblSales ON tblSales.JournalID = tblDayBook.TransNo) Where DebtorID = " + customerID + "");
            dbQry.Append(" ORDER BY tblDayBook.TransDate Asc ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            manager.Dispose();

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetCustomerReceivedAmount(string customerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT SUM(tblReceivedAmount.Amount) as Amount,tblReceivedAmount.BillNo ");
            dbQry.Append(" FROM tblDayBook INNER JOIN tblReceivedAmount ON tblReceivedAmount.ReceiptNo = tblDayBook.TransNo");
            dbQry.AppendFormat(" Where tblDayBook.CreditorID = {0} Group By tblDayBook.CreditorID,tblReceivedAmount.BillNo", customerID);
            dbQry.Append(" ORDER BY tblReceivedAmount.BillNo Asc");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetCustomerCreditInfo(string customerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT CreditorID,TransDate,Amount ");
            dbQry.Append(" FROM tblDayBook Where CreditorID = " + customerID + "");
            dbQry.Append(" AND (NOT EXISTS (SELECT ReceiptNo FROM tblReceivedAmount R WHERE (ReceiptNo = tblDayBook.TransNo)))");
            dbQry.Append(" ORDER BY tblDayBook.TransDate Asc ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            manager.Dispose();

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public DataSet GetCustDebitData()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblDayBook.Amount,tblDayBook.TransNo,tblDayBook.TransDate,tblSales.executive,tblSalesItems.BillNo,tblCategories.CategoryName, tblDayBook.VoucherType,tblLedger.LedgerName as Customer,tblLedger.LedgerName,tblDayBook.DebtorID,tblDayBook.CreditorID,tblSalesItems.ItemCode, ");

            dbQry.Append(" tblProductMaster.ProductDesc,tblProductMaster.Model, tblSalesItems.Qty * tblSalesItems.Rate AS NetRate, ");

            dbQry.Append(" tblSalesItems.Rate AS SRate, tblSalesItems.Qty AS Quantity, ");
            /*March 21*/
            dbQry.Append(" (tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) AS SalesDiscount,");

            dbQry.Append(" ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) AS ActualDiscount,");

            dbQry.Append(" (tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate))) AS SumVAT, ");

            dbQry.Append("  ((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100  AS ActualVAT, ");

            dbQry.Append(" ((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)");

            dbQry.Append(" + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) ");

            dbQry.Append(" + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)) as ItemTotal, ");

            //dbQry.Append(" (tblLedger.OpenbalanceDR - tblLedger.OpenbalanceCR) as OpeningBalance,");

            dbQry.Append(" tblLedger.OpenbalanceDR,");

            dbQry.Append(" (tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate))) AS SumCST, ");

            dbQry.Append(" ((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");

            dbQry.Append(" FROM (((((((tblDayBook LEFT JOIN tblSales ON tblDayBook.TransNo = tblSales.JournalId)");

            dbQry.Append(" LEFT JOIN tblSalesItems ON tblSalesItems.BillNo = tblSales.BillNo)");
            dbQry.Append(" LEFT JOIN tblProductMaster ON tblSalesItems.ItemCode = tblProductMaster.ItemCode)");
            dbQry.Append(" LEFT JOIN tblLedger ON tblDayBook.DebtorID = tblLedger.LedgerID)");
            dbQry.Append(" LEFT JOIN tblGroups ON tblGroups.GroupID = tblLedger.GroupID)");
            dbQry.Append(" LEFT JOIN tblEmployee ON tblSales.executive = tblEmployee.empno)");
            dbQry.Append(" LEFT JOIN tblCategories  ON tblCategories.CategoryID = tblProductMaster.CategoryID ) ");
            dbQry.Append(" Where tblDayBook.Amount is not null AND tblDayBook.DebtorID <> 0 AND");
            dbQry.Append(" tblGroups.GroupName = 'Sundry Debtors' ");

            dbQry.Append(" GROUP BY tblDayBook.Amount, tblDayBook.TransNo, tblDayBook.TransDate, tblSales.Executive, tblSalesItems.BillNo, tblCategories.CategoryName, tblDayBook.VoucherType, tblLedger.LedgerName, tblLedger.LedgerName, tblDayBook.DebtorID, tblDayBook.CreditorID, tblSalesItems.ItemCode,");

            dbQry.Append(" tblProductMaster.ProductDesc, tblProductMaster.Model, tblSalesItems.Qty * tblSalesItems.Rate, tblSalesItems.Rate, tblSalesItems.Qty,  ");

            dbQry.Append(" tblSalesItems.Qty * tblSalesItems.Rate - tblSalesItems.Discount / 100 * tblSalesItems.Qty * tblSalesItems.Rate,tblSalesItems.Discount / 100 * tblSalesItems.Qty * tblSalesItems.Rate,  ");
            /*March 21*/
            dbQry.Append(" tblSalesItems.Qty * tblSalesItems.Rate - tblSalesItems.Discount / 100 * tblSalesItems.Qty * tblSalesItems.Rate + (tblSalesItems.Vat / 100) * (tblSalesItems.Qty * tblSalesItems.Rate - tblSalesItems.Discount / 100 * tblSalesItems.Qty * tblSalesItems.Rate), ");

            dbQry.Append(" (tblSalesItems.Qty * tblSalesItems.Rate - tblSalesItems.Discount / 100 * tblSalesItems.Qty * tblSalesItems.Rate) * tblSalesItems.Vat / 100,tblSalesItems.Qty * tblSalesItems.Rate - tblSalesItems.Discount / 100 * tblSalesItems.Qty * tblSalesItems.Rate + (tblSalesItems.Qty * tblSalesItems.Rate - tblSalesItems.Discount / 100 * tblSalesItems.Qty * tblSalesItems.Rate)");

            dbQry.Append(" * tblSalesItems.Vat / 100 + (tblSalesItems.Qty * tblSalesItems.Rate - tblSalesItems.Discount / 100 * tblSalesItems.Qty * tblSalesItems.Rate) * tblSalesItems.CST / 100, tblLedger.OpenBalanceDR, ");

            dbQry.Append(" tblSalesItems.Qty * tblSalesItems.Rate - tblSalesItems.Discount / 100 * tblSalesItems.Qty * tblSalesItems.Rate + (tblSalesItems.CST / 100) * (tblSalesItems.Qty * tblSalesItems.Rate - tblSalesItems.Discount / 100 * tblSalesItems.Qty * tblSalesItems.Rate), ");

            dbQry.Append(" (tblSalesItems.Qty * tblSalesItems.Rate - tblSalesItems.Discount / 100 * tblSalesItems.Qty * tblSalesItems.Rate) * tblSalesItems.CST / 100, tblSales.Freight, tblSales.LoadUnLoad ");

            dbQry.Append(" ORDER BY tblDayBook.DebtorID,tblDayBook.TransDate Asc ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetCustDebitDataNew()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            //dbQry.Append("SELECT tblLedger.LedgerName,sum(tblDayBook.Amount) as Total, ");

            //dbQry.Append(" tblLedger.OpenbalanceDR");

            //dbQry.Append(" FROM ((tblDayBook LEFT JOIN tblLedger ON tblDayBook.DebtorID = tblLedger.LedgerID)");

            //dbQry.Append(" LEFT JOIN tblGroups ON tblGroups.GroupID = tblLedger.GroupID)");

            //dbQry.Append(" Where tblDayBook.Amount is not null AND tblDayBook.DebtorID <> 0 AND");
            //dbQry.Append(" tblGroups.GroupName = 'Sundry Debtors' ");

            //dbQry.Append(" GROUP BY tblLedger.LedgerName,tblLedger.OpenbalanceDR");


            dbQry.Append("SELECT tblDayBook.Amount,tblDayBook.TransNo,tblDayBook.TransDate,tblSales.executive,tblSalesItems.BillNo,tblCategories.CategoryName, tblDayBook.VoucherType,tblLedger.LedgerName as Customer,tblLedger.LedgerName,tblDayBook.DebtorID,tblDayBook.CreditorID,tblSalesItems.ItemCode, ");

            dbQry.Append(" tblProductMaster.ProductDesc,tblProductMaster.Model, tblSalesItems.Qty * tblSalesItems.Rate AS NetRate, ");

            dbQry.Append(" tblSalesItems.Rate AS SRate, tblSalesItems.Qty AS Quantity, ");
            /*March 21*/
            dbQry.Append(" (tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) AS SalesDiscount,");

            dbQry.Append(" ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) AS ActualDiscount,");

            dbQry.Append(" (tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate))) AS SumVAT, ");

            dbQry.Append("  ((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100  AS ActualVAT, ");

            dbQry.Append(" ((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)");

            dbQry.Append(" + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) ");

            dbQry.Append(" + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)) as ItemTotal, ");

            //dbQry.Append(" (tblLedger.OpenbalanceDR - tblLedger.OpenbalanceCR) as OpeningBalance,");

            dbQry.Append(" tblLedger.OpenbalanceDR,");

            dbQry.Append(" (tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate))) AS SumCST, ");

            dbQry.Append(" ((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");

            dbQry.Append(" FROM (((((((tblDayBook LEFT JOIN tblSales ON tblDayBook.TransNo = tblSales.JournalId)");

            dbQry.Append(" LEFT JOIN tblSalesItems ON tblSalesItems.BillNo = tblSales.BillNo)");
            dbQry.Append(" LEFT JOIN tblProductMaster ON tblSalesItems.ItemCode = tblProductMaster.ItemCode)");
            dbQry.Append(" LEFT JOIN tblLedger ON tblDayBook.DebtorID = tblLedger.LedgerID)");
            dbQry.Append(" LEFT JOIN tblGroups ON tblGroups.GroupID = tblLedger.GroupID)");
            dbQry.Append(" LEFT JOIN tblEmployee ON tblSales.executive = tblEmployee.empno)");
            dbQry.Append(" LEFT JOIN tblCategories  ON tblCategories.CategoryID = tblProductMaster.CategoryID ) ");
            dbQry.Append(" Where tblDayBook.Amount is not null AND tblDayBook.DebtorID <> 0 AND");
            dbQry.Append(" tblGroups.GroupName = 'Sundry Debtors' ");

            dbQry.Append(" GROUP BY tblDayBook.Amount, tblDayBook.TransNo, tblDayBook.TransDate, tblSales.Executive, tblSalesItems.BillNo, tblCategories.CategoryName, tblDayBook.VoucherType, tblLedger.LedgerName, tblLedger.LedgerName, tblDayBook.DebtorID, tblDayBook.CreditorID, tblSalesItems.ItemCode,");

            dbQry.Append(" tblProductMaster.ProductDesc, tblProductMaster.Model, tblSalesItems.Qty * tblSalesItems.Rate, tblSalesItems.Rate, tblSalesItems.Qty,  ");

            dbQry.Append(" tblSalesItems.Qty * tblSalesItems.Rate - tblSalesItems.Discount / 100 * tblSalesItems.Qty * tblSalesItems.Rate,tblSalesItems.Discount / 100 * tblSalesItems.Qty * tblSalesItems.Rate,  ");
            /*March 21*/
            dbQry.Append(" tblSalesItems.Qty * tblSalesItems.Rate - tblSalesItems.Discount / 100 * tblSalesItems.Qty * tblSalesItems.Rate + (tblSalesItems.Vat / 100) * (tblSalesItems.Qty * tblSalesItems.Rate - tblSalesItems.Discount / 100 * tblSalesItems.Qty * tblSalesItems.Rate), ");

            dbQry.Append(" (tblSalesItems.Qty * tblSalesItems.Rate - tblSalesItems.Discount / 100 * tblSalesItems.Qty * tblSalesItems.Rate) * tblSalesItems.Vat / 100,tblSalesItems.Qty * tblSalesItems.Rate - tblSalesItems.Discount / 100 * tblSalesItems.Qty * tblSalesItems.Rate + (tblSalesItems.Qty * tblSalesItems.Rate - tblSalesItems.Discount / 100 * tblSalesItems.Qty * tblSalesItems.Rate)");

            dbQry.Append(" * tblSalesItems.Vat / 100 + (tblSalesItems.Qty * tblSalesItems.Rate - tblSalesItems.Discount / 100 * tblSalesItems.Qty * tblSalesItems.Rate) * tblSalesItems.CST / 100, tblLedger.OpenBalanceDR, ");

            dbQry.Append(" tblSalesItems.Qty * tblSalesItems.Rate - tblSalesItems.Discount / 100 * tblSalesItems.Qty * tblSalesItems.Rate + (tblSalesItems.CST / 100) * (tblSalesItems.Qty * tblSalesItems.Rate - tblSalesItems.Discount / 100 * tblSalesItems.Qty * tblSalesItems.Rate), ");

            dbQry.Append(" (tblSalesItems.Qty * tblSalesItems.Rate - tblSalesItems.Discount / 100 * tblSalesItems.Qty * tblSalesItems.Rate) * tblSalesItems.CST / 100, tblSales.Freight, tblSales.LoadUnLoad ");

            dbQry.Append(" ORDER BY tblDayBook.DebtorID,tblDayBook.TransDate Asc ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GenerateComplaints(string connection, string customer, string assignedTo, string status, DateTime sDate, DateTime eDate, string isBilled)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = "select ComplaintID,ComplaintDetails, ComplaintStatus,ComplaintDate,IsBilled,empFirstName+ ' ' + empSurName as AssignedTo, tblLedger.LedgerName as CustomerName from ((tblComplaint inner join tblLedger on tblLedger.LedgerID = tblComplaint.CustomerID) Left join tblEmployee On tblEmployee.EmpNo = tblComplaint.AssignedTo) WHERE (ComplaintDate >=#" + sDate.ToString("MM/dd/yyyy") + "# AND ComplaintDate <=#" + eDate.ToString("MM/dd/yyyy") + "#) ";

        if (customer != "0")
        {
            dbQry = dbQry + " AND CustomerID =" + customer;
        }
        if (status != "0")
        {
            dbQry = dbQry + " AND ComplaintStatus ='" + status + "' ";
        }
        if (assignedTo != "0")
        {
            dbQry = dbQry + " AND AssignedTo= " + assignedTo;
        }
        if (isBilled != "0")
        {
            dbQry = dbQry + " AND IsBilled= '" + isBilled + "'";
        }


        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    //*************************************** CustomerReport *******************************************
    public DataSet getCustomers()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("select LedgerName,AliasName,ContactName,Add1 As Address,TINnumber,CreditLimit,IIf((IsNull(OpenBalanceDR) or OpenBalanceDR=0),IIf((IsNull(OpenBalanceCR) or OpenBalanceCR=0) ,'',OpenBalanceCR & ' CR'),OpenBalanceDR & ' DR') As OpenBal,Phone,LedgerCategory, LedgerCategory,tblEmployee.empFirstName As ExecutiveIncharge,Mobile,CreditDays from tblledger,tblEmployee where  groupid =1 And tblLedger.GroupID=tblEmployee.empno");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    //*************************************** SupplierReport *******************************************
    public DataSet getSuppliers()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("select LedgerName,AliasName,ContactName,Add1 As Address,TINnumber,CreditLimit,IIf((IsNull(OpenBalanceDR) or OpenBalanceDR=0),IIf((IsNull(OpenBalanceCR) or OpenBalanceCR=0) ,'',OpenBalanceCR & ' CR'),OpenBalanceDR & ' DR') As OpenBal,Phone,LedgerCategory, LedgerCategory,tblEmployee.empFirstName As ExecutiveIncharge,Mobile,CreditDays from tblledger,tblEmployee where  groupid =2 And tblLedger.GroupID=tblEmployee.empno");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    //*************************************** Payments Report *******************************************
    public DataSet getPayments(string selColumn, string condtion, string groupBy,string username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQry3 = string.Empty;
        DataSet dsd = new DataSet();

        string managerid = string.Empty;
        bool defaultid;


        dbQry3 = "SELECT Username,BranchCheck,DefaultBranch from tblUserInfo  WHERE tblUserinfo.Username='" + username + "'";
        manager.Open();
        dsd = manager.ExecuteDataSet(CommandType.Text, dbQry3);

        if (dsd.Tables[0].Rows.Count > 0)
            managerid = Convert.ToString(dsd.Tables[0].Rows[0]["DefaultBranch"].ToString());
           defaultid =Convert.ToBoolean(dsd.Tables[0].Rows[0]["Branchcheck"]);

           if (defaultid == true)
           {

               //dbQry = ("SELECT tblDayBook.RefNo, Mid(tblDayBook.TransDate,1,9) As TransDate, tblDayBook.DebtorID As PaidTo, IIf(IsNull(tblDayBook.ChequeNo),tblDayBook.CreditCardNo,tblDayBook.ChequeNo) AS PaymentMode, '' as BankName, tblDayBook.Amount, tblDayBook.Narration FROM tblDayBook,tblLedger WHERE ((tblDayBook.[TransDate]) Between CDate('" + StartDate + "') And CDate('" + EndDate + "')) and (((tblDayBook.VoucherType)='Payment')) And ((tblLedger.GroupID)=" + Convert.ToInt32(Categorys) + ") And ((tblLedger.LedgerName)='" + Brands + "')");
               dbQry = ("SELECT " + selColumn + ", (tblDayBook.Amount) As Amount,tblDaybook.BranchCode  FROM tblDayBook,tblLedger where tblDayBook.DebtorID = tblLedger.LedgerID and (tblDayBook.VoucherType='Payment') " + condtion + groupBy);
           }
           else
           {
               dbQry = ("SELECT " + selColumn + ", (tblDayBook.Amount) As Amount,tblDaybook.BranchCode  FROM tblDayBook,tblLedger where  tblDayBook.DebtorID = tblLedger.LedgerID and (tblDayBook.VoucherType='Payment') and tbldayBook.BranchCode='"+managerid +"' " + condtion + groupBy);
           }
        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet getSubCategorys()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("SELECT Distinct(tl.LedgerID),LedgerName from tblLedger tl,tblDayBook tb where tl.LedgerID=tb.DebtorID and tl.GroupID= " + Convert.ToInt32(Categorys) + "");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    //*************************************** Receipt Report *******************************************
    public DataSet getRceipts(string selColumn, string condtion, string groupBy,string username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQry3 = string.Empty;
        DataSet dsd = new DataSet();

        string managerid = string.Empty;
        bool defaultid;


        dbQry3 = "SELECT Username,BranchCheck,DefaultBranch from tblUserInfo  WHERE tblUserinfo.Username='" + username + "'";
        manager.Open();
        dsd = manager.ExecuteDataSet(CommandType.Text, dbQry3);

        if (dsd.Tables[0].Rows.Count > 0)
            managerid = Convert.ToString(dsd.Tables[0].Rows[0]["DefaultBranch"].ToString());
        defaultid = Convert.ToBoolean(dsd.Tables[0].Rows[0]["Branchcheck"]);

        if (defaultid == true)
        {
            //dbQry = ("SELECT tblDayBook.RefNo, Mid(tblDayBook.TransDate,1,9) As TransDate, tblDayBook.DebtorID, IIf(IsNull(tblDayBook.ChequeNo),tblDayBook.CreditCardNo,tblDayBook.ChequeNo) AS PaymentMode, '' as BankName, tblDayBook.Amount, tblDayBook.Narration FROM tblDayBook,tblLedger WHERE ((tblDayBook.[TransDate]) Between CDate('" + StartDate + "') And CDate('" + EndDate + "')) and (((tblDayBook.VoucherType)='Receipt')) And tblDayBook.DebtorID=tblLedger.LedgerID ORDER BY tblDayBook.TransDate");
            dbQry = ("SELECT " + selColumn + ",(tblDayBook.Amount) As Amount,tblDaybook.BranchCode  FROM tblDayBook,tblLedger where tblDayBook.CreditorID = tblLedger.LedgerID and (((tblDayBook.VoucherType)='Receipt'))" + condtion + groupBy);
        }
        else
        {
            dbQry = ("SELECT " + selColumn + ",(tblDayBook.Amount) As Amount,tblDaybook.BranchCode  FROM tblDayBook,tblLedger where tblDayBook.CreditorID = tblLedger.LedgerID and (((tblDayBook.VoucherType)='Receipt')) and tbldayBook.BranchCode='" + managerid + "' " + condtion + groupBy);
        }
        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet getSubCategory()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("SELECT Distinct(tl.LedgerID),LedgerName from tblLedger tl,tblDayBook tb where tl.LedgerID=tb.CreditorID and tl.GroupID= " + Convert.ToInt32(Categorys) + "");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    //*************************************** Journal Report *******************************************
    public DataSet getJournals(string username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        SqlConnection oleConn, oleSubConn;
        double sAmount = 0;
        double sTransNo = 0;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        DataSet dsChildQry;
        DataSet dsChildQry2;
        string sNarration = string.Empty;
        string pQry = string.Empty;
        string jQry = string.Empty;
        string sTranDate = string.Empty;
        int sRefno = 0;
        string sDebtor = string.Empty;
        string sCreditor = string.Empty;
        string dbQry3 = string.Empty;
        DataSet dsd = new DataSet();

        string managerid = string.Empty;
        bool defaultid;


        dbQry3 = "SELECT Username,BranchCheck,DefaultBranch from tblUserInfo  WHERE tblUserinfo.Username='" + username + "'";
        manager.Open();
        dsd = manager.ExecuteDataSet(CommandType.Text, dbQry3);

        if (dsd.Tables[0].Rows.Count > 0)
            managerid = Convert.ToString(dsd.Tables[0].Rows[0]["DefaultBranch"].ToString());
        defaultid = Convert.ToBoolean(dsd.Tables[0].Rows[0]["Branchcheck"]);

        if (defaultid == true)
        {


            dbQry = ("select RefNo,TransDate,TransNo,CreditorID As Creditor,DebtorID As Debtor,Amount,Narration,tbldaybook.BranchCode from tbldaybook where VoucherType='Journal' and TransDate >='" + StartDate + "' and TransDate <='" + EndDate + "' order by TransDate");
        }
        else
        {
            dbQry = ("select RefNo,TransDate,TransNo,CreditorID As Creditor,DebtorID As Debtor,Amount,Narration,tbldaybook.BranchCode from tbldaybook where tblDatBook.BranchCode='" + managerid + "' VoucherType='Journal' and TransDate >='" + StartDate + "' and TransDate <='" + EndDate + "' order by TransDate");
        }
        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);


            DataSet dst;
            DataTable dt;
            DataRow drNew;
            DataColumn dc;

            dst = new DataSet();
            dt = new DataTable();
            dc = new DataColumn("RefNo");
            dt.Columns.Add(dc);

            dc = new DataColumn("TransNo");
            dt.Columns.Add(dc);

            dc = new DataColumn("TransDate");
            dt.Columns.Add(dc);

            dc = new DataColumn("Creditor");
            dt.Columns.Add(dc);

            dc = new DataColumn("Debtor");
            dt.Columns.Add(dc);

            dc = new DataColumn("Amount");
            dt.Columns.Add(dc);

            dc = new DataColumn("Narration");
            dt.Columns.Add(dc);

            dc = new DataColumn("BranchCode");
            dt.Columns.Add(dc);

            dst.Tables.Add(dt);

            foreach (DataRow dr in ds.Tables[0].Rows)
            {
                if (dr["TransDate"] != null)
                {
                    sTranDate = Convert.ToDateTime(dr["TransDate"].ToString()).ToString("yyyy-MM-dd");
                }
                if (dr["Narration"] != null)
                {
                    sNarration = Convert.ToString(dr["Narration"].ToString());
                }
                if (dr["BranchCode"] != null)
                {
                    sNarration = Convert.ToString(dr["BranchCode"].ToString());
                }

                if (dr["Amount"] != null)
                {
                    sAmount = Convert.ToDouble(dr["Amount"]);
                }
                if (dr["TransNo"] != null)
                {
                    sTransNo = Convert.ToDouble(dr["TransNo"]);
                }
                if (dr["Refno"] != null)
                {
                    sRefno = Convert.ToInt32(dr["Refno"]);
                }
                if (dr["Debtor"] != null)
                {
                    if (dr["Debtor"].ToString() != "")
                    {
                        if (Convert.ToInt32(dr["Debtor"].ToString()) > 0)
                        {
                            pQry = "SELECT Ledgername,LedgerID FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(dr["Debtor"].ToString());
                        }
                    }
                }
                if (dr["Creditor"] != null)
                {
                    if (dr["Creditor"].ToString() != "")
                    {
                        if (Convert.ToInt32(dr["Creditor"].ToString()) > 0)
                        {
                            jQry = "SELECT Ledgername, LedgerID FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(dr["Creditor"].ToString());
                        }
                    }
                }

                if (pQry != "")
                {
                    dsChildQry = manager.ExecuteDataSet(CommandType.Text, pQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            sDebtor = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                }

                if (jQry != "")
                {
                    dsChildQry2 = manager.ExecuteDataSet(CommandType.Text, jQry);
                    if (dsChildQry2 != null)
                    {
                        if (dsChildQry2.Tables[0].Rows.Count > 0)
                        {
                            sCreditor = dsChildQry2.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                }

                drNew = dt.NewRow();
                drNew["RefNo"] = sRefno;
                drNew["TransNo"] = sTransNo;
                drNew["TransDate"] = sTranDate;
                drNew["Creditor"] = sCreditor;
                drNew["Debtor"] = sDebtor;
                drNew["Amount"] = sAmount;
                drNew["Narration"] = sNarration;
                drNew["BranchCode"] = sNarration;
                dst.Tables[0].Rows.Add(drNew);

            }



            if (dst.Tables[0].Rows.Count > 0)
                return dst;
            else
                return dst;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    //*************************************** Creditnote Report *******************************************
    public DataSet getCredits()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        //dbQry = ("SELECT tc.RefNo As RefNo,Mid(tc.NoteDate,1,10) As NoteDate,td.CreditorID As Creditor,tc.Amount As Amount,td.Narration FROM tblCreditDebitNote tc, tblDayBook td where tc.TransNo=td.TransNo and tc.CDType='Credit' and tc.NoteDate between CDate('" + StartDate + "') and CDate('" + EndDate + "') order by tc.NoteDate");

        //dbQry = ("SELECT tc.RefNo As RefNo,format(tc.NoteDate,'dd/mm/yyyy') As NoteDate,tl.ledgername As Creditor,tc.Amount As Amount,td.Narration FROM tblCreditDebitNote tc, tblDayBook td,tblledger tl where tc.TransNo=td.TransNo and td.CreditorID = tl.ledgerid and tc.CDType='Credit' and tc.NoteDate between CDate('" + StartDate + "') and CDate('" + EndDate + "') order by tc.NoteDate");

        dbQry = ("SELECT tc.RefNo As RefNo,format(tc.NoteDate,'dd/mm/yyyy') As NoteDate,tl.ledgername As Creditor,tc.Amount As Amount,td.Narration FROM tblCreditDebitNote tc, tblDayBook td,tblledger tl where tc.TransNo=td.TransNo and td.CreditorID = tl.ledgerid and tc.CDType='Credit' and tc.NoteDate >=#" + StartDate + "# AND tc.NoteDate<=#" + EndDate + "# order by tc.NoteDate");



        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet getCreditsNote(DateTime startDate, DateTime endDate,string username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQry3 = string.Empty;
        DataSet dsd = new DataSet();

        string managerid = string.Empty;
        bool defaultid;


        dbQry3 = "SELECT Username,BranchCheck,DefaultBranch from tblUserInfo  WHERE tblUserinfo.Username='" + username + "'";
        manager.Open();
        dsd = manager.ExecuteDataSet(CommandType.Text, dbQry3);

        if (dsd.Tables[0].Rows.Count > 0)
            managerid = Convert.ToString(dsd.Tables[0].Rows[0]["DefaultBranch"].ToString());
           defaultid =Convert.ToBoolean(dsd.Tables[0].Rows[0]["Branchcheck"]);

           if (defaultid == true)
           {

        //dbQry = ("SELECT tc.RefNo As RefNo,Mid(tc.NoteDate,1,10) As NoteDate,td.CreditorID As Creditor,tc.Amount As Amount,td.Narration FROM tblCreditDebitNote tc, tblDayBook td where tc.TransNo=td.TransNo and tc.CDType='Credit' and tc.NoteDate between CDate('" + StartDate + "') and CDate('" + EndDate + "') order by tc.NoteDate");

        //dbQry = ("SELECT tc.RefNo As RefNo,format(tc.NoteDate,'dd/mm/yyyy') As NoteDate,tl.ledgername As Creditor,tc.Amount As Amount,td.Narration FROM tblCreditDebitNote tc, tblDayBook td,tblledger tl where tc.TransNo=td.TransNo and td.CreditorID = tl.ledgerid and tc.CDType='Credit' and tc.NoteDate between CDate('" + StartDate + "') and CDate('" + EndDate + "') order by tc.NoteDate");

               dbQry = ("SELECT tc.RefNo As RefNo,tc.NoteDate,tl.ledgername As Creditor,tc.Amount As Amount,td.Narration,td.BranchCode FROM tblCreditDebitNote tc, tblDayBook td,tblledger tl where tc.TransNo=td.TransNo and td.CreditorID = tl.ledgerid and tc.CDType='Credit' and tc.NoteDate >='" + startDate.ToString("yyyy-MM-dd") + "' AND tc.NoteDate<='" + endDate.ToString("yyyy-MM-dd") + "' order by tc.NoteDate");

           }
           else
           {
               dbQry = ("SELECT tc.RefNo As RefNo,tc.NoteDate,tl.ledgername As Creditor,tc.Amount As Amount,td.Narration,td.BranchCode FROM tblCreditDebitNote tc, tblDayBook td,tblledger tl where tbldayBook.BranchCode='" + managerid + "' and tc.TransNo=td.TransNo and td.CreditorID = tl.ledgerid and tc.CDType='Credit' and tc.NoteDate >='" + startDate.ToString("yyyy-MM-dd") + "' AND tc.NoteDate<='" + endDate.ToString("yyyy-MM-dd") + "' order by tc.NoteDate");
           }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    //*************************************** Debitnote Report *******************************************
    public DataSet getDebits()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        //dbQry = ("SELECT tc.RefNo As RefNo,Mid(tc.NoteDate,1,9) As NoteDate,td.DebtorID As Debitor,tc.Amount As Amount,td.Narration FROM tblCreditDebitNote tc, tblDayBook td where tc.TransNo=td.TransNo and tc.CDType='Debit' and tc.NoteDate between CDate('" + StartDate + "') and CDate('" + EndDate + "') order by tc.NoteDate");

        dbQry = ("SELECT tc.RefNo As RefNo,format(tc.NoteDate,'dd/mm/yyyy') As NoteDate,tl.ledgername As Debitor,tc.Amount As Amount,td.Narration,td.BranchCode FROM tblCreditDebitNote tc, tblDayBook td,tblledger tl where tc.TransNo=td.TransNo and td.DebtorID = tl.ledgerid and tc.CDType='Debit' and tc.NoteDate between CDate('" + StartDate + "') and CDate('" + EndDate + "') order by tc.NoteDate");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet getDebitsNote(DateTime startDate, DateTime endDate,string username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
           string dbQry3 = string.Empty;
        DataSet dsd = new DataSet();

        string managerid = string.Empty;
        bool defaultid;


        dbQry3 = "SELECT Username,BranchCheck,DefaultBranch from tblUserInfo  WHERE tblUserinfo.Username='" + username + "'";
        manager.Open();
        dsd = manager.ExecuteDataSet(CommandType.Text, dbQry3);

        if (dsd.Tables[0].Rows.Count > 0)
            managerid = Convert.ToString(dsd.Tables[0].Rows[0]["DefaultBranch"].ToString());
           defaultid =Convert.ToBoolean(dsd.Tables[0].Rows[0]["Branchcheck"]);

           if (defaultid == true)
           {

        //dbQry = ("SELECT tc.RefNo As RefNo,Mid(tc.NoteDate,1,9) As NoteDate,td.DebtorID As Debitor,tc.Amount As Amount,td.Narration FROM tblCreditDebitNote tc, tblDayBook td where tc.TransNo=td.TransNo and tc.CDType='Debit' and tc.NoteDate between CDate('" + StartDate + "') and CDate('" + EndDate + "') order by tc.NoteDate");

               dbQry = ("SELECT tc.RefNo As RefNo,tc.NoteDate,tl.ledgername As Debitor,tc.Amount As Amount,td.Narration,td.BranchCode FROM tblCreditDebitNote tc, tblDayBook td,tblledger tl where tc.TransNo=td.TransNo and td.DebtorID = tl.ledgerid and tc.CDType='Debit' and tc.NoteDate >='" + startDate.ToString("yyyy-MM-dd") + "' AND tc.NoteDate<='" + endDate.ToString("yyyy-MM-dd") + "' order by tc.NoteDate");
           }

           else
           {
               dbQry = ("SELECT tc.RefNo As RefNo,tc.NoteDate,tl.ledgername As Debitor,tc.Amount As Amount,td.Narration,td.BranchCode FROM tblCreditDebitNote tc, tblDayBook td,tblledger tl where tblDayBook.BranchCode='" + managerid + "' tc.TransNo=td.TransNo and td.DebtorID = tl.ledgerid and tc.CDType='Debit' and tc.NoteDate >='" + startDate.ToString("yyyy-MM-dd") + "' AND tc.NoteDate<='" + endDate.ToString("yyyy-MM-dd") + "' order by tc.NoteDate");
           }
        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    //************************************  Stock Report  ***************************************************//

    public DataSet getDistinctBrand()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("select distinct ProductDesc As Brand from tblproductmaster");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet getDistinctCategorys()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("select distinct CategoryID, CategoryName from tblCategories");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet getDistinctModel()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("select distinct Model from tblproductmaster");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet getDistinctPrdctNme()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("select distinct ProductName from tblproductmaster");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet getDistinctCustid()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("SELECT Distinct tblSales.CustomerID,tblSales.CustomerName, tblLedger.LedgerName,tblSales.PayMode FROM tblSales, tblLedger where tblSales.PayMode = tblLedger.LedgerID ");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }





    public DataSet getDistinctSupplierID()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("select distinct SupplierID from tblPurchase");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet getDistinctPrdctCode()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("select distinct ItemCode from tblproductmaster");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet getStocks()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("select Stock,ItemCode from tblproductmaster");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet getStock(string selCols, string cond, string grpBy)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("select " + selCols + " sum(Stock) As Quantity,Rate,sum(Stock*Rate) As Vaule from tblproductmaster PM, tblCategories Cat where PM.CategoryID = Cat.CategoryID " + cond + grpBy); //" order by ProductDesc,CategoryID,Model,ProductName"

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {

            throw ex;
        }

    }


    public DataSet getstockdate(string sDataSource, DateTime refDate, string selCols, string field2, string cond, string grpBy, string ordrby)
    {
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet ds, dsSales, dsPurcahse;
        string sQry = string.Empty;
        string sConStr = string.Empty;

        sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;

        sQry = ("select " + selCols + field2 + " from tblproductmaster PM, tblCategories Cat where PM.CategoryID = Cat.CategoryID " + cond + grpBy + ordrby); //" order by ProductDesc,CategoryID,Model,ProductName"
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        ds = new DataSet();
        oleAdp.Fill(ds);

        sQry = "SELECT SUM(SI.Qty) as Qty,  SI.ItemCode From ((tblSales S Inner join tblSalesItems SI On S.BillNo = SI.BillNo) Inner join tblProductMaster P ON P.ItemCode = SI.ItemCode) Where  S.BillDate >= #" + refDate.ToString("MM/dd/yyyy") + "#" + " Group By SI.ItemCode ORDER BY SI.Itemcode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsSales = new DataSet();
        oleAdp.Fill(dsSales);
        int rowindex = -1;

        foreach (DataRow dr in dsSales.Tables[0].Rows)
        {
            var itemCode = dr["ItemCode"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["ItemCode"].ToString() == itemCode)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) + Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }

            }

            rowindex = -1;
        }

        sQry = "SELECT SUM(PI.Qty) as Qty,  PI.ItemCode From ((tblPurchase P Inner join tblPurchaseItems PI On P.PurchaseID = PI.PurchaseID) Inner join tblProductMaster PM ON PM.ItemCode = PI.ItemCode) Where P.BillDate >= #" + refDate.ToString("MM/dd/yyyy") + "#" + " Group By PI.ItemCode ORDER BY PI.Itemcode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsPurcahse = new DataSet();
        oleAdp.Fill(dsPurcahse);
        rowindex = -1;

        foreach (DataRow dr in dsPurcahse.Tables[0].Rows)
        {
            var itemCode = dr["ItemCode"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["ItemCode"].ToString() == itemCode)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) - Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock > 0 ? currentStock : 0;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }
            }

            rowindex = -1;
        }

        sQry = "SELECT SUM(SI.Qty) as Qty,  SI.ItemCode From ((tblSales S Inner join tblSalesItems SI On S.BillNo = SI.BillNo) Inner join tblProductMaster P ON P.ItemCode = SI.ItemCode) Where S.BillDate >= #" + refDate.ToString("MM/dd/yyyy") + "#" + " Group By SI.ItemCode ORDER BY SI.Itemcode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsSales = new DataSet();
        oleAdp.Fill(dsSales);
        rowindex = -1;

        foreach (DataRow dr in dsSales.Tables[0].Rows)
        {
            var itemCode = dr["ItemCode"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["ItemCode"].ToString() == itemCode)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) - Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }

            }

            rowindex = -1;
        }

        sQry = "SELECT SUM(PI.Qty) as Qty,  PI.ItemCode From ((tblPurchase P Inner join tblPurchaseItems PI On P.PurchaseID = PI.PurchaseID) Inner join tblProductMaster PM ON PM.ItemCode = PI.ItemCode) Where P.BillDate >= #" + refDate.ToString("MM/dd/yyyy") + "#" + " Group By PI.ItemCode ORDER BY PI.Itemcode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsPurcahse = new DataSet();
        oleAdp.Fill(dsPurcahse);
        rowindex = -1;


        foreach (DataRow dr in dsPurcahse.Tables[0].Rows)
        {
            var itemCode = dr["ItemCode"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["ItemCode"].ToString() == itemCode)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) + Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock > 0 ? currentStock : 0;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }
            }

            rowindex = -1;
        }

        oleConn.Close();
        return ds;
    }



    public DataSet getstockdateSub(string sDataSource, DateTime refDate, string selCols, string field2, string cond, string grpBy, string Subordrby)
    {
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet ds, dsSales, dsPurcahse;
        string sQry = string.Empty;
        string sConStr = string.Empty;

        sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;

        sQry = ("select " + selCols + field2 + " from tblproductmaster PM, tblCategories Cat where PM.CategoryID = Cat.CategoryID " + cond + grpBy + Subordrby); //" order by ProductDesc,CategoryID,Model,ProductName"
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        ds = new DataSet();
        oleAdp.Fill(ds);

        sQry = "SELECT SUM(SI.Qty) as Qty,  SI.ItemCode From ((tblSales S Inner join tblSalesItems SI On S.BillNo = SI.BillNo) Inner join tblProductMaster P ON P.ItemCode = SI.ItemCode) Where  S.BillDate >= #" + refDate.ToString("MM/dd/yyyy") + "#" + " Group By SI.ItemCode ORDER BY SI.Itemcode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsSales = new DataSet();
        oleAdp.Fill(dsSales);
        int rowindex = -1;

        foreach (DataRow dr in dsSales.Tables[0].Rows)
        {
            var itemCode = dr["ItemCode"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["ItemCode"].ToString() == itemCode)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) + Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }

            }

            rowindex = -1;
        }

        sQry = "SELECT SUM(PI.Qty) as Qty,  PI.ItemCode From ((tblPurchase P Inner join tblPurchaseItems PI On P.PurchaseID = PI.PurchaseID) Inner join tblProductMaster PM ON PM.ItemCode = PI.ItemCode) Where P.BillDate >= #" + refDate.ToString("MM/dd/yyyy") + "#" + " Group By PI.ItemCode ORDER BY PI.Itemcode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsPurcahse = new DataSet();
        oleAdp.Fill(dsPurcahse);
        rowindex = -1;

        foreach (DataRow dr in dsPurcahse.Tables[0].Rows)
        {
            var itemCode = dr["ItemCode"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["ItemCode"].ToString() == itemCode)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) - Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock > 0 ? currentStock : 0;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }
            }

            rowindex = -1;
        }

        oleConn.Close();
        return ds;
    }



    public DataSet getstockdateOld(string sDataSource, DateTime refDate, string selCols, string field2, string cond, string grpBy, string ordrby)
    {
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet ds, dsSales, dsPurcahse;
        string sQry = string.Empty;
        string sConStr = string.Empty;

        sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;

        sQry = ("select " + selCols + field2 + ",sum(Stock*Rate) As SalesValue from tblproductmaster PM, tblCategories Cat where PM.CategoryID = Cat.CategoryID " + cond + grpBy + ordrby); //" order by ProductDesc,CategoryID,Model,ProductName"
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        ds = new DataSet();
        oleAdp.Fill(ds);

        sQry = "SELECT SUM(SI.Qty) as Qty,  SI.ItemCode From ((tblSales S Inner join tblSalesItems SI On S.BillNo = SI.BillNo) Inner join tblProductMaster P ON P.ItemCode = SI.ItemCode) Where  S.BillDate >= #" + refDate.ToString("MM/dd/yyyy") + "#" + " Group By SI.ItemCode ORDER BY SI.Itemcode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsSales = new DataSet();
        oleAdp.Fill(dsSales);
        int rowindex = -1;

        foreach (DataRow dr in dsSales.Tables[0].Rows)
        {
            var itemCode = dr["ItemCode"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["ItemCode"].ToString() == itemCode)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) + Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }

            }

            rowindex = -1;
        }

        sQry = "SELECT SUM(PI.Qty) as Qty,  PI.ItemCode From ((tblPurchase P Inner join tblPurchaseItems PI On P.PurchaseID = PI.PurchaseID) Inner join tblProductMaster PM ON PM.ItemCode = PI.ItemCode) Where P.BillDate >= #" + refDate.ToString("MM/dd/yyyy") + "#" + " Group By PI.ItemCode ORDER BY PI.Itemcode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsPurcahse = new DataSet();
        oleAdp.Fill(dsPurcahse);
        rowindex = -1;

        foreach (DataRow dr in dsPurcahse.Tables[0].Rows)
        {
            var itemCode = dr["ItemCode"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["ItemCode"].ToString() == itemCode)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) - Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock > 0 ? currentStock : 0;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }
            }

            rowindex = -1;
        }

        oleConn.Close();
        return ds;
    }

    public DataSet getStock(string selCols, string field2, string cond, string grpBy, string ordrby)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("select " + selCols + field2 + ",sum(Stock*Rate) As SalesValue from tblproductmaster PM, tblCategories Cat where PM.CategoryID = Cat.CategoryID " + cond + grpBy + ordrby); //" order by ProductDesc,CategoryID,Model,ProductName"

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {

            throw ex;
        }

    }

    public void insertsaveddataNew(string savedname, string chkCat, string chkBran, string chkProd, string chkMod, string chkitem, string chkstock, string chknlc, string chkvat, string chkrate, string chkbuyrate, string chkAll, string dbrand, string dcat, string dprod, string dmod, string ditem, string dstoc, string dnlc, string dvat, string dbuyrate, string drate, string dfirst, string dsecond, string dthird, string dfour, string dfifth, string odfirst, string odsecond, string odthird, string odfour, string odfifth, string txtsto, string txtvat, string txtbuy, string txtrat, string txtnlc, string dated, string sdFirstSub, string sdSecondSub, string sdThirdSub, string sdFourSub, string sdFiveSub)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        try
        {
            dbQry = ("INSERT INTO saveddata( savname, chkboxCategory,chkboxBrand,chkboxProduct, chkboxModel, chkboxItemcode, chkboxstock,chkboxNlc,chkboxVat, chkboxRate,chkboxBuyrate, chkboxAll, dropbrand, dropcategory, dropproduct,dropmodel,dropitem,dropstock,dropnlc, dropvat,dropbuyrate, droprate, dropfirst, dropsecond,dropthird,dropfour,dropfifth, odropfirst, odropsecond, odropthird, odropfour, odropfifth,txtstockd,txtvatd,txtbuyrated,txtrated,txtnlcd,dat,fsub,ssub,tsub,foursub,fivesub) VALUES('" + savedname + "','" + chkCat + "','" + chkBran + "','" + chkProd + "','" + chkMod + "','" + chkitem + "','" + chkstoc + "','" + chknlc + "','" + chkvat + "','" + chkbuyrate + "','" + chkrate + "','" + chkAll + "','" + dbrand + "','" + dcat + "','" + dprod + "','" + dmod + "','" + ditem + "','" + dstoc + "','" + dnlc + "','" + dvat + "','" + dbuyrate + "','" + drate + "','" + dfirst + "','" + dsecond + "','" + dthird + "','" + dfour + "','" + dfifth + "','" + odfirst + "','" + odsecond + "','" + odthird + "','" + odfour + "','" + odfifth + "','" + txtsto + "','" + txtvat + "','" + txtbuy + "','" + txtrat + "','" + txtnlc + "','" + dated + "','" + sdFirstSub + "','" + sdSecondSub + "','" + sdThirdSub + "','" + sdFourSub + "','" + sdFiveSub + "')");



            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void insertsaveddata(string savedname, string chkCat, string chkBran, string chkProd, string chkMod, string chkitem, string chkstock, string chknlc, string chkvat, string chkrate, string chkbuyrate, string chkAll, string dbrand, string dcat, string dprod, string dmod, string ditem, string dstoc, string dnlc, string dvat, string dbuyrate, string drate, string dfirst, string dsecond, string dthird, string dfour, string dfifth, string odfirst, string odsecond, string odthird, string odfour, string odfifth, string txtsto, string txtvat, string txtbuy, string txtrat, string txtnlc, string dated, string subfirst, string subsecond, string subthird, string subfour, string subfive)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = ("INSERT INTO saveddata( savname, chkboxCategory,chkboxBrand,chkboxProduct, chkboxModel, chkboxItemcode, chkboxstock,chkboxNlc,chkboxVat, chkboxRate,chkboxBuyrate, chkboxAll, dropbrand, dropcategory, dropproduct,dropmodel,dropitem,dropstock,dropnlc, dropvat,dropbuyrate, droprate, dropfirst, dropsecond,dropthird,dropfour,dropfifth, odropfirst, odropsecond, odropthird, odropfour, odropfifth,txtstockd,txtvatd,txtbuyrated,txtrated,txtnlcd,dat,firstsub,secondsub,thirdsub,foursub,fivesub) VALUES('" + savedname + "','" + chkCat + "','" + chkBran + "','" + chkProd + "','" + chkMod + "','" + chkitem + "','" + chkstoc + "','" + chknlc + "','" + chkvat + "','" + chkbuyrate + "','" + chkrate + "','" + chkAll + "','" + dbrand + "','" + dcat + "','" + dprod + "','" + dmod + "','" + ditem + "','" + dstoc + "','" + dnlc + "','" + dvat + "','" + dbuyrate + "','" + drate + "','" + dfirst + "','" + dsecond + "','" + dthird + "','" + dfour + "','" + dfifth + "','" + odfirst + "','" + odsecond + "','" + odthird + "','" + odfour + "','" + odfifth + "','" + txtsto + "','" + txtvat + "','" + txtbuy + "','" + txtrat + "','" + txtnlc + "','" + dated + "','" + subfirst + "','" + subsecond + "','" + subthird + "','" + subfour + "','" + subfive + "')");

            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void insertsaveddataOldNew(string savedname, string chkCat, string chkBran, string chkProd, string chkMod, string chkitem, string chkstock, string chknlc, string chkvat, string chkrate, string chkbuyrate, string chkAll, string dbrand, string dcat, string dprod, string dmod, string ditem, string dstoc, string dnlc, string dvat, string dbuyrate, string drate, string dfirst, string dsecond, string dthird, string dfour, string dfifth, string odfirst, string odsecond, string odthird, string odfour, string odfifth, string txtsto, string txtvat, string txtbuy, string txtrat, string txtnlc, string dated)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        try
        {
            dbQry = ("INSERT INTO saveddata( savname, chkboxCategory,chkboxBrand,chkboxProduct, chkboxModel, chkboxItemcode, chkboxstock,chkboxNlc,chkboxVat, chkboxRate,chkboxBuyrate, chkboxAll, dropbrand, dropcategory, dropproduct,dropmodel,dropitem,dropstock,dropnlc, dropvat,dropbuyrate, droprate, dropfirst, dropsecond,dropthird,dropfour,dropfifth, odropfirst, odropsecond, odropthird, odropfour, odropfifth,txtstockd,txtvatd,txtbuyrated,txtrated,txtnlcd,dat) VALUES('" + savedname + "','" + chkCat + "','" + chkBran + "','" + chkProd + "','" + chkMod + "','" + chkitem + "','" + chkstoc + "','" + chknlc + "','" + chkvat + "','" + chkbuyrate + "','" + chkrate + "','" + chkAll + "','" + dbrand + "','" + dcat + "','" + dprod + "','" + dmod + "','" + ditem + "','" + dstoc + "','" + dnlc + "','" + dvat + "','" + dbuyrate + "','" + drate + "','" + dfirst + "','" + dsecond + "','" + dthird + "','" + dfour + "','" + dfifth + "','" + odfirst + "','" + odsecond + "','" + odthird + "','" + odfour + "','" + odfifth + "','" + txtsto + "','" + txtvat + "','" + txtbuy + "','" + txtrat + "','" + txtnlc + "','" + dated + "')");



            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet getsaveddata(string savedname)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("SELECT saveddata.savname,  saveddata.chkboxCategory, saveddata.chkboxBrand,saveddata.chkboxProduct, saveddata.chkboxModel, saveddata.chkboxItemcode, saveddata.chkboxstock, saveddata.chkboxNlc, saveddata.chkboxVat, saveddata.chkboxBuyrate, saveddata.chkboxRate, saveddata.chkboxAll,saveddata.dropbrand, saveddata.dropcategory, saveddata.dropproduct, saveddata.dropmodel,saveddata.dropitem, saveddata.dropstock, saveddata.dropnlc, saveddata.dropvat, saveddata.dropbuyrate, saveddata.droprate, saveddata.dropfirst, saveddata.dropsecond, saveddata.dropthird,saveddata.dropfour, saveddata.dropfifth, saveddata.odropfirst, saveddata.odropsecond, saveddata.odropthird, saveddata.odropfour, saveddata.odropfifth,txtstockd,txtvatd,txtbuyrated,txtrated,txtnlcd,dat,saveddata.firstsub,saveddata.secondsub,saveddata.thirdsub,saveddata.foursub,saveddata.fivesub FROM saveddata where savname ='" + savedname + "'"); // order by ProductDesc,CategoryID,Model,ProductName"

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {

            throw ex;
        }

    }

    public DataSet getsaveddataNew(string savedname)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("SELECT saveddata.savname,  saveddata.chkboxCategory, saveddata.chkboxBrand,saveddata.chkboxProduct, saveddata.chkboxModel, saveddata.chkboxItemcode, saveddata.chkboxstock, saveddata.chkboxNlc, saveddata.chkboxVat, saveddata.chkboxBuyrate, saveddata.chkboxRate, saveddata.chkboxAll,saveddata.dropbrand, saveddata.dropcategory, saveddata.dropproduct, saveddata.dropmodel,saveddata.dropitem, saveddata.dropstock, saveddata.dropnlc, saveddata.dropvat, saveddata.dropbuyrate, saveddata.droprate, saveddata.dropfirst, saveddata.dropsecond, saveddata.dropthird,saveddata.dropfour, saveddata.dropfifth, saveddata.odropfirst, saveddata.odropsecond, saveddata.odropthird, saveddata.odropfour, saveddata.odropfifth,txtstockd,txtvatd,txtbuyrated,txtrated,txtnlcd,dat,fsub,ssub,tsub,foursub,fivesub FROM saveddata where savname ='" + savedname + "'"); // order by ProductDesc,CategoryID,Model,ProductName"

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {

            throw ex;
        }

    }

    public DataSet getDistinctItemCode()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("select distinct ItemCode from tblproductmaster");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }














    public DataSet getStockbrand()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("select ItemCode,ProductName,CategoryID,ProductDesc As Brand,Model,Stock As Quantity,Rate,Stock*Rate As Vaule from tblproductmaster " + Brands + " order by ProductDesc,CategoryID,Model,ProductName");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet getStockCategory()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("select ItemCode,ProductName,CategoryID,ProductDesc As Brand,Model,Stock As Quantity,Rate,Stock*Rate As Vaule from tblproductmaster " + Categorys + " order by ProductDesc,CategoryID,Model,ProductName");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    //*************************************** Sales Report *******************************************
    public DataSet getSales(string selColumn, string condtion, string groupBy)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("SELECT " + selColumn + ",(tblSalesItems.Rate) As Rate,(ExecutiveCommission) As Amount  FROM tblEmployee,tblSales INNER JOIN (tblProductMaster INNER JOIN tblSalesItems ON tblProductMaster.ItemCode = tblSalesItems.ItemCode) ON tblSales.BillNo = tblSalesItems.BillNo where tblsales.Executive=tblemployee.empno " + condtion + groupBy);

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public DataSet getExec(string bilno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;



        try
        {
            manager.Open();
            dbQry = ("SELECT executivename FROM tblsales inner join tblEmployee on tblSales.Executive=tblemployee.empno where billno =  " + bilno);

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    //New Sales Report

    public DataSet getSales1(string selColumn, string field2, string condtion, string groupBy, string ordrby,string username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        string dbQry3 = string.Empty;
        DataSet dsd = new DataSet();

        string managerid = string.Empty;
        bool defaultid;


        dbQry3 = "SELECT Username,BranchCheck,DefaultBranch from tblUserInfo  WHERE tblUserinfo.Username='" + username + "'";
        manager.Open();
        dsd = manager.ExecuteDataSet(CommandType.Text, dbQry3);

        if (dsd.Tables[0].Rows.Count > 0)
            managerid = Convert.ToString(dsd.Tables[0].Rows[0]["DefaultBranch"].ToString());
        defaultid = Convert.ToBoolean(dsd.Tables[0].Rows[0]["Branchcheck"]);

        if (defaultid == true)

        //dbQry = ("SELECT " + selColumn + field2 + " FROM tblEmployee, tblLedger INNER JOIN (tblCategories INNER JOIN (tblSales INNER JOIN (tblProductMaster INNER JOIN tblSalesItems ON tblProductMaster.ItemCode = tblSalesItems.ItemCode) ON tblSales.BillNo = tblSalesItems.BillNo) ON tblCategories.CategoryID = tblProductMaster.CategoryID) ON tblLedger.LedgerID = tblSales.PayMode WHERE (((tblSales.Executive)=[tblemployee].[empno]))" + condtion + groupBy + ordrby);

        //dbQry = ("SELECT " + selColumn + field2 + " FROM tblEmployee, tblLedger INNER JOIN (tblCategories INNER JOIN (tblSales INNER JOIN (tblProductMaster INNER JOIN tblSalesItems ON tblProductMaster.ItemCode = tblSalesItems.ItemCode) ON tblSales.BillNo = tblSalesItems.BillNo) ON tblCategories.CategoryID = tblProductMaster.CategoryID) ON tblLedger.LedgerID = tblSales.CustomerId WHERE (((tblSales.Executive)=[tblemployee].[empno]))" + condtion + groupBy + ordrby);

        //dbQry = ("SELECT " + selColumn + field2 + " FROM tblEmployee, tblLedger INNER JOIN (tblCategories INNER JOIN (tblSales INNER JOIN (tblProductMaster INNER JOIN tblSalesItems ON tblProductMaster.ItemCode = tblSalesItems.ItemCode) ON tblSales.BillNo = tblSalesItems.BillNo) ON tblCategories.CategoryID = tblProductMaster.CategoryID) ON tblLedger.LedgerID = tblSales.CustomerId WHERE " + condtion + groupBy + ordrby);
        {
            dbQry = ("SELECT " + selColumn + field2 + " ,tblSales.BranchCode FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger ON tblSales.CustomerId = tblLedger.LedgerID WHERE " + condtion + groupBy + ordrby);
        }
        else
        {
            dbQry = ("SELECT " + selColumn + field2 + " ,tblSales.BranchCode FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger ON tblSales.CustomerId = tblLedger.LedgerID WHERE tblLedger.BranchCode='" + managerid + "' " + condtion + groupBy + ordrby);
        }
        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet getSales1Sub(string selColumn, string field2, string condtion, string groupBy, string sordrby,string username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        string dbQry3 = string.Empty;
        DataSet dsd = new DataSet();

        string managerid = string.Empty;
        bool defaultid;


        dbQry3 = "SELECT Username,BranchCheck,DefaultBranch from tblUserInfo  WHERE tblUserinfo.Username='" + username + "'";
        manager.Open();
        dsd = manager.ExecuteDataSet(CommandType.Text, dbQry3);

        if (dsd.Tables[0].Rows.Count > 0)
            managerid = Convert.ToString(dsd.Tables[0].Rows[0]["DefaultBranch"].ToString());
        defaultid = Convert.ToBoolean(dsd.Tables[0].Rows[0]["Branchcheck"]);

        if (defaultid == true)

        //dbQry = ("SELECT " + selColumn + field2 + " FROM tblEmployee, tblLedger INNER JOIN (tblCategories INNER JOIN (tblSales INNER JOIN (tblProductMaster INNER JOIN tblSalesItems ON tblProductMaster.ItemCode = tblSalesItems.ItemCode) ON tblSales.BillNo = tblSalesItems.BillNo) ON tblCategories.CategoryID = tblProductMaster.CategoryID) ON tblLedger.LedgerID = tblSales.PayMode WHERE (((tblSales.Executive)=[tblemployee].[empno]))" + condtion + groupBy + ordrby);

        //dbQry = ("SELECT " + selColumn + field2 + " FROM tblEmployee, tblLedger INNER JOIN (tblCategories INNER JOIN (tblSales INNER JOIN (tblProductMaster INNER JOIN tblSalesItems ON tblProductMaster.ItemCode = tblSalesItems.ItemCode) ON tblSales.BillNo = tblSalesItems.BillNo) ON tblCategories.CategoryID = tblProductMaster.CategoryID) ON tblLedger.LedgerID = tblSales.CustomerId WHERE (((tblSales.Executive)=[tblemployee].[empno]))" + condtion + groupBy + sordrby);
        {
            dbQry = ("SELECT " + selColumn + field2 + " ,tblSales.BranchCode FROM (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger ON tblSales.CustomerId = tblLedger.LedgerID WHERE " + condtion + groupBy + sordrby);
        }
        else
        {
            dbQry = ("SELECT " + selColumn + field2 + " ,tblSales.BranchCode FROM (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger ON tblSales.CustomerId = tblLedger.LedgerID WHERE tblLedger.BranchCode='" + managerid + "' " + condtion + groupBy + sordrby);
        }
        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }


    public void insertsavedsales(string savename, string chkCat, string chkBran, string chkProd, string chkMod, string chkitem, string chkcust, string chkcustaddr, string chkcustphone, string chkemp, string chkint, string chkpay, string chkpur, string chkbilldt, string chkbilln, string stock, string discount, string freight, string rate, string chkAll, string dbrand, string dcat, string dprod, string ditem, string dpay, string dcust, string dfirst, string dsecond, string dthird, string dfour, string dfifth, string dsixth, string dseventh, string odfirst, string odsecond, string odthird, string odfour, string odfifth, string odsixth, string odseventh, string rblpur, string rblint, string startdt, string enddt, string subfirst, string subsecond, string subthird, string subfour, string subfive, string subsix, string subseven, string subeight)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        try
        {
            dbQry = ("INSERT INTO tblsalesname(savname, chkboxCategory, chkboxBrand, chkboxProductName, chkboxModel, chkboxProductCode,chkboxCustomer,chkboxCustaddr,chkboxCustphone,chkboxEmpname,chkboxInternalTransfer,chkboxPaymode,chkboxPurchaseReturn,chkboxBillDate,chkboxBillno,chkboxStock,chkboxDiscount,chkboxFreight,chkboxRate, chkboxAll, dropBrand, dropCategory, dropProductName, dropProductCode, dropPaymode,dropCustomer,dropfirstlvl, dropsecondlvl, dropthirdlvl, dropfourthlvl, dropfifthlvl,dropsixthlvl,dropseventhvl,ofirst,osecond,othird,ofourth,ofifth,osixth,oseventh,rblpurchase,rblinternal,stdate,endate,firstsub,secondsub,thirdsub,foursub,fivesub,sixsub,sevensub,eightsub) VALUES('" + savename + "','" + chkCat + "','" + chkBran + "','" + chkProd + "','" + chkMod + "','" + chkitem + "','" + chkcust + "','" + chkcustaddr + "','" + chkcustphone + "','" + chkemp + "','" + chkint + "','" + chkpay + "','" + chkpur + "','" + chkbilldt + "','" + chkbilln + "','" + stock + "','" + discount + "','" + freight + "','" + rate + "','" + chkAll + "','" + dbrand + "','" + dcat + "','" + dprod + "','" + ditem + "','" + dpay + "','" + dcust + "','" + dfirst + "','" + dsecond + "','" + dthird + "','" + dfour + "','" + dfifth + "','" + dsixth + "','" + dseventh + "','" + odfirst + "','" + odsecond + "','" + odthird + "','" + odfour + "','" + odfifth + "','" + odsixth + "','" + odseventh + "','" + rblpur + "','" + rblint + "','" + startdt + "','" + enddt + "','" + subfirst + "','" + subsecond + "','" + subthird + "','" + subfour + "','" + subfive + "','" + subsix + "','" + subseven + "','" + subeight + "')");
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void insertsavedg(string savename, string chko, string chkCat, string chkBran, string chkProd, string chkMod, string chkitem, string chkcust, string chkcustaddr, string chkcustphone, string chkemp, string chkint, string chkpay, string chkpur, string chkbilldt, string chkbilln, string stock, string discount, string freight, string rate, string chkbuy, string chknlc, string chkpurw, string chknlp, string chkAll, string dbrand, string dcat, string dprod, string ditem, string dpay, string dcust, string dfirst, string dsecond, string dthird, string dfour, string dfifth, string dsixth, string dseventh, string odfirst, string odsecond, string odthird, string odfour, string odfifth, string odsixth, string odseventh, string rblpur, string rblint, string startdt, string enddt, string subfirst, string subsecond, string subthird, string subfour, string subfive, string subsix, string subseven, string subeight)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        try
        {
            dbQry = ("INSERT INTO tblsaveg(savname, chko, chkboxCategory, chkboxBrand, chkboxProductName, chkboxModel, chkboxProductCode,chkboxCustomer,chkboxCustaddr,chkboxCustphone,chkboxEmpname,chkboxInternalTransfer,chkboxPaymode,chkboxPurchaseReturn,chkboxBillDate,chkboxBillno,chkboxStock,chkboxDiscount,chkboxFreight,chkboxRate,chkboxbuy,chkboxnlc,chkboxpur,chkboxnlp, chkboxAll, dropBrand, dropCategory, dropProductName, dropProductCode, dropPaymode,dropCustomer,dropfirstlvl, dropsecondlvl, dropthirdlvl, dropfourthlvl, dropfifthlvl,dropsixthlvl,dropseventhvl,ofirst,osecond,othird,ofourth,ofifth,osixth,oseventh,rblpurchase,rblinternal,stdate,endate,firstsub,secondsub,thirdsub,foursub,fivesub,sixsub,sevensub,eightsub) VALUES('" + savename + "','" + chko + "','" + chkCat + "','" + chkBran + "','" + chkProd + "','" + chkMod + "','" + chkitem + "','" + chkcust + "','" + chkcustaddr + "','" + chkcustphone + "','" + chkemp + "','" + chkint + "','" + chkpay + "','" + chkpur + "','" + chkbilldt + "','" + chkbilln + "','" + stock + "','" + discount + "','" + freight + "','" + rate + "','" + chkbuy + "','" + chknlc + "','" + chkpurw + "','" + chknlp + "','" + chkAll + "','" + dbrand + "','" + dcat + "','" + dprod + "','" + ditem + "','" + dpay + "','" + dcust + "','" + dfirst + "','" + dsecond + "','" + dthird + "','" + dfour + "','" + dfifth + "','" + dsixth + "','" + dseventh + "','" + odfirst + "','" + odsecond + "','" + odthird + "','" + odfour + "','" + odfifth + "','" + odsixth + "','" + odseventh + "','" + rblpur + "','" + rblint + "','" + startdt + "','" + enddt + "','" + subfirst + "','" + subsecond + "','" + subthird + "','" + subfour + "','" + subfive + "','" + subsix + "','" + subseven + "','" + subeight + "')");
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void insertsavedsalesOldNew(string savename, string chkCat, string chkBran, string chkProd, string chkMod, string chkitem, string chkcust, string chkcustaddr, string chkcustphone, string chkemp, string chkint, string chkpay, string chkpur, string chkbilldt, string chkbilln, string stock, string discount, string freight, string rate, string chkAll, string dbrand, string dcat, string dprod, string ditem, string dpay, string dcust, string dfirst, string dsecond, string dthird, string dfour, string dfifth, string dsixth, string dseventh, string odfirst, string odsecond, string odthird, string odfour, string odfifth, string odsixth, string odseventh, string rblpur, string rblint, string startdt, string enddt)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        try
        {
            dbQry = ("INSERT INTO tblsalesname(savname, chkboxCategory, chkboxBrand, chkboxProductName, chkboxModel, chkboxProductCode,chkboxCustomer,chkboxCustaddr,chkboxCustphone,chkboxEmpname,chkboxInternalTransfer,chkboxPaymode,chkboxPurchaseReturn,chkboxBillDate,chkboxBillno,chkboxStock,chkboxDiscount,chkboxFreight,chkboxRate, chkboxAll, dropBrand, dropCategory, dropProductName, dropProductCode, dropPaymode,dropCustomer,dropfirstlvl, dropsecondlvl, dropthirdlvl, dropfourthlvl, dropfifthlvl,dropsixthlvl,dropseventhvl,ofirst,osecond,othird,ofourth,ofifth,osixth,oseventh,rblpurchase,rblinternal,stdate,endate) VALUES('" + savename + "','" + chkCat + "','" + chkBran + "','" + chkProd + "','" + chkMod + "','" + chkitem + "','" + chkcust + "','" + chkcustaddr + "','" + chkcustphone + "','" + chkemp + "','" + chkint + "','" + chkpay + "','" + chkpur + "','" + chkbilldt + "','" + chkbilln + "','" + stock + "','" + discount + "','" + freight + "','" + rate + "','" + chkAll + "','" + dbrand + "','" + dcat + "','" + dprod + "','" + ditem + "','" + dpay + "','" + dcust + "','" + dfirst + "','" + dsecond + "','" + dthird + "','" + dfour + "','" + dfifth + "','" + dsixth + "','" + dseventh + "','" + odfirst + "','" + odsecond + "','" + odthird + "','" + odfour + "','" + odfifth + "','" + odsixth + "','" + odseventh + "','" + rblpur + "','" + rblint + "','" + startdt + "','" + enddt + "')");



            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public DataSet getsavenamesales()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("SELECT distinct savname from tblsalesname"); // order by ProductDesc,CategoryID,Model,ProductName"

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {

            throw ex;
        }

    }

    public DataSet getsavenameg()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("SELECT distinct savname from tblsaveg"); // order by ProductDesc,CategoryID,Model,ProductName"

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {

            throw ex;
        }

    }



    public DataSet getsavedsales(string savedname)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("SELECT tblsalesname.savname, tblsalesname.chkboxCategory, tblsalesname.chkboxBrand, tblsalesname.chkboxProductName, tblsalesname.chkboxModel, tblsalesname.chkboxProductCode, tblsalesname.chkboxCustomer, tblsalesname.chkboxCustaddr, tblsalesname.chkboxCustphone, tblsalesname.chkboxEmpname, tblsalesname.chkboxInternalTransfer, tblsalesname.chkboxPaymode, tblsalesname.chkboxPurchaseReturn, tblsalesname.chkboxBillDate, tblsalesname.chkboxBillno, tblsalesname.chkboxStock, tblsalesname.chkboxDiscount, tblsalesname.chkboxFreight, tblsalesname.chkboxRate, tblsalesname.chkboxAll, tblsalesname.dropBrand, tblsalesname.dropCategory, tblsalesname.dropProductName, tblsalesname.dropProductCode, tblsalesname.dropPaymode, tblsalesname.dropCustomer, tblsalesname.dropfirstlvl, tblsalesname.dropsecondlvl, tblsalesname.dropthirdlvl, tblsalesname.dropfourthlvl, tblsalesname.dropfifthlvl, tblsalesname.dropsixthlvl, tblsalesname.dropseventhvl, tblsalesname.ofirst, tblsalesname.osecond, tblsalesname.othird, tblsalesname.ofourth, tblsalesname.ofifth, tblsalesname.osixth, tblsalesname.oseventh,tblsalesname.rblpurchase,tblsalesname.rblinternal,tblsalesname.stdate,tblsalesname.endate, tblsalesname.firstsub, tblsalesname.secondsub, tblsalesname.thirdsub, tblsalesname.foursub, tblsalesname.fivesub, tblsalesname.sixsub, tblsalesname.sevensub, tblsalesname.eightsub FROM tblsalesname where savname ='" + savedname + "'"); // order by ProductDesc,CategoryID,Model,ProductName"

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {

            throw ex;
        }

    }

    public DataSet getsavedg(string savedname)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("SELECT tblsaveg.savname,tblsaveg.chko, tblsaveg.chkboxCategory, tblsaveg.chkboxBrand, tblsaveg.chkboxProductName, tblsaveg.chkboxModel, tblsaveg.chkboxProductCode, tblsaveg.chkboxCustomer, tblsaveg.chkboxCustaddr, tblsaveg.chkboxCustphone, tblsaveg.chkboxEmpname, tblsaveg.chkboxInternalTransfer, tblsaveg.chkboxPaymode, tblsaveg.chkboxPurchaseReturn, tblsaveg.chkboxBillDate, tblsaveg.chkboxBillno, tblsaveg.chkboxStock, tblsaveg.chkboxDiscount, tblsaveg.chkboxFreight, tblsaveg.chkboxRate, tblsaveg.chkboxbuy, tblsaveg.chkboxnlc, tblsaveg.chkboxpur, tblsaveg.chkboxnlp, tblsaveg.chkboxAll, tblsaveg.dropBrand, tblsaveg.dropCategory, tblsaveg.dropProductName, tblsaveg.dropProductCode, tblsaveg.dropPaymode, tblsaveg.dropCustomer, tblsaveg.dropfirstlvl, tblsaveg.dropsecondlvl, tblsaveg.dropthirdlvl, tblsaveg.dropfourthlvl, tblsaveg.dropfifthlvl, tblsaveg.dropsixthlvl, tblsaveg.dropseventhvl, tblsaveg.ofirst, tblsaveg.osecond, tblsaveg.othird, tblsaveg.ofourth, tblsaveg.ofifth, tblsaveg.osixth, tblsaveg.oseventh,tblsaveg.rblpurchase,tblsaveg.rblinternal,tblsaveg.stdate,tblsaveg.endate, tblsaveg.firstsub, tblsaveg.secondsub, tblsaveg.thirdsub, tblsaveg.foursub, tblsaveg.fivesub, tblsaveg.sixsub, tblsaveg.sevensub, tblsaveg.eightsub FROM tblsaveg where savname ='" + savedname + "'"); // order by ProductDesc,CategoryID,Model,ProductName"

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {

            throw ex;
        }

    }

    public DataSet getsavedsalesOldNew(string savedname)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("SELECT tblsalesname.savname, tblsalesname.chkboxCategory, tblsalesname.chkboxBrand, tblsalesname.chkboxProductName, tblsalesname.chkboxModel, tblsalesname.chkboxProductCode, tblsalesname.chkboxCustomer, tblsalesname.chkboxCustaddr, tblsalesname.chkboxCustphone, tblsalesname.chkboxEmpname, tblsalesname.chkboxInternalTransfer, tblsalesname.chkboxPaymode, tblsalesname.chkboxPurchaseReturn, tblsalesname.chkboxBillDate, tblsalesname.chkboxBillno, tblsalesname.chkboxStock, tblsalesname.chkboxDiscount, tblsalesname.chkboxFreight, tblsalesname.chkboxRate, tblsalesname.chkboxAll, tblsalesname.dropBrand, tblsalesname.dropCategory, tblsalesname.dropProductName, tblsalesname.dropProductCode, tblsalesname.dropPaymode, tblsalesname.dropCustomer, tblsalesname.dropfirstlvl, tblsalesname.dropsecondlvl, tblsalesname.dropthirdlvl, tblsalesname.dropfourthlvl, tblsalesname.dropfifthlvl, tblsalesname.dropsixthlvl, tblsalesname.dropseventhvl, tblsalesname.ofirst, tblsalesname.osecond, tblsalesname.othird, tblsalesname.ofourth, tblsalesname.ofifth, tblsalesname.osixth, tblsalesname.oseventh,rblpurchase,rblinternal,stdate,endate FROM tblsalesname where savname ='" + savedname + "'"); // order by ProductDesc,CategoryID,Model,ProductName"

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {

            throw ex;
        }

    }






    //*************************************** Purchase Report *******************************************
    public DataSet getPurchase(string selColumn, string condtion, string groupBy)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("SELECT " + selColumn + ",(tblPurchaseItems.PurchaseRate) As Rate FROM tblLedger,tblPurchase INNER JOIN (tblProductMaster INNER JOIN tblPurchaseItems ON tblProductMaster.ItemCode = tblPurchaseItems.ItemCode) ON tblPurchase.PurchaseID = tblPurchaseItems.PurchaseID where tblLedger.LedgerID = tblPurchase.SupplierID " + condtion + groupBy);

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    //New Purchase report Sep19

    public DataSet getPurchase1(string selColumn, string field2, string condtion, string groupBy, string ordrby,string username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQry3 = string.Empty;
        DataSet dsd = new DataSet();

        string managerid = string.Empty;
        bool defaultid;


        dbQry3 = "SELECT Username,BranchCheck,DefaultBranch from tblUserInfo  WHERE tblUserinfo.Username='" + username + "'";
        manager.Open();
        dsd = manager.ExecuteDataSet(CommandType.Text, dbQry3);

        if (dsd.Tables[0].Rows.Count > 0)
            managerid = Convert.ToString(dsd.Tables[0].Rows[0]["DefaultBranch"].ToString());
        defaultid = Convert.ToBoolean(dsd.Tables[0].Rows[0]["Branchcheck"]);

        if (defaultid == true)
        {
        // dbQry = ("SELECT " + selColumn + field2 + " FROM tblLedger,tblPurchase INNER JOIN (tblProductMaster INNER JOIN tblPurchaseItems ON tblProductMaster.ItemCode = tblPurchaseItems.ItemCode) ON tblPurchase.PurchaseID = tblPurchaseItems.PurchaseID where tblLedger.LedgerID = tblPurchase.SupplierID " + condtion + groupBy + ordrby);
            dbQry = ("SELECT " + selColumn + field2 + " ,tblPurchase.BranchCode FROM (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.PurchaseID = tblPurchaseItems.PurchaseID) INNER JOIN tblProductMaster ON tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger on tblPurchase.SupplierID=tblLedger.LedgerID WHERE " + condtion + groupBy + ordrby);
        }
        else
        {
            dbQry = ("SELECT " + selColumn + field2 + " ,tblPurchase.BranchCode FROM (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.PurchaseID = tblPurchaseItems.PurchaseID) INNER JOIN tblProductMaster ON tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger on tblPurchase.SupplierID=tblLedger.LedgerID WHERE tblLedger.Branchcode='"+ managerid +"'  " + condtion + groupBy + ordrby);
        }
        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet getPurchase1sub(string selColumn, string field2, string condtion, string groupBy, string sordrby,string username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        string dbQry3 = string.Empty;
        DataSet dsd = new DataSet();

        string managerid = string.Empty;
        bool defaultid;


        dbQry3 = "SELECT Username,BranchCheck,DefaultBranch from tblUserInfo  WHERE tblUserinfo.Username='" + username + "'";
        manager.Open();
        dsd = manager.ExecuteDataSet(CommandType.Text, dbQry3);

        if (dsd.Tables[0].Rows.Count > 0)
            managerid = Convert.ToString(dsd.Tables[0].Rows[0]["DefaultBranch"].ToString());
        defaultid = Convert.ToBoolean(dsd.Tables[0].Rows[0]["Branchcheck"]);

        if (defaultid == true)
        {
            dbQry = ("SELECT " + selColumn + field2 + " ,tblPurchase.BranchCode FROM (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.PurchaseID = tblPurchaseItems.PurchaseID) INNER JOIN tblProductMaster ON tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger on tblPurchase.SupplierID=tblLedger.LedgerID WHERE " + condtion + groupBy + sordrby);
        }
        else
        {
            dbQry = ("SELECT " + selColumn + field2 + " ,tblPurchase.BranchCode FROM (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.PurchaseID = tblPurchaseItems.PurchaseID) INNER JOIN tblProductMaster ON tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger on tblPurchase.SupplierID=tblLedger.LedgerID WHERE tblLedger.BranchCode='"+ managerid +"' " + condtion + groupBy + sordrby);
        }
        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet getDistinctSupplier()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("SELECT Distinct tblLedger.LedgerName,LedgerID,SupplierID FROM tblPurchase, tblLedger where tblPurchase.SupplierID = tblLedger.LedgerID ");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }



    public DataSet ListProdMdlItcd(string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        //txtSearch = "%" + txtSearch + "%";

        if (dropDown == "Brand")
        {
            dbQry = "select Distinct ProductDesc from tblProductMaster inner join tblCategories on tblProductMaster.CategoryID = tblCategories.CategoryID";
        }
        else if (dropDown == "Category")
        {
            dbQry = "select Distinct tblCategories.CategoryID from tblProductMaster inner join tblCategories on tblProductMaster.CategoryID = tblCategories.CategoryID";
        }
        else if (dropDown == "Model")
        {
            dbQry = "select Distinct Model from tblProductMaster inner join tblCategories on tblProductMaster.CategoryID = tblCategories.CategoryID";
        }
        else if (dropDown == "ProductName")
        {
            dbQry = "select Distinct tblProductMaster.ItemCode from tblProductMaster inner join tblCategories on tblProductMaster.CategoryID = tblCategories.CategoryID";
        }
        else
        {
            dbQry = string.Format("select Distinct ItemCode,ProductName, CST,Model, tblCategories.CategoryID, tblCategories.CategoryName, ProductDesc,Stock,ROL, Rate, Unit, VAT, Discount,BuyUnit, BuyRate, BuyVAT, BuyDiscount,DealerUnit, DealerRate, DealerVAT, DealerDiscount,Complex,Measure_Unit,Accept_Role from tblProductMaster inner join tblCategories on tblProductMaster.CategoryID = tblCategories.CategoryID Order By ItemCode");
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetPurchaseData(string sDataSource, string itemCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet dsParentQry; string sQry = string.Empty;
        string sConStr = string.Empty;

        if (itemCode != "0")
            sQry = "SELECT PI.ItemCode,P.BillDate,SUM(PI.Qty) as Qty,M.ProductDesc,C.CategoryName,M.ProductName,M.Model FROM (((tblPurchase P Inner Join tblPurchaseItems PI On P.PurchaseID = PI.PurchaseID) Inner Join tblProductMaster M On PI.ItemCode = M.ItemCode) Inner Join tblCategories C On C.CategoryID = M.CategoryID) Where PI.ItemCode='" + itemCode + "' Group By PI.ItemCode,P.BillDate,M.ProductName,M.ProductDesc,M.Model,C.CategoryName";
        else
            sQry = "SELECT PI.ItemCode,P.BillDate,SUM(PI.Qty) as Qty,M.ProductDesc,C.CategoryName,M.ProductName,M.Model FROM (((tblPurchase P Inner Join tblPurchaseItems PI On P.PurchaseID = PI.PurchaseID) Inner Join tblProductMaster M On PI.ItemCode = M.ItemCode) Inner Join tblCategories C On C.CategoryID = M.CategoryID) Group By PI.ItemCode,P.BillDate,M.ProductName,M.ProductDesc,M.Model,C.CategoryName";

        try
        {
            manager.Open();
            dsParentQry = manager.ExecuteDataSet(CommandType.Text, sQry);
            return dsParentQry;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetSalesData(string sDataSource, string itemCode)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet dsParentQry; string sQry = string.Empty;
        string sConStr = string.Empty;


        /* Start Ms Access Database Connection Information */
        //sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource + ";User Id=admin;Jet OLEDB:Database Password=moonmoon"; ;
        //sConStr = sDataSource;
        //sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Persist Security Info=False;Jet OLEDB:Database Password=moonmoon;Data Source= C:\\dbmdb\\Database.mdb";
        //sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource + ";User Id=admin;Password=moonmoon;Jet OLEDB:System Database=C:\\Program Files\\Microsoft Office\\Office\\SYSTEM.MDW;";

        if (itemCode != "0")
            sQry = "SELECT PI.ItemCode,P.BillDate,SUM(PI.Qty) as Qty,M.ProductName FROM ((tblSales P Inner Join tblSalesItems PI On P.BillNo = PI.BillNo) Inner Join tblProductMaster M On PI.ItemCode = M.ItemCode) Where PI.ItemCode='" + itemCode + "'  Group By PI.ItemCode,P.BillDate,M.ProductName";
        else
            sQry = "SELECT PI.ItemCode,P.BillDate,SUM(PI.Qty) as Qty,M.ProductName FROM ((tblSales P Inner Join tblSalesItems PI On P.BillNo = PI.BillNo) Inner Join tblProductMaster M On PI.ItemCode = M.ItemCode) Group By PI.ItemCode,P.BillDate,M.ProductName";

        try
        {
            manager.Open();
            dsParentQry = manager.ExecuteDataSet(CommandType.Text, sQry);
            return dsParentQry;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public DataSet GetCategoryData(string connection, string txtSearch, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        if (dropDown == "CategoryName")
        {
            if (txtSearch != null)
                dbQry = "select * from tblCategories Where CategoryName like '" + txtSearch + "' Order By categoryid";
            //dbQry = "Select * FROM tblcategories  WHERE categoryname LIKE '%" + txtSearch.Trim() + "%'";
            else
                dbQry = "Select categoryid,categoryname FROM tblcategories";
        }
        else
        {
            dbQry = string.Format("select * from tblCategories Order By categoryid");
        }
        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            //if (ds.Tables[0].Rows.Count > 0)
            //    return ds;
            //else
            //    return null;


            DataTable dt = new DataTable();
            DataColumn dc;

            dc = new DataColumn("CategoryID");
            dt.Columns.Add(dc);

            dc = new DataColumn("CategoryName");
            dt.Columns.Add(dc);

            ds.Tables.Add(dt);

            DataRow dr = ds.Tables[0].NewRow();

            dr["CategoryID"] = "0";
            dr["CategoryName"] = string.Empty;
            ds.Tables[0].Rows.InsertAt(dr, 0);

            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }


    public DataSet getsavename()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("SELECT distinct saveddata.savname from saveddata"); // order by ProductDesc,CategoryID,Model,ProductName"

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {

            throw ex;
        }

    }


    public DataSet ListGroupInfo(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select GroupID, GroupName, Heading, tblGroups.[Order] from tblGroups inner join tblAccHeading on tblGroups.HeadingID = tblAccHeading.HeadingID Order by GroupName Asc ";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }


    //Kanna Mam

    public DataSet getsqlqry(string stype, string stblenme)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = "" + stype + " " + stblenme + "";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {

            throw ex;
        }

    }


    public DataSet ListQueries()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select ID,QueryName From tblQueries Order By QueryName";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }
    public void DeleteDataForSQL(string sDataSource, string qid)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(sDataSource);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        try
        {
            dbQry = "DELETE FROM tblQueries where ID =" + qid;
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }
    public void InsertDataForSQL(string sDataSource, string Queryname, string query, string description)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(sDataSource);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        try
        {
            dbQry = "INSERT INTO tblQueries (QueryName,Query,Description) VALUES ('" + Queryname + "','" + query + "','" + description + "')";
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }
    public void UpdateDataForSQL(string sDataSource, string ID, string Queryname, string query, string description)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(sDataSource);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        try
        {
            dbQry = "UPDATE tblQueries SET QueryName='" + Queryname + "',Query='" + query + "',Description='" + description + "' Where ID =" + ID;
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetQueryForID(string ID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select ID,QueryName,Query,Description From tblQueries Where ID=" + ID;

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetDataForSQL(string connection, string sql)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, sql);
            return ds;
        }
        catch (Exception ex)
        {
            return null;
        }
        finally
        {
            manager.Dispose();
        }
    }



    // Manufacturing/Transfer Definitions (CreateFormula) Search - Senthil Sep20

    public DataSet CreateFormulaSearch(string seach)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        seach = "%" + seach + "%";

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();

            if ((seach != null) && (seach != ""))
            {
                dbQry.Append("SELECT FormulaName");
                dbQry.Append(" FROM tblFormula");
                dbQry.Append(" Where FormulaName like '" + seach + "'");
                dbQry.Append(" Group By FormulaName ");
            }
            else
            {
                dbQry.Append("SELECT FormulaName");
                dbQry.Append(" FROM tblFormula");
                dbQry.Append(" Group By FormulaName ");
            }

            dbQry.Append(" ORDER BY FormulaName Asc");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
            {
                DataTable dttt;
                DataRow drNew;
                DataColumn dct;
                DataSet dsd = new DataSet();
                DataSet dstd = new DataSet();
                dttt = new DataTable();

                dct = new DataColumn("Row");
                dttt.Columns.Add(dct);

                dct = new DataColumn("FormulaName");
                dttt.Columns.Add(dct);

                dstd.Tables.Add(dttt);

                int sno = 1;
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    drNew = dttt.NewRow();
                    drNew["Row"] = sno;
                    drNew["FormulaName"] = Convert.ToString(ds.Tables[0].Rows[i]["FormulaName"]);
                    dstd.Tables[0].Rows.Add(drNew);

                    sno = sno + 1;
                    // dstd.Tables[0].Rows.Add(drNew);   
                    //}
                }
                return dstd;
            }
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    // Senthil Sep 21

    public void UpdateSupplierReceipt(out int NewTransNo, string connection, int TransNo, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string ChequeNo, string Paymode, string Mobile, string Username, string BranchCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        DataSet dsOld = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        int TTransNo = 0;
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;
        string Userna = string.Empty;
        string oldtrandate = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        SqlConnection oleConn, oleSubConn;
        string pQry = string.Empty;
        string pgQry = string.Empty;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        DataSet dsChildQry;
        string sConStr = string.Empty;

        oleConn = new SqlConnection(CreateConnectionString(connection));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        DataSet dsOldRec = new DataSet();
        string dbQry123 = string.Empty;

        try
        {
            if (IsValidDate(connection, TransDate))
            {
                manager.Open();
                manager.ProviderType = DataProvider.SqlServer;

                manager.BeginTransaction();


                dbQry = string.Format("Select DebtorID,CreditorID,Amount,Transdate,RefNo from tblDaybook Where TransNo={0}", TransNo);
                dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
                if (dsOld != null)
                {
                    if (dsOld.Tables.Count > 0)
                    {
                        oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                        oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                        oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                        oldtrandate = Convert.ToString(dsOld.Tables[0].Rows[0]["transdate"]);
                        oldBillNo = dsOld.Tables[0].Rows[0]["RefNo"].ToString();
                    }

                }
                DeleteReceipt(connection, TransNo, false, Userna);

                //InsertReceiptSupplier(out NewTransNo, connection, RefNo, TransDate, DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, Paymode);

                //if (!IsValidDate(connection, TransDate))
                //{
                //    throw new Exception("Invalid Date");
                //}

                //manager.Open();
                //manager.ProviderType = DataProvider.SqlServer;

                //manager.BeginTransaction();


                int cid = 0;
                if (Paymode == "Cash")
                {
                    cid = getCashACLedgerId(connection, BranchCode);
                    DebitorID = cid;
                }


                dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
                dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
                if (dsd.Tables[0].Rows.Count > 0)
                    Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

                if (Logsave == "YES")
                {
                    logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, BranchCode) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})",
                    TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, BranchCode);
                    logdescription = logdescription.Trim();
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                         DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "UpdateSupplierReceipt");
                    manager.ExecuteNonQuery(CommandType.Text, description);
                }

                dbQry = string.Format("INSERT INTO tblAuditDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, BranchCode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},{8},'{9}')",
                    TransDate.ToString("yyyy-MM-dd"), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, BranchCode);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, BranchCode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},{8},'{9}')",
                    TransDate.ToString("yyyy-MM-dd"), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, BranchCode);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                int TransNum = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));

                if (Logsave == "YES")
                {
                    logdescription = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode, BranchCode) Values({0},{1},{2},{3})", CreditorID, TransNum, Paymode, BranchCode);
                    logdescription = logdescription.Trim();
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                         DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, TransNum, "UpdateSupplierReceipt");
                    manager.ExecuteNonQuery(CommandType.Text, description);
                }



                dbQry = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode, BranchCode) Values({0},{1},'{2}','{3}')", CreditorID, TransNum, Paymode, BranchCode);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                int recNum = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(ReceiptNo) FROM tblReceipt"));

                dbQry = string.Format("Insert Into tblAuditReceipt(ReceiptNo,CreditorID,JournalID,Paymode, BranchCode) Values({0},{1},{2},'{3}','{4}')", recNum, CreditorID, TransNum, Paymode, BranchCode);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);

                //double Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

                //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);

                //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);

                //double Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

                //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);

                //manager.ExecuteNonQuery(CommandType.Text, dbQry);





                string Debtor = string.Empty;
                string creditor = string.Empty;
                if (DebitorID != null)
                {
                    pQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + DebitorID;
                }

                if (CreditorID != null)
                {
                    pgQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + CreditorID;
                }
                if (pQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(connection));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            Debtor = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }

                if (pgQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pgQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(connection));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            creditor = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }
                dbQry123 = string.Format("Select TransNo from tblBankRecon Where TransNo={0}", TransNo);
                dsOldRec = manager.ExecuteDataSet(CommandType.Text, dbQry123);
                if (dsOldRec != null)
                {
                    if (dsOldRec.Tables.Count > 0)
                    {
                        dbQry = string.Format("UPDATE tblBankRecon SET TransNo={0},TransDate = '{1}',DebtorID={2},Debtor='{3}',CreditorID={4},Creditor='{5}',Amount={6},Narration='{7}',VoucherType='{8}',Chequeno='{9}',RefNo={10} WHERE TransNo={11} ",
                        TransNum, TransDate.ToString("yyyy-MM-dd"), DebitorID, Debtor, CreditorID, creditor, Amount, Narration, VoucherType, ChequeNo, 0, TransNo);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }





                NewTransNo = TransNo;

                sAuditStr = "Receipt Transaction: " + TransNo + " got edited. Updates Record Details : Bill No=" + oldBillNo + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt + " New Trans No :" + NewTransNo + " DateTime:" + oldtrandate;

                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit and Update", DateTime.Now.ToString("yyyy-MM-dd"));
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                manager.CommitTransaction();
            }
            else
            {
                throw new Exception("Invalid Date");
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        //finally
        //{
        //    if (manager != null)
        //        manager.Dispose();
        //}

    }


    public void InsertReceiptSupplier(out int NewTransNo, string connection, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string ChequeNo, string Paymode, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {

            if (!IsValidDate(connection, TransDate))
            {
                throw new Exception("Invalid Date");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQ = "SELECT KeyValue From tblSettings WHERE key='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format({0},{1},{2},{3},{4},{5},{6},{7},{8})",
                TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString(), logdescription.ToString(), Username, "", "InsertReceiptSupplier");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int TransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");


            if (Logsave == "YES")
            {

                logdescription = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode) Values({0},{1},{2})", CreditorID, TransNo, Paymode);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString(), logdescription.ToString(), Username, "", "InsertReceiptSupplier");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode) Values({0},{1},'{2}')", CreditorID, TransNo, Paymode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);

            //double Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);

            //double Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            NewTransNo = TransNo;

            sAuditStr = "Receipt Transaction: " + TransNo + " addedd. Record Details :  Ref No=" + RefNo + " DebtorID=" + DebitorID + ",CreditorID=" + CreditorID + ",Amount=" + Amount + " New Trans No :" + TransNo + " DateTime:" + DateTime.Now.ToString();

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Edit and Update", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public void InsertBankReceipt(out int NewTransNo, string connection, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string ChequeNo, string Paymode, string Username, string BranchCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {

            if (!IsValidDate(connection, TransDate))
            {
                throw new Exception("Invalid Date");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();


            int cid = 0;
            if (Paymode == "Cash")
            {
                cid = getCashACLedgerId(connection, BranchCode);
                DebitorID = cid;
            }

            dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, BranchCode) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})",
                        TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, BranchCode);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "InsertBankReceipt");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }



            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, BranchCode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},{8},'{9}')",
                TransDate.ToString("yyyy-MM-dd"), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, BranchCode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int TransNo = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));

            if (Logsave == "YES")
            {
                logdescription = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode, BranchCode) Values({0},{1},{2},{3})", CreditorID, TransNo, Paymode, BranchCode);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "InsertBankReceipt");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode, BranchCode) Values({0},{1},'{2}','{3}')", CreditorID, TransNo, Paymode, BranchCode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);

            //double Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);

            //double Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            NewTransNo = TransNo;

            sAuditStr = "Receipt Transaction: " + TransNo + " got added Record Details : User=" + Username + "  Ref No=" + RefNo + " DebtorID=" + DebitorID + ",CreditorID=" + CreditorID + ",Amount=" + Amount + " New Trans No :" + NewTransNo + " DateTime:" + TransDate;

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public void InsertReceiptBank(out int NewTransNo, string connection, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string ChequeNo, string Paymode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {

            if (!IsValidDate(connection, TransDate))
            {
                throw new Exception("Invalid Date");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQ = "SELECT KeyValue From tblSettings WHERE key='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8})",
                TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString(), logdescription.ToString(), "", "", "InsertReceiptBank");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int TransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if (Logsave == "YES")
            {
                logdescription = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode) Values({0},{1},{2})", CreditorID, TransNo, Paymode);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString(), logdescription.ToString(), "", "", "InsertReceiptBank");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode) Values({0},{1},'{2}')", CreditorID, TransNo, Paymode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);

            //double Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);

            //double Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            NewTransNo = TransNo;

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public void UpdateCustPayment(out int NewTransNo, string connection, int TransNo, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string ChequeNo, string Paymode, string Billno, string Username, string BranchCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        DataSet dsOld = new DataSet();
        string sAuditStr = string.Empty;
        int TTransNo = 0;
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;
        string Userna = string.Empty;
        string oldtrandate = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        //int NewTransNo = 0;


        SqlConnection oleConn, oleSubConn;
        string pQry = string.Empty;
        string pgQry = string.Empty;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        DataSet dsChildQry;
        string sConStr = string.Empty;

        oleConn = new SqlConnection(CreateConnectionString(connection));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        DataSet dsOldRec = new DataSet();
        string dbQry123 = string.Empty;
        int oldcheno = 0;

        try
        {

            if (IsValidDate(connection, TransDate))
            {
                manager.Open();
                manager.ProviderType = DataProvider.SqlServer;

                manager.BeginTransaction();

                dbQry = string.Format("Select DebtorID,CreditorID,Amount,Transdate,RefNo,ChequeNo from tblDaybook Where TransNo={0}", TransNo);
                dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
                if (dsOld != null)
                {
                    if (dsOld.Tables.Count > 0)
                    {
                        oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                        oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                        oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                        oldtrandate = Convert.ToString(dsOld.Tables[0].Rows[0]["transdate"]);
                        oldBillNo = dsOld.Tables[0].Rows[0]["RefNo"].ToString();
                        oldcheno = Convert.ToInt32(dsOld.Tables[0].Rows[0]["ChequeNo"]);
                    }

                }

                DeletePayment(connection, TransNo, false, Userna);

                //InsertPayment(out NewTransNo, connection, RefNo, TransDate, DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, Paymode, BillNo, Username);
                if (!IsValidDate(connection, TransDate))
                {
                    throw new Exception("Invalid Date");
                }

                int cid = 0;
                if (Paymode == "Cash")
                {
                    cid = getCashACLedgerId(connection, BranchCode);
                    CreditorID = cid;
                }

                dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
                dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
                if (dsd.Tables[0].Rows.Count > 0)
                    Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

                if (Logsave == "YES")
                {
                    logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, BranchCode) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})",
                    TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, BranchCode);
                    logdescription = logdescription.Trim();
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                         DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "UpdateCustPayment");
                    manager.ExecuteNonQuery(CommandType.Text, description);
                }

                dbQry = string.Format("INSERT INTO tblAuditDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, BranchCode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},{8},'{9}')",
                    TransDate.ToString("yyyy-MM-dd"), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, BranchCode);

                dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, BranchCode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},{8},'{9}')",
                    TransDate.ToString("yyyy-MM-dd"), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, BranchCode);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                int TransNum = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));

                if (Logsave == "YES")
                {
                    logdescription = string.Format("Insert Into tblPayment(JournalID,Paymode,BillNo, BranchCode) Values({0},{1},{2},{3})", TransNum, Paymode, Billno, BranchCode);
                    logdescription = logdescription.Trim();
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                         DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "UpdateCustPayment");
                    manager.ExecuteNonQuery(CommandType.Text, description);
                }

                //dbQry = string.Format("Insert Into tblAuditPayment(JournalID,Paymode,BillNo) Values({0},'{1}','{2}')", TransNum, Paymode, BillNo);
                //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                dbQry = string.Format("Insert Into tblPayment(JournalID,Paymode,BillNo, BranchCode) Values({0},'{1}','{2}','{3}')", TransNum, Paymode, Billno, BranchCode);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                int Voucher = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(VoucherNo) FROM tblPayment"));

                dbQry = string.Format("Insert Into tblAuditPayment(VoucherNo,JournalID,Paymode,BillNo, BranchCode) Values({0},{1},'{2}','{3}','{4}')", Voucher, TransNum, Paymode, Billno, BranchCode);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);






                string Debtor = string.Empty;
                string creditor = string.Empty;
                if (DebitorID != null)
                {
                    pQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + DebitorID;
                }

                if (CreditorID != null)
                {
                    pgQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + CreditorID;
                }
                if (pQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(connection));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            Debtor = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }

                if (pgQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pgQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(connection));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            creditor = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }
                dbQry123 = string.Format("Select TransNo from tblBankRecon Where TransNo={0}", TransNo);
                dsOldRec = manager.ExecuteDataSet(CommandType.Text, dbQry123);
                if (dsOldRec != null)
                {
                    if (dsOldRec.Tables.Count > 0)
                    {
                        dbQry = string.Format("UPDATE tblBankRecon SET TransNo={0},TransDate = '{1}',DebtorID={2},Debtor='{3}',CreditorID={4},Creditor='{5}',Amount={6},Narration='{7}',VoucherType='{8}',Chequeno='{9}',RefNo={10} WHERE TransNo={11} ",
                        TransNum, TransDate.ToString("yyyy-MM-dd"), DebitorID, Debtor, CreditorID, creditor, Amount, Narration, VoucherType, ChequeNo, 0, TransNo);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }




                //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);

                //double Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

                //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);

                //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);

                //double Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

                //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);

                //manager.ExecuteNonQuery(CommandType.Text, dbQry);


                dbQry = string.Format("Update tblChequeitems Set Status='N' Where ChequeNo='" + oldcheno + "' and BankID=" + CreditorID + "");
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                dbQry = string.Format("Update tblChequeitems Set Status='Y' Where ChequeNo='" + ChequeNo + "' and BankID=" + CreditorID + "");
                manager.ExecuteNonQuery(CommandType.Text, dbQry);


                NewTransNo = TransNo;

                sAuditStr = "Payment Transaction: " + TransNo + " got edited. Updated Record Details : User=" + Username + " Bill No=" + oldBillNo + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt + " New Trans No :" + NewTransNo + " DateTime:" + oldtrandate;

                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit and Update", DateTime.Now.ToString("yyyy-MM-dd"));
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                manager.CommitTransaction();
            }
            else
            {
                throw new Exception("Invalid Date");
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }

        //finally
        //{
        //    if (manager != null)
        //        manager.Dispose();
        //}

    }



    // Senthil Sep 22

    public void UpdatePaymentBank(out int NewTransNo, string connection, int TransNo, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string ChequeNo, string Paymode, string BillNo, string Username, string BranchCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        DataSet dsOld = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        int TTransNo = 0;
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;
        string Userna = string.Empty;
        string oldtrandate = string.Empty;
        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;
        //int NewTransNo = 0;


        SqlConnection oleConn, oleSubConn;
        string pQry = string.Empty;
        string pgQry = string.Empty;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        DataSet dsChildQry;
        string sConStr = string.Empty;

        oleConn = new SqlConnection(CreateConnectionString(connection));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        DataSet dsOldRec = new DataSet();
        string dbQry123 = string.Empty;
        int oldcheno = 0;
        int newcheno = 0;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("Select DebtorID,CreditorID,Amount,Transdate,Refno,ChequeNo from tblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                    oldtrandate = Convert.ToString(dsOld.Tables[0].Rows[0]["transdate"]);
                    oldBillNo = dsOld.Tables[0].Rows[0]["RefNo"].ToString();
                    oldcheno = Convert.ToInt32(dsOld.Tables[0].Rows[0]["ChequeNo"]);
                }

            }

            if (IsValidDate(connection, TransDate))
            {
                DeletePayment(connection, TransNo, false, Userna);


                int cid = 0;
                if (Paymode == "Cash")
                {
                    cid = getCashACLedgerId(connection, BranchCode);
                    CreditorID = cid;
                }


                dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
                dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
                if (dsd.Tables[0].Rows.Count > 0)
                    Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

                if (Logsave == "YES")
                {
                    logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo,BranchCode) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})",
                TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, BranchCode);
                    logdescription = logdescription.Trim();
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                         DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "UpdatePaymentBank");
                    manager.ExecuteNonQuery(CommandType.Text, description);
                }

                dbQry = string.Format("INSERT INTO tblAuditDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo,BranchCode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},{8},'{9}')",
                TransDate.ToString("yyyy-MM-dd"), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, BranchCode);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo,BranchCode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},{8},'{9}')",
                TransDate.ToString("yyyy-MM-dd"), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, BranchCode);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                int TransNum = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));

                if (Logsave == "YES")
                {
                    logdescription = string.Format("Insert Into tblPayment(JournalID,Paymode,BillNo,BranchCode) Values({0},{1},{2},{3})", TransNum, Paymode, BillNo, BranchCode);
                    logdescription = logdescription.Trim();
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                         DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "UpdatePaymentBank");
                    manager.ExecuteNonQuery(CommandType.Text, description);
                }

                //InsertPayment(out NewTransNo, connection, RefNo, TransDate, DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, Paymode, BillNo, Username);
                //dbQry = string.Format("Insert Into tblAuditPayment(JournalID,Paymode,BillNo) Values({0},'{1}','{2}')", TransNum, Paymode, BillNo);
                //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                dbQry = string.Format("Insert Into tblPayment(JournalID,Paymode,BillNo,BranchCode) Values({0},'{1}','{2}','{3}')", TransNum, Paymode, BillNo, BranchCode);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                int Voucher = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(VoucherNo) FROM tblPayment"));

                dbQry = string.Format("Insert Into tblAuditPayment(VoucherNo,JournalID,Paymode,BillNo,BranchCode) Values({0},{1},'{2}','{3}','{4}')", Voucher, TransNum, Paymode, BillNo, BranchCode);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);








                string Debtor = string.Empty;
                string creditor = string.Empty;
                if (DebitorID != null)
                {
                    pQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + DebitorID;
                }

                if (CreditorID != null)
                {
                    pgQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + CreditorID;
                }
                if (pQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(connection));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            Debtor = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }

                if (pgQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pgQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(connection));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            creditor = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }
                dbQry123 = string.Format("Select TransNo from tblBankRecon Where TransNo={0}", TransNo);
                dsOldRec = manager.ExecuteDataSet(CommandType.Text, dbQry123);
                if (dsOldRec != null)
                {
                    if (dsOldRec.Tables.Count > 0)
                    {
                        dbQry = string.Format("UPDATE tblBankRecon SET TransNo={0},TransDate = '{1}',DebtorID={2},Debtor='{3}',CreditorID={4},Creditor='{5}',Amount={6},Narration='{7}',VoucherType='{8}',Chequeno='{9}',RefNo={10} WHERE TransNo={11} ",
                        TransNum, TransDate.ToString("yyyy-MM-dd"), DebitorID, Debtor, CreditorID, creditor, Amount, Narration, VoucherType, ChequeNo, 0, TransNo);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }



                dbQry = string.Format("Update tblChequeitems Set Status='N' Where ChequeNo='" + oldcheno + "' and BankID=" + CreditorID + "");
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                dbQry = string.Format("Update tblChequeitems Set Status='Y' Where ChequeNo='" + ChequeNo + "' and BankID=" + CreditorID + "");
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
                //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);
                //double Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

                //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);

                //manager.ExecuteNonQuery(CommandType.Text, dbQry);
                //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);

                //double Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
                //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);

                //manager.ExecuteNonQuery(CommandType.Text, dbQry);
                NewTransNo = TransNo;

                sAuditStr = "Payment Transaction: " + TransNo + " got edited. Updated Record Details : User =" + Username + " Bill No=" + oldBillNo + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt + " New Trans No :" + NewTransNo + " DateTime:" + DateTime.Now.ToString();
                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit and Update", DateTime.Now.ToString("yyyy-MM-dd"));
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                manager.CommitTransaction();
            }
            else
            {
                throw new Exception("Invalid Date");
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }

        //finally
        //{
        //    if (manager != null)
        //        manager.Dispose();
        //}

    }

    public void UpdatePaymentExp(out int NewTransNo, string connection, int TransNo, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string ChequeNo, string Paymode, string BillNo, string Username, string Branch)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        DataSet dsOld = new DataSet();
        DataSet dsOldRec = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        string dbQry123 = string.Empty;

        int TTransNo = 0;
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;
        string Userna = string.Empty;
        string oldtrandate = string.Empty;
        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        SqlConnection oleConn, oleSubConn;
        string pQry = string.Empty;
        string pgQry = string.Empty;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        DataSet dsChildQry;
        string sConStr = string.Empty;

        oleConn = new SqlConnection(CreateConnectionString(connection));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("Select DebtorID,CreditorID,Amount,Transdate,RefNo from tblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                    oldtrandate = Convert.ToString(dsOld.Tables[0].Rows[0]["transdate"]);
                    oldBillNo = dsOld.Tables[0].Rows[0]["RefNo"].ToString();
                }

            }




            if (IsValidDate(connection, TransDate))
            {
                DeletePayment(connection, TransNo, false, Userna);

                //InsertPayment(out NewTransNo, connection, RefNo, TransDate, DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, Paymode, BillNo, Username);

                if (!IsValidDate(connection, TransDate))
                {
                    throw new Exception("Invalid Date");
                }

                int cid = 0;
                if (Paymode == "Cash")
                {
                    cid = getCashACLedgerId(connection, Branch);
                    CreditorID = cid;
                }


                dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
                dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
                if (dsd.Tables[0].Rows.Count > 0)
                    Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

                if (Logsave == "YES")
                {
                    logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, Branchcode) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})",
                    TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, Branch);
                    logdescription = logdescription.Trim();
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                         DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "UpdatePaymentExp");
                    manager.ExecuteNonQuery(CommandType.Text, description);
                }

                dbQry = string.Format("INSERT INTO tblAuditDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, Branchcode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},{8},'{9}')",
                    TransDate.ToString("yyyy-MM-dd"), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, Branch);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);


                dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, Branchcode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},{8},'{9}')",
                    TransDate.ToString("yyyy-MM-dd"), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, Branch);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                int TransNum = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));


                if (Logsave == "YES")
                {
                    logdescription = string.Format("Insert Into tblPayment(JournalID,Paymode,BillNo, Branchcode) Values({0},{1},{2},{3})", TransNum, Paymode, BillNo, Branch);
                    logdescription = logdescription.Trim();
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                         DateTime.Now.ToString(), logdescription.ToString(), Username, "", "UpdatePaymentExp");
                    manager.ExecuteNonQuery(CommandType.Text, description);
                }

                //dbQry = string.Format("Insert Into tblAuditPayment(JournalID,Paymode,BillNo) Values({0},'{1}','{2}')", TransNum, Paymode, BillNo);
                //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                dbQry = string.Format("Insert Into tblPayment(JournalID,Paymode,BillNo, Branchcode) Values({0},'{1}','{2}','{3}')", TransNum, Paymode, BillNo, Branch);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                int Voucher = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(VoucherNo) FROM tblPayment"));

                dbQry = string.Format("Insert Into tblAuditPayment(VoucherNo,JournalID,Paymode,BillNo, Branchcode) Values({0},{1},'{2}','{3}','{4}')", Voucher, TransNum, Paymode, BillNo, Branch);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);



                string Debtor = string.Empty;
                string creditor = string.Empty;
                if (DebitorID != null)
                {
                    pQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + DebitorID;
                }

                if (CreditorID != null)
                {
                    pgQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + CreditorID;
                }
                if (pQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(connection));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            Debtor = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }

                if (pgQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pgQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(connection));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            creditor = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }
                dbQry123 = string.Format("Select TransNo from tblBankRecon Where TransNo={0}", TransNo);
                dsOldRec = manager.ExecuteDataSet(CommandType.Text, dbQry123);
                if (dsOldRec != null)
                {
                    if (dsOldRec.Tables.Count > 0)
                    {
                        //dbQry = string.Format("INSERT INTO tblBankRecon(TransNo,TransDate,DebtorID,Debtor,CreditorID,Creditor,Amount,Narration,VoucherType,Chequeno,RefNo,ReconcilatedBy,Reconcilateddate,Types,Result) VALUES({0},Format('{1}', 'dd/mm/yyyy'),{2},'{3}',{4},'{5}',{6},'{7}','{8}','{9}',{10},'{11}',Format('{12}', 'dd/mm/yyyy'),'{13}','{14}')", Convert.ToInt32(dr["TransNo"]), dr["Date"].ToString(), Convert.ToInt32(dr["DebtorID"]), Convert.ToString(dr["Debtor"]), Convert.ToInt32(dr["creditorID"]), Convert.ToString(dr["creditor"]), Convert.ToDouble(dr["Amount"]), Convert.ToString(dr["Narration"]), Convert.ToString(dr["VoucherType"]), Convert.ToString(dr["Chequeno"]), 0, Convert.ToString(dr["ReconcilatedBy"]), dr["Reconcilateddate"].ToString(), Types, Convert.ToString(dr["Result"]));
                        //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        dbQry = string.Format("UPDATE tblBankRecon SET TransNo={0},TransDate = '{1}',DebtorID={2},Debtor='{3}',CreditorID={4},Creditor='{5}',Amount={6},Narration='{7}',VoucherType='{8}',Chequeno='{9}',RefNo={10} WHERE TransNo={11} ",
                        TransNum, TransDate.ToString("yyyy-MM-dd"), DebitorID, Debtor, CreditorID, creditor, Amount, Narration, VoucherType, ChequeNo, 0, TransNo);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }



                //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);

                //double Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

                //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);

                //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);

                //double Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

                //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);

                //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                NewTransNo = TransNo;

                sAuditStr = "Payment Transaction: " + TransNo + " got edited. Updated Record Details : User =" + Username + " Bill No=" + oldBillNo + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt + " New Trans No :" + NewTransNo + " DateTime:" + DateTime.Now.ToString();

                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit and Update", DateTime.Now.ToString("yyyy-MM-dd"));
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                manager.CommitTransaction();
            }
            else
            {
                throw new Exception("Invalid Date");
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }

        //finally
        //{
        //    if (manager != null)
        //        manager.Dispose();
        //}

    }


    public void UpdatePaymentSupp(out int NewTransNo, string connection, int TransNo, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string ChequeNo, string Paymode, string BillNo, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        DataSet dsOld = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        int TTransNo = 0;
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;

        string oldtrandate = string.Empty;
        string Userna = string.Empty;
        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("Select DebtorID,CreditorID,Amount,Transdate,RefNo from tblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                    oldtrandate = Convert.ToString(dsOld.Tables[0].Rows[0]["transdate"]);
                    oldBillNo = dsOld.Tables[0].Rows[0]["RefNo"].ToString();
                }

            }
            if (IsValidDate(connection, TransDate))
            {
                DeletePayment(connection, TransNo, false, Userna);

                //InsertPayment(out NewTransNo, connection, RefNo, TransDate, DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, Paymode, BillNo, Username);

                if (!IsValidDate(connection, TransDate))
                {
                    throw new Exception("Invalid Date");
                }


                dbQ = "SELECT KeyValue From tblSettings WHERE key='SAVELOG'";
                dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
                if (dsd.Tables[0].Rows.Count > 0)
                    Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

                if (Logsave == "YES")
                {
                    logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8})",
                    TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);
                    logdescription = logdescription.Trim();
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                         DateTime.Now.ToString(), logdescription.ToString(), Username, "", "UpdatePaymentSupp");
                    manager.ExecuteNonQuery(CommandType.Text, description);
                }

                dbQry = string.Format("INSERT INTO tblAuditDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                    TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);


                dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                    TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                int TransNum = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

                if (Logsave == "YES")
                {
                    logdescription = string.Format("Insert Into tblPayment(JournalID,Paymode,BillNo) Values({0},{1},{2})", TransNum, Paymode, BillNo);
                    logdescription = logdescription.Trim();
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                         DateTime.Now.ToString(), logdescription.ToString(), Username, "", "UpdatePaymentSupp");
                    manager.ExecuteNonQuery(CommandType.Text, description);
                }

                //dbQry = string.Format("Insert Into tblAuditPayment(JournalID,Paymode,BillNo) Values({0},'{1}','{2}')", TransNum, Paymode, BillNo);
                //manager.ExecuteNonQuery(CommandType.Text, dbQry);


                dbQry = string.Format("Insert Into tblPayment(JournalID,Paymode,BillNo) Values({0},'{1}','{2}')", TransNum, Paymode, BillNo);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                int Voucher = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(VoucherNo) FROM tblPayment");

                dbQry = string.Format("Insert Into tblAuditPayment(VoucherNo,JournalID,Paymode,BillNo) Values({0},{1},'{2}','{3}')", Voucher, TransNum, Paymode, BillNo);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);

                //double Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

                //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);

                //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);

                //double Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

                //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);

                //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                NewTransNo = TransNo;

                sAuditStr = "Payment Transaction: " + TransNo + " got edited. Updated Record Details : User=" + Username + " Bill No=" + oldBillNo + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt + " New Trans No :" + NewTransNo + " DateTime:" + DateTime.Now.ToString();

                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Edit and Update", DateTime.Now.ToString());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                manager.CommitTransaction();
            }
            else
            {
                throw new Exception("Invalid Date");
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        //finally
        //{
        //    if (manager != null)
        //        manager.Dispose();
        //}

    }

    // Kanna Mam sep 24

    public DataSet getsavenamepurchase()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("SELECT distinct savname from tblpurchasename"); // order by ProductDesc,CategoryID,Model,ProductName"

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {

            throw ex;
        }

    }

    public DataSet getsavedpurchase(string savedname)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("SELECT tblpurchasename.savname, tblpurchasename.chkboxCategory, tblpurchasename.chkboxBrand, tblpurchasename.chkboxProductName, tblpurchasename.chkboxModel, tblpurchasename.chkboxProductCode, tblpurchasename.chkboxSupplier, tblpurchasename.chkboxCustaddr, tblpurchasename.chkboxCustphone, tblpurchasename.chkboxInternalTransfer,tblpurchasename.chkboxSalesReturn, tblpurchasename.chkboxBillDate, tblpurchasename.chkboxBillno, tblpurchasename.chkboxStock, tblpurchasename.chkboxDiscount, tblpurchasename.chkboxFreight, tblpurchasename.chkboxRate, tblpurchasename.chkboxAll, tblpurchasename.chkpaymode, tblpurchasename.dropBrand, tblpurchasename.dropCategory, tblpurchasename.dropProductName, tblpurchasename.dropProductCode, tblpurchasename.dropPaymode, tblpurchasename.dropSupplier, tblpurchasename.dropfirstlvl, tblpurchasename.dropsecondlvl, tblpurchasename.dropthirdlvl, tblpurchasename.dropfourthlvl, tblpurchasename.dropfifthlvl, tblpurchasename.dropsixthlvl, tblpurchasename.dropseventhvl, tblpurchasename.ofirst, tblpurchasename.osecond, tblpurchasename.othird, tblpurchasename.ofourth, tblpurchasename.ofifth, tblpurchasename.osixth, tblpurchasename.oseventh, tblpurchasename.subfirst, tblpurchasename.subsecond, tblpurchasename.subthird, tblpurchasename.subfour, tblpurchasename.subfive, tblpurchasename.subsix, tblpurchasename.subseven, tblpurchasename.subeight FROM tblpurchasename where savname ='" + savedname + "'"); // order by ProductDesc,CategoryID,Model,ProductName"

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {

            throw ex;
        }

    }

    public void insertsavedpurchase(string savename, string chkCat, string chkBran, string chkProd, string chkMod, string chkitem, string chkcust, string chkcustaddr, string chkcustphone, string chkemp, string chkint, string chkpay, string chkpur, string chkbilldt, string chkbilln, string stock, string discount, string freight, string rate, string chkAll, string paymode, string dbrand, string dcat, string dprod, string ditem, string dpay, string dcust, string dfirst, string dsecond, string dthird, string dfour, string dfifth, string dsixth, string dseventh, string odfirst, string odsecond, string odthird, string odfour, string odfifth, string odsixth, string odseventh, string subfirst, string subsecond, string subthird, string subfour, string subfifth, string subsixth, string subseventh, string subeighth)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        try
        {
            dbQry = ("INSERT INTO tblpurchasename(savname, chkboxCategory, chkboxBrand, chkboxProductName, chkboxModel, chkboxProductCode,chkboxSupplier,chkboxCustaddr,chkboxCustphone,chkboxInternalTransfer,chkboxSalesReturn,chkboxBillDate,chkboxBillno,chkboxStock,chkboxDiscount,chkboxFreight,chkboxRate, chkboxAll,chkpaymode, dropBrand, dropCategory, dropProductName, dropProductCode, dropPaymode,dropSupplier,dropfirstlvl, dropsecondlvl, dropthirdlvl, dropfourthlvl, dropfifthlvl,dropsixthlvl,dropseventhvl,ofirst,osecond,othird,ofourth,ofifth,osixth,oseventh,subfirst,subsecond,subthird,subfour,subfive,subsix,subseven,subeight) VALUES('" + savename + "','" + chkCat + "','" + chkBran + "','" + chkProd + "','" + chkMod + "','" + chkitem + "','" + chkcust + "','" + chkcustaddr + "','" + chkcustphone + "','" + chkint + "','" + chkpur + "','" + chkbilldt + "','" + chkbilln + "','" + stock + "','" + discount + "','" + freight + "','" + rate + "','" + chkAll + "','" + paymode + "','" + dbrand + "','" + dcat + "','" + dprod + "','" + ditem + "','" + dpay + "','" + dcust + "','" + dfirst + "','" + dsecond + "','" + dthird + "','" + dfour + "','" + dfifth + "','" + dsixth + "','" + dseventh + "','" + odfirst + "','" + odsecond + "','" + odthird + "','" + odfour + "','" + odfifth + "','" + odsixth + "','" + odseventh + "','" + subfirst + "','" + subsecond + "','" + subthird + "','" + subfour + "','" + subfifth + "','" + subsixth + "','" + subseventh + "','" + subeighth + "')");

            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void insertsavedpurchaseOld(string savename, string chkCat, string chkBran, string chkProd, string chkMod, string chkitem, string chkcust, string chkcustaddr, string chkcustphone, string chkemp, string chkint, string chkpay, string chkpur, string chkbilldt, string chkbilln, string stock, string discount, string freight, string rate, string chkAll, string dbrand, string dcat, string dprod, string ditem, string dpay, string dcust, string dfirst, string dsecond, string dthird, string dfour, string dfifth, string dsixth, string dseventh, string odfirst, string odsecond, string odthird, string odfour, string odfifth, string odsixth, string odseventh)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        try
        {
            dbQry = ("INSERT INTO tblpurchasename(savname, chkboxCategory, chkboxBrand, chkboxProductName, chkboxModel, chkboxProductCode,chkboxSupplier,chkboxCustaddr,chkboxCustphone,chkboxInternalTransfer,chkboxSalesReturn,chkboxBillDate,chkboxBillno,chkboxStock,chkboxDiscount,chkboxFreight,chkboxRate, chkboxAll, dropBrand, dropCategory, dropProductName, dropProductCode, dropPaymode,dropSupplier,dropfirstlvl, dropsecondlvl, dropthirdlvl, dropfourthlvl, dropfifthlvl,dropsixthlvl,dropseventhvl,ofirst,osecond,othird,ofourth,ofifth,osixth,oseventh) VALUES('" + savename + "','" + chkCat + "','" + chkBran + "','" + chkProd + "','" + chkMod + "','" + chkitem + "','" + chkcust + "','" + chkcustaddr + "','" + chkcustphone + "','" + chkint + "','" + chkpur + "','" + chkbilldt + "','" + chkbilln + "','" + stock + "','" + discount + "','" + freight + "','" + rate + "','" + chkAll + "','" + dbrand + "','" + dcat + "','" + dprod + "','" + ditem + "','" + dpay + "','" + dcust + "','" + dfirst + "','" + dsecond + "','" + dthird + "','" + dfour + "','" + dfifth + "','" + dsixth + "','" + dseventh + "','" + odfirst + "','" + odsecond + "','" + odthird + "','" + odfour + "','" + odfifth + "','" + odsixth + "','" + odseventh + "')");

            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet generateOutStandingID(int iGroupID, string sDataSource)
    {
        Decimal temp_balance;
        Decimal sOpDrName;
        Decimal sOpCrName;
        Decimal sName;

        string sLedgerName = string.Empty, sConStr = string.Empty, sAliasName = string.Empty, sQry = string.Empty;
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        sConStr = sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;

        //sQry = "SELECT tblLedger.LedgerID,tblLedger.LedgerName,tblLedger.AliasName,tblLedger.OpenBalanceDR,tblLedger.OpenBalanceCR, (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as balance,(IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as Total FROM (tblLedger   left  join (SELECT DebtorID,sum(Amount) as debitamount FROM tblDayBook WHERE DebtorID > 0 group by DebtorID) debittable  on tblLedger.LedgerID=debittable.DebtorID) left join (SELECT CreditorID,sum(Amount) as creditamount FROM tblDayBook WHERE CreditorID > 0 group by CreditorID) credittable on tblLedger.LedgerID= credittable.CreditorID where GroupID=" + iGroupID + " and (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) <> 0 ORDER BY tblLedger.LedgerName";

        //sQry = "SELECT tblLedger.LedgerID,tblLedger.LedgerName,tblLedger.AliasName,tblLedger.OpenBalanceDR,tblLedger.OpenBalanceCR, (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as balance,(IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as Total FROM (tblLedger   left  join (SELECT DebtorID,sum(Amount) as debitamount FROM tblDayBook WHERE DebtorID > 0 group by DebtorID) debittable  on tblLedger.LedgerID=debittable.DebtorID) left join (SELECT CreditorID,sum(Amount) as creditamount FROM tblDayBook WHERE CreditorID > 0 group by CreditorID) credittable on tblLedger.LedgerID= credittable.CreditorID where GroupID=" + iGroupID + " and (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) <> 0 ORDER BY tblLedger.LedgerName";

        sQry = "SELECT tblLedger.LedgerID,tblLedger.LedgerName,tblLedger.AliasName,tblLedger.OpenBalanceDR,tblLedger.OpenBalanceCR, (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as balance,(IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as Total FROM (tblLedger   left  join (SELECT DebtorID,sum(Amount) as debitamount FROM tblDayBook WHERE DebtorID > 0  and VoucherType<>'Payment' group by DebtorID) debittable  on tblLedger.LedgerID=debittable.DebtorID) left join (SELECT CreditorID,sum(Amount) as creditamount FROM tblDayBook WHERE CreditorID > 0 group by CreditorID) credittable on tblLedger.LedgerID= credittable.CreditorID where GroupID=" + iGroupID + " and (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) <> 0 ORDER BY tblLedger.LedgerName";

        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsParentQry = new DataSet();
        oleAdp.Fill(dsParentQry);
        temp_balance = 0;
        DataSet ds;
        DataTable dt;
        DataRow drNew;
        DataColumn dc;
        ds = new DataSet();
        dt = new DataTable();
        dc = new DataColumn("LedgerName");
        dt.Columns.Add(dc);
        dc = new DataColumn("Total");
        dt.Columns.Add(dc);
        dc = new DataColumn("OpenBalanceDR");
        dt.Columns.Add(dc);
        dc = new DataColumn("OpenBalanceCR");
        dt.Columns.Add(dc);
        dc = new DataColumn("Balance");
        dt.Columns.Add(dc);
        ds.Tables.Add(dt);
        try
        {
            if (dsParentQry.Tables[0].Rows.Count == 0)
            {
                drNew = dt.NewRow();
                drNew["LedgerName"] = string.Empty;
                drNew["Total"] = "0.00";
                drNew["OpenBalanceDR"] = "0.00";
                drNew["OpenBalanceCR"] = "0.00";
                drNew["Balance"] = "0.00";
                ds.Tables[0].Rows.Add(drNew);
            }
            else
            {
                foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
                {
                    if (drParentQry["LedgerName"] != null)
                        sLedgerName = drParentQry["LedgerName"].ToString();
                    if ((drParentQry["Total"] != null) && (drParentQry["Total"].ToString() != ""))
                        sName = decimal.Parse(drParentQry["Total"].ToString(), System.Globalization.NumberStyles.Float);
                    else
                        sName = 0;
                    if ((drParentQry["OpenBalanceDR"] != null) && (drParentQry["OpenBalanceDR"].ToString() != ""))
                        sOpDrName = decimal.Parse(drParentQry["OpenBalanceDR"].ToString(), System.Globalization.NumberStyles.Float);
                    else
                        sOpDrName = 0;
                    if ((drParentQry["OpenBalanceCR"] != null) && (drParentQry["OpenBalanceCR"].ToString() != ""))
                        sOpCrName = decimal.Parse(drParentQry["OpenBalanceCR"].ToString(), System.Globalization.NumberStyles.Float);
                    else
                        sOpCrName = 0;
                    if ((drParentQry["balance"] != null) && (drParentQry["balance"].ToString() != ""))
                        temp_balance = decimal.Parse(drParentQry["balance"].ToString(), System.Globalization.NumberStyles.Float);
                    else
                        temp_balance = 0;
                    if (temp_balance > 0)
                    {
                        drNew = dt.NewRow();
                        drNew["LedgerName"] = sLedgerName;
                        drNew["Total"] = sName;
                        drNew["OpenBalanceDR"] = sOpDrName;
                        drNew["OpenBalanceCR"] = sOpCrName;
                        drNew["Balance"] = temp_balance;
                        ds.Tables[0].Rows.Add(drNew);
                    }
                    else
                    {
                        drNew = dt.NewRow();
                        drNew["LedgerName"] = sLedgerName;
                        drNew["Total"] = sName;
                        drNew["OpenBalanceDR"] = sOpDrName;
                        drNew["OpenBalanceCR"] = sOpCrName;
                        drNew["Balance"] = 0.00;
                        ds.Tables[0].Rows.Add(drNew);
                    }
                }
            }
            oleConn.Close();
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet generateOutStandingIDPay(int iGroupID, string sDataSource)
    {
        Decimal temp_balance;
        Decimal sOpDrName;
        Decimal sOpCrName;
        Decimal sName;
        Decimal sPayName;
        Decimal sRecName;

        string sLedgerName = string.Empty, sConStr = string.Empty, sAliasName = string.Empty, sQry = string.Empty;
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        sConStr = sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;

        //sQry = "SELECT tblLedger.LedgerID,tblLedger.LedgerName,tblLedger.AliasName,tblLedger.OpenBalanceDR,tblLedger.OpenBalanceCR, (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as balance,(IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as Total FROM (tblLedger   left  join (SELECT DebtorID,sum(Amount) as debitamount FROM tblDayBook WHERE DebtorID > 0 group by DebtorID) debittable  on tblLedger.LedgerID=debittable.DebtorID) left join (SELECT CreditorID,sum(Amount) as creditamount FROM tblDayBook WHERE CreditorID > 0 group by CreditorID) credittable on tblLedger.LedgerID= credittable.CreditorID where GroupID=" + iGroupID + " and (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) <> 0 ORDER BY tblLedger.LedgerName";

        ///Only Payment

        //sQry = "SELECT tblLedger.LedgerID,tblLedger.LedgerName,tblLedger.AliasName,tblLedger.OpenBalanceDR,tblLedger.OpenBalanceCR, (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as balance,(IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as Total, debitttable.debittamount as Pay FROM ((tblLedger   left  join (SELECT DebtorID,sum(Amount) as debitamount FROM tblDayBook WHERE DebtorID > 0 group by DebtorID) debittable  on tblLedger.LedgerID=debittable.DebtorID) left join (SELECT CreditorID,sum(Amount) as creditamount FROM tblDayBook WHERE CreditorID > 0 group by CreditorID) credittable on tblLedger.LedgerID= credittable.CreditorID) left  join (SELECT DebtorID,sum(Amount) as debittamount FROM tblDayBook WHERE DebtorID > 0 and VoucherType='Payment' group by DebtorID) debitttable  on tblLedger.LedgerID=debitttable.DebtorID where GroupID=" + iGroupID + " and (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) <> 0 ORDER BY tblLedger.LedgerName";

        ///With Receipt

        sQry = "SELECT tblLedger.LedgerID,tblLedger.LedgerName,tblLedger.AliasName,tblLedger.OpenBalanceDR,tblLedger.OpenBalanceCR, (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as balance,(IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as Total, debitttable.debittamount as Pay,creditttable.credittamount as rec FROM (((tblLedger   left  join (SELECT DebtorID,sum(Amount) as debitamount FROM tblDayBook WHERE DebtorID > 0 group by DebtorID) debittable  on tblLedger.LedgerID=debittable.DebtorID) left join (SELECT CreditorID,sum(Amount) as creditamount FROM tblDayBook WHERE CreditorID > 0 group by CreditorID) credittable on tblLedger.LedgerID= credittable.CreditorID) left  join (SELECT DebtorID,sum(Amount) as debittamount FROM tblDayBook WHERE DebtorID > 0 and VoucherType='Payment' group by DebtorID) debitttable  on tblLedger.LedgerID=debitttable.DebtorID) left join (SELECT CreditorID,sum(Amount) as credittamount FROM tblDayBook WHERE CreditorID > 0 and (Vouchertype='Journal' or VoucherType='Receipt') group by CreditorID) creditttable on tblLedger.LedgerID= creditttable.CreditorID where GroupID=" + iGroupID + " and (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) <> 0 ORDER BY tblLedger.LedgerName";

        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsParentQry = new DataSet();
        oleAdp.Fill(dsParentQry);
        temp_balance = 0;
        DataSet ds;
        DataTable dt;
        DataRow drNew;
        DataColumn dc;
        ds = new DataSet();
        dt = new DataTable();
        dc = new DataColumn("LedgerName");
        dt.Columns.Add(dc);
        dc = new DataColumn("Total");
        dt.Columns.Add(dc);
        dc = new DataColumn("Pay");
        dt.Columns.Add(dc);
        dc = new DataColumn("Rec");
        dt.Columns.Add(dc);
        dc = new DataColumn("OpenBalanceDR");
        dt.Columns.Add(dc);
        dc = new DataColumn("OpenBalanceCR");
        dt.Columns.Add(dc);
        dc = new DataColumn("Balance");
        dt.Columns.Add(dc);
        ds.Tables.Add(dt);
        try
        {
            if (dsParentQry.Tables[0].Rows.Count == 0)
            {
                drNew = dt.NewRow();
                drNew["LedgerName"] = string.Empty;
                drNew["Total"] = "0.00";
                drNew["Pay"] = "0.00";
                drNew["Rec"] = "0.00";
                drNew["OpenBalanceDR"] = "0.00";
                drNew["OpenBalanceCR"] = "0.00";
                drNew["Balance"] = "0.00";
                ds.Tables[0].Rows.Add(drNew);
            }
            else
            {
                foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
                {
                    if (drParentQry["LedgerName"] != null)
                        sLedgerName = drParentQry["LedgerName"].ToString();
                    if ((drParentQry["Total"] != null) && (drParentQry["Total"].ToString() != ""))
                        sName = decimal.Parse(drParentQry["Total"].ToString(), System.Globalization.NumberStyles.Float);
                    else
                        sName = 0;
                    if ((drParentQry["Pay"] != null) && (drParentQry["Pay"].ToString() != ""))
                        sPayName = decimal.Parse(drParentQry["Pay"].ToString(), System.Globalization.NumberStyles.Float);
                    else
                        sPayName = 0;
                    if ((drParentQry["Rec"] != null) && (drParentQry["Rec"].ToString() != ""))
                        sRecName = decimal.Parse(drParentQry["Rec"].ToString(), System.Globalization.NumberStyles.Float);
                    else
                        sRecName = 0;
                    if ((drParentQry["OpenBalanceDR"] != null) && (drParentQry["OpenBalanceDR"].ToString() != ""))
                        sOpDrName = decimal.Parse(drParentQry["OpenBalanceDR"].ToString(), System.Globalization.NumberStyles.Float);
                    else
                        sOpDrName = 0;
                    if ((drParentQry["OpenBalanceCR"] != null) && (drParentQry["OpenBalanceCR"].ToString() != ""))
                        sOpCrName = decimal.Parse(drParentQry["OpenBalanceCR"].ToString(), System.Globalization.NumberStyles.Float);
                    else
                        sOpCrName = 0;
                    if ((drParentQry["balance"] != null) && (drParentQry["balance"].ToString() != ""))
                        temp_balance = decimal.Parse(drParentQry["balance"].ToString(), System.Globalization.NumberStyles.Float);
                    else
                        temp_balance = 0;
                    if (temp_balance > 0)
                    {
                        drNew = dt.NewRow();
                        drNew["LedgerName"] = sLedgerName;
                        drNew["Total"] = sName;
                        drNew["Pay"] = sPayName;
                        drNew["Rec"] = sRecName;
                        drNew["OpenBalanceDR"] = sOpDrName;
                        drNew["OpenBalanceCR"] = sOpCrName;
                        drNew["Balance"] = temp_balance;
                        ds.Tables[0].Rows.Add(drNew);
                    }
                    else
                    {
                        drNew = dt.NewRow();
                        drNew["LedgerName"] = sLedgerName;
                        drNew["Total"] = sName;
                        drNew["Pay"] = sPayName;
                        drNew["Rec"] = sRecName;
                        drNew["OpenBalanceDR"] = sOpDrName;
                        drNew["OpenBalanceCR"] = sOpCrName;
                        drNew["Balance"] = temp_balance;
                        ds.Tables[0].Rows.Add(drNew);
                    }
                }
            }
            oleConn.Close();
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet generateOutStandingIDTotal(int iGroupID, string sDataSource)
    {
        string sLedgerName = string.Empty, sConStr = string.Empty, sAliasName = string.Empty, sQry = string.Empty;
        sConStr = sDataSource;

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        sQry = "SELECT sum((IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(credittable.creditamount),0,credittable.creditamount))) as MainTotal FROM (tblLedger   left  join (SELECT DebtorID,sum(Amount) as debitamount FROM tblDayBook WHERE DebtorID > 0 group by DebtorID) debittable  on tblLedger.LedgerID=debittable.DebtorID) left join (SELECT CreditorID,sum(Amount) as creditamount FROM tblDayBook WHERE CreditorID > 0 group by CreditorID) credittable on tblLedger.LedgerID= credittable.CreditorID where GroupID=" + iGroupID + " and (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) <> 0 group by ((IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)))";


        ds = new DataSet();

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, sQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }




    public DataSet GetSMSTextData(string connection, string txtSearch, string dropDown)
    {
        if (connection == null)
        {
            throw new Exception("Connection Expired");
        }

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        try
        {
            if (dropDown == "Type")
            {
                if (txtSearch != null)
                {
                    dbQry = "Select 0 as ID,'' as SMSType, ''as SMSText From tblSMSText Where 1=0 Union select * from tblSMSText where SMSType  like '" + txtSearch + "' Order by SMSType Asc";
                }
                else
                {
                    dbQry = "Select 0 as ID,'' as SMSType, ''as SMSText From tblSMSText Where 1=0 Union select * from tblSMSText Order by SMSType Asc";
                }
            }
            else if (dropDown == "SMSText")
            {
                if (txtSearch != null)
                {
                    dbQry = "Select 0 as ID,'' as SMSType, ''as SMSText From tblSMSText Where 1=0 Union select * from tblSMSText where smstext  like '" + txtSearch + "' Order by SMSType Asc";
                }
                else
                {
                    dbQry = "Select 0 as ID,'' as SMSType, ''as SMSText From tblSMSText Where 1=0 Union select * from tblSMSText Order by SMSType Asc";
                }
            }
            else
            {
                if (txtSearch != null)
                {
                    dbQry = "Select 0 as ID,'' as SMSType, ''as SMSText From tblSMSText Where 1=0 Union select * from tblSMSText Order by SMSType Asc";
                }
                else
                {
                    dbQry = "Select 0 as ID,'' as SMSType, ''as SMSText From tblSMSText Where 1=0 Union select * from tblSMSText Order by SMSType Asc";
                }
            }

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            //DataSet dsRet = new DataSet();
            DataTable dt = new DataTable();
            DataColumn dc;

            dc = new DataColumn("ID");
            dt.Columns.Add(dc);

            dc = new DataColumn("SMSType");
            dt.Columns.Add(dc);

            dc = new DataColumn("SMSText");
            dt.Columns.Add(dc);

            ds.Tables.Add(dt);

            DataRow dr = ds.Tables[0].NewRow();

            dr["ID"] = "0";
            dr["SMSType"] = string.Empty;
            dr["SMSText"] = string.Empty;
            ds.Tables[0].Rows.InsertAt(dr, 0);

            return ds;

            //return ds;

            //}
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }



    //Get Expense Types 2/1/2013
    public DataSet getexpensetypes()
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select LedgerID,LedgerName from tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID where tblLedger.GroupID = " + 8 + " order by tblLedger.ledgername";
            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet getexpensepayments(string condtion, DateTime dtSdate, DateTime dtEdate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string sQry = string.Empty;

        sQry = "SELECT sum(Amount) as Amt,L.LedgerName,TransDate ";
        sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.CreditorID ) ";
        sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
        sQry = sQry + "WHERE (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) ";
        sQry = sQry + " AND (G.GroupID= 8 ) ";
        sQry = sQry + " AND (H.HeadingID = 11 ) ";
        sQry = sQry + " group by transdate,L.LedgerName ";
        sQry = sQry + " Union All ";
        sQry = sQry + "SELECT sum(Amount) as Amt,L.LedgerName,TransDate ";
        sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.DebtorID ) ";
        sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
        sQry = sQry + " WHERE (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) ";
        sQry = sQry + " AND (G.GroupID= 8 ) ";
        sQry = sQry + " AND (H.HeadingID = 11 ) ";
        sQry = sQry + " group by transdate,L.LedgerName ";
        sQry = sQry + " Order by TransDate ";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, sQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public DataSet getexpensepaymentsDate(string condtion, DateTime dtSdate, DateTime dtEdate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string sQry = string.Empty;

        sQry = "SELECT sum(Amount) as Amt,TransDate ";
        sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.CreditorID ) ";
        sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
        sQry = sQry + "WHERE (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) ";
        sQry = sQry + " AND (G.GroupID= 8 ) ";
        sQry = sQry + " AND (H.HeadingID = 11 ) ";
        sQry = sQry + " group by transdate";
        sQry = sQry + " Union All ";
        sQry = sQry + "SELECT sum(Amount) as Amt,TransDate ";
        sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.DebtorID ) ";
        sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
        sQry = sQry + " WHERE (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) ";
        sQry = sQry + " AND (G.GroupID= 8 ) ";
        sQry = sQry + " AND (H.HeadingID = 11 ) ";
        sQry = sQry + " group by transdate";
        sQry = sQry + " Order by TransDate ";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, sQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public DataSet getmonthexpensemonth(string condtion)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string sQry = string.Empty;

        sQry = "SELECT month(transdate) as monthname,sum(amount) as total ";
        sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.CreditorID ) ";
        sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
        sQry = sQry + " WHERE (G.GroupID= 8 ) ";
        sQry = sQry + " AND (H.HeadingID = 11 ) ";
        sQry = sQry + " group by month(transdate)";
        sQry = sQry + " Union All ";
        sQry = sQry + "SELECT month(transdate) as monthname,sum(amount) as total ";
        sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.DebtorID ) ";
        sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
        sQry = sQry + " WHERE (G.GroupID= 8 ) ";
        sQry = sQry + " AND (H.HeadingID = 11 ) ";
        sQry = sQry + " group by month(transdate)";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, sQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public DataSet getmonthexpenseheading(string condtion)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string sQry = string.Empty;

        sQry = "SELECT month(transdate) as monthname,l.ledgername,sum(amount) as total ";
        sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.CreditorID ) ";
        sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
        sQry = sQry + " WHERE (G.GroupID= 8 ) ";
        sQry = sQry + " AND (H.HeadingID = 11 ) ";
        sQry = sQry + " group by month(transdate),l.ledgername";
        sQry = sQry + " Union All ";
        sQry = sQry + "SELECT month(transdate) as monthname,l.ledgername,sum(amount) as total ";
        sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.DebtorID ) ";
        sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
        sQry = sQry + " WHERE (G.GroupID= 8 ) ";
        sQry = sQry + " AND (H.HeadingID = 11 ) ";
        sQry = sQry + " group by month(transdate),l.ledgername";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, sQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet getdailysales(DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT BillDate As LinkName,Sum(tblSalesItems.Qty) AS Quantity, Sum(tblSalesItems.Qty*Rate) As NetRate , Sum((tblSalesItems.qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*rate)) AS SalesDiscount,");
            dbQry.Append(" Sum(((tblSalesItems.discount/100)*tblSalesItems.qty*rate)) AS ActualDiscount,");
            dbQry.Append("Sum((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)+((VAT/100)*((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((tblSalesItems.Qty*rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)) * VAT/100 ) AS ActualVAT,");
            dbQry.Append(" Sum((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)+((CST/100)*((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)))) AS SumCST,");
            dbQry.Append(" Sum(tblSales.Freight) AS SumFreight,Sum(tblSales.LoadUnload) As Loading,");
            dbQry.Append(" Sum( ((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)) * CST/100 ) AS ActualCST FROM tblSalesItems,tblSales WHERE tblSales.Billno=tblSalesItems.Billno and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# Group By BillDate");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet getmonthsales(DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT month(BillDate) as monthname,Sum(tblSalesItems.Qty) AS Quantity, Sum(tblSalesItems.Qty*Rate) As NetRate , Sum((tblSalesItems.qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*rate)) AS SalesDiscount,");
            dbQry.Append(" Sum(((tblSalesItems.discount/100)*tblSalesItems.qty*rate)) AS ActualDiscount,");
            dbQry.Append("Sum((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)+((VAT/100)*((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)))) AS SumVAT,");
            dbQry.Append(" Sum( ((tblSalesItems.Qty*rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)) * VAT/100 ) AS ActualVAT,");
            dbQry.Append(" Sum((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)+((CST/100)*((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)))) AS SumCST,");
            dbQry.Append(" Sum(tblSales.Freight) AS SumFreight,Sum(tblSales.LoadUnload) As Loading,");
            dbQry.Append(" Sum( ((tblSalesItems.Qty*Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)) * CST/100 ) AS ActualCST FROM tblSalesItems,tblSales WHERE tblSales.Billno=tblSalesItems.Billno and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' group By  month(BillDate)");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }


    //8-1-2013

    public DataSet ListAllProductName()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = "SELECT Distinct productname FROM tblProductMaster Order By productname Asc";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet gettotalproductsales(DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = "SELECT tblProductMaster.ProductName,tblSales.Billdate, SUM(tblSalesItems.Qty) As Quantity FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode AND tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='NO' and UCASE(tblSales.DeliveryNote)='NO' and UCASE(tblSales.InternalTransfer)='NO' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSales.Billdate,tblProductMaster.ProductName";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet gettotalproductsalesdate(DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = "SELECT tblSales.Billdate, SUM(tblSalesItems.Qty) As Quantity FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode AND tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='NO' and UCASE(tblSales.DeliveryNote)='NO' and UCASE(tblSales.InternalTransfer)='NO' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSales.Billdate";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet ListAllBrands()
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;



        //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
        dbQry = "SELECT Distinct ProductDesc FROM tblProductMaster Order By ProductDesc Asc";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public DataSet gettotalbrandsales(DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = "SELECT tblProductMaster.Productdesc,tblSales.Billdate, SUM(tblSalesItems.Qty) As Quantity FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode AND tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='NO' and UCASE(tblSales.DeliveryNote)='NO' and UCASE(tblSales.InternalTransfer)='NO' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSales.Billdate,tblProductMaster.Productdesc";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet gettotalbrandsalesdate(DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = "SELECT tblSales.Billdate, SUM(tblSalesItems.Qty) As Quantity FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode AND tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='NO' and UCASE(tblSales.DeliveryNote)='NO' and UCASE(tblSales.InternalTransfer)='NO' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSales.Billdate";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }


    //9-1-2013
    public DataSet ListAllCategory()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = "SELECT distinct tblcategories.categoryname FROM tblProductMaster inner join tblcategories on tblProductMaster.categoryid= tblcategories.categoryid Order By tblcategories.categoryname Asc";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet gettotalcatsales(DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = "SELECT tblSales.Billdate, SUM(tblSalesItems.Qty) As Quantity,tblcategories.categoryname FROM tblSales,tblSalesItems,tblProductMaster,tblcategories WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode AND tblProductmaster.categoryid = tblcategories.categoryid AND tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='NO' and UCASE(tblSales.DeliveryNote)='NO' and UCASE(tblSales.InternalTransfer)='NO' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSales.Billdate,tblcategories.categoryname";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet gettotalcatsalesdate(DateTime sDate, DateTime eDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = "SELECT tblSales.Billdate, SUM(tblSalesItems.Qty) As Quantity FROM tblSales,tblSalesItems,tblProductMaster,tblcategories WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode AND tblProductmaster.categoryid = tblcategories.categoryid AND tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='NO' and UCASE(tblSales.DeliveryNote)='NO' and UCASE(tblSales.InternalTransfer)='NO' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By tblSales.Billdate";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }


    //Insert Purchase Order
    public int InsertPurchaseOrder(string Billno, DateTime BillDate, int SupplierID, int paymode, string Chequeno, int BankName, double Amount, string salesreturn, string srReason, double freight, double dLU, int BilitID, string intTrans, DataSet purchaseDS, string deliveryNote)
    {
        /*End Purchase Loading / Unloading Freight Change - March 16*/
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldSupplierID = 0;
        double oldAmt = 0;
        string sNarration = string.Empty;
        int creditorID = 0;
        int DebtorID = 3;
        int purchaseID = 0;
        string sVoucherType = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID

            if (paymode == 1)
                creditorID = 1;
            else if (paymode == 2)
                creditorID = BankName;
            else
                creditorID = SupplierID;

            //End Retriving the old Debtor and CreditorID
            if (salesreturn == "NO")
                sVoucherType = "PurchaseOrder";
            else
                //sVoucherType = "Sales Return";
                sVoucherType = " ";

            sNarration = sVoucherType + " - Bill No:" + Billno;

            //Purchase A/c - 3 will always be the debtor
            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebtorID);
            //double Debit = 0;

            //object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retDebit != null) && (retDebit != DBNull.Value))
            //{
            //    Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}

            ////double Payment = (double)manager.ExecuteScalar(CommandType.Text, "Select Amount from tblDayBook Where TransNo=" + TransNo);
            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebtorID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", creditorID);
            //double Credit = 0;
            //object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retCredit != null) && (retCredit != DBNull.Value))
            //{
            //    Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}
            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, creditorID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);
            ////End Updating the Debit and credit
            ////Start Delete the old record


            //dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,Chequeno,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
            //BillDate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, Chequeno, 0);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int NewTransNo = 0;

            //object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            //if ((retVal != null) && (retVal != DBNull.Value))
            //{
            //    NewTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
            //}
            //else
            //{
            //    NewTransNo = NewTransNo + 1;
            //}

            /*Start Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/
            dbQry = string.Format("INSERT INTO tblPurchaseOrder(Billno,BillDate,SupplierID,JournalID,Paymode,TotalAmt,salesreturn,salesreturnreason,freight,LoadUnload,BilitID,InternalTransfer,DeliveryNote) VALUES('{0}',Format('{1}', 'dd/mm/yyyy'),{2},{3},{4},{5},'{6}','{7}',{8},{9},{10},'{11}','{12}')",
            Billno, BillDate.ToShortDateString(), SupplierID, NewTransNo, paymode, Amount, salesreturn, srReason, freight, dLU, BilitID, intTrans, deliveryNote);
            /*Start Purchase Loading / Unloading Freight Change - March 16*/
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            object retPurchase = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(PurchaseID) FROM tblPurchaseOrder");

            if ((retPurchase != null) && (retPurchase != DBNull.Value))
            {
                purchaseID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(PurchaseID) FROM tblPurchaseOrder");
            }
            else
            {
                purchaseID = purchaseID + 1;
            }

            //Store the details in the Audit Table.
            //sAuditStr = "Transaction: " + TransNo + " got edited and deleted Record Details : SupplierID=" + SupplierID + ",CreditorID=3,Amount=" + oldAmt + " New Trans No :" + NewTransNo;
            //dbQry = string.Format("INSERT INTO  tblAudit(Description,Command) VALUES('{0}','{1}')", sAuditStr, "Edit and Update");
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //Adding the Purchase Items Table

            int roleID = 0;
            string rolename = string.Empty;
            if (purchaseDS != null)
            {
                if (purchaseDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in purchaseDS.Tables[0].Rows)
                    {
                        //dbQry = string.Format("INSERT INTO tblPurchaseItems(purchaseID,itemcode,Qty,PurchaseRate,discount,vat,roleid,isRole,cst,nlp,discamt) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10})", purchaseID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["PurchaseRate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), roleID, rolename, Convert.ToDouble(dr["CST"]), Convert.ToDouble(dr["NLP"]), Convert.ToDouble(dr["Discountamt"]));

                        dbQry = string.Format("INSERT INTO tblPurchaseOrderItems(purchaseID,itemcode,Qty,PurchaseRate,discount,vat,roleid,isRole,cst,nlp,discamt) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10})", purchaseID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["PurchaseRate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), roleID, rolename, Convert.ToDouble(dr["CST"]), Convert.ToDouble(dr["NLP"]), Convert.ToDouble(dr["Discountamt"]));
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        //dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock + {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                        //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }
                }
            }

            //dbQry = string.Format("Update tblBilti SET Status = 'Closed' Where ID={0}", BilitID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();
            return purchaseID;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    //Update Purchase Order
    public int UpdatePurchaseOrder(int purchaseID, string Billno, DateTime BillDate, int SupplierID, int paymode, string Chequeno, int BankName, double Amount, string salesreturn, string srReason, double freight, double dLU, int BilitID, string intTrans, DataSet purchaseDS, string deliveryNote)
    {
        /*End Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;
        string sVoucherType = string.Empty;

        if (salesreturn.ToUpper() == "NO")
            sVoucherType = "PurchaseOrder";
        else
            //sVoucherType = "Sales Return";
            sVoucherType = " ";

        string sNarration = string.Empty;

        int creditorID = 0;
        int DebtorID = 3;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID
            dsOld = GetPurchaseForId(purchaseID);


            //if (dsOld.Tables[0].Rows[0]["JournalID"] != null)
            //{
            //    if (dsOld.Tables[0].Rows[0]["JournalID"].ToString() != string.Empty)
            //    {
            //        TransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["JournalID"].ToString());
            //    }

            //    if (dsOld.Tables[0].Rows[0]["BillNo"] != null)
            //        oldBillNo = dsOld.Tables[0].Rows[0]["BillNo"].ToString();
            //}
            //dbQry = string.Format("Select DebtorID,CreditorID,Amount from tblDaybook Where TransNo={0}", TransNo);
            //dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            //if (dsOld != null)
            //{
            //    if (dsOld.Tables.Count > 0)
            //    {
            //        oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
            //        oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
            //        oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
            //    }

            //}
            //End Retriving

            if (paymode == 1)
                creditorID = 1;
            else if (paymode == 2)
                creditorID = BankName;
            else
                creditorID = SupplierID;
            // sNarration = "Purchase - Bill No:" + Billno;
            sNarration = sVoucherType + " - Bill No:" + Billno;
            //Delete Purchase

            /*
             Step 1 : Decrese the Debit and Credit for the Old Debtor and Old Creditor.
             Step 2 : Delete the Entry From tblDayBook,tblPurchase,tblPurchaseItem.
             Step 3 : Increase the Debit and Credit for the new Debtor and new Creditor.
             Step 4 : Add Entry From tblDayBook,tblPurchase,tblPurchaseItem.
             Step 5 : Make an entry in the audit table.
             */
            //Step 1 - Start

            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", oldDebitID);

            //double DebitDel = 0;

            //object retDebitDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retDebitDel != null) && (retDebitDel != DBNull.Value))
            //{
            //    DebitDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}

            //dbQry = string.Format("Select BilitID from tblPurchase Where PurchaseID={0}", purchaseID);

            //object retBilitID = manager.ExecuteScalar(CommandType.Text, dbQry);

            //if ((retBilitID != null) && (retBilitID != DBNull.Value))
            //{
            //    oldBilitID = (int)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}

            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", DebitDel - oldAmt, oldDebitID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", oldCreditID);
            //double CreditDel = 0;

            //object retCreditDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retCreditDel != null) && (retCreditDel != DBNull.Value))
            //{
            //    CreditDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}
            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", CreditDel - oldAmt, oldCreditID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //Step 1 - End


            //Step 2 - Start
            //Start Delete the old record
            //dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("SELECT Qty,ItemCode,RoleID,isRole From tblPurchaseOrderItems WHERE PurchaseID={0}", purchaseID);
            DataSet purchasedS = (DataSet)manager.ExecuteDataSet(CommandType.Text, dbQry);
            /*Start March 15 Modification */
            double currStock = 0;
            double arrivedStock = 0;
            string itemStock = string.Empty;
            string itmCode = string.Empty;
            /*End March 15 Modification */
            if (purchasedS != null)
            {
                if (purchasedS.Tables.Count > 0)
                {
                    foreach (DataRow dr in purchasedS.Tables[0].Rows)
                    {
                        /*Start March 15 Modification */
                        itmCode = Convert.ToString(dr["ItemCode"]).Trim();
                        currStock = getStockInfo(Convert.ToString(dr["ItemCode"]).Trim(), "");
                        arrivedStock = currStock - Convert.ToDouble(dr["Qty"]);

                        itemStock = itemStock + itmCode + "^" + arrivedStock + "#";
                        /*End March 15 Modification */
                        //dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock - {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                        //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }


                }

            }
            dbQry = string.Format("Delete From tblPurchaseOrder Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblPurchaseOrderItems Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Deleting the old record


            //Step 2 - End


            //End Delete Purchase
            //Purchase A/c - 3 will always be the debtor
            //Step 3 - Start

            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebtorID);
            //double Debit = 0;

            //object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retDebit != null) && (retDebit != DBNull.Value))
            //{
            //    Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}
            ////double Payment = (double)manager.ExecuteScalar(CommandType.Text, "Select Amount from tblDayBook Where TransNo=" + TransNo);
            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebtorID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", creditorID);
            //double Credit = 0;

            //object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retCredit != null) && (retCredit != DBNull.Value))
            //{
            //    Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}

            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, creditorID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Updating the Debit and credit
            //Step 3 - End

            //Step 4 - Start
            //dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,Chequeno,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
            // BillDate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, Chequeno, 0);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int NewTransNo = 0;

            //object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            //if ((retVal != null) && (retVal != DBNull.Value))
            //{
            //    NewTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
            //}
            //else
            //{
            //    NewTransNo = NewTransNo + 1;
            //}
            /*Start Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/
            dbQry = string.Format("INSERT INTO tblPurchaseOrder(Billno,BillDate,SupplierID,JournalID,Paymode,TotalAmt,salesreturn,salesreturnreason,freight,LoadUnload,BilitID,InternalTransfer,DeliveryNote) VALUES('{0}',Format('{1}', 'dd/mm/yyyy'),{2},{3},{4},{5},'{6}','{7}',{8},{9},{10},'{11}','{12}')",
            Billno, BillDate.ToShortDateString(), SupplierID, NewTransNo, paymode, Amount, salesreturn, srReason, freight, dLU, BilitID, intTrans, deliveryNote);
            /*Start Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            object retPurchase = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(PurchaseID) FROM tblPurchaseOrder");

            if ((retPurchase != null) && (retPurchase != DBNull.Value))
            {
                purchaseID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(PurchaseID) FROM tblPurchaseOrder");
            }
            else
            {
                purchaseID = purchaseID + 1;
            }


            //Adding the Purchase Items Table
            object retRole = null;
            int roleID = 0;
            /*Start March 15 Modification */
            string[] itemArr;
            string[] itemChildArr;
            string chkItemCode = string.Empty;
            double chkStock = 0;
            double actStock = 0;
            string actItem = string.Empty;
            /*End March 15 Modification */
            if (purchaseDS != null)
            {
                if (purchaseDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in purchaseDS.Tables[0].Rows)
                    {

                        dbQry = string.Format("INSERT INTO tblPurchaseOrderItems(purchaseID,itemcode,Qty,PurchaseRate,discount,vat,roleid,isRole,CST,NLP,discamt) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10})", purchaseID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["PurchaseRate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), roleID, Convert.ToString(dr["isRole"]), Convert.ToDouble(dr["CST"]), Convert.ToDouble(dr["NLP"]), Convert.ToDouble(dr["Discountamt"]));
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        //dbQry = string.Format("INSERT INTO tblPurchaseItems() VALUES({0},'{1}',{2},{3},{4},{5})", purchaseID, Convert.ToString(dr["ItemCode"]), Convert.ToInt32(dr["Qty"]), Convert.ToDouble(dr["PurchaseRate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]));
                        //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        /*Start March 15 Modification */
                        //itemArr = itemStock.Split('#');
                        //for (int k = 0; k < itemArr.Length; k++)
                        //{
                        //    if (itemArr[k].Trim() != "")
                        //    {
                        //        itemChildArr = itemArr[k].Split('^');
                        //        chkStock = Convert.ToDouble(itemChildArr[1]);
                        //        chkItemCode = itemChildArr[0].ToString().Trim();
                        //        actStock = Convert.ToDouble(dr["Qty"]);
                        //        actItem = Convert.ToString(dr["Itemcode"]).Trim();
                        //        if (chkItemCode == actItem)
                        //        {
                        //            chkStock = chkStock + actStock;

                        //            if (chkStock < 0)
                        //            {
                        //                return -2;
                        //            }
                        //        }
                        //    }
                        //}
                        /*End March 15 Modification */
                        //dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock + {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());
                        //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }
                }
            }
            //Step 4 - End

            //Bilit Management
            //if (BilitID != oldBilitID)
            //{
            //    dbQry = string.Format("Update tblBilti SET Status = 'Closed' Where ID={0}", BilitID);
            //    manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //    if (oldBilitID != 0)
            //    {
            //        dbQry = string.Format("Update tblBilti SET Status = 'Open' Where ID={0}", oldBilitID);
            //        manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //    }
            //}

            //Step 5 - Start
            //Store the details in the Audit Table.
            //sAuditStr = "Purchase Transaction: " + TransNo + " got edited. Deleted Record Details : Bill No=" + oldBillNo + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt + " New Trans No :" + NewTransNo + " DateTime:" + DateTime.Now.ToString();

            //dbQry = string.Format("INSERT INTO  tblAudit(Description,Command) VALUES('{0}','{1}')", sAuditStr, "Edit and Update");
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //Step 5 -  End
            manager.CommitTransaction();
            return purchaseID;
        }

        catch (Exception ex)
        {
            manager.Transaction.Rollback();
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    //Delete Purchase Order
    public int DeletePurchaseOrder(int purchaseID, string Billno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        double oldAmt = 0;


        string sNarration = string.Empty;

        int creditorID = 0;
        int DebtorID = 3;
        int BilitID = 0;


        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID
            dsOld = GetPurchaseForId(purchaseID);


            //if (dsOld.Tables[0].Rows[0]["JournalID"] != null)
            //{
            //    if (dsOld.Tables[0].Rows[0]["JournalID"].ToString() != string.Empty)
            //    {
            //        TransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["JournalID"].ToString());
            //    }

            //    if (dsOld.Tables[0].Rows[0]["BillNo"] != null)
            //        oldBillNo = dsOld.Tables[0].Rows[0]["BillNo"].ToString();

            //}
            //dbQry = string.Format("Select DebtorID,CreditorID,Amount from tblDaybook Where TransNo={0}", TransNo);
            //dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            //if (dsOld != null)
            //{
            //    if (dsOld.Tables.Count > 0)
            //    {
            //        oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
            //        oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
            //        oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
            //    }

            //}

            //Step 1 - Start

            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", oldDebitID);
            //double DebitDel = 0;

            //object retDebitDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retDebitDel != null) && (retDebitDel != DBNull.Value))
            //{
            //    DebitDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}

            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", DebitDel - oldAmt, oldDebitID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", oldCreditID);
            //double CreditDel = 0;

            //object retCreditDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retCreditDel != null) && (retCreditDel != DBNull.Value))
            //{
            //    CreditDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}

            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", CreditDel - oldAmt, oldCreditID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select BilitID from tblPurchase Where PurchaseID={0}", purchaseID);

            //object retBilitID = manager.ExecuteScalar(CommandType.Text, dbQry);

            //if ((retBilitID != null) && (retBilitID != DBNull.Value))
            //{
            //    BilitID = (int)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}

            //Step 1 - End


            //Step 2 - Start
            //Start Delete the old record
            //dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = string.Format("SELECT Qty,ItemCode,RoleID,isRole From tblPurchaseOrderItems WHERE PurchaseID={0}", purchaseID);
            DataSet purchaseDS = (DataSet)manager.ExecuteDataSet(CommandType.Text, dbQry);
            /*Start Purchase Stock Negative Change - March 16 */
            double currStock = 0;
            double arrivedStock = 0;
            string itmCode = string.Empty;
            /*End Purchase Stock Negative Change - March 16 */
            if (purchaseDS != null)
            {
                if (purchaseDS.Tables.Count > 0)
                {
                    //foreach (DataRow dr in purchaseDS.Tables[0].Rows)
                    //{
                    //    /*Start Purchase Stock Negative Change - March 16 */
                    //    itmCode = Convert.ToString(dr["ItemCode"]).Trim();
                    //    //currStock = getStockInfo(Convert.ToString(dr["ItemCode"]).Trim());
                    //    //arrivedStock = currStock - Convert.ToDouble(dr["Qty"]);

                    //    if (arrivedStock >= 0)
                    //    {
                    //        /*End Purchase Stock Negative Change - March 16 */
                    //        //dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock = tblProductMaster.Stock - {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim());

                    //        //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    //        if (dr["isRole"] != null)
                    //        {
                    //            if (Convert.ToString(dr["isrole"]) == "Y")
                    //            {
                    //                //dbQry = string.Format("DELETE FROM tblItemRoleMaster  WHERE RoleID={0}", Convert.ToInt32(dr["RoleID"]));
                    //                //manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    //            }
                    //        }
                    //    }
                    //    /*Start Purchase Stock Negative Change - March 16 */
                    //    else
                    //    {
                    //        return -2;
                    //    }
                    //    /*End Purchase Stock Negative Change - March 16*/
                    //}
                }
            }

            dbQry = string.Format("Delete From tblPurchaseOrder Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblPurchaseOrderItems Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Deleting the old record


            if (BilitID != 0)
            {
                //dbQry = string.Format("Update tblBilti SET Status = 'Open' Where ID={0}", BilitID);
                //manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }


            //sAuditStr = "Purchase Transaction: " + TransNo + " got deleted old Record Details : BillNo=" + oldBillNo + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt;
            //dbQry = string.Format("INSERT INTO  tblAudit(Description,Command) VALUES('{0}','{1}')", sAuditStr, "Delete");
            ///*Start Purchase Stock Negative Change - March 16 -- (changed based on return type)*/
            //int del = manager.ExecuteNonQuery(CommandType.Text, dbQry);
            ///*End Purchase Stock Negative Change - March 16 -- (Commented the below method)*/


            int del = 0;

            manager.CommitTransaction();
            return del;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    //Get Purchase Order
    public DataSet GetPurchaseOrder()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";

            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                dbQry.Append("SELECT tblPurchaseorder.PurchaseId,tblPurchaseorder.Billno,Format(tblPurchaseorder.Billdate, 'dd/mm/yyyy') As BillDate,tblPurchaseorder.SupplierID,tblPurchaseorder.TotalAmt,tblPurchaseorder.JournalID,tblPurchaseorder.SalesReturn,tblPurchaseorder.SalesReturnReason,Supplier.ledgername As supplier");
                dbQry.Append(" FROM (tblPurchaseorder INNER JOIN tblLedger Supplier ON tblPurchaseorder.SupplierID = Supplier.LedgerID) Where tblPurchaseorder.BillDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ORDER BY tblPurchaseorder.BillDate Desc");

            }
            else
            {
                dbQry.Append("SELECT tblPurchaseorder.PurchaseId,tblPurchaseorder.Billno,Format(tblPurchaseorder.Billdate, 'dd/mm/yyyy') As BillDate,tblPurchaseorder.Paymode,tblPurchaseorder.SupplierID,tblPurchaseorder.TotalAmt,tblPurchaseorder.JournalID,tblPurchaseorder.SalesReturn,tblPurchaseorder.SalesReturnReason,Supplier.ledgername As supplier");
                dbQry.Append(" FROM (tblPurchaseorder INNER JOIN tblLedger Supplier ON tblPurchaseorder.SupplierID = Supplier.LedgerID) ORDER BY tblPurchaseorder.BillDate Desc");
            }
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    //Get Purchase Order Id
    public DataSet GetPurchaseOrderForId(String Billno, String TransNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                dbQry.Append("SELECT tblPurchaseorder.PurchaseId,tblPurchaseorder.Billno,Format(tblPurchaseorder.Billdate, 'dd/mm/yyyy') As BillDate,tblPurchaseorder.Paymode,tblPurchaseorder.TotalAmt,tblPurchaseorder.SupplierID,tblPurchaseorder.JournalID,tblPurchaseorder.SalesReturn,tblPurchaseorder.SalesReturnReason,Supplier.LedgerName As Supplier ");
                dbQry.Append(" FROM (tblPurchaseorder INNER JOIN tblLedger Supplier ON tblPurchaseorder.SupplierID = Supplier.LedgerID)");
                dbQry.Append(" Where tblPurchaseorder.BillDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ");

                //if (TransNo != "")
                //{
                //    if (TransNo != "0")
                //        dbQry.Append(" AND tblDayBook.TransNo = " + TransNo + "");
                //}

                if (Billno != "")
                {
                    if (Billno != "0")
                        dbQry.Append(" AND tblPurchaseorder.Billno='" + Billno.Trim() + "'");
                }

                dbQry.Append(" ORDER BY tblPurchaseorder.BillDate Desc");

            }
            else
            {
                dbQry.Append("SELECT tblPurchaseorder.PurchaseId,tblPurchaseorder.Billno,Format(tblPurchaseorder.Billdate, 'dd/mm/yyyy') As BillDate,tblPurchaseorder.Paymode,tblPurchaseorder.TotalAmt,tblPurchaseorder.SupplierID,tblPurchaseorder.JournalID,tblPurchaseorder.SalesReturn,tblPurchaseorder.SalesReturnReason,Supplier.LedgerName As Supplier ");
                dbQry.Append(" FROM (tblPurchaseorder INNER JOIN tblLedger Supplier ON tblPurchaseorder.SupplierID = Supplier.LedgerID) ");
                dbQry.Append(" ORDER BY tblPurchaseorder.BillDate Desc");
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    //Get Purchase Order Ids
    public DataSet GetPurchaseOrderForId(int purchaseID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                /*Start Purchase Loading / Unloading Freight Change - March 16*/
                dbQry.Append("SELECT tblPurchaseorder.PurchaseId,tblPurchaseorder.Billno,tblPurchaseorder.DeliveryNote, tblPurchaseorder.Billdate,tblPurchaseorder.Paymode,tblPurchaseorder.TotalAmt,tblPurchaseorder.InternalTransfer,tblPurchaseorder.SupplierID,tblPurchaseorder.JournalID,tblPurchaseorder.SalesReturn,tblPurchaseorder.SalesReturnReason,tblPurchaseorder.LoadUnload,tblPurchaseorder.Freight,IIF(tblPurchaseorder.BilitID IS NULL,0,tblPurchaseorder.BilitID) AS BilitID ");
                /*Start Purchase Loading / Unloading Freight Change - March 16*/
                dbQry.Append(" FROM tblPurchaseorder ");
                dbQry.Append(" Where tblPurchaseorder.purchaseID=" + purchaseID + " AND tblPurchaseorder.BillDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ORDER BY tblPurchaseorder.BillDate Desc");
            }
            else
            {
                /*Start Purchase Loading / Unloading Freight Change - March 16*/
                dbQry.Append("SELECT tblPurchaseorder.PurchaseId,tblPurchaseorder.Billno,tblPurchaseorder.DeliveryNote,tblPurchaseorder.Billdate,tblPurchaseorder.Paymode,tblPurchaseorder.TotalAmt,tblPurchaseorder.InternalTransfer,tblPurchaseorder.SupplierID,tblPurchaseorder.JournalID,tblPurchaseorder.SalesReturn,tblPurchaseorder.SalesReturnReason,tblPurchaseorder.LoadUnload,tblPurchaseorder.Freight,IIF(tblPurchaseorder.BilitID IS NULL,0,tblPurchaseorder.BilitID) AS BilitID ");
                /*Start Purchase Loading / Unloading Freight Change - March 16*/
                dbQry.Append(" FROM tblPurchaseorder");
                dbQry.Append("  ORDER BY tblPurchaseorder.BillDate Desc");
            }
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public DataSet GetPurchaseOrderItemsForId(int purchaseId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        try
        {
            dbQry.Append("Select tblPurchaseOrderItems.ItemCode,tblProductMaster.ProductName,tblProductMaster.ProductDesc,tblProductMaster.Measure_Unit,tblPurchaseOrderItems.PurchaseRate,tblPurchaseOrderItems.Qty,");
            dbQry.Append("tblPurchaseOrderItems.discount,tblPurchaseOrderItems.Vat,tblPurchaseOrderItems.CST,tblPurchaseOrderItems.NLP,tblPurchaseOrderItems.discamt,tblPurchaseOrderItems.PurchaseID,tblPurchaseOrderItems.RoleID,tblPurchaseOrderItems.isRole,tblProductMaster.Model FROM tblPurchaseOrderItems INNER JOIN tblProductmaster ON tblPurchaseOrderItems.itemCode = tblProductMaster.itemCode");
            dbQry.Append(" Where tblPurchaseOrderItems.purchaseID = " + purchaseId);
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public int isDuplicateOrderBill(string Billno, int SupplierID)
    {
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;
        dbQry = "SELECT COUNT(*) FROM tblPurchaseOrder WHERE Billno='" + Billno + "' and SupplierID=" + SupplierID;

        try
        {
            int cnt = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                cnt = (int)manager.ExecuteScalar(CommandType.Text, dbQry);
            }
            dbQry2 = "SELECT COUNT(*) FROM TemptblPurchaseOrder WHERE Billno='" + Billno + "' and SupplierID=" + SupplierID;
            int tcnt = 0;
            object retTVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retTVal != null) && (retTVal != DBNull.Value))
            {
                tcnt = (int)manager.ExecuteScalar(CommandType.Text, dbQry2);
            }
            cnt = cnt + tcnt;

            return cnt;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    //Stoct Statement (19-01-2013)

    public DataSet getstockstatement(string sDataSource, DateTime startDate, DateTime endDate, string itemCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        string sQry = string.Empty;
        string oQry = string.Empty;
        string sConStr = string.Empty;
        string tQry = string.Empty;
        string pQry = string.Empty;

        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dso, dsSales, dsPurcahse;
        oleCmd = new SqlCommand();

        Double closestock;

        try
        {
            manager.Open();

            DataSet dsf;
            DataTable dt;
            DataRow drNew;
            DataColumn dc;
            dsf = new DataSet();
            dt = new DataTable();
            dc = new DataColumn("ProductName");
            dt.Columns.Add(dc);
            dc = new DataColumn("Brand");
            dt.Columns.Add(dc);
            dc = new DataColumn("Model");
            dt.Columns.Add(dc);
            dc = new DataColumn("Opening");
            dt.Columns.Add(dc);
            dc = new DataColumn("Purchase");
            dt.Columns.Add(dc);
            dc = new DataColumn("Sales");
            dt.Columns.Add(dc);
            //dc = new DataColumn("Closing");
            //dt.Columns.Add(dc);
            dsf.Tables.Add(dt);



            tQry = ("select * from tblproductmaster order by productname ");
            //oleCmd.CommandText = tQry;
            //oleCmd.CommandType = CommandType.Text;
            //oleAdp = new SqlDataAdapter(oleCmd);
            //ds = new DataSet();
            //oleAdp.Fill(ds);
            ds = manager.ExecuteDataSet(CommandType.Text, tQry.ToString());

            drNew = dt.NewRow();
            drNew["ProductName"] = string.Empty;
            drNew["Brand"] = string.Empty;
            drNew["Model"] = string.Empty;
            drNew["Opening"] = " ";
            drNew["Purchase"] = " ";
            drNew["Sales"] = " ";
            //drNew["Closing"] = " ";
            dsf.Tables[0].Rows.Add(drNew);

            foreach (DataRow dr in ds.Tables[0].Rows)
            {
                var item = dr["ItemCode"].ToString();
                closestock = 0;

                drNew = dt.NewRow();
                drNew["ProductName"] = dr["productname"].ToString();
                drNew["Brand"] = dr["productdesc"].ToString();
                drNew["Model"] = dr["model"].ToString();

                oQry = ("SELECT ItemCode,OpeningStock From tblStock where itemcode= '" + item + "' ");
                //oleCmd.CommandText = oQry;
                //oleCmd.CommandType = CommandType.Text;
                //oleAdp = new SqlDataAdapter(oleCmd);
                //dso = new DataSet();
                //oleAdp.Fill(dso);
                dso = manager.ExecuteDataSet(CommandType.Text, oQry.ToString());
                object retVal = manager.ExecuteScalar(CommandType.Text, oQry);
                if (dso.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow drr in dso.Tables[0].Rows)
                    {
                        drNew["Opening"] = drr["OpeningStock"];
                        if (retVal != DBNull.Value)
                            closestock = Convert.ToDouble(drr["OpeningStock"]);
                    }
                }

                pQry = "select sum(qty) As purchasetot from tblpurchaseitems a,tblpurchase b,tblledger c where a.purchaseid=b.purchaseid AND b.supplierid = c.ledgerid and (b.billdate >=#" + startDate.ToString("MM/dd/yyyy") + "# AND b.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "#) AND  itemcode='" + item + "' ";
                //oleCmd.CommandText = pQry;
                //oleCmd.CommandType = CommandType.Text;
                //oleAdp = new SqlDataAdapter(oleCmd);
                //dsPurcahse = new DataSet();
                //oleAdp.Fill(dsPurcahse);
                dsPurcahse = manager.ExecuteDataSet(CommandType.Text, pQry.ToString());
                object rVal = manager.ExecuteScalar(CommandType.Text, pQry);
                if (dsPurcahse.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow drr in dsPurcahse.Tables[0].Rows)
                    {
                        drNew["Purchase"] = drr["purchasetot"];
                        if (rVal != DBNull.Value)
                            closestock = closestock + Convert.ToDouble(drr["purchasetot"]);
                    }
                }

                sQry = "select sum(c.qty) As salestot from tblsalesitems c,tblsales d  where c.billno=d.billno AND d.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# AND d.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# AND d.cancelled=false and itemcode='" + item + "' ";
                //oleCmd.CommandText = sQry;
                //oleCmd.CommandType = CommandType.Text;
                //oleAdp = new SqlDataAdapter(oleCmd);
                //dsSales = new DataSet();
                //oleAdp.Fill(dsSales);
                dsSales = manager.ExecuteDataSet(CommandType.Text, sQry.ToString());
                object rtVal = manager.ExecuteScalar(CommandType.Text, sQry);

                if (dsSales.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow drr in dsSales.Tables[0].Rows)
                    {
                        drNew["Sales"] = drr["salestot"];
                        if (rtVal != DBNull.Value)
                            closestock = closestock - Convert.ToDouble(drr["salestot"]);
                    }
                }



                //drNew["Closing"] = closestock;
                dsf.Tables[0].Rows.Add(drNew);
                closestock = 0;

            }



            //ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (dsf.Tables[0].Rows.Count > 0)
                return dsf;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }


    //Duplicate Formula Definition

    public string isDuplicateFormule(string FormulaName)
    {
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;



        try
        {
            string cnt = string.Empty;

            dbQry = "SELECT FormulaName FROM tblFormula WHERE FormulaName='" + FormulaName + "' ";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                cnt = (string)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            return cnt.ToString();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public int RevertChequeused_conn(string Chequeno, int BankName, string conn)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(conn);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        int chqID = 0;

        try
        {
            dbQry = string.Format("Update tblChequeitems Set Status='N' Where ChequeNo='" + Chequeno + "' and BankID=" + BankName + "");
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            return chqID = 1;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public int UpdateChequeused_conn(string Chequeno, int BankName, string conn)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(conn);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        int chqID = 0;

        try
        {
            dbQry = string.Format("Update tblChequeitems Set Status='Y' Where ChequeNo='" + Chequeno + "' and BankID=" + BankName + "");
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            return chqID = 1;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public int UpdateReturnQty(int SalesID, int RtnQty, int Itemcode, string RtnStatus, string DocStatus)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        int chqID = 0;

        try
        {
            dbQry = string.Format("Update tblSalesItems Set ReturnQty='" + RtnQty + "',PrdReturnStatus='" + RtnStatus + "' Where BillNo='" + SalesID + "' and ItemCode=" + Itemcode + "");
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            return chqID = 1;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public int RevertChequeused(string Chequeno, int BankName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        int chqID = 0;

        try
        {
            dbQry = string.Format("Update tblChequeitems Set Status='N' Where ChequeNo='" + Chequeno + "' and BankID=" + BankName + "");
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            return chqID = 1;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public int UpdateChequeused(string Chequeno, int BankName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        int chqID = 0;

        try
        {
            dbQry = string.Format("Update tblChequeitems Set Status='Y' Where ChequeNo='" + Chequeno + "' and BankID=" + BankName + "");
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            return chqID = 1;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public int UpdatePurchaseRtnStatus(int iPurID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet dsd = new DataSet();
        string dbQry = string.Empty;
        string dbQ = string.Empty;
        string rtnstatus = string.Empty;
        int chqID = 0;

        try
        {
            //dbQ = "SELECT ReturnQty From tblSalesItems Where BillNo=" + iSalesID + " and ItemCode='" + Convert.ToString(dr["Prd"]) + "'";
            dbQ = "SELECT distinct PrdReturnStatus from tblpurchaseitems where purchaseID=" + iPurID + " group by PrdReturnStatus";
            manager.Open();
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count == 1)
            {
                rtnstatus = dsd.Tables[0].Rows[0]["PrdReturnStatus"].ToString();

                if (rtnstatus == "YES")
                {
                    dbQry = string.Format("Update tblPurchase Set InvoiceReturnStatus='YES' Where PurchaseID=" + iPurID + "");
                    manager.Open();
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                }
            }
            return chqID = 1;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public int UpdateSalesRtnStatus(int iSalesID,string branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet dsd = new DataSet();
        string dbQry = string.Empty;
        string dbQ = string.Empty;
        string rtnstatus = string.Empty;
        int chqID = 0;

        try
        {
            //dbQ = "SELECT ReturnQty From tblSalesItems Where BillNo=" + iSalesID + " and ItemCode='" + Convert.ToString(dr["Prd"]) + "'";
            dbQ = "SELECT distinct PrdReturnStatus from tblsalesitems where BranchCode='" + branchcode + "' and BillNo=" + iSalesID + " group by PrdReturnStatus";
            manager.Open();
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count == 1)
            {
                rtnstatus = dsd.Tables[0].Rows[0]["PrdReturnStatus"].ToString();

                if (rtnstatus == "YES")
                {
                    dbQry = string.Format("Update tblSales Set InvoiceReturnStatus='YES' Where BillNo=" + iSalesID + " and BranchCode='" + branchcode + "'");
                    manager.Open();
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                }
            }
            return chqID = 1;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    /*Start Purchase Loading / Unloading Freight Change - March 16 Parameter Added double freight, double dLU,*/
    /*Start InvoiceNo and InvoiceDate*/
    public int InsertPurchase(string Billno, DateTime BillDate, int SupplierID, int paymode, string Chequeno, int BankName, double Amount, string salesreturn, string srReason, double freight, double dLU, int BilitID, string intTrans, DataSet purchaseDS, string deliveryNote, string Invoiceno, DateTime InvoiceDate, double discamount, double discper, double dcbillno, double TotalWORndOff, string usernam, string narration2, int iSalesID, string Branchcode, string connection)
    {
        /*End Purchase Loading / Unloading Freight Change - March 16*/
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldSupplierID = 0;
        double oldAmt = 0;
        string sNarration = string.Empty;
        int creditorID = 0;
        int DebtorID = 3;
        int purchaseID = 0;
        int AddRtnQty = 0;
        string sVoucherType = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;
        string Prdrtnstatus = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID

            //if (paymode == 1)
            //    creditorID = 1;
            //else if (paymode == 2)
            //    creditorID = BankName;
            //else
            //    creditorID = SupplierID;

            int cid = 0;
            cid = getPurchaseACLedgerId(connection, Branchcode);
            DebtorID = cid;

            int did = 0;
            if (paymode == 1)
            {
                did = getCashACLedgerId(connection, Branchcode);
                creditorID = did;
            }
            else if (paymode == 2)
                creditorID = BankName;
            else
                creditorID = SupplierID;


            //End Retriving the old Debtor and CreditorID
            if (salesreturn == "NO")
                sVoucherType = "Purchase";
            else
                sVoucherType = "Sales Return";

            sNarration = sVoucherType + " - Bill No:" + Billno;
            //Purchase A/c - 3 will always be the debtor
            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebtorID);
            //double Debit = 0;

            //object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retDebit != null) && (retDebit != DBNull.Value))
            //{
            //    Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}

            ////double Payment = (double)manager.ExecuteScalar(CommandType.Text, "Select Amount from tblDayBook Where TransNo=" + TransNo);
            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebtorID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", creditorID);
            //double Credit = 0;
            //object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retCredit != null) && (retCredit != DBNull.Value))
            //{
            //    Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}
            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, creditorID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Updating the Debit and credit
            //Start Delete the old record


            dbQ = "SELECT KeyValue From tblSettings WHERE KEYNAME='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,Chequeno,RefNo,BranchCode) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8})",
                    InvoiceDate.ToString("yyyy-MM-dd"), DebtorID, creditorID, Amount, sNarration, sVoucherType, Chequeno, 0, Branchcode);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, "", "InsertPurchase");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,Chequeno,RefNo,BranchCode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},'{8}')",
            InvoiceDate.ToString("yyyy-MM-dd"), DebtorID, creditorID, Amount, sNarration, sVoucherType, Chequeno, 0, Branchcode);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int NewTransNo = 0;

            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                //NewTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
                NewTransNo = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }


            if (Logsave == "YES")
            {
                string value1 = string.Empty;
                string value2 = string.Empty;
                string value3 = string.Empty;

                int middlePos = 0;

                logdescription = string.Format("INSERT INTO tblPurchase(Billno,BillDate,SupplierID,JournalID,Paymode,TotalAmt,salesreturn,salesreturnreason,freight,LoadUnload,BilitID,InternalTransfer,DeliveryNote,InvoiceNo,InvoiceDate,discamount,discper,dcbillno,TotalWORndOff,InvoiceReturnStatus,BranchCode) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20})",
                    Billno, BillDate.ToString("yyyy-MM-dd"), SupplierID, NewTransNo, paymode, Amount, salesreturn, srReason, freight, dLU, BilitID, intTrans, deliveryNote, Invoiceno, InvoiceDate, discamount, discper, dcbillno, TotalWORndOff, "NO", Branchcode);
                logdescription = logdescription.Trim();
                if (logdescription.Length > 255)
                {
                    value1 = logdescription.Substring(0, 255);

                    middlePos = logdescription.Length - (value1.Length);
                    if (middlePos > 0)
                        value2 = logdescription.Substring(255, middlePos);
                    else
                        value2 = "";

                    middlePos = logdescription.Length - (value1.Length + value2.Length);
                    if (middlePos > 0)
                        value3 = logdescription.Substring(510, middlePos);
                    else
                        value3 = "";
                }
                else
                {
                    value1 = logdescription;
                    value2 = "";
                    value3 = "";
                }
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), value1, usernam, Billno, value2, value3, "InsertPurchase");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }


            /*Start Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/
            dbQry = string.Format("INSERT INTO tblPurchase(Billno,BillDate,SupplierID,JournalID,Paymode,TotalAmt,salesreturn,salesreturnreason,freight,LoadUnload,BilitID,InternalTransfer,DeliveryNote,InvoiceNo,InvoiceDate,discamount,discper,dcbillno,TotalWORndOff,narration2,InvoiceReturnStatus,BranchCode) VALUES('{0}','{1}',{2},{3},{4},{5},'{6}','{7}',{8},{9},{10},'{11}','{12}','{13}','{14}',{15},{16},{17},{18},'{19}','{20}','{21}')",
            Billno, BillDate.ToString("yyyy-MM-dd"), SupplierID, NewTransNo, paymode, Amount, salesreturn, srReason, freight, dLU, BilitID, intTrans, deliveryNote, Invoiceno, InvoiceDate.ToString("yyyy-MM-dd"), discamount, discper, dcbillno, TotalWORndOff, narration2, "NO", Branchcode);
            /*Start Purchase Loading / Unloading Freight Change - March 16*/
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            object retPurchase = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(PurchaseID) FROM tblPurchase");

            if ((retPurchase != null) && (retPurchase != DBNull.Value))
            {
                purchaseID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(PurchaseID) FROM tblPurchase");
            }
            else
            {
                purchaseID = purchaseID + 1;
            }


            //Adding the Purchase Items Table

            int roleID = 0;
            string rolename = string.Empty;
            if (purchaseDS != null)
            {
                if (purchaseDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in purchaseDS.Tables[0].Rows)
                    {
                        //dbQry = string.Format("INSERT INTO tblPurchaseItems(purchaseID,itemcode,Qty,PurchaseRate,discount,vat,roleid,isRole,cst,nlp,discamt) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10})", purchaseID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["PurchaseRate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]), roleID, rolename, Convert.ToDouble(dr["CST"]), Convert.ToDouble(dr["NLP"]), Convert.ToDouble(dr["Discountamt"]));

                        if (Logsave == "YES")
                        {
                            logdescription = string.Format("INSERT INTO tblPurchaseItems(purchaseID,itemcode,Qty,PurchaseRate,discount,vat,roleid,isRole,cst,nlp,discamt,PrdReturnStatus,ReturnQty) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12})", purchaseID, Convert.ToString(dr["Prd"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["DisPre"]), Convert.ToDouble(dr["VATPre"]), roleID, rolename, Convert.ToDouble(dr["CSTPre"]), Convert.ToDouble(dr["NLP"]), Convert.ToDouble(dr["DiscAmt"]), "NO", 0);
                            logdescription = logdescription.Trim();
                            description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                                 DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, Billno, "InsertPurchase");
                            manager.ExecuteNonQuery(CommandType.Text, description);

                            logdescription = string.Format("UPDATE tblProductStock SET tblProductStock.Stock =  tblProductStock.Stock + {0} WHERE ItemCode={1} and BranchCode={2}", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["Prd"]).Trim(), Branchcode);
                            logdescription = logdescription.Trim();
                            description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                                 DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, Billno, "InsertPurchase");
                            manager.ExecuteNonQuery(CommandType.Text, description);
                        }

                        dbQry = string.Format("INSERT INTO tblPurchaseItems(purchaseID,itemcode,Qty,PurchaseRate,discount,vat,roleid,isRole,cst,nlp,discamt,PrdReturnStatus,ReturnQty) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10},'{11}',{12})", purchaseID, Convert.ToString(dr["Prd"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["DisPre"]), Convert.ToDouble(dr["VATPre"]), roleID, rolename, Convert.ToDouble(dr["CSTPre"]), Convert.ToDouble(dr["NLP"]), Convert.ToDouble(dr["DiscAmt"]), "NO", 0);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        dbQry = string.Format("UPDATE tblProductStock SET tblProductStock.Stock =  tblProductStock.Stock + {0} WHERE ItemCode='{1}' and BranchCode='{2}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["Prd"]).Trim(), Branchcode);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        if (deliveryNote == "YES" || salesreturn == "YES")
                        {
                            dbQ = "SELECT ReturnQty From tblSalesItems Where BillNo=" + iSalesID + " and ItemCode='" + Convert.ToString(dr["Prd"]) + "'";
                            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
                            if (dsd.Tables[0].Rows.Count > 0)
                                AddRtnQty = Convert.ToInt32(dsd.Tables[0].Rows[0]["ReturnQty"].ToString());
                            AddRtnQty = AddRtnQty + Convert.ToInt32(dr["Qty"]);

                            if (Convert.ToDouble(dr["Qty"]) == Convert.ToDouble(dr["RtnQty"]))
                            {
                                Prdrtnstatus = "YES";
                                dbQry = string.Format("Update tblSalesItems Set ReturnQty=" + AddRtnQty + ",PrdReturnStatus='" + Prdrtnstatus + "' Where BillNo=" + iSalesID + " and ItemCode='" + Convert.ToString(dr["Prd"]) + "'");
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                                //dbQry = string.Format("Update tblSales Set InvoiceReturnStatus='" + Prdrtnstatus + "' Where BillNo=" + iSalesID + "");
                                //manager.ExecuteNonQuery(CommandType.Text, dbQry);
                            }
                            else
                            {
                                Prdrtnstatus = "NO";
                                dbQry = string.Format("Update tblSalesItems Set ReturnQty=" + AddRtnQty + ",PrdReturnStatus='" + Prdrtnstatus + "' Where BillNo=" + iSalesID + " and ItemCode='" + Convert.ToString(dr["Prd"]) + "'");
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);
                            }
                        }
                    }
                }
            }

            dbQry = string.Format("Update tblBilti SET Status = 'Closed' Where ID={0}", BilitID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Purchase Transaction: " + NewTransNo + " got added. Record Details : User =" + usernam + " Bill No= " + Billno + " Bill Date= " + BillDate + " SupplierID=" + SupplierID + ",Amount=" + Amount + " Trans No :" + NewTransNo;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            manager.CommitTransaction();
            return purchaseID;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public int UpdatePurchase(int purchaseID, string Billno, DateTime BillDate, int SupplierID, int paymode, string Chequeno, int BankName, double Amount, string salesreturn, string srReason, double freight, double dLU, int BilitID, string intTrans, DataSet purchaseDS, string deliveryNote, string Invoiceno, DateTime InvoiceDate, double discamount, double discper, double dcbillno, double TotalWORndOff, string usernam, string narration2, string connection, string Branchcode)
    {
        /*End Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;
        string sVoucherType = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        if (salesreturn.ToUpper() == "NO")
            sVoucherType = "Purchase";
        else
            sVoucherType = "Sales Return";

        string sNarration = string.Empty;
        string oldtrandate = string.Empty;

        int creditorID = 0;
        int DebtorID = 3;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID
            dsOld = GetPurchaseForId(purchaseID);


            if (dsOld.Tables[0].Rows[0]["JournalID"] != null)
            {
                if (dsOld.Tables[0].Rows[0]["JournalID"].ToString() != string.Empty)
                {
                    TransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["JournalID"].ToString());
                }

                if (dsOld.Tables[0].Rows[0]["BillNo"] != null)
                    oldBillNo = dsOld.Tables[0].Rows[0]["BillNo"].ToString();
            }
            dbQry = string.Format("Select DebtorID,CreditorID,Amount,Transdate from tblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                    oldtrandate = Convert.ToString(dsOld.Tables[0].Rows[0]["transdate"]);
                }

            }
            //End Retriving

            //if (paymode == 1)
            //    creditorID = 1;
            //else if (paymode == 2)
            //    creditorID = BankName;
            //else
            //    creditorID = SupplierID;

            int cid = 0;
            cid = getPurchaseACLedgerId(connection, Branchcode);
            DebtorID = cid;

            int did = 0;
            if (paymode == 1)
            {
                did = getCashACLedgerId(connection, Branchcode);
                creditorID = did;
            }
            else if (paymode == 2)
                creditorID = BankName;
            else
                creditorID = SupplierID;


            // sNarration = "Purchase - Bill No:" + Billno;
            sNarration = sVoucherType + " - Bill No:" + Billno;
            //Delete Purchase

            /*
             Step 1 : Decrese the Debit and Credit for the Old Debtor and Old Creditor.
             Step 2 : Delete the Entry From tblDayBook,tblPurchase,tblPurchaseItem.
             Step 3 : Increase the Debit and Credit for the new Debtor and new Creditor.
             Step 4 : Add Entry From tblDayBook,tblPurchase,tblPurchaseItem.
             Step 5 : Make an entry in the audit table.
             */
            //Step 1 - Start

            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", oldDebitID);

            //double DebitDel = 0;

            //object retDebitDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retDebitDel != null) && (retDebitDel != DBNull.Value))
            //{
            //    DebitDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}

            dbQry = string.Format("Select BilitID from tblPurchase Where PurchaseID={0}", purchaseID);

            object retBilitID = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retBilitID != null) && (retBilitID != DBNull.Value))
            {
                oldBilitID = (int)manager.ExecuteScalar(CommandType.Text, dbQry);
            }

            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", DebitDel - oldAmt, oldDebitID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", oldCreditID);
            //double CreditDel = 0;

            //object retCreditDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retCreditDel != null) && (retCreditDel != DBNull.Value))
            //{
            //    CreditDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}
            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", CreditDel - oldAmt, oldCreditID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //Step 1 - End


            //Step 2 - Start
            //Start Delete the old record

            dbQ = "SELECT KeyValue From tblSettings WHERE KEYNAME='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, "", "UpdatePurchase");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblAuditDayBook Select * From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("SELECT Qty,ItemCode,RoleID,isRole From tblPurchaseItems WHERE PurchaseID={0}", purchaseID);
            DataSet purchasedS = (DataSet)manager.ExecuteDataSet(CommandType.Text, dbQry);
            /*Start March 15 Modification */
            double currStock = 0;
            double arrivedStock = 0;
            string itemStock = string.Empty;
            string itmCode = string.Empty;
            /*End March 15 Modification */
            if (purchasedS != null)
            {
                if (purchasedS.Tables.Count > 0)
                {
                    foreach (DataRow dr in purchasedS.Tables[0].Rows)
                    {
                        /*Start March 15 Modification */
                        itmCode = Convert.ToString(dr["ItemCode"]).Trim();
                        currStock = getStockInfo(Convert.ToString(dr["ItemCode"]).Trim(), Branchcode);
                        arrivedStock = currStock - Convert.ToDouble(dr["Qty"]);

                        itemStock = itemStock + itmCode + "^" + arrivedStock + "#";
                        /*End March 15 Modification */

                        if (Logsave == "YES")
                        {
                            logdescription = string.Format("UPDATE tblProductStock SET tblProductStock.Stock =  tblProductStock.Stock - {0} WHERE ItemCode={1} and BranchCode={2}", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim(), Branchcode);
                            logdescription = logdescription.Trim();
                            description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                                 DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, "", "UpdatePayment");
                            manager.ExecuteNonQuery(CommandType.Text, description);
                        }


                        dbQry = string.Format("UPDATE tblProductStock SET tblProductStock.Stock =  tblProductStock.Stock - {0} WHERE ItemCode='{1}' and BranchCode='{2}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim(), Branchcode);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }


                }

            }

            if (Logsave == "YES")
            {
                logdescription = string.Format("Delete From tblPurchase Where PurchaseID={0}", purchaseID);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, "", "UpdatePurchase");
                manager.ExecuteNonQuery(CommandType.Text, description);

                logdescription = string.Format("Delete From tblPurchaseItems Where PurchaseID={0}", purchaseID);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, "", "UpdatePurchase");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblAuditPurchase Select * From tblPurchase Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = string.Format("Delete From tblPurchase Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("INSERT INTO tblAuditPurchaseItems Select * From tblPurchaseItems Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblPurchaseItems Where PurchaseID={0}", purchaseID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Deleting the old record


            //Step 2 - End


            //End Delete Purchase
            //Purchase A/c - 3 will always be the debtor
            //Step 3 - Start

            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebtorID);
            //double Debit = 0;

            //object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retDebit != null) && (retDebit != DBNull.Value))
            //{
            //    Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}
            ////double Payment = (double)manager.ExecuteScalar(CommandType.Text, "Select Amount from tblDayBook Where TransNo=" + TransNo);
            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebtorID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", creditorID);
            //double Credit = 0;

            //object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retCredit != null) && (retCredit != DBNull.Value))
            //{
            //    Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}

            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, creditorID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Updating the Debit and credit
            //Step 3 - End

            //Step 4 - Start

            if (Logsave == "YES")
            {
                logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,Chequeno,RefNo,BranchCode) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8})",
                    InvoiceDate.ToString("yyyy-MM-dd"), DebtorID, creditorID, Amount, sNarration, sVoucherType, Chequeno, 0, Branchcode);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, "", "UpdatePurchase");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblAuditDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,Chequeno,RefNo,Branchcode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},'{8}')",
             InvoiceDate.ToString("yyyy-MM-dd"), DebtorID, creditorID, Amount, sNarration, sVoucherType, Chequeno, 0, Branchcode);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,Chequeno,RefNo,BranchCode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},'{8}')",
             InvoiceDate.ToString("yyyy-MM-dd"), DebtorID, creditorID, Amount, sNarration, sVoucherType, Chequeno, 0, Branchcode);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int NewTransNo = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NewTransNo = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));
            }
            else
            {
                NewTransNo = NewTransNo + 1;
            }

            if (Logsave == "YES")
            {
                string value1 = string.Empty;
                string value2 = string.Empty;
                string value3 = string.Empty;
                int middlePos = 0;

                logdescription = string.Format("INSERT INTO tblPurchase(Billno,BillDate,SupplierID,JournalID,Paymode,TotalAmt,salesreturn,salesreturnreason,freight,LoadUnload,BilitID,InternalTransfer,DeliveryNote,InvoiceNo,InvoiceDate,discamount,discper,dcbillno,TotalWORndOff,narration2,InvoiceReturnStatus) VALUES('{0}','{1}',{2},{3},{4},{5},'{6}','{7}',{8},{9},{10},'{11}','{12}','{13}','{14}',{15},{16},{17},{18},'{19}','{20}')",
            Billno, BillDate.ToString("yyyy-MM-dd"), SupplierID, NewTransNo, paymode, Amount, salesreturn, srReason, freight, dLU, BilitID, intTrans, deliveryNote, Invoiceno, InvoiceDate.ToString("yyyy-MM-dd"), discamount, discper, dcbillno, TotalWORndOff, narration2, "NO");


                logdescription = logdescription.Trim();
                if (logdescription.Length > 255)
                {
                    value1 = logdescription.Substring(0, 255);
                    middlePos = logdescription.Length - (value1.Length);
                    if (middlePos > 0)
                        value2 = logdescription.Substring(255, middlePos);
                    else
                        value3 = "";

                    middlePos = logdescription.Length - (value1.Length + value2.Length);
                    if (middlePos > 0)
                        value3 = logdescription.Substring(510, middlePos);
                    else
                        value3 = "";
                }
                else
                {
                    value1 = logdescription;
                    value2 = "";
                    value3 = "";
                }
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), value1, usernam, "", value2, value3, "UpdatePurchase");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblAuditPurchase(Billno,BillDate,SupplierID,JournalID,Paymode,TotalAmt,salesreturn,salesreturnreason,freight,LoadUnload,BilitID,InternalTransfer,DeliveryNote,InvoiceNo,InvoiceDate, discamount, discper, dcbillno, TotalWORndOff,narration2,InvoiceReturnStatus,BranchCode) VALUES('{0}','{1}',{2},{3},{4},{5},'{6}','{7}',{8},{9},{10},'{11}','{12}','{13}','{14}',{15},{16},{17},{18},'{19}','{20}','{21}')",
            Billno, BillDate.ToString("yyyy-MM-dd"), SupplierID, NewTransNo, paymode, Amount, salesreturn, srReason, freight, dLU, BilitID, intTrans, deliveryNote, Invoiceno, InvoiceDate.ToString("yyyy-MM-dd"), discamount, discper, dcbillno, TotalWORndOff, narration2, "NO", Branchcode);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            /*Start Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/
            dbQry = string.Format("INSERT INTO tblPurchase(Billno,BillDate,SupplierID,JournalID,Paymode,TotalAmt,salesreturn,salesreturnreason,freight,LoadUnload,BilitID,InternalTransfer,DeliveryNote,InvoiceNo,InvoiceDate,discamount,discper,dcbillno,TotalWORndOff,narration2,InvoiceReturnStatus,BranchCode) VALUES('{0}','{1}',{2},{3},{4},{5},'{6}','{7}',{8},{9},{10},'{11}','{12}','{13}','{14}',{15},{16},{17},{18},'{19}','{20}','{21}')",
           Billno, BillDate.ToString("yyyy-MM-dd"), SupplierID, NewTransNo, paymode, Amount, salesreturn, srReason, freight, dLU, BilitID, intTrans, deliveryNote, Invoiceno, InvoiceDate.ToString("yyyy-MM-dd"), discamount, discper, dcbillno, TotalWORndOff, narration2, "NO", Branchcode);

            /*Start Purchase Loading / Unloading Freight Change - March 16 - (Added Loading and unloading and freight*/
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            object retPurchase = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(PurchaseID) FROM tblPurchase");

            if ((retPurchase != null) && (retPurchase != DBNull.Value))
            {
                purchaseID = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(PurchaseID) FROM tblPurchase"));
            }
            else
            {
                purchaseID = purchaseID + 1;
            }


            //Adding the Purchase Items Table
            object retRole = null;
            int roleID = 0;
            /*Start March 15 Modification */
            string[] itemArr;
            string[] itemChildArr;
            string chkItemCode = string.Empty;
            double chkStock = 0;
            double actStock = 0;
            string actItem = string.Empty;
            /*End March 15 Modification */
            if (purchaseDS != null)
            {
                if (purchaseDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in purchaseDS.Tables[0].Rows)
                    {
                        if (Logsave == "YES")
                        {
                            logdescription = string.Format("INSERT INTO tblPurchaseItems(purchaseID,itemcode,Qty,PurchaseRate,discount,vat,roleid,isRole,cst,nlp,discamt,PrdReturnStatus,ReturnQty) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12})", purchaseID, Convert.ToString(dr["Prd"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["DisPre"]), Convert.ToDouble(dr["VATPre"]), roleID, Convert.ToString(dr["isRole"]), Convert.ToDouble(dr["CSTPre"]), Convert.ToDouble(dr["NLP"]), Convert.ToDouble(dr["DiscAmt"]), "NO", 0);
                            logdescription = logdescription.Trim();
                            description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                                 DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, "", "UpdatePurchase");
                            manager.ExecuteNonQuery(CommandType.Text, description);

                            logdescription = string.Format("UPDATE tblProductStock SET tblProductStock.Stock =  tblProductStock.Stock + {0} WHERE ItemCode={1} and BranchCode={2}", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["ItemCode"]).Trim(), Branchcode);
                            logdescription = logdescription.Trim();
                            description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                                 DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, "", "UpdatePurchase");
                            manager.ExecuteNonQuery(CommandType.Text, description);
                        }

                        dbQry = string.Format("INSERT INTO tblAuditPurchaseItems(purchaseID,itemcode,Qty,PurchaseRate,discount,vat,roleid,isRole,CST,NLP,discamt,PrdReturnStatus,ReturnQty) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10},'{11}',{12})", purchaseID, Convert.ToString(dr["Prd"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["DisPre"]), Convert.ToDouble(dr["VATPre"]), roleID, Convert.ToString(dr["isRole"]), Convert.ToDouble(dr["CSTPre"]), Convert.ToDouble(dr["NLP"]), Convert.ToDouble(dr["DiscAmt"]), "NO", 0);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        dbQry = string.Format("INSERT INTO tblPurchaseItems(purchaseID,itemcode,Qty,PurchaseRate,discount,vat,roleid,isRole,cst,nlp,discamt,PrdReturnStatus,ReturnQty) VALUES({0},'{1}',{2},{3},{4},{5},{6},'{7}',{8},{9},{10},'{11}',{12})", purchaseID, Convert.ToString(dr["Prd"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["DisPre"]), Convert.ToDouble(dr["VATPre"]), roleID, Convert.ToString(dr["isRole"]), Convert.ToDouble(dr["CSTPre"]), Convert.ToDouble(dr["NLP"]), Convert.ToDouble(dr["DiscAmt"]), "NO", 0);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        //dbQry = string.Format("INSERT INTO tblPurchaseItems() VALUES({0},'{1}',{2},{3},{4},{5})", purchaseID, Convert.ToString(dr["ItemCode"]), Convert.ToInt32(dr["Qty"]), Convert.ToDouble(dr["PurchaseRate"]), Convert.ToDouble(dr["Discount"]), Convert.ToDouble(dr["VAT"]));
                        //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        /*Start March 15 Modification */
                        itemArr = itemStock.Split('#');
                        for (int k = 0; k < itemArr.Length; k++)
                        {
                            if (itemArr[k].Trim() != "")
                            {
                                itemChildArr = itemArr[k].Split('^');
                                chkStock = Convert.ToDouble(itemChildArr[1]);
                                chkItemCode = itemChildArr[0].ToString().Trim();
                                actStock = Convert.ToDouble(dr["Qty"]);
                                actItem = Convert.ToString(dr["Prd"]).Trim();
                                if (chkItemCode == actItem)
                                {
                                    chkStock = chkStock + actStock;

                                    if (chkStock < 0)
                                    {
                                        return -2;
                                    }
                                }
                            }
                        }
                        /*End March 15 Modification */
                        dbQry = string.Format("UPDATE tblProductStock SET tblProductStock.Stock =  tblProductStock.Stock + {0} WHERE ItemCode='{1}' and BranchCode='{2}'", Convert.ToDouble(dr["Qty"]), Convert.ToString(dr["Prd"]).Trim(), Branchcode);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }
                }
            }
            //Step 4 - End

            //Bilit Management
            if (BilitID != oldBilitID)
            {
                dbQry = string.Format("Update tblBilti SET Status = 'Closed' Where ID={0}", BilitID);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                if (oldBilitID != 0)
                {
                    dbQry = string.Format("Update tblBilti SET Status = 'Open' Where ID={0}", oldBilitID);
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                }
            }


            //dbQry = string.Format("INSERT INTO tblAuditPaymentAmount Select * From tblPaymentAmount Where PaymentNo={0}", TransNo);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Delete From tblPaymentAmount Where PaymentNo = {0}", TransNo);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);


            //Step 5 - Start
            //Store the details in the Audit Table.
            sAuditStr = "Purchase Transaction: " + TransNo + " got edited. User Name = " + usernam + ". Deleted Record Details : Bill No=" + oldBillNo + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt + " New Trans No :" + NewTransNo + " DateTime:" + oldtrandate;

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit and Update", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //Step 5 -  End
            manager.CommitTransaction();
            return purchaseID;
        }

        catch (Exception ex)
        {
            manager.Transaction.Rollback();
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    //public DataSet generateOutStandingReportDSe(int iGroupID, string sDataSource, DateTime startDate, DateTime endDate)

    public DataSet generateOutStandingReportDSe(int iGroupID, string sDataSource, DateTime startDate, DateTime endDate)
    {

        Decimal temp_balance;
        string sLedgerName = string.Empty, sConStr = string.Empty, sAliasName = string.Empty, sQry = string.Empty;
        string sLedgerId = string.Empty;
        string sLedgerPhone = string.Empty;
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        sConStr = sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        sQry = "SELECT tblLedger.LedgerID,tblLedger.LedgerName,tblLedger.phone,tblLedger.AliasName, (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as balance FROM (tblLedger   left  join (SELECT DebtorID,sum(Amount) as debitamount FROM tblDayBook WHERE tblDayBook.TransDate >=#" + startDate.ToString("MM/dd/yyyy") + "# AND tblDayBook.TransDate<=#" + endDate.ToString("MM/dd/yyyy") + "# and  DebtorID > 0 group by DebtorID) debittable  on tblLedger.LedgerID=debittable.DebtorID) left join (SELECT CreditorID,sum(Amount) as creditamount FROM tblDayBook WHERE tblDayBook.TransDate >=#" + startDate.ToString("MM/dd/yyyy") + "# AND tblDayBook.TransDate<=#" + endDate.ToString("MM/dd/yyyy") + "# and  CreditorID > 0 group by CreditorID) credittable on tblLedger.LedgerID= credittable.CreditorID where GroupID=" + iGroupID + " and tblledger.inttrans = 'NO' and tblledger.dc = 'NO' and (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) <> 0 ORDER BY tblLedger.LedgerName";
        //sQry = "SELECT tblLedger.LedgerID,tblLedger.LedgerName,tblDayBook.TransDate,tblLedger.phone,tblLedger.AliasName, (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as balance FROM (tblLedger   left  join (SELECT DebtorID,sum(Amount) as debitamount FROM tblDayBook WHERE tblDayBook.TransDate >=#" + startDate.ToString("MM/dd/yyyy") + "# AND tblDayBook.TransDate<=#" + endDate.ToString("MM/dd/yyyy") + "# and  DebtorID > 0 group by DebtorID,TransDate) debittable  on tblLedger.LedgerID=debittable.DebtorID) left join (SELECT CreditorID,sum(Amount) as creditamount FROM tblDayBook WHERE tblDayBook.TransDate >=#" + startDate.ToString("MM/dd/yyyy") + "# AND tblDayBook.TransDate<=#" + endDate.ToString("MM/dd/yyyy") + "# and  CreditorID > 0 group by CreditorID,TransDate) credittable on tblLedger.LedgerID= credittable.CreditorID where GroupID=" + iGroupID + " and tblledger.inttrans = 'NO' and tblledger.dc = 'NO' and (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) <> 0 ORDER BY tblLedger.LedgerName";

        //// SELECT tblLedger.LedgerID,tblLedger.LedgerName,tblLedger.phone,tblLedger.AliasName,debittable.TransDate,credittable.TransDate,
        ////(IIf(IsNull(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+IIf(IsNull(debittable.debitamount),0,debittable.debitamount))-(IIf(IsNull(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+IIf(IsNull(credittable.creditamount),0,credittable.creditamount)) AS balance
        ////FROM (tblLedger LEFT JOIN (SELECT DebtorID,TransDate,sum(Amount) as debitamount
        //// FROM tblDayBook
        //// WHERE tblDayBook.TransDate >=#01/01/2015# AND tblDayBook.TransDate<=#01/02/2015# and  DebtorID > 0 group by DebtorID,TransDate)  AS debittable ON tblLedger.LedgerID = debittable.DebtorID) LEFT JOIN (SELECT CreditorID,TransDate,sum(Amount) as creditamount
        ////FROM tblDayBook
        ////WHERE tblDayBook.TransDate >=#01/01/2015# AND tblDayBook.TransDate<=#01/02/2015# and  CreditorID > 0
        ////group by CreditorID,TransDate)  AS credittable ON tblLedger.LedgerID = credittable.CreditorID
        ////WHERE (((tblLedger.[GroupID])=1) AND ((tblLedger.inttrans)='NO') AND ((tblLedger.dc)='NO') AND
        ////(((IIf(IsNull([tblLedger].[OpenBalanceDR]),0,[tblLedger].[OpenBalanceDR])+IIf(IsNull([debittable].[debitamount]),0,[debittable].[debitamount]))-(IIf(IsNull([tblLedger].[OpenBalanceCR]),0,[tblLedger].[OpenBalanceCR])+IIf(IsNull([credittable].[creditamount]),0,[credittable].[creditamount])))<>0))
        ////ORDER BY tblLedger.LedgerName;



        //sQry = "SELECT tblLedger.LedgerID,tblLedger.LedgerName,tblLedger.phone,tblLedger.AliasName, (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as balance FROM (tblLedger   left  join (SELECT DebtorID,sum(Amount) as debitamount FROM tblDayBook WHERE DebtorID > 0 group by DebtorID) debittable  on tblLedger.LedgerID=debittable.DebtorID) left join (SELECT CreditorID,sum(Amount) as creditamount FROM tblDayBook WHERE CreditorID > 0 group by CreditorID) credittable on tblLedger.LedgerID= credittable.CreditorID where GroupID=" + iGroupID + " and tblledger.inttrans = 'NO' and tblledger.dc = 'NO' and (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) <> 0 ORDER BY tblLedger.LedgerName";

        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsParentQry = new DataSet();
        oleAdp.Fill(dsParentQry);
        temp_balance = 0;
        DataSet ds;
        DataTable dt;
        DataRow drNew;
        DataColumn dc;
        ds = new DataSet();
        dt = new DataTable();
        dc = new DataColumn("LedgerName");
        dt.Columns.Add(dc);
        dc = new DataColumn("LedgerID");
        dt.Columns.Add(dc);
        dc = new DataColumn("Phone");
        dt.Columns.Add(dc);
        dc = new DataColumn("AliasName");
        dt.Columns.Add(dc);
        dc = new DataColumn("Debit");
        dt.Columns.Add(dc);
        dc = new DataColumn("Credit");
        dt.Columns.Add(dc);
        ds.Tables.Add(dt);
        try
        {
            if (dsParentQry.Tables[0].Rows.Count == 0)
            {
                drNew = dt.NewRow();
                drNew["LedgerName"] = string.Empty;
                drNew["AliasName"] = string.Empty;
                drNew["LedgerID"] = string.Empty;
                drNew["Phone"] = string.Empty;
                drNew["Debit"] = "0.00";
                drNew["Credit"] = "0.00";
                ds.Tables[0].Rows.Add(drNew);
            }
            else
            {
                foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
                {
                    if (drParentQry["LedgerName"] != null)
                        sLedgerName = drParentQry["LedgerName"].ToString();
                    if (drParentQry["AliasName"] != null)
                        sAliasName = drParentQry["AliasName"].ToString();
                    if (drParentQry["LedgerID"] != null)
                        sLedgerId = drParentQry["LedgerID"].ToString();
                    if (drParentQry["Phone"] != null)
                        sLedgerPhone = drParentQry["Phone"].ToString();
                    if ((drParentQry["balance"] != null) && (drParentQry["balance"].ToString() != ""))
                        temp_balance = decimal.Parse(drParentQry["balance"].ToString(), System.Globalization.NumberStyles.Float);
                    else
                        temp_balance = 0;
                    if (temp_balance > 0)
                    {
                        drNew = dt.NewRow();
                        drNew["LedgerName"] = sLedgerName;
                        drNew["AliasName"] = sAliasName;
                        drNew["LedgerID"] = sLedgerId;
                        drNew["Phone"] = sLedgerPhone;
                        drNew["Debit"] = temp_balance;
                        drNew["Credit"] = "0.00";
                        ds.Tables[0].Rows.Add(drNew);
                    }
                    else
                    {
                        drNew = dt.NewRow();
                        drNew["LedgerName"] = sLedgerName;
                        drNew["AliasName"] = sAliasName;
                        drNew["LedgerID"] = sLedgerId;
                        drNew["Phone"] = sLedgerPhone;
                        drNew["Debit"] = "0.00";
                        drNew["Credit"] = Math.Abs(temp_balance).ToString(); /* convert the negative to positive */
                        ds.Tables[0].Rows.Add(drNew);
                    }
                }
            }
            oleConn.Close();
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet generateOutStandingReportDSeold(int iGroupID, string sDataSource)
    {

        Decimal temp_balance;
        string sLedgerName = string.Empty, sConStr = string.Empty, sAliasName = string.Empty, sQry = string.Empty;
        string sLedgerId = string.Empty;
        string sLedgerPhone = string.Empty;
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        sConStr = sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        sQry = "SELECT tblLedger.LedgerID,tblLedger.LedgerName,tblLedger.phone,tblLedger.AliasName, (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as balance FROM (tblLedger   left  join (SELECT DebtorID,sum(Amount) as debitamount FROM tblDayBook WHERE DebtorID > 0 group by DebtorID) debittable  on tblLedger.LedgerID=debittable.DebtorID) left join (SELECT CreditorID,sum(Amount) as creditamount FROM tblDayBook WHERE CreditorID > 0 group by CreditorID) credittable on tblLedger.LedgerID= credittable.CreditorID where GroupID=" + iGroupID + " and tblledger.inttrans = 'NO' and tblledger.dc = 'NO' and (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) <> 0 ORDER BY tblLedger.LedgerName";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsParentQry = new DataSet();
        oleAdp.Fill(dsParentQry);
        temp_balance = 0;
        DataSet ds;
        DataTable dt;
        DataRow drNew;
        DataColumn dc;
        ds = new DataSet();
        dt = new DataTable();
        dc = new DataColumn("LedgerName");
        dt.Columns.Add(dc);
        dc = new DataColumn("LedgerID");
        dt.Columns.Add(dc);
        dc = new DataColumn("Phone");
        dt.Columns.Add(dc);
        dc = new DataColumn("AliasName");
        dt.Columns.Add(dc);
        dc = new DataColumn("Debit");
        dt.Columns.Add(dc);
        dc = new DataColumn("Credit");
        dt.Columns.Add(dc);
        ds.Tables.Add(dt);
        try
        {
            if (dsParentQry.Tables[0].Rows.Count == 0)
            {
                drNew = dt.NewRow();
                drNew["LedgerName"] = string.Empty;
                drNew["AliasName"] = string.Empty;
                drNew["LedgerID"] = string.Empty;
                drNew["Phone"] = string.Empty;
                drNew["Debit"] = "0.00";
                drNew["Credit"] = "0.00";
                ds.Tables[0].Rows.Add(drNew);
            }
            else
            {
                foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
                {
                    if (drParentQry["LedgerName"] != null)
                        sLedgerName = drParentQry["LedgerName"].ToString();
                    if (drParentQry["AliasName"] != null)
                        sAliasName = drParentQry["AliasName"].ToString();
                    if (drParentQry["LedgerID"] != null)
                        sLedgerId = drParentQry["LedgerID"].ToString();
                    if (drParentQry["Phone"] != null)
                        sLedgerPhone = drParentQry["Phone"].ToString();
                    if ((drParentQry["balance"] != null) && (drParentQry["balance"].ToString() != ""))
                        temp_balance = decimal.Parse(drParentQry["balance"].ToString(), System.Globalization.NumberStyles.Float);
                    else
                        temp_balance = 0;
                    if (temp_balance > 0)
                    {
                        drNew = dt.NewRow();
                        drNew["LedgerName"] = sLedgerName;
                        drNew["AliasName"] = sAliasName;
                        drNew["LedgerID"] = sLedgerId;
                        drNew["Phone"] = sLedgerPhone;
                        drNew["Debit"] = temp_balance;
                        drNew["Credit"] = "0.00";
                        ds.Tables[0].Rows.Add(drNew);
                    }
                    else
                    {
                        drNew = dt.NewRow();
                        drNew["LedgerName"] = sLedgerName;
                        drNew["AliasName"] = sAliasName;
                        drNew["LedgerID"] = sLedgerId;
                        drNew["Phone"] = sLedgerPhone;
                        drNew["Debit"] = "0.00";
                        drNew["Credit"] = Math.Abs(temp_balance).ToString(); /* convert the negative to positive */
                        ds.Tables[0].Rows.Add(drNew);
                    }
                }
            }
            oleConn.Close();
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet generateReportDSLedger(int iAccHeading, int iGroupID, int iLedgerID, DateTime dtSdate, DateTime dtEdate, string sDataSource, int iOrder)
    {
        /* Start Variable Declaration */

        double dDebitAmt = 0;
        double dCreditAmt = 0;
        string sTranDate = string.Empty;
        string iQry = "";
        string sParticulars = "";
        string sParticularsI = "";

        string sVoucherType = string.Empty;
        string sLedgerID = "0";
        string sLedger = string.Empty;
        string sQry = string.Empty;
        string pQry = string.Empty;
        string jQry = string.Empty;
        string sLedgerIDI = "0";
        string sLedgerI = string.Empty;

        string sConStr = string.Empty;
        SqlConnection oleConn, oleSubConn;

        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        DataSet dsChildQry;
        DataSet dsChildQry2;

        string sOrder;
        if (iOrder == 0)
            sOrder = "asc";
        else
            sOrder = "desc";
        /* End Variable Declaration */

        /* Start Ms Access Database Connection Information */
        //sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource;
        sConStr = sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        /* End Ms Access Database Connection Information */

        /* Start DB Query Processing - Getting the Details of the Ledger int the Daybook */
        //sQry = "SELECT TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType FROM tblDayBook WHERE (DebtorID=" + iLedgerID + " OR CreditorID=" + iLedgerID + ") AND (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) Order by TransDate " +sOrder;
        sQry = "SELECT TransDate,Transno,NULL as DebtorID,CreditorID,Amount,Narration,VoucherType,L.LedgerName ";
        sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.CreditorID ) ";
        sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
        sQry = sQry + "WHERE (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) ";

        if (iLedgerID != 0)
            sQry = sQry + " AND ( CreditorID=" + iLedgerID + ") ";

        if (iGroupID != 0)
            sQry = sQry + " AND (G.GroupID=" + iGroupID + ") ";

        if (iAccHeading != 0)
            sQry = sQry + " AND (H.HeadingID =" + iAccHeading + ") ";

        sQry = sQry + " Union All ";

        sQry = sQry + "SELECT TransDate,Transno,DebtorID,Null as CreditorID,Amount,Narration,VoucherType, L.LedgerName ";
        sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.DebtorID ) ";
        sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
        sQry = sQry + " WHERE (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) ";

        if (iLedgerID != 0)
            sQry = sQry + " AND ( DebtorID=" + iLedgerID + ") ";

        if (iGroupID != 0)
            sQry = sQry + " AND (G.GroupID=" + iGroupID + ") ";

        if (iAccHeading != 0)
            sQry = sQry + " AND (H.HeadingID =" + iAccHeading + ") ";

        sQry = sQry + "Order by TransDate " + sOrder;

        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsParentQry = new DataSet();
        oleAdp.Fill(dsParentQry);
        /* End DB Query Processing - Getting the Details of the Ledger int the Daybook */


        DataSet ds;
        DataTable dt;
        DataRow drNew;
        DataColumn dc;


        ds = new DataSet();
        dt = new DataTable();
        dc = new DataColumn("Date");
        dt.Columns.Add(dc);

        dc = new DataColumn("Ledger");
        dt.Columns.Add(dc);

        dc = new DataColumn("LedgerID");
        dt.Columns.Add(dc);

        dc = new DataColumn("Particulars");
        dt.Columns.Add(dc);

        dc = new DataColumn("ParticularsI");
        dt.Columns.Add(dc);

        dc = new DataColumn("Debit");
        dt.Columns.Add(dc);

        dc = new DataColumn("Credit");
        dt.Columns.Add(dc);

        dc = new DataColumn("VoucherType");
        dt.Columns.Add(dc);

        dc = new DataColumn("TransNo");
        dt.Columns.Add(dc);

        ds.Tables.Add(dt);

        if (dsParentQry.Tables[0].Rows.Count == 0)
        {
            drNew = dt.NewRow();
            drNew["Date"] = string.Empty;
            drNew["Ledger"] = string.Empty;
            drNew["LedgerID"] = string.Empty;
            drNew["Particulars"] = string.Empty;
            drNew["ParticularsI"] = string.Empty;
            drNew["TransNo"] = string.Empty;
            drNew["Debit"] = "0.00";
            drNew["Credit"] = "0.00";
            drNew["VoucherType"] = string.Empty;
            ds.Tables[0].Rows.Add(drNew);
        }
        else
        {
            /* Iterating through the records and forming the custom datamodel and write into XML file */

            foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
            {
                dDebitAmt = 0;
                dCreditAmt = 0;


                if (drParentQry["TransDate"] != null)
                {
                    sTranDate = Convert.ToDateTime(drParentQry["TransDate"].ToString()).ToShortDateString();
                }
                if (drParentQry["VoucherType"] != null)
                {
                    sVoucherType = Convert.ToString(drParentQry["VoucherType"].ToString());
                }

                /* Start Sum up the Debit and Credit Transaction of the given ledgerID , Getting the Correcponding Debtor or creditor for the particulars section*/
                if (drParentQry["DebtorID"] != null)
                {
                    if (drParentQry["DebtorID"].ToString() != "")
                    {
                        if (Convert.ToInt32(drParentQry["DebtorID"].ToString()) > 0)
                        {
                            dDebitAmt = Convert.ToDouble(drParentQry["Amount"].ToString());
                            pQry = "SELECT Ledgername,LedgerID FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drParentQry["DebtorID"].ToString());
                            jQry = "SELECT Ledgername,LedgerID FROM (tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.creditorid) WHERE b.transno=" + Convert.ToInt32(drParentQry["Transno"].ToString());
                        }
                    }
                }
                if (drParentQry["CreditorID"] != null)
                {
                    if (drParentQry["CreditorID"].ToString() != "")
                    {
                        if (Convert.ToInt32(drParentQry["CreditorID"].ToString()) > 0)
                        {

                            dCreditAmt = Convert.ToDouble(drParentQry["Amount"].ToString());
                            pQry = "SELECT Ledgername, LedgerID FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drParentQry["CreditorID"].ToString());
                            jQry = "SELECT Ledgername,LedgerID FROM (tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.debtorid) WHERE b.transno=" + Convert.ToInt32(drParentQry["Transno"].ToString());
                        }
                    }
                }
                /* End Sum up the Debit and Credit Transaction of the given ledgerID , Getting the Correcponding Debtor or creditor for the particulars section*/


                if (pQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(sConStr));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            sParticulars = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString() + " " + drParentQry["Narration"].ToString();
                            sLedger = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                            sLedgerID = dsChildQry.Tables[0].Rows[0]["ledgerID"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }

                if (jQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = jQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(sConStr));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry2 = new DataSet();
                    oleAdp.Fill(dsChildQry2);
                    if (dsChildQry2 != null)
                    {
                        if (dsChildQry2.Tables[0].Rows.Count > 0)
                        {
                            sParticularsI = dsChildQry2.Tables[0].Rows[0]["ledgername"].ToString();
                            sLedgerI = dsChildQry2.Tables[0].Rows[0]["ledgername"].ToString();
                            sLedgerIDI = dsChildQry2.Tables[0].Rows[0]["ledgerID"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }

                drNew = dt.NewRow();
                drNew["Date"] = sTranDate;
                drNew["Ledger"] = sLedger;
                drNew["LedgerID"] = sLedgerID;
                drNew["Particulars"] = sParticulars;
                drNew["ParticularsI"] = sParticularsI;
                drNew["Debit"] = dDebitAmt.ToString();
                drNew["Credit"] = dCreditAmt.ToString();
                drNew["VoucherType"] = sVoucherType;
                drNew["TransNo"] = Convert.ToString(drParentQry["TransNo"].ToString());
                ds.Tables[0].Rows.Add(drNew);

                sParticularsI = "";
            }
        }

        oleConn.Close();
        return ds;
    }



    public DataSet generateSalesReportDSE(DateTime dtSdate, DateTime dtEdate, string sDataSource, string option)
    {
        /* Start Variable Declaration */

        string sBillDate = string.Empty;
        string sBillNo = string.Empty;
        string sCustomerName = string.Empty;
        string sQry = string.Empty;
        string sPayMode = string.Empty;
        string sProductName = string.Empty;
        string sProductModel = string.Empty;
        string sProductDesc = string.Empty;
        string sConStr = string.Empty;

        //sales



        /* End Variable Declaration */

        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;


        /* End Variable Declaration */
        /* Start Ms Access Database Connection Information */
        //sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource;
        sConStr = sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        /* End Ms Access Database Connection Information */
        /* Start DB Query Processing - Getting the Details of the Ledger int the Daybook */

        if (option == "Sales")
        {
            sQry = "SELECT Billno,BillDate,Customername,paymode FROM tblSales WHERE   BillDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND BillDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') Order by BillDate Desc";
        }
        else if (option == "Internal Transfer")
        {
            sQry = "SELECT Billno,BillDate,Customername,paymode FROM tblSales WHERE   BillDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND BillDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('yes','YES') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') and tblsales.NormalSales in ('no','NO') and tblsales.ManualSales in ('no','NO') Order by BillDate Desc";
        }
        else if (option == "Delivery Note")
        {
            sQry = "SELECT Billno,BillDate,Customername,paymode FROM tblSales WHERE   BillDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND BillDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('yes','YES') and tblsales.NormalSales in ('no','NO') and tblsales.ManualSales in ('no','NO') Order by BillDate Desc";
        }
        else if (option == "Purchase Return")
        {
            sQry = "SELECT Billno,BillDate,Customername,paymode FROM tblSales WHERE   BillDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND BillDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('yes','YES') and tblsales.DeliveryNote in ('no','NO') and tblsales.NormalSales in ('no','NO') and tblsales.ManualSales in ('no','NO') Order by BillDate Desc";
        }

        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsParentQry = new DataSet();
        oleAdp.Fill(dsParentQry);
        /* End DB Query Processing - Getting the Details of the Ledger int the Daybook */
        DataSet ds;
        DataTable dt;
        DataRow drNew;
        DataColumn dc;


        ds = new DataSet();
        dt = new DataTable();
        dc = new DataColumn("Billno");
        dt.Columns.Add(dc);

        dc = new DataColumn("BillDate");
        dt.Columns.Add(dc);

        dc = new DataColumn("CustomerName");
        dt.Columns.Add(dc);

        dc = new DataColumn("Paymode");
        dt.Columns.Add(dc);


        ds.Tables.Add(dt);

        if (dsParentQry.Tables[0].Rows.Count == 0)
        {
            /* Empty XML Formation if there is no record */

            drNew = dt.NewRow();
            drNew["Billno"] = string.Empty;
            drNew["BillDate"] = string.Empty;
            drNew["CustomerName"] = string.Empty;
            drNew["Paymode"] = string.Empty;

            ds.Tables[0].Rows.Add(drNew);
        }
        else
        {
            foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
            {


                if (drParentQry["Billno"] != null)
                {
                    sBillNo = drParentQry["Billno"].ToString();

                }
                if (drParentQry["BillDate"] != null)
                {
                    sBillDate = Convert.ToDateTime(drParentQry["BillDate"]).ToShortDateString();

                }
                if (drParentQry["CustomerName"] != null)
                {
                    sCustomerName = drParentQry["CustomerName"].ToString();

                }
                if (drParentQry["Paymode"] != null)
                {
                    sPayMode = drParentQry["Paymode"].ToString();
                    //sQry = "SELECT AliasName FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(sPayMode);
                    //oleCmd = new SqlCommand();
                    //oleCmd.CommandText = sQry;
                    //oleSubConn = new SqlConnection(CreateConnectionString(sConStr));
                    //oleCmd.Connection = oleSubConn;
                    //oleAdp = new SqlDataAdapter(oleCmd);
                    //dsChildQry = new DataSet();
                    //oleAdp.Fill(dsChildQry);
                    //sPayMode = dsChildQry.Tables[0].Rows[0]["AliasName"].ToString();
                    //reportXMLWriter.WriteElementString("Paymode", sPayMode);
                    //oleSubConn.Close();
                }
                drNew = dt.NewRow();
                drNew["Billno"] = sBillNo;
                drNew["BillDate"] = sBillDate;
                drNew["CustomerName"] = sCustomerName;
                drNew["Paymode"] = sPayMode;

                ds.Tables[0].Rows.Add(drNew);
            }
            /* Summation */

        }

        /* Clossing the DB Connection */
        oleConn.Close();

        return ds;


    }


    /*Start Ledger Report March 16*/
    public DataSet generateReportDS(int iAccHeading, int iGroupID, int iLedgerID, DateTime dtSdate, DateTime dtEdate, string sDataSource, string sType, string retFlag, int iOrder)
    {
        /* Start Variable Declaration */

        double dDebitAmt = 0;
        double dCreditAmt = 0;
        string sTranDate = string.Empty;
        string iQry = "";
        string sParticulars = "";
        string sParticularsI = "";

        string sVoucherType = string.Empty;
        string sQry = string.Empty;
        string pQry = string.Empty;
        string jQry = string.Empty;

        string sLedger = string.Empty;
        string sLedgerI = string.Empty;

        string sLedgerID = "0";
        string sLedgerIDI = "0";

        string rQry = string.Empty;
        string sConStr = string.Empty;
        int retValue = 0;
        SqlConnection oleConn, oleSubConn, oleSubConn2;
        int transno = 0;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        DataSet dsChildQry;
        DataSet dsChildQry2;

        string sOrder;
        if (iOrder == 0)
            sOrder = "asc";
        else
            sOrder = "desc";
        /* End Variable Declaration */

        /* Start Ms Access Database Connection Information */
        //sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource;
        sConStr = sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        /* End Ms Access Database Connection Information */




        /* Start DB Query Processing - Getting the Details of the Ledger int the Daybook */
        if (sType == "Sales" && retFlag == "Yes") /* Only Sales Return */
        {
            sQry = "SELECT TransDate,NULL as DebtorID,Transno,CreditorID,Amount,Narration,VoucherType,L.LedgerName ";
            sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.CreditorID ) ";
            sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
            sQry = sQry + "WHERE (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) ";
            sQry = sQry + "AND VoucherType='Purchase Return' ";

            if (iLedgerID != 0)
                sQry = sQry + " AND ( CreditorID=" + iLedgerID + ") ";

            if (iGroupID != 0)
                sQry = sQry + " AND (G.GroupID=" + iGroupID + ") ";

            if (iAccHeading != 0)
                sQry = sQry + " AND (H.HeadingID =" + iAccHeading + ") ";

            sQry = sQry + " Union All ";

            sQry = sQry + "SELECT TransDate,DebtorID,Transno,Null as CreditorID,Amount,Narration,VoucherType, L.LedgerName ";
            sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.DebtorID ) ";
            sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
            sQry = sQry + " WHERE (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) ";
            sQry = sQry + "AND VoucherType='Purchase Return' ";

            if (iLedgerID != 0)
                sQry = sQry + " AND ( DebtorID=" + iLedgerID + ") ";

            if (iGroupID != 0)
                sQry = sQry + " AND (G.GroupID=" + iGroupID + ") ";

            if (iAccHeading != 0)
                sQry = sQry + " AND (H.HeadingID =" + iAccHeading + ") ";

        }
        else if (sType == "Purchase" && retFlag == "Yes")/* Only Purchase Return */
        {
            //sQry = "SELECT TransNo,TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType FROM tblDayBook WHERE VoucherType='Purchase Return'  AND (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#)  Order by TransDate "+sOrder ;
            sQry = "SELECT TransDate,NULL as DebtorID,Transno,CreditorID,Amount,Narration,VoucherType,L.LedgerName ";
            sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.CreditorID ) ";
            sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
            sQry = sQry + "WHERE (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) ";
            sQry = sQry + "AND VoucherType='Sales Return' ";

            if (iLedgerID != 0)
                sQry = sQry + " AND ( CreditorID=" + iLedgerID + ") ";

            if (iGroupID != 0)
                sQry = sQry + " AND (G.GroupID=" + iGroupID + ") ";

            if (iAccHeading != 0)
                sQry = sQry + " AND (H.HeadingID =" + iAccHeading + ") ";

            sQry = sQry + " Union All ";

            sQry = sQry + "SELECT TransDate,DebtorID,Transno,Null as CreditorID,Amount,Narration,VoucherType, L.LedgerName ";
            sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.DebtorID ) ";
            sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
            sQry = sQry + "WHERE (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) ";
            sQry = sQry + "AND VoucherType='Sales Return' ";

            if (iLedgerID != 0)
                sQry = sQry + " AND (DebtorID=" + iLedgerID + ") ";

            if (iGroupID != 0)
                sQry = sQry + " AND (G.GroupID=" + iGroupID + ") ";

            if (iAccHeading != 0)
                sQry = sQry + " AND (H.HeadingID =" + iAccHeading + ") ";

        }
        else if (sType == "Purchase" && retFlag == "Both")/* Only Purchase Return */
        {
            //sQry = "SELECT TransNo,TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType FROM tblDayBook WHERE VoucherType='Purchase Return'  AND (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#)  Order by TransDate "+sOrder ;
            sQry = "SELECT TransDate,NULL as DebtorID,CreditorID,Transno,Amount,Narration,VoucherType,L.LedgerName ";
            sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.CreditorID ) ";
            sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
            sQry = sQry + "WHERE (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) ";
            sQry = sQry + "AND ( VoucherType='Sales Return' OR VoucherType='Purchase' ) ";

            if (iLedgerID != 0)
                sQry = sQry + " AND ( CreditorID=" + iLedgerID + ") ";

            if (iGroupID != 0)
                sQry = sQry + " AND (G.GroupID=" + iGroupID + ") ";

            if (iAccHeading != 0)
                sQry = sQry + " AND (H.HeadingID =" + iAccHeading + ") ";

            sQry = sQry + " Union All ";

            sQry = sQry + "SELECT TransDate,DebtorID,Null as CreditorID,Transno,Amount,Narration,VoucherType, L.LedgerName ";
            sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.DebtorID ) ";
            sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
            sQry = sQry + "WHERE (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) ";
            sQry = sQry + "AND ( VoucherType='Sales Return' OR VoucherType='Purchase' ) ";

            if (iLedgerID != 0)
                sQry = sQry + " AND (DebtorID=" + iLedgerID + ") ";

            if (iGroupID != 0)
                sQry = sQry + " AND (G.GroupID=" + iGroupID + ") ";

            if (iAccHeading != 0)
                sQry = sQry + " AND (H.HeadingID =" + iAccHeading + ") ";

        }
        else if (sType == "Sales" && retFlag == "Both") /* Both Sales and Sales Return */
        {
            //sQry = "SELECT TransNo,TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType FROM tblDayBook WHERE (VoucherType='Sales Return' OR VoucherType='Sales') AND (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#)  Order by TransDate " + sOrder;
            sQry = "SELECT TransDate,NULL as DebtorID,CreditorID,Transno,Amount,Narration,VoucherType,L.LedgerName ";
            sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.CreditorID ) ";
            sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
            sQry = sQry + "WHERE (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) ";
            sQry = sQry + " AND ( VoucherType='Sales' OR VoucherType='Purchase Return') ";

            if (iLedgerID != 0)
                sQry = sQry + " AND ( CreditorID=" + iLedgerID + ") ";

            if (iGroupID != 0)
                sQry = sQry + " AND (G.GroupID=" + iGroupID + ") ";

            if (iAccHeading != 0)
                sQry = sQry + " AND (H.HeadingID =" + iAccHeading + ") ";

            sQry = sQry + " Union All ";

            sQry = sQry + "SELECT TransDate,DebtorID,Transno,Null as CreditorID,Amount,Narration,VoucherType, L.LedgerName ";
            sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.DebtorID ) ";
            sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
            sQry = sQry + " WHERE (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) ";
            sQry = sQry + " AND ( VoucherType='Sales' OR VoucherType='Purchase Return') ";

            if (iLedgerID != 0)
                sQry = sQry + " AND (DebtorID=" + iLedgerID + ") ";

            if (iGroupID != 0)
                sQry = sQry + " AND (G.GroupID=" + iGroupID + ") ";

            if (iAccHeading != 0)
                sQry = sQry + " AND (H.HeadingID =" + iAccHeading + ") ";
        }
        else if (sType == "Sales" && retFlag == "No") /* Both Sales and Sales Return */
        {
            //sQry = "SELECT TransNo,TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType FROM tblDayBook WHERE (VoucherType='Sales Return' OR VoucherType='Sales') AND (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#)  Order by TransDate " + sOrder;
            sQry = "SELECT TransDate,NULL as DebtorID,CreditorID,Transno,Amount,Narration,VoucherType,L.LedgerName ";
            sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.CreditorID ) ";
            sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
            sQry = sQry + "WHERE (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) ";
            sQry = sQry + " AND VoucherType='Sales' ";

            if (iLedgerID != 0)
                sQry = sQry + " AND ( CreditorID=" + iLedgerID + ") ";

            if (iGroupID != 0)
                sQry = sQry + " AND (G.GroupID=" + iGroupID + ") ";

            if (iAccHeading != 0)
                sQry = sQry + " AND (H.HeadingID =" + iAccHeading + ") ";

            sQry = sQry + " Union All ";

            sQry = sQry + "SELECT TransDate,DebtorID,Null as CreditorID,Transno,Amount,Narration,VoucherType, L.LedgerName ";
            sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.DebtorID ) ";
            sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
            sQry = sQry + " WHERE (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) ";
            sQry = sQry + " AND (VoucherType='Sales') ";

            if (iLedgerID != 0)
                sQry = sQry + " AND (DebtorID=" + iLedgerID + ") ";

            if (iGroupID != 0)
                sQry = sQry + " AND (G.GroupID=" + iGroupID + ") ";

            if (iAccHeading != 0)
                sQry = sQry + " AND (H.HeadingID =" + iAccHeading + ") ";
        }
        else if (sType == "Purchase" && retFlag == "No")/* Both Purchase and Purchase Return */
        {
            //sQry = "SELECT TransNo,TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType FROM tblDayBook WHERE (VoucherType='Purchase Return' OR VoucherType='Purchase')  AND (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#)  Order by TransDate " + sOrder;
            sQry = "SELECT TransDate,NULL as DebtorID,CreditorID,Transno,Amount,Narration,VoucherType,L.LedgerName ";
            sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.CreditorID ) ";
            sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
            sQry = sQry + "WHERE (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) ";
            sQry = sQry + " AND (VoucherType='Purchase') ";

            if (iLedgerID != 0)
                sQry = sQry + " AND ( CreditorID=" + iLedgerID + ") ";

            if (iGroupID != 0)
                sQry = sQry + " AND (G.GroupID=" + iGroupID + ") ";

            if (iAccHeading != 0)
                sQry = sQry + " AND (H.HeadingID =" + iAccHeading + ") ";

            sQry = sQry + " Union All ";

            sQry = sQry + "SELECT TransDate,DebtorID,Null as CreditorID,Transno,Amount,Narration,VoucherType, L.LedgerName ";
            sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.DebtorID ) ";
            sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
            sQry = sQry + " WHERE (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) ";
            sQry = sQry + " AND ( VoucherType='Purchase') ";

            if (iLedgerID != 0)
                sQry = sQry + " AND (DebtorID=" + iLedgerID + ") ";

            if (iGroupID != 0)
                sQry = sQry + " AND (G.GroupID=" + iGroupID + ") ";

            if (iAccHeading != 0)
                sQry = sQry + " AND (H.HeadingID =" + iAccHeading + ") ";
        }
        else
        {
            //sQry = "SELECT TransNo,TransDate,DebtorID,CreditorID,Amount,Narration,,VoucherType FROM tblDayBook WHERE (DebtorID=" + iLedgerID + " OR CreditorID=" + iLedgerID + ") AND (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) Order by TransDate " + sOrder;
            sQry = "SELECT TransDate,NULL as DebtorID,CreditorID,Amount,Transno,Narration,VoucherType,L.LedgerName ";
            sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.CreditorID ) ";
            sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
            sQry = sQry + "WHERE (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) ";

            if (iLedgerID != 0)
                sQry = sQry + " AND ( CreditorID=" + iLedgerID + ") ";

            if (iGroupID != 0)
                sQry = sQry + " AND (G.GroupID=" + iGroupID + ") ";

            if (iAccHeading != 0)
                sQry = sQry + " AND (H.HeadingID =" + iAccHeading + ") ";

            sQry = sQry + " Union All ";

            sQry = sQry + "SELECT TransDate,DebtorID,Null as CreditorID,Amount,Transno,Narration,VoucherType, L.LedgerName ";
            sQry = sQry + "FROM (((tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.DebtorID ) ";
            sQry = sQry + "INNER JOIN tblGroups G ON G.GroupID = L.GroupID) INNER JOIN tblAccHeading H ON H.HeadingID = G.HeadingID ) ";
            sQry = sQry + " WHERE (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) ";

            if (iLedgerID != 0)
                sQry = sQry + " AND (DebtorID=" + iLedgerID + ") ";

            if (iGroupID != 0)
                sQry = sQry + " AND (G.GroupID=" + iGroupID + ") ";

            if (iAccHeading != 0)
                sQry = sQry + " AND (H.HeadingID =" + iAccHeading + ") ";

        }

        sQry = sQry + " Order by TransDate " + sOrder;

        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsParentQry = new DataSet();
        oleAdp.Fill(dsParentQry);
        /* End DB Query Processing - Getting the Details of the Ledger int the Daybook */


        DataSet ds;
        DataTable dt;
        DataRow drNew;
        DataColumn dc;


        ds = new DataSet();
        dt = new DataTable();
        dc = new DataColumn("Date");
        dt.Columns.Add(dc);

        dc = new DataColumn("Ledger");
        dt.Columns.Add(dc);

        dc = new DataColumn("LedgerID");
        dt.Columns.Add(dc);

        dc = new DataColumn("Particulars");
        dt.Columns.Add(dc);

        dc = new DataColumn("ParticularsI");
        dt.Columns.Add(dc);

        dc = new DataColumn("Debit");
        dt.Columns.Add(dc);

        dc = new DataColumn("Credit");
        dt.Columns.Add(dc);
        dc = new DataColumn("VoucherType");
        dt.Columns.Add(dc);


        ds.Tables.Add(dt);

        if (dsParentQry.Tables[0].Rows.Count == 0)
        {
            drNew = dt.NewRow();
            drNew["Date"] = string.Empty;
            drNew["Ledger"] = string.Empty;
            drNew["LedgerID"] = "";
            drNew["Particulars"] = string.Empty;
            drNew["ParticularsI"] = string.Empty;
            drNew["Debit"] = "0.00";
            drNew["Credit"] = "0.00";
            drNew["VoucherType"] = string.Empty;
            ds.Tables[0].Rows.Add(drNew);
        }
        else
        {
            /* Iterating through the records and forming the custom datamodel and write into XML file */

            foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
            {
                dDebitAmt = 0;
                dCreditAmt = 0;
                //if (drParentQry["TransNo"] != null)
                //{
                //    transno = Convert.ToInt32(drParentQry["TransNo"]);
                //    if (sType == "Sales")
                //    {
                //        rQry = "Select Count(*) from tblPurchase Where Transno=" + transno + " And SalesReturn Like 'Yes'";
                //    }
                //    else
                //    {
                //        rQry = "Select Count(*) from tblSales Where Transno=" + transno + " And PurchaseReturn Like 'Yes'";
                //    }
                //    oleSubConn2 = new SqlConnection(sConStr);
                //    oleCmd.Connection = oleSubConn2;
                //    oleCmd = new SqlCommand();
                //    oleCmd.CommandText = rQry;
                //    oleCmd.Connection = oleSubConn2;
                //    retValue=oleCmd.ExecuteNonQuery();
                //    oleSubConn2.Close();
                //}
                if (drParentQry["TransDate"] != null)
                {
                    sTranDate = Convert.ToDateTime(drParentQry["TransDate"].ToString()).ToShortDateString();
                }
                if (drParentQry["VoucherType"] != null)
                {
                    sVoucherType = Convert.ToString(drParentQry["VoucherType"].ToString());
                }
                /* Start Sum up the Debit and Credit Transaction of the given ledgerID , Getting the Correcponding Debtor or creditor for the particulars section*/
                if (drParentQry["DebtorID"] != null)
                {
                    if (drParentQry["DebtorID"].ToString() != "")
                    {
                        if (Convert.ToInt32(drParentQry["DebtorID"].ToString()) > 0)
                        {

                            dDebitAmt = Convert.ToDouble(drParentQry["Amount"].ToString());
                            pQry = "SELECT Ledgername,LedgerID FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drParentQry["DebtorID"].ToString());
                            jQry = "SELECT Ledgername,LedgerID FROM (tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.creditorid) WHERE b.transno=" + Convert.ToInt32(drParentQry["Transno"].ToString());

                        }
                    }
                }
                if (drParentQry["CreditorID"] != null)
                {
                    if (drParentQry["CreditorID"].ToString() != "")
                    {
                        if (Convert.ToInt32(drParentQry["CreditorID"].ToString()) > 0)
                        {

                            dCreditAmt = Convert.ToDouble(drParentQry["Amount"].ToString());
                            pQry = "SELECT Ledgername, LedgerID FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drParentQry["CreditorID"].ToString());
                            jQry = "SELECT Ledgername,LedgerID FROM (tblDayBook B INNER JOIN tblLedger L ON L.LedgerID = B.debtorid) WHERE b.transno=" + Convert.ToInt32(drParentQry["Transno"].ToString());

                        }
                    }
                }

                /* End Sum up the Debit and Credit Transaction of the given ledgerID , Getting the Correcponding Debtor or creditor for the particulars section*/
                if (sVoucherType == "Sales" || sVoucherType == "Purchase Return")
                {
                    dDebitAmt = 0;

                }
                else if (sVoucherType == "Purchase" || sVoucherType == "Sales Return")
                {
                    dCreditAmt = 0;
                }

                if (pQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(sConStr));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            sParticulars = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString() + " " + drParentQry["Narration"].ToString();
                            sLedger = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                            sLedgerID = dsChildQry.Tables[0].Rows[0]["ledgerID"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }

                if (jQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = jQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(sConStr));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry2 = new DataSet();
                    oleAdp.Fill(dsChildQry2);
                    if (dsChildQry2 != null)
                    {
                        if (dsChildQry2.Tables[0].Rows.Count > 0)
                        {
                            sParticularsI = dsChildQry2.Tables[0].Rows[0]["ledgername"].ToString();
                            sLedgerI = dsChildQry2.Tables[0].Rows[0]["ledgername"].ToString();
                            sLedgerIDI = dsChildQry2.Tables[0].Rows[0]["ledgerID"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }


                //if (retFlag == "No")
                //{
                //    if (retValue == 0)
                //    {
                drNew = dt.NewRow();
                drNew["Date"] = sTranDate;
                drNew["Ledger"] = sLedger;
                drNew["LedgerID"] = sLedgerID;
                drNew["Particulars"] = sParticulars;
                drNew["ParticularsI"] = sParticularsI;
                drNew["Debit"] = dDebitAmt.ToString();
                drNew["Credit"] = dCreditAmt.ToString();
                drNew["VoucherType"] = sVoucherType;
                ds.Tables[0].Rows.Add(drNew);

                sParticularsI = "";

                //    }
                //}
                //else if (retFlag == "Yes")
                //{
                //    if (retValue > 0)
                //    {
                //        drNew = dt.NewRow();
                //        drNew["Date"] = sTranDate;
                //        drNew["Particulars"] = sParticulars;
                //        drNew["Debit"] = dDebitAmt.ToString();
                //        drNew["Credit"] = dCreditAmt.ToString();
                //        ds.Tables[0].Rows.Add(drNew);
                //    }
                //}

            }



        }


        /* Clossing the DB Connection */


        oleConn.Close();

        return ds;


    }
    /*End Ledger Report March 16*/



    public DataSet getProductStockList(string sDataSource, string itemCode, DateTime sDate, DateTime eDate)
    {
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        string sQry = string.Empty;
        string sConStr = string.Empty;


        /* Start Ms Access Database Connection Information */
        sConStr = sDataSource;  //"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource + ";User Id=admin;Jet OLEDB:Database Password=moonmoon"; ;
        //sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource + ";User Id=admin;Password=moonmoon;Jet OLEDB:System Database=C:\\Program Files\\Microsoft Office\\Office\\SYSTEM.MDW;";
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        /* Start DB Query Processing - Getting the Details of the Ledger int the Daybook */
        //sQry = "SELECT * FROM (SELECT  b.billdate ,'PURCHASE' As Purchase/Sale ,qty,c.ledgername As LedgerName  from tblpurchaseitems a,tblpurchase b,tblledger c WHERE a.purchaseid=b.purchaseid AND b.supplierid = c.ledgerid AND itemcode='" + itemCode + "' UNION SELECT  d.billdate,'SALES' As Purchase/Sale,c.qty,e.ledgername As LedgerName  from tblsalesitems c,tblsales d,tblledger e WHERE c.billno=d.billno  AND d.cancelled=false AND d.customerid = e.ledgerid AND itemcode='" + itemCode + "') order by 1 ";

        //sQry = "select * from (select  b.billdate ,'PURCHASE' As 'Purchase/Sale',qty,c.ledgername As LedgerName   from tblpurchaseitems a,tblpurchase b,tblledger c where a.purchaseid=b.purchaseid AND b.supplierid = c.ledgerid and itemcode='" + itemCode + "'union all select  d.billdate,'SALES' As 'Purchase/Sale',c.qty,d.customername As LedgerName   from tblsalesitems c,tblsales d  where c.billno=d.billno  AND d.cancelled=false and itemcode='" + itemCode + "') order by 1";
        sQry = "select d.billdate,'SALES' As 'Purchase/Sale',d.billno,c.qty,d.customername As LedgerName,c.rate  from tblsalesitems c,tblsales d  where c.billno=d.billno AND (d.billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND d.billdate<=#" + eDate.ToString("MM/dd/yyyy") + "#)  AND d.cancelled=false and itemcode='" + itemCode + "' order by d.billdate union all    select * from (select  b.billdate ,'PURCHASE' As 'Purchase/Sale',b.BillNo ,qty,c.ledgername As LedgerName,b.TotalAmt   from tblpurchaseitems a,tblpurchase b,tblledger c where a.purchaseid=b.purchaseid AND b.supplierid = c.ledgerid and (b.InvoiceDate >=#" + sDate.ToString("MM/dd/yyyy") + "# AND b.InvoiceDate<=#" + eDate.ToString("MM/dd/yyyy") + "#) AND  itemcode='" + itemCode + "' ) order by 1,2";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsParentQry = new DataSet();
        oleAdp.Fill(dsParentQry);

        DataSet dsINOUT = new DataSet();

        sQry = "select  (c.Cdate) as billdate,'Raw Material' As 'Purchase/Sale',c.compid,d.qty,d.FormulaName As LedgerName from tblCompProduct c,tblexecution d  where c.CompID=d.CompID AND (c.CDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND c.Cdate<=#" + eDate.ToString("MM/dd/yyyy") + "#)  AND d.InOut='Raw Material' and d.itemcode='" + itemCode + "' order by c.cdate union all  select * from ( select  (c.Cdate) as billdate,'Raw Material' As 'Purchase/Sale',c.compid, d.qty,d.FormulaName As LedgerName   from tblCompProduct c,tblexecution d  where c.CompID=d.CompID AND (c.CDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND c.Cdate<=#" + eDate.ToString("MM/dd/yyyy") + "#)  AND d.InOut='Product' and d.itemcode='" + itemCode + "' ) order by 1,2";

        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        oleAdp.Fill(dsINOUT);

        if (dsINOUT.Tables[0].Rows.Count > 0)
            dsParentQry.Tables[0].Merge(dsINOUT.Tables[0]);

        return dsParentQry;

    }


    public DataSet getProductList(string sDataSource)
    {
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        string sQry = string.Empty;
        string sConStr = string.Empty;


        /* Start Ms Access Database Connection Information */
        sConStr = sDataSource; // "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource + ";User Id=admin;Jet OLEDB:Database Password=moonmoon"; ;
        //sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource + ";User Id=admin;Password=moonmoon;Jet OLEDB:System Database=C:\\Program Files\\Microsoft Office\\Office\\SYSTEM.MDW;";
        oleConn = new SqlConnection(CreateConnectionString(sConStr));

        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        /* Start DB Query Processing - Getting the Details of the Ledger int the Daybook */
        //sQry = "SELECT ItemCode + ' - ' + ProductDesc As ProductCode,itemcode,ProductName + '-' + Stock As ProductName FROM tblProductMaster";

        sQry = "SELECT ItemCode + ' | ' + ProductDesc + ' | ' + Model As ProductCode,ProductName + '@' + CStr(stock) + '@' + ItemCode As Product FROM tblProductMaster order by ProductDesc";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsParentQry = new DataSet();
        oleAdp.Fill(dsParentQry);
        return dsParentQry;
    }


    public DataSet ListProductsIt()
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;



        //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
        dbQry = "SELECT ItemCode + ' - ' + ProductDesc + ' - ' + Model  As ProductName,ItemCode FROM tblProductMaster Order By ProductDesc Asc";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }


    public DataSet SecondLevelDaywiseBillWisePurchase(DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblPurchase.BillNo as GroupItem,tblPurchaseItems.purchaseID, tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            dbQry.Append("  sum(tblPurchaseItems.PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode AND tblPurchase.BillDate=#" + eDate.ToString("MM/dd/yyyy") + "#  group by tblPurchase.BillNo,tblPurchaseItems.purchaseID, tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");



            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public DataSet SecondLevelDaywiseModelWisePurchase(DateTime eDate, string salesReturn, string intTrans, string delNote)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblProductMaster.Model as GroupItem,tblPurchase.BillNo,tblPurchaseItems.purchaseID, tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            dbQry.Append("  sum(tblPurchaseItems.PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode AND tblPurchase.BillDate=#" + eDate.ToString("MM/dd/yyyy") + "#  group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model, tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public DataSet SecondLevelDaywiseBrandWisePurchase(DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblProductMaster.ProductDesc as GroupItem,tblPurchase.BillNo,tblPurchaseItems.purchaseID, tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            dbQry.Append("  sum(tblPurchaseItems.PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode AND tblPurchase.BillDate=#" + eDate.ToString("MM/dd/yyyy") + "#  group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model, tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public DataSet SecondLevelDaywiseCustWisePurchase(DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblledger.ledgerName as GroupItem,tblPurchase.BillNo,tblPurchaseItems.purchaseID, tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            dbQry.Append("  sum(tblPurchaseItems.PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster,tblledger WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID And tblPurchase.supplierId = tblledger.ledgerid And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode AND tblPurchase.BillDate=#" + eDate.ToString("MM/dd/yyyy") + "#  group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model, tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblledger.ledgerName,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public DataSet SecondLevelDaywiseItemWisePurchase(DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblProductMaster.ProductName as GroupItem,tblPurchase.BillNo,tblPurchaseItems.purchaseID, tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            dbQry.Append("  sum(tblPurchaseItems.PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode AND tblPurchase.BillDate=#" + eDate.ToString("MM/dd/yyyy") + "#  group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName, tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");


            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public DataSet SecondLevelCategorywiseBillWisePurchase(string categoryName, DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblPurchaseItems.purchaseID,tblPurchase.BillNo as GroupItem, tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            dbQry.Append("  sum(tblPurchaseItems.PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster,tblCategories WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode AND tblCategories.CategoryID = tblProductMaster.CategoryID And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND tblCategories.CategoryName='" + categoryName + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#    group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName, tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet SecondLevelCategorywiseModelWisePurchase(string categoryName, DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblPurchaseItems.purchaseID,tblPurchase.BillNo, tblProductMaster.Model as GroupItem,tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            dbQry.Append("  sum(tblPurchaseItems.PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster,tblCategories WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode AND tblCategories.CategoryID = tblProductMaster.CategoryID And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND tblCategories.CategoryName='" + categoryName + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#    group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName, tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public DataSet SecondLevelCategorywiseBrandWisePurchase(string categoryName, DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblPurchaseItems.purchaseID,tblPurchase.BillNo, tblProductMaster.ProductDesc as GroupItem,tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            dbQry.Append("  sum(tblPurchaseItems.PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster,tblCategories WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode AND tblCategories.CategoryID = tblProductMaster.CategoryID And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND tblCategories.CategoryName='" + categoryName + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#    group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName, tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet SecondLevelCategorywiseCustWisePurchase(string categoryName, DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        try
        {
            dbQry.Append("SELECT tblPurchaseItems.purchaseID,tblPurchase.BillNo, tblledger.ledgername as GroupItem,tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            dbQry.Append("  sum(tblPurchaseItems.PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster,tblCategories,tblledger WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID And tblPurchase.supplierId = tblledger.ledgerid AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode AND tblCategories.CategoryID = tblProductMaster.CategoryID And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND tblCategories.CategoryName='" + categoryName + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#    group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName, tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblledger.ledgername, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }


    public DataSet SecondLevelCategorywiseItemWisePurchase(string categoryName, DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        try
        {
            dbQry.Append("SELECT tblPurchaseItems.purchaseID,tblPurchase.BillNo, tblProductMaster.ProductName as GroupItem,tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            dbQry.Append("  sum(tblPurchaseItems.PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster,tblCategories WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode AND tblCategories.CategoryID = tblProductMaster.CategoryID And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND tblCategories.CategoryName='" + categoryName + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#    group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName, tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }



    public DataSet SecondLevelBrandwiseBillWisePurchase(string BrandName, DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        try
        {
            dbQry.Append("SELECT tblPurchaseItems.purchaseID, tblPurchase.BillNo as GroupItem, tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            dbQry.Append("  sum(PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblProductMaster.ProductDesc ='" + BrandName + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName, tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    public DataSet SecondLevelBrandwiseModelWisePurchase(string BrandName, DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        try
        {
            dbQry.Append("SELECT tblPurchaseItems.purchaseID, tblPurchase.BillNo,tblProductMaster.Model as GroupItem, tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            dbQry.Append("  sum(PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblProductMaster.ProductDesc ='" + BrandName + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName, tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet SecondLevelBrandwiseBrandWisePurchase(string BrandName, DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        try
        {
            dbQry.Append("SELECT tblPurchaseItems.purchaseID, tblPurchase.BillNo,tblProductMaster.ProductDesc as GroupItem, tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            dbQry.Append("  sum(PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblProductMaster.ProductDesc ='" + BrandName + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName, tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet SecondLevelBrandWiseCustomerWisePurchase(DateTime sDate, DateTime eDate, string itemWise, string FirstLevelColumn, string SecondLevelColumn, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblPurchaseItems.purchaseID, tblPurchase.BillNo,tblProductMaster.ProductDesc,tblledger.ledgername as GroupItem, tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            dbQry.Append("  sum(PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster,tblledger WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And tblledger.ledgerid = tblpurchase.supplierid And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblProductMaster.ProductDesc ='" + itemWise + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName, tblledger.ledgername,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelBrandWiseItemWisePurchase(DateTime sDate, DateTime eDate, string itemWise, string FirstLevelColumn, string SecondLevelColumn, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblPurchaseItems.purchaseID, tblPurchase.BillNo,tblProductMaster.productname as GroupItem, tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            dbQry.Append("  sum(PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblProductMaster.ProductDesc ='" + itemWise + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelBrandWiseDayWisePurchase(DateTime sDate, DateTime eDate, string itemWise, string FirstLevelColumn, string SecondLevelColumn, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        try
        {

            dbQry.Append("SELECT tblPurchaseItems.purchaseID, tblPurchase.BillNo,tblProductMaster.productname as GroupItem, tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            dbQry.Append("  sum(PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblProductMaster.ProductDesc ='" + itemWise + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }


    public DataSet SecondLevelModelwiseBillWisePurchase(string ModelName, DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblPurchaseItems.purchaseID,tblPurchase.BillNo as GroupItem, tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            dbQry.Append(" sum(tblPurchaseItems.PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblProductMaster.Model ='" + ModelName + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet SecondLevelModelwiseModelWisePurchase(string ModelName, DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblPurchaseItems.purchaseID,tblPurchase.BillNo,tblProductMaster.Model as GroupItem, tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            dbQry.Append(" sum(tblPurchaseItems.PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblProductMaster.Model ='" + ModelName + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");


            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet SecondLevelModelwiseBrandWisePurchase(string ModelName, DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT tblPurchaseItems.purchaseID,tblPurchase.BillNo,tblProductMaster.ProductDesc as GroupItem, tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            dbQry.Append(" sum(tblPurchaseItems.PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblProductMaster.Model ='" + ModelName + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet SecondLevelGeneralSalesPurchase(DateTime sDate, DateTime eDate, string itemWise, string FirstLevelColumn, string SecondLevelColumn, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            if (SecondLevelColumn == "BillNo")
                dbQry.Append("SELECT tblPurchase." + SecondLevelColumn + " as GroupItem, tblPurchaseItems.ItemCode,tblProductMaster.ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            else if ((SecondLevelColumn == "ProductName") || (SecondLevelColumn == "Model") || (SecondLevelColumn == "ProductDesc"))
                dbQry.Append("SELECT tblProductMaster." + SecondLevelColumn + " as GroupItem, tblPurchaseItems.ItemCode,tblProductMaster.ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            else if (SecondLevelColumn == "ledgername")
                dbQry.Append("SELECT tblledger." + SecondLevelColumn + " as GroupItem, tblPurchaseItems.ItemCode,tblProductMaster.ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");

            dbQry.Append("  sum(tblPurchaseItems.PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");

            if (SecondLevelColumn == "BillNo")
                dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblProductMaster.ItemCode = tblPurchaseItems.Itemcode And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblPurchase." + FirstLevelColumn + " = '" + itemWise + "' group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");
            else if (SecondLevelColumn == "ProductName")
                dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblProductMaster.ItemCode = tblPurchaseItems.Itemcode And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblPurchase." + FirstLevelColumn + " = '" + itemWise + "' group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");
            else if (SecondLevelColumn == "Model")
                dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblProductMaster.ItemCode = tblPurchaseItems.Itemcode And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblPurchase." + FirstLevelColumn + " = '" + itemWise + "' group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");
            else if (SecondLevelColumn == "ledgername")
                dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster,tblledger WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblProductMaster.ItemCode = tblPurchaseItems.Itemcode And tblledger.ledgerid = tblpurchase.supplierid And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblPurchase." + FirstLevelColumn + " = '" + itemWise + "' group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName,tblledger.ledgername,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");
            else if (SecondLevelColumn == "ProductDesc")
                dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblProductMaster.ItemCode = tblPurchaseItems.Itemcode And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblPurchase." + FirstLevelColumn + " = '" + itemWise + "' group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet SecondLevelGeneralProductWisePurchase(DateTime sDate, DateTime eDate, string itemWise, string FirstLevelColumn, string SecondLevelColumn, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            if (SecondLevelColumn == "BillNo")
                dbQry.Append("SELECT tblPurchase.PurchaseID,tblPurchase." + SecondLevelColumn + " as GroupItem, tblPurchaseItems.ItemCode,tblProductMaster.ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            else if ((SecondLevelColumn == "ProductName") || (SecondLevelColumn == "Model") || (SecondLevelColumn == "ProductDesc"))
                dbQry.Append("SELECT tblPurchase.PurchaseID,tblProductMaster." + SecondLevelColumn + " as GroupItem, tblPurchaseItems.ItemCode,tblProductMaster.ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            else if (SecondLevelColumn == "ledgername")
                dbQry.Append("SELECT tblPurchase.PurchaseID,tblledger." + SecondLevelColumn + " as GroupItem, tblPurchaseItems.ItemCode,tblProductMaster.ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");

            dbQry.Append("  sum(tblPurchaseItems.PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");

            if (SecondLevelColumn == "BillNo")
                dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster,tblLedger WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblProductMaster.ItemCode = tblPurchaseItems.Itemcode And tblLedger.LedgerID=tblPurchase.SupplierID AND ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblLedger." + FirstLevelColumn + " = '" + itemWise + "' and tblPurchase.Invoicedate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.Invoicedate<=#" + eDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblledger.ledgername,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");
            else if (SecondLevelColumn == "Model")
                dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster,tblLedger WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblProductMaster.ItemCode = tblPurchaseItems.Itemcode And tblLedger.LedgerID=tblPurchase.SupplierID AND ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblLedger." + FirstLevelColumn + " = '" + itemWise + "' and tblPurchase.Invoicedate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.Invoicedate<=#" + eDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblledger.ledgername,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");
            else if (SecondLevelColumn == "ProductDesc")
                dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster,tblLedger WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblProductMaster.ItemCode = tblPurchaseItems.Itemcode And tblLedger.LedgerID=tblPurchase.SupplierID AND ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblLedger." + FirstLevelColumn + " = '" + itemWise + "' and tblPurchase.Invoicedate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.Invoicedate<=#" + eDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblledger.ledgername,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");
            else if (SecondLevelColumn == "ProductName")
                dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster,tblLedger WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblProductMaster.ItemCode = tblPurchaseItems.Itemcode And tblLedger.LedgerID=tblPurchase.SupplierID AND ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblLedger." + FirstLevelColumn + " = '" + itemWise + "' and tblPurchase.Invoicedate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.Invoicedate<=#" + eDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID,tblledger.ledgername, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");
            else
                dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster,tblLedger WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblProductMaster.ItemCode = tblPurchaseItems.Itemcode And tblLedger.LedgerID=tblPurchase.SupplierID AND ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblLedger." + FirstLevelColumn + " = '" + itemWise + "' and tblPurchase.Invoicedate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.Invoicedate<=#" + eDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID,tblledger.ledgername, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");


            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet SecondLevelGeneralSalesItemWisePurchase(DateTime sDate, DateTime eDate, string itemWise, string FirstLevelColumn, string SecondLevelColumn, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            if (SecondLevelColumn == "BillNo")
                dbQry.Append("SELECT tblPurchaseItems.purchaseID,tblPurchase." + SecondLevelColumn + " as GroupItem, tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            else if ((SecondLevelColumn == "ProductName") || (SecondLevelColumn == "Model") || (SecondLevelColumn == "ProductDesc"))
                dbQry.Append("SELECT tblPurchaseItems.purchaseID,tblProductMaster." + SecondLevelColumn + " as GroupItem, tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            else if (SecondLevelColumn == "ledgername")
                dbQry.Append("SELECT tblPurchaseItems.purchaseID,tblledger." + SecondLevelColumn + " as GroupItem, tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");

            dbQry.Append("  sum(tblPurchaseItems.PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");

            if (SecondLevelColumn == "BillNo")
                dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblProductMaster." + FirstLevelColumn + " = '" + itemWise + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");
            else if (SecondLevelColumn == "ledgername")
                dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster,tblledger WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And tblledger.ledgerid = tblpurchase.supplierid And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblProductMaster." + FirstLevelColumn + " = '" + itemWise + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblledger.ledgername,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");
            else if (SecondLevelColumn == "ProductDesc")
                dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblProductMaster." + FirstLevelColumn + " = '" + itemWise + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");
            else if (SecondLevelColumn == "ProductName")
                dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblProductMaster." + FirstLevelColumn + " = '" + itemWise + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");
            else
                dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblProductMaster." + FirstLevelColumn + " = '" + itemWise + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet SecondLevelModelWiseItemWisePurchase(DateTime sDate, DateTime eDate, string itemWise, string FirstLevelColumn, string SecondLevelColumn, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblPurchaseItems.purchaseID,tblPurchase.BillNo,tblProductMaster." + SecondLevelColumn + " as GroupItem, tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            dbQry.Append(" sum(tblPurchaseItems.PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblProductMaster.Model ='" + itemWise + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblProductMaster.Model,tblProductMaster.ProductName,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet SecondLevelGeneralProductWisePur(DateTime sDate, DateTime eDate, string itemWise, string FirstLevelColumn, string SecondLevelColumn, string salesReturn, string intTrans, string delNote)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        try
        {
            dbQry.Append("SELECT tblPurchaseItems.purchaseID,tblPurchase.BillNo,tblledger." + SecondLevelColumn + " as GroupItem, tblPurchaseItems.ItemCode,ProductDesc,sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            dbQry.Append(" sum(tblPurchaseItems.PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster,tblledger WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblledger.ledgerid = tblpurchase.supplierid And tblPurchaseItems.ItemCode = tblProductmaster.ItemCode And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblProductMaster.Model ='" + itemWise + "' and tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.BillNo,tblPurchaseItems.purchaseID,tblledger.ledgername,tblProductMaster.Model,tblProductMaster.ProductName,tblPurchaseItems.ItemCode,ProductDesc,tblPurchase.purchaseID, tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST Order By tblPurchase.purchaseID");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }


    public DataSet PurchaseAnnuxere(DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote, string condi)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblLedger.LedgerName As LinkName,tblPurchase.billno,tblLedger.tinnumber,tblPurchase.billdate,tblPurchaseItems.vat, Sum(tblPurchaseItems.Qty*PurchaseRate) As NetPurchaseRate , Sum((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount, ");
            dbQry.Append(" Sum( ((tblPurchaseItems.Qty*PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*PurchaseRate) - tblPurchaseItems.discamt) * VAT/100 ) AS ActualVAT , sum(tblPurchaseItems.discamt) as discamt, sum(tblPurchase.discamount) as discamount ");
            dbQry.Append(" FROM tblPurchaseItems,tblPurchase,tblLedger WHERE tblPurchase.purchaseID=tblPurchaseItems.purchaseID And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) and UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) And tblPurchase.InvoiceDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.InvoiceDate<=#" + eDate.ToString("MM/dd/yyyy") + "# AND tblLedger.LedgerID = tblPurchase.SupplierID " + condi + "  Group By  tblLedger.LedgerName,tblPurchase.billno,tblPurchaseItems.vat,tblLedger.tinnumber,tblPurchase.billdate");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SalesAnnuxere(DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote, string condi)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT CustomerName As LinkName,tblSales.billdate,tblSales.billno,tblSalesitems.vat,tblLedger.tinnumber, Sum(tblSalesItems.Qty*Rate) As NetRate ,");
            dbQry.Append(" Sum( ((tblSalesItems.Qty*rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)) * VAT/100 ) AS ActualVAT");
            dbQry.Append(" FROM tblSalesItems,tblSales,tblLedger WHERE tblSales.Billno=tblSalesItems.Billno and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "'  AND tblLedger.LedgerID = tblSales.customerid and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  " + condi + " Group By CustomerName,tblSales.billno,tblSalesitems.vat,tblLedger.tinnumber,tblSales.billdate");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SalesPurRetAnnuxere(DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote, string condi)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT CustomerName As LinkName,tblSales.billdate,tblSales.billno,tblSalesitems.vat,tblLedger.tinnumber, Sum(tblSalesItems.Qty*Rate) As NetRate ,");
            dbQry.Append(" Sum( ((tblSalesItems.Qty*rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*Rate)) * VAT/100 ) AS ActualVAT");
            dbQry.Append(" FROM tblSalesItems,tblSales,tblLedger WHERE tblSales.Billno=tblSalesItems.Billno and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "'  AND tblLedger.LedgerID = tblSales.customerid and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# " + condi + "  Group By CustomerName,tblSales.billno,tblSalesitems.vat,tblLedger.tinnumber,tblSales.billdate");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet PurchaseSalesRetAnnuxere(DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote, string condi)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT tblLedger.LedgerName As LinkName,tblPurchase.billno,tblLedger.tinnumber,tblPurchase.billdate,tblPurchaseItems.vat, Sum(tblPurchaseItems.Qty*PurchaseRate) As NetPurchaseRate ,");
            dbQry.Append(" Sum( ((tblPurchaseItems.Qty*PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*PurchaseRate)) * VAT/100 ) AS ActualVAT ");
            dbQry.Append(" FROM tblPurchaseItems,tblPurchase,tblLedger WHERE tblPurchase.purchaseID=tblPurchaseItems.purchaseID And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) and UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) And tblPurchase.InvoiceDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.InvoiceDate<=#" + eDate.ToString("MM/dd/yyyy") + "# AND tblLedger.LedgerID = tblPurchase.SupplierID  " + condi + "  Group By  tblLedger.LedgerName,tblPurchase.billno,tblPurchaseItems.vat,tblLedger.tinnumber,tblPurchase.billdate");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetTotalsalesdate(DateTime sDate, DateTime eDate, string pret, string itrans, string denot)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = "SELECT tblProductMaster.Productdesc,tblProductMaster.productname,tblProductMaster.model,tblProductMaster.itemcode,tblSales.Billno,tblSales.Billdate,tblSalesItems.Qty FROM tblSales,tblSalesItems,tblProductMaster WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode AND tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='NO' and UCASE(tblSales.DeliveryNote)='NO' and UCASE(tblSales.InternalTransfer)='NO' AND tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "# ";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }


    public void Insertuserlock(string connection, string dtaa, string id, object usernam)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("Insert Into tbluserlock Values ('{0}','{1}')", id, dtaa);
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void DeleteUserlock(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();
            dbQry = string.Format("Delete from tbluserlock");
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            manager.CommitTransaction();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetUserlock(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("SELECT user,recondate from tbluserlock");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public DataSet ListCustomerPaymentsRef(string connection)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("SELECT  (tblDayBook.RefNo & ' - ' & Debitor.LedgerName) as RefNo,tblDayBook.TransNo as TransNo, Creditor.LedgerName as LedgerName FROM ((((tblDayBook INNER JOIN tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) INNER JOIN tblPayMent Payment ON tblDayBook.TransNo = Payment.JournalID) INNER JOIN tblGroups G ON G.GroupID = Debitor.GroupID) Where tblDayBook.VoucherType = 'Payment' AND G.GroupName = 'Sundry Debtors' Order By tblDayBook.TransDate,tblDayBook.TransNo Desc");

            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where GroupName = 'Sundry Debtors' ORDER By LedgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }


    public DataSet ListSupplierPaymentsRef(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();

            dbQry = string.Format("SELECT  Creditor.LedgerName, (tblDayBook.RefNo & ' - ' & Debitor.LedgerName) as RefNo,tblDayBook.TransNo as TransNo FROM ((((tblDayBook INNER JOIN tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) INNER JOIN tblPayMent Payment ON tblDayBook.TransNo = Payment.JournalID) INNER JOIN tblGroups G ON G.GroupID = Debitor.GroupID) Where tblDayBook.VoucherType = 'Payment'  AND G.GroupName = 'Sundry Creditors'  Order By tblDayBook.TransDate Desc  ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }



    public DataSet GetPaymentForRef(string connection, int RefNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName,tblDayBook.CreditorID,tblDayBook.DebtorID, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo, Payment.Paymode,Payment.Billno  FROM  ((((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
            dbQry.Append(" tblPayMent Payment ON tblDayBook.TransNo = Payment.JournalID)  INNER JOIN tblGroups G ON G.GroupID = Debitor.GroupID) ");
            dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Payment' and tblDayBook.RefNo = {0} order by tblDayBook.TransDate desc", RefNo);

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void DeleteCustReceiptSales(string connection, int TransNo, bool requireValidation, string username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        DataSet dsOld = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;

        int TTransNo = 0;
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();
            ds = manager.ExecuteDataSet(CommandType.Text, "Select Amount,DebtorID,CreditorID,TransDate from tblDayBook Where TransNo=" + TransNo);

            int DebitorID = Convert.ToInt32(ds.Tables[0].Rows[0]["DebtorID"].ToString());
            int CreditorID = Convert.ToInt32(ds.Tables[0].Rows[0]["CreditorID"].ToString());
            double Amount = Convert.ToDouble(ds.Tables[0].Rows[0]["Amount"].ToString());
            DateTime TransDate = Convert.ToDateTime(ds.Tables[0].Rows[0]["TransDate"].ToString());

            if (requireValidation)
            {
                if (!IsValidDate(connection, TransDate))
                {
                    throw new Exception("Invalid Date");
                }
            }

            dbQry = string.Format("Select DebtorID,CreditorID,Amount,Transdate,RefNo from tblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                    oldBillNo = dsOld.Tables[0].Rows[0]["RefNo"].ToString();
                }

            }

            //dbQry = string.Format("Update tblLedger SET Debit = Debit - {0} Where LedgerID={1}", Amount, DebitorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Update tblLedger SET Credit = Credit - {0} Where LedgerID={1}", Amount, CreditorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry2 = "SELECT KeyValue From tblSettings WHERE key='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Delete From tblReceipt Where JournalID = {0}", TransNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString(), logdescription.ToString(), username, TransNo, "DeleteReceipt");
                manager.ExecuteNonQuery(CommandType.Text, description);

                logdescription = string.Format("Delete From tblReceivedAmount Where ReceiptNo = {0}", TransNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString(), logdescription.ToString(), username, TransNo, "DeleteReceipt");
                manager.ExecuteNonQuery(CommandType.Text, description);

                logdescription = string.Format("Delete From tblDayBook Where TransNo = {0}", TransNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString(), logdescription.ToString(), username, TransNo, "DeleteReceipt");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblAuditDayBook Select * From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("INSERT INTO tblAuditReceipt Select * From tblReceipt Where JournalID = {0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("INSERT INTO tblAuditReceivedAmount Select * From tblReceivedAmount Where ReceiptNo = {0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblReceipt Where JournalID = {0}", TransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblReceivedAmount Where ReceiptNo = {0}", TransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Receipt Transaction: " + TransNo + " got deleted old Record Details : User =" + username + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + Amount;

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Delete", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public string getConfigInfoMethod()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();

            dbQry.Append("SELECT   KeyValue  From tblSettings WHERE KEYNAME='BILLMETHOD'");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds.Tables[0].Rows[0]["KeyValue"].ToString();
            else
                return "";
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListCreditPurchase(string connection, string SupplierID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "Select Purchaseid, BillNo,BillDate,tblledger.ledgername, Amount from (tblPurchase inner join tblDayBook on tblPurchase.JournalID = tblDayBook.TransNo) inner join tblledger on tblPurchase.SupplierID = tblledger.ledgerid Where PayMode = 3 AND SupplierID=" + SupplierID;

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetSupplierReceivedAmount(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT BillNo,Sum( Amount) as TotalAmount From tblPaymentAmount Group By BillNo");

            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }


    public DataSet GetPaymentAmountId(string connection, int PaymentNo)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT PaymentNo as ReceiptNo,BillNo, Amount From tblPaymentAmount ");
            dbQry.AppendFormat("Where PaymentNo = {0}", PaymentNo);

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            DataTable dt = new DataTable();
            DataColumn dc;

            dc = new DataColumn("ReceiptNo");
            dt.Columns.Add(dc);

            dc = new DataColumn("BillNo");
            dt.Columns.Add(dc);

            dc = new DataColumn("Amount");
            dt.Columns.Add(dc);

            ds.Tables.Add(dt);

            DataRow dr = ds.Tables[0].NewRow();

            dr["ReceiptNo"] = "0";
            dr["BillNo"] = "0";
            dr["Amount"] = "0";

            if (ds == null || ds.Tables[0].Rows.Count == 0)
            {
                if (ds.Tables[0].Rows.Count == 0)
                    ds.Tables[0].Rows.InsertAt(dr, 0);
            }

            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }


    }


    public int GetIfBillNoExistsPayment(int billno, string customerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        int Exists = 0;

        try
        {

            manager.Open();

            dbQry.Append("SELECT Count(*) FROM tblPurchase Where BillNo='" + billno.ToString() + "' AND SupplierID=" + customerID + " AND PayMode=3 ");

            var count = manager.ExecuteScalar(CommandType.Text, dbQry.ToString());

            if (!string.IsNullOrEmpty(count.ToString()))
                Exists = int.Parse(count.ToString());

            return Exists;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public void InsertSuppPayment(out int NewTransNo, string connection, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string ChequeNo, string Paymode, DataSet dsBillNos, string usernam, string Branchcode)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string State = "Y";

        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {

            if (!IsValidDate(connection, TransDate))
            {
                throw new Exception("Invalid Date");
            }

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            int cid = 0;
            if (Paymode == "Cash")
            {
                cid = getCashACLedgerId(connection, Branchcode);
                CreditorID = cid;
            }


            dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, Branchcode) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})",
                TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, Branchcode);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, "", "InsertSuppPayment");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, Branchcode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},{8},'{9}')",
                TransDate.ToString("yyyy-MM-dd"), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, Branchcode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int TransNo = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));


            if (Logsave == "YES")
            {
                logdescription = string.Format("Insert Into tblPayment(JournalID,Paymode,BillNo,DebtorID, Branchcode) Values({0},{1},{2},{3},{4})", TransNo, Paymode, 0, DebitorID, Branchcode);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, "", "InsertSuppPayment");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("Insert Into tblPayment(JournalID,Paymode,BillNo,DebtorID, Branchcode) Values({0},'{1}','{2}',{3},'{4}')", TransNo, Paymode, 0, DebitorID, Branchcode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);

            //double Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);

            //double Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            if (dsBillNos != null)
            {
                if (dsBillNos.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsBillNos.Tables[0].Rows)
                    {
                        if (dr["BillNo"].ToString() != "0")
                        {
                            if (Logsave == "YES")
                            {
                                logdescription = string.Format("INSERT INTO tblPaymentAmount(PaymentNo,BillNo,Amount, Branchcode) VALUES({0},{1},{2},{3})", TransNo.ToString(), dr["BillNo"].ToString(), Convert.ToDouble(dr["Amount"]), Branchcode);
                                logdescription = logdescription.Trim();
                                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, "", "InsertSuppPayment");
                                manager.ExecuteNonQuery(CommandType.Text, description);
                            }

                            dbQry = string.Format("INSERT INTO tblPaymentAmount(PaymentNo,BillNo,Amount, Branchcode) VALUES({0},{1},{2},'{3}')", TransNo.ToString(), dr["BillNo"].ToString(), Convert.ToDouble(dr["Amount"]), Branchcode);
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        }
                    }
                }
            }



            //dbQry = string.Format("Update tblchequeitems SET status = '{1}' Where chequeno='{0}'", ChequeNo, State);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);


            sAuditStr = "Payment Transaction: " + TransNo + " added. Record Details :  User :" + usernam + " Bill No=" + RefNo + " DebtorID=" + DebitorID + " ,CreditorID=" + CreditorID + " ,Amount=" + Amount + " New Trans No :" + TransNo + " DateTime: " + DateTime.Now.ToString();
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            NewTransNo = TransNo;

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void UpdateSuppPayment(out int NewTransNo, string connection, int TransNo, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string ChequeNo, string Paymode, DataSet dsBillNos, string usernam, string Branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        DataSet dsOld = new DataSet();

        string sAuditStr = string.Empty;

        int TTransNo = 0;
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;
        string dbQry = string.Empty;
        string oldtrandate = string.Empty;
        string Userna = string.Empty;
        string State = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;


        SqlConnection oleConn, oleSubConn;
        string pQry = string.Empty;
        string pgQry = string.Empty;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        DataSet dsChildQry;
        string sConStr = string.Empty;

        oleConn = new SqlConnection(CreateConnectionString(connection));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        DataSet dsOldRec = new DataSet();
        string dbQry123 = string.Empty;


        try
        {
            if (IsValidDate(connection, TransDate))
            {
                manager.Open();
                manager.ProviderType = DataProvider.SqlServer;

                manager.BeginTransaction();

                dbQry = string.Format("Select DebtorID,CreditorID,Amount,Transdate,Refno from tblDaybook Where TransNo={0}", TransNo);
                dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
                if (dsOld != null)
                {
                    if (dsOld.Tables.Count > 0)
                    {
                        oldBillNo = dsOld.Tables[0].Rows[0]["RefNo"].ToString();
                        oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                        oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                        oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                        oldtrandate = Convert.ToString(dsOld.Tables[0].Rows[0]["transdate"]);
                    }

                }

                DeleteSuppPayment(connection, TransNo, false, Userna);

                //InsertSuppPayment(out NewTransNo, connection, RefNo, TransDate, DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, Paymode, dsBillNos);


                int cid = 0;
                if (Paymode == "Cash")
                {
                    cid = getCashACLedgerId(connection, Branchcode);
                    CreditorID = cid;
                }


                if (!IsValidDate(connection, TransDate))
                {
                    throw new Exception("Invalid Date");
                }

                dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
                dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
                if (dsd.Tables[0].Rows.Count > 0)
                    Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

                if (Logsave == "YES")
                {
                    logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, Branchcode) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9})",
                    TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, Branchcode);
                    logdescription = logdescription.Trim();
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                         DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, "", "UpdateSuppPayment");
                    manager.ExecuteNonQuery(CommandType.Text, description);
                }

                dbQry = string.Format("INSERT INTO tblAuditDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, Branchcode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},{8},'{9}')",
                    TransDate.ToString("yyyy-MM-dd"), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, Branchcode);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);


                dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo, Branchcode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},{8},'{9}')",
                    TransDate.ToString("yyyy-MM-dd"), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo, Branchcode);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                int TransNum = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));

                if (Logsave == "YES")
                {
                    logdescription = string.Format("Insert Into tblPayment(JournalID,Paymode,BillNo,DebtorID, Branchcode) Values({0},{1},{2},{3},{4})", TransNum, Paymode, 0, DebitorID, Branchcode);
                    logdescription = logdescription.Trim();
                    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                         DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, "", "UpdateSuppPayment");
                    manager.ExecuteNonQuery(CommandType.Text, description);
                }

                //dbQry = string.Format("Insert Into tblAuditPayment(JournalID,Paymode,BillNo,DebtorID) Values({0},'{1}','{2}',{3})", TransNum, Paymode, 0, DebitorID);

                //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                dbQry = string.Format("Insert Into tblPayment(JournalID,Paymode,BillNo,DebtorID, Branchcode) Values({0},'{1}','{2}',{3},'{4}')", TransNum, Paymode, 0, DebitorID, Branchcode);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);


                int Voucher = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(VoucherNo) FROM tblPayment"));

                dbQry = string.Format("Insert Into tblAuditPayment(VoucherNo,JournalID,Paymode,BillNo,DebtorID, Branchcode) Values({0},{1},'{2}','{3}',{4},'{5}')", Voucher, TransNum, Paymode, 0, DebitorID, Branchcode);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);


                //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);

                //double Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

                //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);

                //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);

                //double Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);

                //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);

                //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                if (dsBillNos != null)
                {
                    foreach (DataRow dr in dsBillNos.Tables[0].Rows)
                    {
                        if (dr["BillNo"].ToString() != "0")
                        {
                            if (Logsave == "YES")
                            {
                                logdescription = string.Format("INSERT INTO tblPaymentAmount(PaymentNo,BillNo,Amount, Branchcode) VALUES({0},{1},{2},{3})", TransNum.ToString(), dr["BillNo"].ToString(), Convert.ToDouble(dr["Amount"]), Branchcode);
                                logdescription = logdescription.Trim();
                                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, "", "UpdateSuppPayment");
                                manager.ExecuteNonQuery(CommandType.Text, description);
                            }

                            dbQry = string.Format("INSERT INTO tblAuditPaymentAmount(PaymentNo,BillNo,Amount, Branchcode) VALUES({0},{1},{2},'{3}')", TransNum.ToString(), dr["BillNo"].ToString(), Convert.ToDouble(dr["Amount"]), Branchcode);

                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                            dbQry = string.Format("INSERT INTO tblPaymentAmount(PaymentNo,BillNo,Amount, Branchcode) VALUES({0},{1},{2},'{3}')", TransNum.ToString(), dr["BillNo"].ToString(), Convert.ToDouble(dr["Amount"]), Branchcode);
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        }
                    }
                }






                string Debtor = string.Empty;
                string creditor = string.Empty;
                if (DebitorID != null)
                {
                    pQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + DebitorID;
                }

                if (CreditorID != null)
                {
                    pgQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + CreditorID;
                }
                if (pQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(connection));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            Debtor = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }

                if (pgQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pgQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(connection));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            creditor = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }
                dbQry123 = string.Format("Select TransNo from tblBankRecon Where TransNo={0}", TransNo);
                dsOldRec = manager.ExecuteDataSet(CommandType.Text, dbQry123);
                if (dsOldRec != null)
                {
                    if (dsOldRec.Tables.Count > 0)
                    {
                        dbQry = string.Format("UPDATE tblBankRecon SET TransNo={0},TransDate = '{1}',DebtorID={2},Debtor='{3}',CreditorID={4},Creditor='{5}',Amount={6},Narration='{7}',VoucherType='{8}',Chequeno='{9}',RefNo={10} WHERE TransNo={11} ",
                        TransNum, TransDate.ToString("yyyy-MM-dd"), DebitorID, Debtor, CreditorID, creditor, Amount, Narration, VoucherType, ChequeNo, 0, TransNo);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }







                //dbQry = string.Format("Update tblchequeitems SET status = '{1}' Where chequeno='{0}'", ChequeNo, State);

                //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                NewTransNo = TransNo;

                sAuditStr = "Payment Transaction: " + TransNo + " got edited. Updates Record Details : Bill No=" + oldBillNo + " DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + oldAmt + " New Trans No :" + NewTransNo + " DateTime:" + DateTime.Now.ToString();

                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit and Update", DateTime.Now.ToString("yyyy-MM-dd"));
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                manager.CommitTransaction();
            }
            else
            {
                throw new Exception("Invalid Date");
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
        }
    }


    public void DeleteSuppPayment(string connection, int TransNo, bool requireValidation, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string dbQry123 = string.Empty;
        string State = "N";
        DataSet dsOld = new DataSet();
        DataSet dsOldRec = new DataSet();
        string sAuditStr = string.Empty;
        int CheNo = 0; 
        int TTransNo = 0;
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;

        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;

        string oldtrandate = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            ds = manager.ExecuteDataSet(CommandType.Text, "Select Amount,DebtorID,CreditorID,TransDate,ChequeNo from tblDayBook Where TransNo=" + TransNo);

            int DebitorID = Convert.ToInt32(ds.Tables[0].Rows[0]["DebtorID"].ToString());
            int CreditorID = Convert.ToInt32(ds.Tables[0].Rows[0]["CreditorID"].ToString());
            double Amount = Convert.ToDouble(ds.Tables[0].Rows[0]["Amount"].ToString());
            DateTime TransDate = Convert.ToDateTime(ds.Tables[0].Rows[0]["TransDate"].ToString());
            string cheque = Convert.ToString(ds.Tables[0].Rows[0]["ChequeNo"].ToString());
            if (ds.Tables[0].Rows[0]["ChequeNo"].ToString() != "")
            {
                CheNo = Convert.ToInt32(ds.Tables[0].Rows[0]["ChequeNo"].ToString());
            } 

            dbQry = string.Format("Select DebtorID,CreditorID,Amount,Transdate,RefNo from tblDaybook Where TransNo={0}", TransNo);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                    oldtrandate = Convert.ToString(dsOld.Tables[0].Rows[0]["transdate"]);
                    oldBillNo = dsOld.Tables[0].Rows[0]["RefNo"].ToString();
                }

            }


            if (requireValidation)
            {
                if (!IsValidDate(connection, TransDate))
                {
                    throw new Exception("Invalid Date");
                }
            }

            dbQry = string.Format("Update tblLedger SET Debit = Debit - {0} Where LedgerID={1}", Amount, DebitorID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Update tblLedger SET Credit = Credit - {0} Where LedgerID={1}", Amount, CreditorID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry2 = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, TransNo, "DeleteSuppPayment");
                manager.ExecuteNonQuery(CommandType.Text, description);

                logdescription = string.Format("Delete From tblPayment Where JournalID = {0}", TransNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, TransNo, "DeleteSuppPayment");
                manager.ExecuteNonQuery(CommandType.Text, description);

                logdescription = string.Format("Delete From tblPaymentAmount Where PaymentNo = {0}", TransNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, TransNo, "DeleteSuppPayment");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblAuditDayBook Select * From tblDayBook Where TransNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", TransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("INSERT INTO tblAuditPayment Select * From tblPayment Where JournalID={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblPayment Where JournalID = {0}", TransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("INSERT INTO tblAuditPaymentAmount Select * From tblPaymentAmount Where PaymentNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblPaymentAmount Where PaymentNo = {0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            //dbQry = string.Format("Update tblchequeitems SET status = '{1}' Where chequeno='{0}'", cheque, State);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows[0]["ChequeNo"].ToString() != "")
            {
                dbQry = string.Format("Update tblChequeitems Set DamageCheque='Y' Where ChequeNo='" + CheNo + "' and BankID=" + CreditorID + "");
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }


            if (requireValidation)
            {
                dbQry123 = string.Format("Select TransNo from tblBankRecon Where TransNo={0}", TransNo);
                dsOldRec = manager.ExecuteDataSet(CommandType.Text, dbQry123);
                if (dsOldRec != null)
                {
                    if (dsOldRec.Tables.Count > 0)
                    {
                        dbQry = string.Format("Delete From tblBankRecon Where TransNo = {0}", TransNo);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }


                sAuditStr = "Payment Transaction: " + TransNo + " got deleted old Record Details : User =" + Username + "DebtorID=" + oldDebitID + ",CreditorID=" + oldCreditID + ",Amount=" + Amount;

                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }


    public double GetPurchasePendingAmount(int billno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        double TotalAmount = 0.0;
        double TotalPaid = 0.0;
        try
        {

            manager.Open();

            dbQry.Append("SELECT Sum(Amount) As Total FROM tblPurchase Inner Join tblDayBook On tblPurchase.JournalId = tblDayBook.TransNo Where tblPurchase.BillNo='" + billno.ToString() + "' ");

            var amount = manager.ExecuteScalar(CommandType.Text, dbQry.ToString());

            if (!string.IsNullOrEmpty(amount.ToString()))
                TotalAmount = double.Parse(amount.ToString());

            dbQry.Length = 0;

            dbQry.Append("SELECT Sum(Amount) As Total FROM tblPaymentAmount Where BillNo='" + billno.ToString() + "' ");

            var AmountPaid = manager.ExecuteScalar(CommandType.Text, dbQry.ToString());

            if (!string.IsNullOrEmpty(AmountPaid.ToString()))
                TotalPaid = double.Parse(AmountPaid.ToString());

            return (TotalAmount - TotalPaid);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public double GetPurPendingAmount(string connection, string billno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        double TotalAmount = 0.0;
        double TotalPaid = 0.0;
        try
        {

            manager.Open();
            dbQry.Append("SELECT Sum(Amount) As Total FROM tblPurchase Inner Join tblDayBook On tblPurchase.JournalId = tblDayBook.TransNo Where tblPurchase.BillNo='" + billno.ToString() + "' ");

            var amount = manager.ExecuteScalar(CommandType.Text, dbQry.ToString());

            if (!string.IsNullOrEmpty(amount.ToString()))
                TotalAmount = double.Parse(amount.ToString());

            dbQry.Length = 0;

            dbQry.Append("SELECT Sum(Amount) As Total FROM tblPaymentAmount Where BillNo='" + billno.ToString() + "' ");

            var AmountPaid = manager.ExecuteScalar(CommandType.Text, dbQry.ToString());

            if (!string.IsNullOrEmpty(AmountPaid.ToString()))
                TotalPaid = double.Parse(AmountPaid.ToString());

            return (TotalAmount - TotalPaid);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public DataSet ListCreditSalesForDate(string connection, DateTime FromDate, DateTime ToDate)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "Select tblSales.BillNo,tblSales.BillDate,tblSales.CustomerName,tblDayBook.Amount,tblproductmaster.productdesc, tblproductmaster.productname, tblproductmaster.model from ((tblSales inner join tblDayBook on tblSales.JournalID = tblDayBook.TransNo) inner join tblsalesitems on tblsales.BillNo = tblsalesitems.BillNo) inner join tblproductmaster on tblsalesitems.itemcode = tblproductmaster.itemcode Where PayMode = 3 and tblSales.BillDate >=#" + FromDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate <=#" + ToDate.ToString("MM/dd/yyyy") + "#";

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public DataSet ListChequeInfo(string connection, string txtSearch, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        if (dropDown == "BankName")
        {
            dbQry = "select tblledger.ledgername, BankId, FromChequeNo, ToChequeNo, AccountNo, ChequeBookId from tblCheque inner join tblledger on tblledger.ledgerid=tblCheque.Bankid Where tblledger.ledgername like '" + txtSearch + "' Order By ChequeBookId";
        }
        else if (dropDown == "AccountNo")
        {
            dbQry = "select tblledger.ledgername, BankId, FromChequeNo, ToChequeNo, AccountNo, ChequeBookId from tblCheque inner join tblledger on tblledger.ledgerid=tblCheque.Bankid Where AccountNo like '" + txtSearch + "' Order By ChequeBookId";
        }
        else
        {
            dbQry = string.Format("select tblledger.ledgername, BankId, FromChequeNo, ToChequeNo, AccountNo, ChequeBookId from tblCheque inner join tblledger on tblledger.ledgerid=tblCheque.Bankid Order By ChequeBookId", txtSearch);
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void InsertCheque(string connection, string BankName, string AccountNo, int BankID, string FromChequeNo, string ToChequeNo, string Username, string Types)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;

        string sAuditStr = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("INSERT INTO tblCheque(BankName, AccountNo, BankID, FromChequeNo, ToChequeNo) VALUES('{0}','{1}',{2},'{3}','{4}')",
                BankName, AccountNo, BankID, FromChequeNo, ToChequeNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int ChequeBookId = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(ChequeBookID) FROM tblCheque"));

            string Status = "N";
            int g = 0;
            double ChequeNo = 0;

            for (int k = 0; k < 200; k++)
            {
                if (g == 0)
                {
                    dbQry2 = string.Format("INSERT INTO tblChequeItems(ChequeBookId, AccountNo, BankID, ChequeNo, Status,DamageCheque) VALUES({0},'{1}',{2},{3},'{4}','{5}')",
                    ChequeBookId, AccountNo, BankID, FromChequeNo, Status,"N");
                    manager.ExecuteNonQuery(CommandType.Text, dbQry2);

                    ChequeNo = Convert.ToDouble(FromChequeNo) + 1;
                }
                else
                {
                    dbQry2 = string.Format("INSERT INTO tblChequeItems(ChequeBookId, AccountNo, BankID, ChequeNo, Status,DamageCheque) VALUES({0},'{1}',{2},{3},'{4}','{5}')",
                    ChequeBookId, AccountNo, BankID, ChequeNo, Status,"N");
                    manager.ExecuteNonQuery(CommandType.Text, dbQry2);

                    ChequeNo = ChequeNo + 1;
                }

                int ChequeId = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(ChequeID) FROM tblChequeItems"));

                g = 1;

                if (Convert.ToDouble(ChequeNo) > Convert.ToDouble(ToChequeNo))
                    k = 201;
            }

            if (Types == "New")
            {
                sAuditStr = "Cheque Book For : " + BankName + " added. Record Details :  User :" + Username + " For Account No : " + AccountNo + " From Cheque No : " + FromChequeNo + " To ChequeNo : " + ToChequeNo;
                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void UpdateCheque(string connection, int ChequeBookId, string BankName, string AccountNo, int BankID, string FromChequeNo, string ToChequeNo, string Username, string Types)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            DeleteCheque(connection, ChequeBookId, Username, Types);

            InsertCheque(connection, BankName, AccountNo, BankID, FromChequeNo, ToChequeNo, Username, Types);

            //dbQry = string.Format("Update tblCheque SET BankName='{0}', AccountNo='{1}', BankID={2}, FromChequeNo='{3}', ToChequeNo='{4}' WHERE ChequeBookId={5}", BankName, AccountNo, BankID, FromChequeNo, ToChequeNo, ChequeBookId);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            if (Types == "Update")
            {
                sAuditStr = "Cheque Book For : " + BankName + " updated. Record Details :  User :" + Username + " For Account No : " + AccountNo + " From Cheque No : " + FromChequeNo + " To ChequeNo : " + ToChequeNo;
                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit And Update", DateTime.Now.ToString("yyyy-MM-dd"));
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void DeleteCheque(string connection, int ChequeBookId, string Username, string Types)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string Bank = string.Empty;
        string AccountNo = string.Empty;
        string FromChequeNo = string.Empty;
        string ToChequeNo = string.Empty;

        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = "select BankName, BankId, FromChequeNo, ToChequeNo, AccountNo, ChequeBookId from tblCheque where ChequeBookId = " + ChequeBookId.ToString();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds != null)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    Bank = ds.Tables[0].Rows[0]["BankName"].ToString();
                    AccountNo = ds.Tables[0].Rows[0]["AccountNo"].ToString();
                    FromChequeNo = ds.Tables[0].Rows[0]["FromChequeNo"].ToString();
                    ToChequeNo = ds.Tables[0].Rows[0]["ToChequeNo"].ToString();
                }
            }

            dbQry = string.Format("Delete From tblCheque Where ChequeBookId = {0}", ChequeBookId);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblChequeitems Where ChequeBookId = {0}", ChequeBookId);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            if (Types == "Delete")
            {
                sAuditStr = "Cheque Book For : " + Bank + " deleted. Record Details :  User :" + Username + " For Account No : " + AccountNo + " From Cheque No : " + FromChequeNo + " To ChequeNo : " + ToChequeNo;
                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetChequeInfoForId(string connection, int ChequeBookId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select BankName, BankId, FromChequeNo, ToChequeNo, AccountNo, ChequeBookId from tblCheque where ChequeBookId = " + ChequeBookId.ToString();
            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListChequeNos(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select ChequeId, ChequeNo from tblchequeitems inner join tblcheque on tblchequeitems.ChequeBookID = tblcheque.ChequeBookID Where tblchequeitems.Status = 'N' ");
            dbQry = string.Format(" SELECT tblCheque.ChequeBookID, tblCheque.AccountNo, tblCheque.BankID, tblCheque.BankName, " +
                                 " tblCheque.FromChequeNo, tblCheque.ToChequeNo, tblChequeitems.ChequeBookID, tblChequeitems.ChequeNo, tblChequeitems.Status " +
                                 " FROM tblCheque INNER JOIN tblChequeitems ON tblCheque.ChequeBookID = tblChequeitems.ChequeBookID where tblChequeitems.Status='N' and tblChequeitems.DamageCheque='N'");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void InsertChequeStatus(string connection, int TransNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        StringBuilder dbQry2 = new StringBuilder();

        try
        {
            manager.Open();

            dbQry2.Append("Update tblchequeitems SET tblchequeitems.status = 'N' from tblchequeitems inner join tblDayBook on tblDayBook.chequeno = tblchequeitems.chequeno  ");
            dbQry2.AppendFormat("Where tblDayBook.TransNo = {0}", TransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry2.ToString());
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void UpdateChequeStatus(string connection, int TransNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        StringBuilder dbQry2 = new StringBuilder();

        try
        {
            manager.Open();

            dbQry2.Append("Update tblchequeitems inner join tblDayBook on tblDayBook.chequeno = tblchequeitems.chequeno SET tblchequeitems.status = 'Y' ");
            dbQry2.AppendFormat("Where tblDayBook.TransNo = {0}", TransNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry2.ToString());
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public string GetCheque(string connection, string ChequeNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();


        string dbQry = string.Empty;
        StringBuilder dbQry2 = new StringBuilder();

        try
        {
            manager.Open();

            int cnt = 0;

            dbQry = string.Format("select chequeid from tblchequeitems Where chequeno = '{0}'", ChequeNo);

            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retVal != null) && (retVal != DBNull.Value) && (retVal.ToString() != ""))
            {
                if (int.Parse(retVal.ToString()) > 0)
                    return retVal.ToString();
                else
                    return string.Empty;
            }
            else
            {
                return string.Empty;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListChequeNosBank(string connection, string BankID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
           // dbQry = string.Format("select ChequeId, ChequeNo from tblchequeitems inner join tblcheque on tblchequeitems.ChequeBookID = tblcheque.ChequeBookID Where tblchequeitems.Status = 'N' and tblchequeitems.Bankid  = " + BankID + " ");
            dbQry = string.Format(" SELECT tblCheque.ChequeBookID, tblCheque.AccountNo, tblCheque.BankID, tblCheque.BankName, " +
                                 " tblCheque.FromChequeNo, tblCheque.ToChequeNo, tblChequeitems.ChequeBookID, tblChequeitems.ChequeNo, tblChequeitems.Status " +
                                 " FROM tblCheque INNER JOIN tblChequeitems ON tblCheque.ChequeBookID = tblChequeitems.ChequeBookID where tblCheque.BankID=" + BankID + " and tblChequeitems.Status='N'");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListSundryDebtorsTransfer(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}') Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors");
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName='Sundry Debtors' and tblLedger.Inttrans ='YES' Order By ledgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListSundryCreditorsTransfer(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}','{2}','{3}','{4}') OR tblGroups.HeadingID IN (11) Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors", "Bank Accounts", "Cash in Hand", "InCome");
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where GroupName = 'Sundry Creditors' and tblLedger.Inttrans ='YES' ORDER By LedgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet getauditdetails(string sDataSource, DateTime startDate, DateTime endDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string pQry = string.Empty;

        try
        {
            manager.Open();

            pQry = "select auditdate,description,command from tblaudit where auditdate >='" + startDate.ToString("yyyy-MM-dd") + "' AND auditdate<='" + endDate.ToString("yyyy-MM-dd") + "' ";

            ds = manager.ExecuteDataSet(CommandType.Text, pQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    public void InsertBrandInfo(string connection, string BrandName, int brandlevel, int Deviation, string IsActive, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblBrand Where BrandName='" + BrandName + "'");
            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Brand Exists");
                }
            }

            //int BrandID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BrandID) FROM tblBrand");

            dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("INSERT INTO tblBrand(BrandName,Brandlevel) VALUES({0},{1})", BrandName, brandlevel);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "InsertBrandInfo");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblBrand(BrandName,Brandlevel, Deviation,IsActive) VALUES('{0}',{1},{2},'{3}')",
                BrandName, brandlevel, Deviation, IsActive);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Brand : " + BrandName + " added. Record Details :  User :" + Username;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void InsertCategoryInfo(string connection, string CategoryName, int Categorylevel, string IsActive, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblCategories Where CategoryName='" + CategoryName + "'");
            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Category Exists");
                }
            }

            //int BrandID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BrandID) FROM tblBrand");

            dbQ = "SELECT KeyValue From tblSettings WHERE KEYNAME='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("INSERT INTO tblCategories(CategoryName,Categorylevel) VALUES({0},{1})", CategoryName, Categorylevel);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "InsertCategoryInfo");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblCategories(CategoryName,Categorylevel,IsActive) VALUES('{0}',{1},'{2}')",
                CategoryName, Categorylevel, IsActive);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Category : " + CategoryName + " added. Record Details :  User :" + Username;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListBrandInfo(string connection, string txtSearch, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        if (dropDown == "BrandName")
        {
            dbQry = "select Brandname,brandlevel,brandid,Deviation,IsActive from tblBrand Where Brandname like '" + txtSearch + "'" + " Order By Brandname";
        }
        else
        {
            dbQry = string.Format("select Brandname,brandlevel,brandid,Deviation,IsActive from tblBrand Where (Brandname like '{0}' or BrandLevel like '{0}') Order By Brandname", txtSearch);
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListCategoryInfo(string connection, string txtSearch, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        if (dropDown == "CategoryName")
        {
            dbQry = "select Categoryname,Categorylevel,Categoryid,IsActive from tblCategories Where Categoryname like '" + txtSearch + "'" + " Order By Categoryname";
        }
        else
        {
            dbQry = string.Format("select Categoryname,Categorylevel,Categoryid,IsActive from tblCategories Where (Categoryname like '{0}' or CategoryLevel like '{0}') Order By Categoryname", txtSearch);
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void UpdateBrandInfo(string connection, int BrandId, string BrandName, int Brandlevel, int Deviation, string IsActive, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblBrand Where BrandName='" + BrandName + "' And BrandId <> " + BrandId.ToString() + "");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Brand Exists");
                }
            }

            dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Update tblBrand SET BrandName={0}, Brandlevel={1} WHERE BrandID={2}", BrandName, Brandlevel, BrandId);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "UpdateBrandInfo");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }


            dbQry = string.Format("Update tblBrand SET BrandName='{0}', Brandlevel={1}, Deviation={2},IsActive='{4}' WHERE BrandID={3}", BrandName, Brandlevel, Deviation, BrandId, IsActive);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Brand : " + BrandName + " got edited. Record Details :  User :" + Username;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit And Update", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void UpdateCategoryInfo(string connection, int CategoryId, string CategoryName, int Categorylevel, string IsActive, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblCategories Where CategoryName='" + CategoryName + "' And CategoryId <> " + CategoryId.ToString() + "");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Category Exists");
                }
            }

            dbQ = "SELECT KeyValue From tblSettings WHERE KEYNAME='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Update tblCategories SET CategoryName={0}, Categorylevel={1} WHERE CategoryID={2}", CategoryName, Categorylevel, CategoryId);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "UpdateCategoryInfo");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }


            dbQry = string.Format("Update tblCategories SET CategoryName='{0}', Categorylevel={1}, IsActive = '{3}' WHERE CategoryID={2}", CategoryName, Categorylevel, CategoryId, IsActive);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Category : " + CategoryName + " got edited. Record Details :  User :" + Username;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit And Update", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetBrandInfoForId(string connection, int BrandID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select BrandID,BrandName,BrandLevel,deviation,IsActive from tblBrand where BrandID = " + BrandID.ToString();
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetCategoryInfoForId(string connection, int CategoryID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select CategoryID,CategoryName,CategoryLevel,IsActive from tblCategories where CategoryID = " + CategoryID.ToString();
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void DeleteBrandInfo(string connection, int BrandID, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string brand = string.Empty;
        string sAuditStr = string.Empty;

        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("select BrandName from tblBrand where BrandID = " + BrandID);
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                brand = ds.Tables[0].Rows[0]["BrandName"].ToString();


            dbQry2 = "SELECT KeyValue From tblSettings WHERE keyName='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Delete From tblBrand Where BrandID = {0}", BrandID);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "DeleteBrandInfo");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            //dbQry = string.Format("INSERT INTO tblAuditBrand Select * From tblBrand Where BrandID = {0}", BrandID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = string.Format("Delete From tblBrand Where BrandID = {0}", BrandID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Brand : " + brand + " deleted. Record Details :  User :" + Username;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListBrandMaster(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select BrandId, BrandName from tblBrand Order By BrandName ";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public string GetBrandName(string connection, string BrandName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();


        string dbQry = string.Empty;
        StringBuilder dbQry2 = new StringBuilder();

        try
        {
            manager.Open();

            int cnt = 0;

            dbQry = string.Format("select Brandid from tblBrand Where BrandName = '{0}'", BrandName);

            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retVal != null) && (retVal != DBNull.Value) && (retVal.ToString() != ""))
            {
                if (int.Parse(retVal.ToString()) > 0)
                    return retVal.ToString();
                else
                    return string.Empty;
            }
            else
            {
                return string.Empty;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet getzerosales(string sDataSource, DateTime startDate, DateTime endDate, string Method, double val)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();

            if (Method == "Only")
            {
                dbQry2 = "select tblsales.BillNo,billdate,ledgername,tblsales.customerName,tblsales.customeraddress,tblsales.purchasereturn,tblsales.internaltransfer,tblsales.deliverynote,tblproductmaster.itemcode,tblproductmaster.productname,tblproductmaster.model,tblproductmaster.productdesc as brand,tblSalesItems.Qty from tblproductmaster,tblsales, tblSalesItems , tblLedger where tblproductmaster.itemcode=tblSalesItems.itemcode and tblSalesItems.BillNo = tblSales.BillNo and tblSalesItems.Rate = " + val + "  and tblLedger.LedgerID=tblsales.CustomerID and tblSales.billdate >=#" + startDate.ToString("MM/dd/yyyy") + "# AND tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# ";
            }
            else
            {
                dbQry2 = "select tblsales.BillNo,billdate,ledgername,tblsales.customerName,tblsales.customeraddress,tblsales.purchasereturn,tblsales.internaltransfer,tblsales.deliverynote,tblproductmaster.itemcode,tblproductmaster.productname,tblproductmaster.model,tblproductmaster.productdesc as brand,tblSalesItems.Qty from ((tblsales  inner join tblSalesItems on tblSalesItems.BillNo = tblSales.BillNo) inner join tblproductmaster on tblproductmaster.itemcode=tblSalesItems.itemcode) inner join  tblLedger on tblLedger.LedgerID=tblsales.CustomerID  where tblsales.BillNo in (select tblsales.BillNo from tblsales inner join tblSalesItems on tblSalesItems.BillNo = tblSales.BillNo where tblSalesItems.Rate = " + val + ") and tblSales.billdate >=#" + startDate.ToString("MM/dd/yyyy") + "# AND tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# ";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet getproductlist(string sDataSource, string cond, string Method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();

        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        string smrpeffDate = string.Empty;
        string sdpeffdate = string.Empty;
        string snlceffdate = string.Empty;

        try
        {
            manager.Open();

            //if (Method == "All")
            //{
            dbQry2 = "select itemcode,productname,model,productdesc as brand,CategoryID,block,rate,dealerrate,nlc,mrpeffdate,dpeffdate,nlceffdate,ROL,vat,Buyvat from tblproductmaster where " + cond + " order by productdesc";
            //}
            //else if (Method == "Absolute")
            //{
            //    dbQry2 = "select itemcode,productname,model,productdesc as brand,block,rate,dealerrate,nlc,mrpeffdate,dpeffdate,nlceffdate,ROL from tblproductmaster where block='Y' ";
            //}
            //else if (Method == "NotAbsolute")
            //{
            //    dbQry2 = "select itemcode,productname,model,productdesc as brand,block,rate,dealerrate,nlc,ROL,mrpeffdate,dpeffdate,nlceffdate from tblproductmaster  where block='N' ";
            //}

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            DataSet dst;
            DataTable dt;
            DataRow drNew;
            DataColumn dc;

            string date1 = string.Empty;
            string sNarration = string.Empty;

            dst = new DataSet();
            dt = new DataTable();
            dc = new DataColumn("Itemcode");
            dt.Columns.Add(dc);

            dc = new DataColumn("productname");
            dt.Columns.Add(dc);

            dc = new DataColumn("model");
            dt.Columns.Add(dc);

            dc = new DataColumn("brand");
            dt.Columns.Add(dc);

            dc = new DataColumn("rate");
            dt.Columns.Add(dc);

            dc = new DataColumn("dealerrate");
            dt.Columns.Add(dc);

            dc = new DataColumn("nlc");
            dt.Columns.Add(dc);

            dc = new DataColumn("mrpeffdate");
            dt.Columns.Add(dc);

            dc = new DataColumn("dpeffdate");
            dt.Columns.Add(dc);

            dc = new DataColumn("nlceffdate");
            dt.Columns.Add(dc);

            dc = new DataColumn("Rol");
            dt.Columns.Add(dc);



            dc = new DataColumn("CategoryID");
            dt.Columns.Add(dc);

            dc = new DataColumn("Vat");
            dt.Columns.Add(dc);

            dc = new DataColumn("BuyVat");
            dt.Columns.Add(dc);

            dst.Tables.Add(dt);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow drd in ds.Tables[0].Rows)
                {
                    if (drd["mrpeffdate"] != null)
                    {
                        smrpeffDate = Convert.ToDateTime(drd["mrpeffdate"].ToString()).ToShortDateString();
                    }
                    if (drd["dpeffdate"] != null)
                    {
                        sdpeffdate = Convert.ToDateTime(drd["dpeffdate"].ToString()).ToShortDateString();
                    }
                    if (drd["nlceffdate"] != null)
                    {
                        snlceffdate = Convert.ToDateTime(drd["nlceffdate"].ToString()).ToShortDateString();
                    }
                    drNew = dt.NewRow();
                    drNew["productname"] = drd["productname"].ToString();
                    drNew["itemcode"] = drd["itemcode"].ToString();
                    drNew["model"] = drd["model"].ToString();
                    drNew["brand"] = drd["brand"].ToString();
                    drNew["Rol"] = Convert.ToInt32(drd["Rol"]);
                    drNew["dealerrate"] = Convert.ToDouble(drd["dealerrate"]);
                    drNew["rate"] = Convert.ToDouble(drd["rate"]);
                    drNew["dpeffdate"] = sdpeffdate;
                    drNew["nlc"] = Convert.ToDouble(drd["nlc"]);
                    drNew["mrpeffdate"] = smrpeffDate;
                    drNew["nlceffdate"] = snlceffdate;

                    drNew["CategoryID"] = Convert.ToInt32(drd["CategoryID"]);
                    drNew["Vat"] = Convert.ToDouble(drd["Vat"]);
                    drNew["BuyVat"] = Convert.ToDouble(drd["BuyVat"]);
                    dst.Tables[0].Rows.Add(drNew);
                }
            }

            if (dst.Tables[0].Rows.Count > 0)
                return dst;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public void InsertJournalMultiple(int NewTransNo, string RefNo, DateTime TransDate, int DebitorID, int CreditorID, double Amount, string Narration, string VoucherType, string sPath, string usernam)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(sPath);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            if (!IsValidDate(sPath, TransDate))
            {
                throw new Exception("Invalid Date");
            }

            if (DebitorID == CreditorID)
            {
                throw new Exception("Same Creditor Debtor");
            }




            manager.BeginTransaction();

            dbQ = "SELECT KeyValue From tblSettings WHERE key='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,RefNo) VALUES({0},{1},{2},{3},{4},{5},{6})",
                       TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, RefNo);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString(), logdescription.ToString(), usernam, "", "InsertJournalMultiple");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}',{6})",
            TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, RefNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int TransNo = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                TransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
            }
            else
            {
                TransNo = TransNo + 1;
            }

            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebitorID);
            //double Debit = 0;

            //object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retDebit != null) && (retDebit != DBNull.Value))
            //{
            //    Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}



            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebitorID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", CreditorID);
            //double Credit = 0;

            //object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retCredit != null) && (retCredit != DBNull.Value))
            //{
            //    Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}


            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, CreditorID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);


            sAuditStr = "Journal Transaction: " + TransNo + " added. Record Details :  User :" + usernam + " Bill No=" + RefNo + " DebtorID=" + DebitorID + " ,CreditorID=" + CreditorID + " ,Amount=" + Amount + " New Trans No :" + TransNo + " DateTime: " + DateTime.Now.ToString();
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Add New", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet ListBankLedgerpaymnet()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        //manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where ((tblLedger.Paymentmade='YES' and tblGroups.GroupName='Sundry Debtors') or tblGroups.GroupName = 'Bank Accounts') ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListBankLedgerpaymnetIsActive()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        //manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where ((tblLedger.Paymentmade='YES' and tblGroups.GroupName='Sundry Debtors') or tblGroups.GroupName = 'Bank Accounts')  and tblLedger.Unuse = 'YES' ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListReceiptsForBillNoOrder(string billNo)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            manager.Open();


            dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate,tblDayBook.DebtorID, Debitor.LedgerName AS Debi, R.Amount, tblDayBook.Narration, ");
            dbQry.Append(" tblDayBook.RefNo, tblDayBook.ChequeNo, Receipt.Paymode, Receipt.SFRefNo FROM  (((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblReceivedAmount R ON R.ReceiptNo = tblDayBook.TransNo) LEFT JOIN ");
            dbQry.Append("tblReceipt Receipt ON tblDayBook.TransNo = Receipt.JournalID) ");
            dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' AND R.BillNo={0} ", billNo);
            dbQry.Append("Order By tblDayBook.TransNo");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet getstockreport(string sDataSource, DateTime refDate, string field1, string field2, string Types)
    {
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet ds, dsSales, dsPurcahse;
        string sQry = string.Empty;
        string sConStr = string.Empty;
        string pQry = string.Empty;
        sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        DataSet datas;

        if (Types == "Catwise")
        {
            sQry = ("select " + field1 + field2 + " from tblproductmaster PM, tblCategories Cat where PM.CategoryID = Cat.CategoryID  order by cat.CategoryName"); //" order by ProductDesc,CategoryID,Model,ProductName"
        }
        else if (Types == "Brandwise")
        {
            sQry = ("select " + field1 + field2 + " from tblproductmaster PM, tblCategories Cat where PM.CategoryID = Cat.CategoryID  order by PM.productdesc"); //" order by ProductDesc,CategoryID,Model,ProductName"
        }
        else if (Types == "productwise")
        {
            sQry = ("select " + field1 + field2 + " from tblproductmaster PM, tblCategories Cat where PM.CategoryID = Cat.CategoryID  order by PM.productname"); //" order by ProductDesc,CategoryID,Model,ProductName"
        }
        else if (Types == "brandprodwise")
        {
            sQry = ("select " + field1 + field2 + " from tblproductmaster PM, tblCategories Cat where PM.CategoryID = Cat.CategoryID  order by PM.productdesc,PM.productname"); //" order by ProductDesc,CategoryID,Model,ProductName"
        }
        else if (Types == "brandprodmodelwise")
        {
            sQry = ("select " + field1 + field2 + " from tblproductmaster PM, tblCategories Cat where PM.CategoryID = Cat.CategoryID  order by PM.productdesc,PM.productname,PM.model"); //" order by ProductDesc,CategoryID,Model,ProductName"
        }
        else if (Types == "Categorybrandprodwise")
        {
            sQry = ("select " + field1 + field2 + " from tblproductmaster PM, tblCategories Cat where PM.CategoryID = Cat.CategoryID  order by cat.categoryname, PM.productdesc,PM.productname"); //" order by ProductDesc,CategoryID,Model,ProductName"
        }
        else if (Types == "catbrandwise")
        {
            sQry = ("select " + field1 + field2 + " from tblproductmaster PM, tblCategories Cat where PM.CategoryID = Cat.CategoryID  order by cat.categoryname, PM.productdesc"); //" order by ProductDesc,CategoryID,Model,ProductName"
        }
        else if (Types == "catproductwise")
        {
            sQry = ("select " + field1 + field2 + " from tblproductmaster PM, tblCategories Cat where PM.CategoryID = Cat.CategoryID  order by cat.categoryname, PM.productname"); //" order by ProductDesc,CategoryID,Model,ProductName"
        }
        else if (Types == "prodmodelwise")
        {
            sQry = ("select " + field1 + field2 + " from tblproductmaster PM, tblCategories Cat where PM.CategoryID = Cat.CategoryID  order by PM.productname,PM.model"); //" order by ProductDesc,CategoryID,Model,ProductName"
        }
        else if (Types == "brandmodelwise")
        {
            sQry = ("select " + field1 + field2 + " from tblproductmaster PM, tblCategories Cat where PM.CategoryID = Cat.CategoryID  order by PM.productdesc,PM.Model"); //" order by ProductDesc,CategoryID,Model,ProductName"
        }

        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        ds = new DataSet();
        oleAdp.Fill(ds);

        sQry = "SELECT SUM(SI.Qty) as Qty,  SI.ItemCode From ((tblSales S Inner join tblSalesItems SI On S.BillNo = SI.BillNo) Inner join tblProductMaster P ON P.ItemCode = SI.ItemCode) Where  S.BillDate >= #" + refDate.ToString("MM/dd/yyyy") + "#" + " Group By SI.ItemCode ORDER BY SI.Itemcode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsSales = new DataSet();
        oleAdp.Fill(dsSales);
        int rowindex = -1;
        int rowind = -1;
        int rowin = -1;
        int rowi = -1;

        foreach (DataRow dr in dsSales.Tables[0].Rows)
        {
            var itemCode = dr["ItemCode"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["ItemCode"].ToString() == itemCode)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) + Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }

            }

            rowindex = -1;
        }

        sQry = "SELECT SUM(PI.Qty) as Qty,  PI.ItemCode From ((tblPurchase P Inner join tblPurchaseItems PI On P.PurchaseID = PI.PurchaseID) Inner join tblProductMaster PM ON PM.ItemCode = PI.ItemCode) Where P.BillDate >= #" + refDate.ToString("MM/dd/yyyy") + "#" + " Group By PI.ItemCode ORDER BY PI.Itemcode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsPurcahse = new DataSet();
        oleAdp.Fill(dsPurcahse);
        rowindex = -1;

        foreach (DataRow dr in dsPurcahse.Tables[0].Rows)
        {
            var itemCode = dr["ItemCode"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["ItemCode"].ToString() == itemCode)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) - Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock > 0 ? currentStock : 0;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }
            }
            rowindex = -1;
        }






        sQry = "SELECT SUM(SI.Qty) as Qty,  SI.ItemCode From ((tblSales S Inner join tblSalesItems SI On S.BillNo = SI.BillNo) Inner join tblProductMaster P ON P.ItemCode = SI.ItemCode) Where S.BillDate >= #" + refDate.ToString("MM/dd/yyyy") + "#" + " Group By SI.ItemCode ORDER BY SI.Itemcode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsSales = new DataSet();
        oleAdp.Fill(dsSales);
        rowindex = -1;

        foreach (DataRow dr in dsSales.Tables[0].Rows)
        {
            var itemCode = dr["ItemCode"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["ItemCode"].ToString() == itemCode)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) - Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }

            }

            rowindex = -1;
        }

        sQry = "SELECT SUM(PI.Qty) as Qty,  PI.ItemCode From ((tblPurchase P Inner join tblPurchaseItems PI On P.PurchaseID = PI.PurchaseID) Inner join tblProductMaster PM ON PM.ItemCode = PI.ItemCode) Where P.BillDate >= #" + refDate.ToString("MM/dd/yyyy") + "#" + " Group By PI.ItemCode ORDER BY PI.Itemcode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsPurcahse = new DataSet();
        oleAdp.Fill(dsPurcahse);
        rowindex = -1;

        foreach (DataRow dr in dsPurcahse.Tables[0].Rows)
        {
            var itemCode = dr["ItemCode"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["ItemCode"].ToString() == itemCode)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) + Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock > 0 ? currentStock : 0;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }
            }

            rowindex = -1;
        }




        //rowind = -1;
        //foreach (DataRow drd in ds.Tables[0].Rows)
        //{
        //    pQry = "select mrpstartdate,mrpenddate,dpstartdate,dpenddate,nlcstartdate,nlcenddate,mrp,dp,nlc from tblproducthistory where itemcode= '" + drd["ItemCode"].ToString() + "'  order by mrpdate desc";
        //    oleCmd.CommandText = pQry;
        //    oleCmd.CommandType = CommandType.Text;
        //    oleAdp = new SqlDataAdapter(oleCmd);
        //    datas = new DataSet();
        //    oleAdp.Fill(datas);
        //    if (datas.Tables[0].Rows.Count > 0)
        //    {
        //        foreach (DataRow drddd in datas.Tables[0].Rows)
        //        {
        //            rowind = rowind + 1;
        //            if (DateTime.Parse(refDate.ToString()) >= DateTime.Parse(drddd["mrpstartdate"].ToString()) && DateTime.Parse(refDate.ToString()) <= DateTime.Parse(drddd["mrpenddate"].ToString()))
        //            {
        //                ds.Tables[0].Rows[rowind]["MRP"] = Convert.ToDouble(drddd["MRP"]);
        //                ds.Tables[0].Rows[rowind].EndEdit();
        //                ds.Tables[0].Rows[rowind].AcceptChanges();
        //                break;
        //            }
        //            else
        //            {


        //            }
        //        }
        //        rowind = -1;
        //    }

        //}



        //rowin = -1;
        //foreach (DataRow drd in ds.Tables[0].Rows)
        //{
        //    pQry = "select mrpstartdate,mrpenddate,dpstartdate,dpenddate,nlcstartdate,nlcenddate,mrp,dp,nlc from tblproducthistory where itemcode= '" + drd["ItemCode"].ToString() + "'  order by nlcdate desc";
        //    oleCmd.CommandText = pQry;
        //    oleCmd.CommandType = CommandType.Text;
        //    oleAdp = new SqlDataAdapter(oleCmd);
        //    datas = new DataSet();
        //    oleAdp.Fill(datas);
        //    if (datas.Tables[0].Rows.Count > 0)
        //    {
        //        foreach (DataRow drddd in datas.Tables[0].Rows)
        //        {
        //            rowin = rowin + 1;
        //            if (DateTime.Parse(refDate.ToString()) >= DateTime.Parse(drddd["nlcstartdate"].ToString()) && DateTime.Parse(refDate.ToString()) <= DateTime.Parse(drddd["nlcenddate"].ToString()))
        //            {
        //                ds.Tables[0].Rows[rowin]["NLC"] = Convert.ToDouble(drddd["NLC"]);
        //                ds.Tables[0].Rows[rowin].EndEdit();
        //                ds.Tables[0].Rows[rowin].AcceptChanges();
        //                break;
        //            }
        //            else
        //            {


        //            }
        //        }
        //    }
        //    rowin = -1;
        //}

        //rowi = -1;
        //foreach (DataRow drd in ds.Tables[0].Rows)
        //{
        //    pQry = "select mrpstartdate,mrpenddate,dpstartdate,dpenddate,nlcstartdate,nlcenddate,mrp,dp,nlc from tblproducthistory where itemcode= '" + drd["ItemCode"].ToString() + "'  order by dpdate desc";
        //    oleCmd.CommandText = pQry;
        //    oleCmd.CommandType = CommandType.Text;
        //    oleAdp = new SqlDataAdapter(oleCmd);
        //    datas = new DataSet();
        //    oleAdp.Fill(datas);
        //    if (datas.Tables[0].Rows.Count > 0)
        //    {
        //        foreach (DataRow drddd in datas.Tables[0].Rows)
        //        {
        //            rowi = rowi + 1;
        //            if (DateTime.Parse(refDate.ToString()) >= DateTime.Parse(drddd["dpstartdate"].ToString()) && DateTime.Parse(refDate.ToString()) <= DateTime.Parse(drddd["dpenddate"].ToString()))
        //            {
        //                ds.Tables[0].Rows[rowi]["DP"] = Convert.ToDouble(drddd["DP"]);
        //                ds.Tables[0].Rows[rowi].EndEdit();
        //                ds.Tables[0].Rows[rowi].AcceptChanges();
        //                break;
        //            }
        //            else
        //            {


        //            }
        //        }
        //    }
        //    rowi = -1;
        //}

        oleConn.Close();
        return ds;
    }

    public DataSet GetDCSalesForId(int Billno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        StringBuilder dbQry2 = new StringBuilder();

        try
        {
            manager.Open();

            dbQry.Append("SELECT tblSales.Billno");
            dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID) INNER JOIN tblLedger Customer ON tblSales.CustomerID = Customer.LedgerID))");
            dbQry.Append(" Where tblSales.Billno=" + Billno + " And tblSales.DeliveryNote='YES' ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
            {
                dbQry2.Append("SELECT tblOpeningDcSales.Billno");
                dbQry2.Append(" FROM ((((tblDayBook  INNER JOIN  tblOpeningDcSales ON tblOpeningDcSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID) INNER JOIN tblLedger Customer ON tblOpeningDcSales.CustomerID = Customer.LedgerID))");
                dbQry2.Append(" Where tblOpeningDcSales.Billno=" + Billno + " And tblOpeningDcSales.DeliveryNote='YES' ");

                ds = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

                if (ds.Tables[0].Rows.Count > 0)
                    return ds;
                else
                    return null;
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet GetDCNumSalesForId(int Billno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        StringBuilder dbQry2 = new StringBuilder();
        try
        {
            manager.Open();

            dbQry.Append("SELECT tblSales.Billno");
            dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID) INNER JOIN tblLedger Customer ON tblSales.CustomerID = Customer.LedgerID))");
            dbQry.Append(" Where tblSales.Billno=" + Billno + " ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
            {
                dbQry2.Append("SELECT tblOpeningDcSales.Billno");
                dbQry2.Append(" FROM ((((tblDayBook  INNER JOIN  tblOpeningDcSales ON tblOpeningDcSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID) INNER JOIN tblLedger Customer ON tblOpeningDcSales.CustomerID = Customer.LedgerID))");
                dbQry2.Append(" Where tblOpeningDcSales.Billno=" + Billno + " ");

                ds = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

                if (ds.Tables[0].Rows.Count > 0)
                    return ds;
                else
                    return null;
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet GetDCSalesItemsForId(int Billno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        StringBuilder dbQry2 = new StringBuilder();
        try
        {
            manager.Open();

            dbQry.Append("SELECT tblSales.Billno,tblsalesitems.itemcode,tblsalesitems.qty");
            dbQry.Append(" FROM tblSales inner join tblsalesitems on tblSales.BillNo = tblsalesitems.BillNo");
            dbQry.Append(" Where tblSales.Billno=" + Billno + "  And tblSales.DeliveryNote='YES'  ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
            {
                dbQry.Append("SELECT tblopeningdcSales.Billno,tblopeningdcSalesitems.itemcode,tblopeningdcSalesitems.qty");
                dbQry.Append(" FROM tblopeningdcSales inner join tblopeningdcSalesitems on tblopeningSales.BillNo = tblopeningdcSalesitems.BillNo");
                dbQry.Append(" Where tblopeningdcSales.Billno=" + Billno + "  And tblopeningdcSales.DeliveryNote='YES' ");

                ds = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

                if (ds.Tables[0].Rows.Count > 0)
                    return ds;
                else
                    return null;
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public double getconfigpercent()
    {
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;

        try
        {
            dbQry2 = "SELECT percentage FROM tblConfigRoundOff ";
            double tcnt = 0;

            object retTVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retTVal != null) && (retTVal != DBNull.Value))
            {
                tcnt = (double)manager.ExecuteScalar(CommandType.Text, dbQry2);
            }

            return tcnt;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public double getconfigamt()
    {
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        manager.Open();
        manager.ProviderType = DataProvider.SqlServer;

        try
        {
            dbQry2 = "SELECT amount FROM tblConfigRoundOff ";
            double tcnt = 0;

            object retTVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retTVal != null) && (retTVal != DBNull.Value))
            {
                tcnt = (double)manager.ExecuteScalar(CommandType.Text, dbQry2);
            }

            return tcnt;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void checkdatelock(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string dbQry2 = string.Empty;

        int Days = 0;
        string datevalue = string.Empty;
        DataSet dsd = new DataSet();

        DateTime lockdate = DateTime.Now;
        DateTime dateused;
        try
        {

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("Update tbllastlogin Set logindate = '{0}'", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='AUTOLOCK'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                datevalue = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (datevalue == "YES")
            {
                object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT DaysToLock FROM tblConfigDateLock ");
                if ((retVal != null) && (retVal != DBNull.Value))
                {
                    Days = int.Parse(retVal.ToString());
                }

                dbQry2 = "SELECT logindate From tbllastlogin";
                dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
                if (dsd.Tables[0].Rows.Count > 0)
                    lockdate = Convert.ToDateTime(dsd.Tables[0].Rows[0]["logindate"]);

                dateused = lockdate.AddDays(-Days);

                dbQry = string.Format("Update last_recon Set recon_date='{0}'", dateused.ToString("yyyy-MM-dd"));
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet isDuplicateDCNum(int DcBillno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        StringBuilder dbQry2 = new StringBuilder();
        try
        {
            manager.Open();

            dbQry.Append("SELECT tblPurchase.DcBillno FROM tblPurchase");
            dbQry.Append(" Where tblPurchase.DcBillno=" + DcBillno + " ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet getbankreconciliation(int iLedgerID, DateTime dtSdate, string sDataSource, string usernam)
    {
        double dDebitAmt = 0;
        double dCreditAmt = 0;
        string sTranDate = string.Empty;
        string iQry = "";
        string sParticulars = "";
        string sParticulars1 = "";
        string sVoucherType = string.Empty;
        string sQry = string.Empty;
        string pQry = string.Empty;
        string pgQry = string.Empty;
        string sConStr = string.Empty;
        string sChequeNo = string.Empty;

        string sBranchCode = string.Empty;

        SqlConnection oleConn, oleSubConn;
        int sno = 0;
        double samount = 0;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        DataSet dsChildQry;
        string sOrder;
        int sDebtorID = 0;
        int sCreditorID = 0;

        sConStr = sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;

        //sQry = "SELECT tbldaybook.TransDate,tbldaybook.DebtorID,tbldaybook.CreditorID,tbldaybook.Amount,tbldaybook.Narration,tbldaybook.VoucherType FROM tbldaybook inner join tblledger on tbldaybook.creditorid = tblledger.ledgerid or  tbldaybook.debtorid = tblledger.ledgerid where tblledger.groupid=3 AND (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) Order by TransDate ";
        sQry = "SELECT TransNo,TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,chequeNo,RefNo,BranchCode FROM tblDayBook WHERE (DebtorID=" + iLedgerID + " OR CreditorID=" + iLedgerID + ") AND TransDate ='" + dtSdate.ToString("yyyy-MM-dd") + "'  Order by TransDate ";

        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsParentQry = new DataSet();
        oleAdp.Fill(dsParentQry);

        DataSet ds;
        DataTable dt;
        DataRow drNew;
        DataColumn dc;

        string date1 = string.Empty;
        string sNarration = string.Empty;

        ds = new DataSet();
        dt = new DataTable();
        dc = new DataColumn("TransNo");
        dt.Columns.Add(dc);

        dc = new DataColumn("TransDate");
        dt.Columns.Add(dc);

        dc = new DataColumn("Debtor");
        dt.Columns.Add(dc);

        dc = new DataColumn("DebtorID");
        dt.Columns.Add(dc);

        dc = new DataColumn("Creditor");
        dt.Columns.Add(dc);

        dc = new DataColumn("CreditorID");
        dt.Columns.Add(dc);

        dc = new DataColumn("VoucherType");
        dt.Columns.Add(dc);

        dc = new DataColumn("Narration");
        dt.Columns.Add(dc);

        dc = new DataColumn("Amount");
        dt.Columns.Add(dc);

        dc = new DataColumn("ChequeNo");
        dt.Columns.Add(dc);

        dc = new DataColumn("ReconcilatedBy");
        dt.Columns.Add(dc);

        dc = new DataColumn("Reconcilateddate");
        dt.Columns.Add(dc);

        dc = new DataColumn("Result");
        dt.Columns.Add(dc);

        dc = new DataColumn("Status");
        dt.Columns.Add(dc);

        dc = new DataColumn("BranchCode");
        dt.Columns.Add(dc);

        ds.Tables.Add(dt);

        if (dsParentQry.Tables[0].Rows.Count == 0)
        {
            //drNew = dt.NewRow();
            //drNew["TransNo"] = 0;
            //drNew["Date"] = string.Empty;
            //drNew["Debtor"] = string.Empty;
            //drNew["Creditor"] = string.Empty;
            //drNew["DebtorID"] = 0;
            //drNew["CreditorID"] = 0;
            //drNew["Amount"] = 0;
            //drNew["Narration"] = string.Empty;
            //drNew["ChequeNo"] = string.Empty;
            //drNew["VoucherType"] = string.Empty;
            //drNew["ReconcilatedBy"] = string.Empty;
            //drNew["Reconcilateddate"] = string.Empty;
            //ds.Tables[0].Rows.Add(drNew);
        }
        else
        {
            date1 = DateTime.Now.ToShortDateString();
            foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
            {
                if (drParentQry["TransDate"] != null)
                {
                    sTranDate = Convert.ToDateTime(drParentQry["TransDate"]).ToString("dd-MM-yyy");
                }
                if (drParentQry["VoucherType"] != null)
                {
                    sVoucherType = Convert.ToString(drParentQry["VoucherType"].ToString());
                }
                if (drParentQry["Narration"] != null)
                {
                    sNarration = Convert.ToString(drParentQry["Narration"].ToString());
                }
                if (drParentQry["ChequeNo"] != null)
                {
                    sChequeNo = Convert.ToString(drParentQry["ChequeNo"].ToString());
                }

                if (drParentQry["BranchCode"] != null)
                {
                    sBranchCode = Convert.ToString(drParentQry["BranchCode"].ToString());
                }

                if (drParentQry["TransNo"] != null)
                {
                    sno = Convert.ToInt32(drParentQry["TransNo"]);
                }
                if (drParentQry["Amount"] != null)
                {
                    samount = Convert.ToDouble(drParentQry["Amount"]);
                }
                if (drParentQry["DebtorID"] != null)
                {
                    sDebtorID = Convert.ToInt32(drParentQry["DebtorID"]);
                }
                if (drParentQry["CreditorID"] != null)
                {
                    sCreditorID = Convert.ToInt32(drParentQry["CreditorID"]);
                }
                if (drParentQry["DebtorID"] != null)
                {
                    pQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drParentQry["DebtorID"].ToString());
                }
                if (drParentQry["CreditorID"] != null)
                {
                    pgQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drParentQry["CreditorID"].ToString());
                }

                if (pQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(sConStr));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            sParticulars = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }

                if (pgQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pgQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(sConStr));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            sParticulars1 = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }

                drNew = dt.NewRow();
                drNew["TransNo"] = sno;
                drNew["TransDate"] = sTranDate;
                drNew["Debtor"] = sParticulars;
                drNew["Creditor"] = sParticulars1;
                drNew["DebtorID"] = sDebtorID;
                drNew["CreditorID"] = sCreditorID;
                drNew["Narration"] = sNarration;
                drNew["VoucherType"] = sVoucherType;
                drNew["ChequeNo"] = sChequeNo;
                drNew["Amount"] = samount;
                drNew["ReconcilatedBy"] = usernam;
                drNew["Reconcilateddate"] = "";
                drNew["Result"] = "";
                drNew["Status"] = "NO";
                drNew["BranchCode"] = sBranchCode;

                ds.Tables[0].Rows.Add(drNew);

            }
        }

        oleConn.Close();

        if (ds.Tables[0].Rows.Count > 0)
            return ds;
        else
            return null;
    }

    public DataSet checkbankreconciliation(int iLedgerID, DateTime dtSdate, string sDataSource, string usernam, string Types)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        StringBuilder dbQry2 = new StringBuilder();
        try
        {
            manager.Open();

            dbQry.Append("SELECT TransDate FROM tblBankRecon");
            dbQry.Append(" WHERE (DebtorID=" + iLedgerID + " OR CreditorID=" + iLedgerID + ") AND TransDate ='" + dtSdate.ToString("yyyy-MM-dd") + "'  And Types='" + Types + "' ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet getbankrecon(int iLedgerID, DateTime dtSdate, string sDataSource, string usernam, string Types)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        StringBuilder dbQry = new StringBuilder();
        StringBuilder dbQry2 = new StringBuilder();
        string pQry = string.Empty;

        string pgQry = string.Empty;

        string sReconcilateddate = string.Empty;
        string sTransDate = string.Empty;
        string sParticulars = string.Empty;
        string sParticulars1 = string.Empty;

        string sBranchCode = string.Empty;

        SqlConnection oleConn, oleSubConn;
        int sno = 0;
        double samount = 0;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        DataSet dsChildQry;
        string sOrder;
        int sDebtorID = 0;
        int sCreditorID = 0;
        string sConStr = string.Empty;
        sConStr = sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;

        try
        {
            manager.Open();

            dbQry.Append("SELECT TransDate,transno,debtorid,creditorid,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo,RefType,CreditCardNo,ChequeId,ReconcilatedBy,Reconcilateddate,Debtor,Creditor,Result,BranchCode FROM tblBankRecon");
            dbQry.Append(" WHERE (DebtorID=" + iLedgerID + " OR CreditorID=" + iLedgerID + ") AND TransDate ='" + dtSdate.ToString("yyyy-MM-dd") + "'  And Types='" + Types + "'");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            DataSet dst;
            DataTable dt;
            DataRow drNew;

            DataColumn dc;

            string date1 = string.Empty;
            string sNarration = string.Empty;
            string sResult = string.Empty;

            dst = new DataSet();
            dt = new DataTable();
            dc = new DataColumn("TransNo");
            dt.Columns.Add(dc);

            dc = new DataColumn("TransDate");
            dt.Columns.Add(dc);

            dc = new DataColumn("Debtor");
            dt.Columns.Add(dc);

            dc = new DataColumn("DebtorID");
            dt.Columns.Add(dc);

            dc = new DataColumn("Creditor");
            dt.Columns.Add(dc);

            dc = new DataColumn("CreditorID");
            dt.Columns.Add(dc);

            dc = new DataColumn("VoucherType");
            dt.Columns.Add(dc);

            dc = new DataColumn("Narration");
            dt.Columns.Add(dc);

            dc = new DataColumn("Amount");
            dt.Columns.Add(dc);

            dc = new DataColumn("ChequeNo");
            dt.Columns.Add(dc);

            dc = new DataColumn("ReconcilatedBy");
            dt.Columns.Add(dc);

            dc = new DataColumn("Reconcilateddate");
            dt.Columns.Add(dc);

            dc = new DataColumn("Result");
            dt.Columns.Add(dc);

            dc = new DataColumn("Status");
            dt.Columns.Add(dc);

            dc = new DataColumn("BranchCode");
            dt.Columns.Add(dc);

            dst.Tables.Add(dt);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow drd in ds.Tables[0].Rows)
                {
                    if (drd["TransDate"] != null)
                    {
                        sTransDate = Convert.ToDateTime(drd["TransDate"]).ToString("dd-MM-yyyy");
                    }
                    if (drd["Reconcilateddate"] != null)
                    {
                        sReconcilateddate = Convert.ToDateTime(drd["Reconcilateddate"].ToString()).ToString();
                    }
                    if (drd["Result"] != null)
                    {
                        sResult = Convert.ToString(drd["Result"].ToString());
                    }
                    if (drd["BranchCode"] != null)
                    {
                        sBranchCode = Convert.ToString(drd["BranchCode"].ToString());
                    }

                    if (drd["DebtorID"] != null)
                    {
                        pQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drd["DebtorID"].ToString());
                    }

                    if (drd["CreditorID"] != null)
                    {
                        pgQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drd["CreditorID"].ToString());
                    }

                    if (pQry != "")
                    {
                        oleCmd = new SqlCommand();
                        oleCmd.CommandText = pQry;
                        oleSubConn = new SqlConnection(CreateConnectionString(sConStr));
                        oleCmd.Connection = oleSubConn;
                        oleAdp = new SqlDataAdapter(oleCmd);
                        dsChildQry = new DataSet();
                        oleAdp.Fill(dsChildQry);
                        if (dsChildQry != null)
                        {
                            if (dsChildQry.Tables[0].Rows.Count > 0)
                            {
                                sParticulars = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                            }
                        }
                        oleSubConn.Close();
                    }

                    if (pgQry != "")
                    {
                        oleCmd = new SqlCommand();
                        oleCmd.CommandText = pgQry;
                        oleSubConn = new SqlConnection(CreateConnectionString(sConStr));
                        oleCmd.Connection = oleSubConn;
                        oleAdp = new SqlDataAdapter(oleCmd);
                        dsChildQry = new DataSet();
                        oleAdp.Fill(dsChildQry);
                        if (dsChildQry != null)
                        {
                            if (dsChildQry.Tables[0].Rows.Count > 0)
                            {
                                sParticulars1 = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                            }
                        }
                        oleSubConn.Close();
                    }

                    drNew = dt.NewRow();
                    drNew["TransNo"] = Convert.ToInt32(drd["TransNo"]);
                    drNew["TransDate"] = sTransDate;
                    drNew["Debtor"] = sParticulars;
                    drNew["Creditor"] = sParticulars1;
                    drNew["DebtorID"] = Convert.ToInt32(drd["DebtorID"]);
                    drNew["CreditorID"] = Convert.ToInt32(drd["CreditorID"]);
                    drNew["Narration"] = drd["Narration"].ToString();
                    drNew["VoucherType"] = drd["VoucherType"].ToString();
                    drNew["ChequeNo"] = drd["ChequeNo"].ToString();
                    drNew["Amount"] = Convert.ToDouble(drd["Amount"]);
                    drNew["ReconcilatedBy"] = drd["ReconcilatedBy"].ToString();
                    drNew["Reconcilateddate"] = sReconcilateddate;
                    drNew["Result"] = sResult;
                    drNew["Status"] = "YES";
                    drNew["BranchCode"] = sBranchCode;
                    dst.Tables[0].Rows.Add(drNew);
                }
            }

            if (dst.Tables[0].Rows.Count > 0)
                return dst;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public int InsertCommission(string Series, string BillDate, int sCustomerID, string sCustomerName, int paymode, string sCreditCardno, int BankName, int ssupplierID, int ssupppaymode, string ssuppcardno, int ssuppbank, double salamount, double Amount, double freight, double dLU, DataSet salesDS, string sOtherCusName, int sfreightpaymode, string sfreightcardno, int sfreightbank, int slupaymode, string slucardno, int slubank, double CommissionValue, string Remarks, string username, string subname, string check)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        DataSet dsOld = new DataSet();
        DateTime sBilldate;
        string[] sDate;
        string delim = "/";
        char[] delimA = delim.ToCharArray();
        CultureInfo culture = new CultureInfo("pt-BR");
        string sVoucherType = string.Empty;
        string strRole = string.Empty;
        string supVoucherType = string.Empty;
        string frVoucherType = string.Empty;

        string luVoucherType = string.Empty;

        string sRoleID = string.Empty;
        string sQty = string.Empty;
        string scheck = string.Empty;
        int iSno = 0;

        try
        {
            sDate = BillDate.Trim().Split(delimA);

            sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));

        }
        catch (Exception ex)
        {
            //Response.Write("<b><font face='Trebuchet MS' size=2 color=red>Invalid Bill Date Format</font></b>");
            throw new Exception("Invalid Bill Date Format", ex);
        }


        double oldAmt = 0;
        string sNarration = string.Empty;
        int creditorID = 2;

        int supcreditorID = 0;
        int DebtorID = 0;
        int supDebtorID = 3;

        scheck = check;

        int frTransNo = 0;
        int luTransNo = 0;

        int salesID = 0;
        int BillNo = 0;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID


            int tBillNo = 0;
            int salesBillno = 0;

            object retBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(CommissionNo)+1 FROM tblCommission");

            if ((retBillVal != null) && (retBillVal != DBNull.Value))
            {
                BillNo = Int32.Parse(retBillVal.ToString());
            }
            else
            {
                BillNo = BillNo + 1;
            }

            /* Start March 21 - Duplicate Billno Check*/
            object retTBillVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(CommissionNo)+1 FROM TemptblCommission ");

            if ((retTBillVal != null) && (retTBillVal != DBNull.Value))
            {
                tBillNo = Int32.Parse(retTBillVal.ToString());
            }
            else
            {
                tBillNo = tBillNo + 1;
            }

            if (BillNo >= tBillNo)
            {
                salesBillno = BillNo;
            }
            else
            {
                salesBillno = tBillNo;
            }

            Series = "0";






            if (ssupppaymode == 1)
                supcreditorID = 1;
            else if (ssupppaymode == 2)
                supcreditorID = ssuppbank;
            else
                supcreditorID = ssupplierID;

            supVoucherType = "Purchase";

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,Chequeno,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
           sBilldate.ToShortDateString(), supDebtorID, supcreditorID, Amount, sNarration, supVoucherType, ssuppcardno, 0);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int NewsupTransNo = 0;

            object retVall = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVall != null) && (retVall != DBNull.Value))
            {
                NewsupTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
            }
            else
            {
                NewsupTransNo = NewsupTransNo + 1;
            }

            sNarration = supVoucherType + " - Bill No:" + BillNo;
            dbQry = string.Format("Update tblDayBook SET Narration = '{0}' Where TransNo={1}", sNarration, NewsupTransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int frdebtorid = 0;
            int frcreditorID = 0;

            if (sfreightpaymode == 1)
                frcreditorID = 1;
            else if (sfreightpaymode == 2)
                frcreditorID = sfreightbank;
            else
                frcreditorID = ssupplierID;

            frVoucherType = "Payment";

            sNarration = " Bill No:" + BillNo;

            object retValll = manager.ExecuteScalar(CommandType.Text, "select ledgerid from tblledger where ledgername = 'Customer Fright Expenses'");

            if ((retValll != null) && (retValll != DBNull.Value))
            {
                frdebtorid = (Int32)manager.ExecuteScalar(CommandType.Text, "select ledgerid from tblledger where ledgername = 'Customer Fright Expenses'");
            }

            if (freight > 0)
            {
                dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                   sBilldate.ToShortDateString(), frdebtorid, frcreditorID, freight, sNarration, frVoucherType, sfreightcardno, 0, 0);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                frTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
            }


            int ludebtorid = 0;
            int lucreditorID = 0;

            if (slupaymode == 1)
                lucreditorID = 1;
            else if (slupaymode == 2)
                lucreditorID = slubank;
            else
                lucreditorID = ssupplierID;

            object retVallll = manager.ExecuteScalar(CommandType.Text, "select ledgerid from tblledger where ledgername = 'Customer loading and unloading Expenses'");

            luVoucherType = "Payment";

            if ((retVallll != null) && (retVallll != DBNull.Value))
            {
                ludebtorid = (Int32)manager.ExecuteScalar(CommandType.Text, "select ledgerid from tblledger where ledgername = 'Customer loading and unloading Expenses'");
            }


            if (dLU > 0)
            {
                dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                   sBilldate.ToShortDateString(), ludebtorid, lucreditorID, dLU, sNarration, luVoucherType, slucardno, 0, 0);

                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                luTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
            }



            dbQry = string.Format("INSERT INTO tblCommission(CommissionNo,SeriesID,CommDate,cusTransNo,CustomerID,CustomerName,SellingPayMode,SupplierID,SupplierPayMode,freight,FreightPaymode,LoadUnload,LoadUnLoadPaymode,OtherCusName,Comissionvalue,Remarks,subname,salesvalue,purchasevalue,supTransNo,frTransNo,luTransNo,CusDebtorID, CusCreditorID, CusCardno, SupDebtorID, SupcreditorID, Supcardno, FrdebtorID, FrcreditorID, Frcardno,Ludebtorid, LucreditorID, Lucardno) VALUES({0},{1},Format('{2}', 'dd/mm/yyyy'),{3},{4},'{5}',{6},{7},{8},{9},{10},{11},{12},'{13}',{14},'{15}','{16}',{17},{18},{19},{20},{21},{22},{23},'{24}',{25},{26},'{27}',{28},{29},'{30}',{31},{32},'{33}')",
               salesBillno, Series, sBilldate.ToShortDateString(), 0, sCustomerID, sCustomerName, paymode, ssupplierID, ssupppaymode, freight, sfreightpaymode, dLU, slupaymode, sOtherCusName, CommissionValue, Remarks, subname, salamount, Amount, NewsupTransNo, frTransNo, luTransNo, DebtorID, creditorID, sCreditCardno, supDebtorID, supcreditorID, ssuppcardno, frdebtorid, frcreditorID, sfreightcardno, ludebtorid, lucreditorID, slucardno);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = string.Format("Update tblCommission SET checked = '{0}' Where CommissionNo={1}", scheck, salesBillno);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            salesID = salesBillno;


            string dNarration = string.Empty;

            string dffpaymode = string.Empty;

            //Adding the Purchase Items Table
            if (salesDS != null)
            {
                if (salesDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in salesDS.Tables[0].Rows)
                    {
                        if (dr["ItemCode"].ToString() != "")
                        {
                            dffpaymode = Convert.ToString(dr["SellingPaymode"]);

                            if (dffpaymode == "Cash")
                                DebtorID = 1;
                            else if (dffpaymode == "Bank / Credit Card")
                                DebtorID = Convert.ToInt32(dr["BankID"]);
                            else
                                DebtorID = Convert.ToInt32(dr["CustomerID"]);

                            sVoucherType = "Sales";

                            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,CreditCardNo,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
                             sBilldate.ToShortDateString(), DebtorID, creditorID, Convert.ToDouble(dr["Total"]), dNarration, sVoucherType, Convert.ToString(dr["CardNo"]), 0);
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                            int dTransNo = 0;

                            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

                            if ((retVal != null) && (retVal != DBNull.Value))
                            {
                                dTransNo = int.Parse(retVal.ToString());
                            }
                            else
                            {
                                dTransNo = dTransNo + 1;
                            }

                            dNarration = sVoucherType + " - Bill No:" + BillNo;
                            dbQry = string.Format("Update tblDayBook SET Narration = '{0}' Where TransNo={1}", dNarration, dTransNo);
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);



                            dbQry = string.Format("INSERT INTO tblCommissionItems(CommissionNo,ItemCode,Qty,Rate,SlNo,isrole,CustomerName,CustomerID,BankName,CardNo,OtherCustName,SellingPaymode,TransNo,BankID) VALUES({0},'{1}',{2},{3},{4},'{5}','{6}',{7},'{8}','{9}','{10}','{11}',{12},{13})", salesID, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), iSno, Convert.ToString(dr["isRole"]), Convert.ToString(dr["CustomerName"]), Convert.ToInt32(dr["CustomerID"]), Convert.ToString(dr["BankName"]), Convert.ToString(dr["CardNo"]), Convert.ToString(dr["OtherCusName"]), Convert.ToString(dr["SellingPaymode"]), dTransNo, Convert.ToInt32(dr["BankID"]));
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);




                        }

                    }
                    iSno = 0;
                }
            }

            sAuditStr = "Commission No : " + salesBillno + " added. Record Details : User =" + username + " CustomerID=" + sCustomerID + ",SupplierID=" + ssupplierID + ",Sales Value=" + salamount + ",Purchase Value=" + Amount + ", DateTime:" + BillDate;

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}', Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Edit and Update", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();
            return salesID;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetCommission()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();

        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                dbQry.Append("SELECT tblCommission.CommissionNo,tblCommission.checked,Format(tblCommission.Commdate, 'dd/mm/yyyy') As Commissiondate,tblCommission.CustomerName,tblCommission.subname,freight,LoadUnload,tblCommission.Comissionvalue");
                dbQry.Append(" FROM tblCommission Where tblCommission.Commdate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "#  ORDER BY tblCommission.CommDate Desc,tblCommission.CommissionNo Desc");
            }
            else
            {
                dbQry.Append("SELECT tblCommission.CommissionNo,tblCommission.checked,Format(tblCommission.Commdate, 'dd/mm/yyyy') As Commissiondate,tblCommission.CustomerName,tblCommission.subname,freight,LoadUnload,tblCommission.Comissionvalue");
                dbQry.Append(" FROM tblCommission  ORDER BY tblCommission.CommDate Desc,tblCommission.CommissionNo Desc");
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet GetCommissionForId(int CommissionNo, int TransNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            // object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);


            //if ((retVal != null) && (retVal != DBNull.Value))
            //{

            //    dbQry.Append("SELECT tblDayBook.Transno,tblSales.Billno,tblSales.InternalTransfer,tblSales.SeriesID,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerID As DebtorID, Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,OtherCusName, Customer.ContactName, MultiPayment,tblSales.CustomerAddress2,tblSales.CustomerAddress3,tblSales.despatchedfrom,tblSales.manualNo");
            //    dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID) INNER JOIN tblLedger Customer ON tblSales.CustomerID = Customer.LedgerID))");
            //    dbQry.Append(" Where tblSales.BillDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ");

            //}
            //else
            //{
            //    dbQry.Append("SELECT tblDayBook.Transno,tblSales.Billno,tblSales.InternalTransfer,tblSales.SeriesID,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerID As DebtorID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,OtherCusName, Customer.ContactName,MultiPayment,tblSales.CustomerAddress2,tblSales.CustomerAddress3,tblSales.despatchedfrom,tblSales.manualNo");
            //    dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID) INNER JOIN tblLedger Customer ON tblSales.CustomerID = Customer.LedgerID))");
            //    dbQry.Append(" Where 1=1 ");
            //}

            if ((retVal != null) && (retVal != DBNull.Value))
            {

                dbQry.Append("SELECT tblCommission.CommissionNo,tblCommission.SeriesID,Format(tblCommission.Commdate, 'dd/mm/yyyy') As CommissionDate,tblCommission.CustomerID,tblCommission.CustomerName,OtherCusName, ");
                dbQry.Append(" tblCommission.cusTransNo,tblCommission.CustomerID,tblCommission.CustomerName,tblCommission.checked,tblCommission.SellingPayMode,tblCommission.SupplierID,tblCommission.SupplierPayMode,tblCommission.freight,tblCommission.FreightPaymode,tblCommission.LoadUnload,tblCommission.LoadUnLoadPaymode,tblCommission.Comissionvalue,tblCommission.Remarks,tblCommission.subname,tblCommission.salesvalue,tblCommission.purchasevalue,tblCommission.supTransNo,tblCommission.frTransNo,tblCommission.luTransNo,tblCommission.CusDebtorID, tblCommission.CusCreditorID, tblCommission.CusCardno, tblCommission.SupDebtorID, tblCommission.SupcreditorID, tblCommission.Supcardno, tblCommission.FrdebtorID, FrcreditorID, tblCommission.Frcardno,Ludebtorid, tblCommission.LucreditorID, tblCommission.Lucardno FROM tblCommission ");
                dbQry.Append(" Where tblCommission.Commdate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ");

            }
            else
            {
                dbQry.Append("SELECT tblCommission.CommissionNo,tblCommission.SeriesID,Format(tblCommission.Commdate, 'dd/mm/yyyy') As CommissionDate,tblCommission.CustomerID,tblCommission.CustomerName,OtherCusName, ");
                dbQry.Append(" tblCommission.cusTransNo,tblCommission.CustomerID,tblCommission.checked,tblCommission.CustomerName,tblCommission.SellingPayMode,tblCommission.SupplierID,tblCommission.SupplierPayMode,tblCommission.freight,tblCommission.FreightPaymode,tblCommission.LoadUnload,tblCommission.LoadUnLoadPaymode,tblCommission.Comissionvalue,tblCommission.Remarks,tblCommission.subname,tblCommission.salesvalue,tblCommission.purchasevalue,tblCommission.supTransNo,tblCommission.frTransNo,tblCommission.luTransNo,tblCommission.CusDebtorID, tblCommission.CusCreditorID, tblCommission.CusCardno, tblCommission.SupDebtorID, tblCommission.SupcreditorID, tblCommission.Supcardno, tblCommission.FrdebtorID, FrcreditorID, tblCommission.Frcardno,Ludebtorid, tblCommission.LucreditorID, tblCommission.Lucardno FROM tblCommission Where 1=1 ");
            }

            if (CommissionNo.ToString() != "0")
                dbQry.Append(" AND tblCommission.CommissionNo=" + CommissionNo + "");

            //if (TransNo.ToString() != "0")
            //dbQry.Append(" AND tblDayBook.TransNo = " + TransNo + "");

            dbQry.Append(" ORDER BY tblCommission.CommissionNo Desc");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetCommissionForId(int CommissionNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            // object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {

                dbQry.Append("SELECT tblCommission.CommissionNo,tblCommission.SeriesID,Format(tblCommission.Commdate, 'dd/mm/yyyy') As CommissionDate,tblCommission.CustomerID,tblCommission.CustomerName,OtherCusName, ");
                dbQry.Append(" tblCommission.cusTransNo,tblCommission.CustomerID,tblCommission.checked,tblCommission.CustomerName,tblCommission.SellingPayMode,tblCommission.SupplierID,tblCommission.SupplierPayMode,tblCommission.freight,tblCommission.FreightPaymode,tblCommission.LoadUnload,tblCommission.LoadUnLoadPaymode,tblCommission.Comissionvalue,tblCommission.Remarks,tblCommission.subname,tblCommission.salesvalue,tblCommission.purchasevalue,tblCommission.supTransNo,tblCommission.frTransNo,tblCommission.luTransNo,tblCommission.CusDebtorID, tblCommission.CusCreditorID, tblCommission.CusCardno, tblCommission.SupDebtorID, tblCommission.SupcreditorID, tblCommission.Supcardno, tblCommission.FrdebtorID, FrcreditorID, tblCommission.Frcardno,Ludebtorid, tblCommission.LucreditorID, tblCommission.Lucardno FROM tblCommission ");
                dbQry.Append(" Where tblCommission.CommissionNo=" + CommissionNo + " AND tblCommission.Commdate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ORDER BY tblCommission.CommDate Desc,tblCommission.CommissionNo Desc");

            }
            else
            {
                dbQry.Append("SELECT tblCommission.CommissionNo,tblCommission.SeriesID,Format(tblCommission.Commdate, 'dd/mm/yyyy') As CommissionDate,tblCommission.CustomerID,tblCommission.CustomerName,OtherCusName, ");
                dbQry.Append(" tblCommission.cusTransNo,tblCommission.CustomerID,tblCommission.checked,tblCommission.CustomerName,tblCommission.SellingPayMode,tblCommission.SupplierID,tblCommission.SupplierPayMode,tblCommission.freight,tblCommission.FreightPaymode,tblCommission.LoadUnload,tblCommission.LoadUnLoadPaymode,tblCommission.Comissionvalue,tblCommission.Remarks,tblCommission.subname,tblCommission.salesvalue,tblCommission.purchasevalue,tblCommission.supTransNo,tblCommission.frTransNo,tblCommission.luTransNo,tblCommission.CusDebtorID, tblCommission.CusCreditorID, tblCommission.CusCardno, tblCommission.SupDebtorID, tblCommission.SupcreditorID, tblCommission.Supcardno, tblCommission.FrdebtorID, FrcreditorID, tblCommission.Frcardno,Ludebtorid, tblCommission.LucreditorID, tblCommission.Lucardno FROM tblCommission ");
            }
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet GetCommissionItemsForId(int CommissionNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("Select tblCommissionitems.ItemCode,tblCommissionitems.CustomerName,tblCommissionitems.CustomerID,tblCommissionitems.BankName,tblCommissionitems.SellingPaymode,tblCommissionitems.otherCustName,tblCommissionitems.BankID,tblCommissionitems.CardNo,tblProductMaster.ProductName,tblProductMaster.ProductDesc,tblCommissionitems.Rate,tblCommissionitems.Qty, ");
            dbQry.Append("tblCommissionitems.CommissionNo,tblCommissionitems.SlNo,tblCommissionitems.RoleID,tblCommissionitems.isRole,tblProductMaster.Model FROM tblCommissionitems INNER JOIN tblProductmaster ON tblCommissionitems.itemCode = tblProductMaster.itemCode ");
            dbQry.Append(" Where tblCommissionitems.CommissionNo = " + CommissionNo);
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public int UpdateCommission(string Series, int CommissionNo, string CommissionDate, int sCustomerID, string sCustomerName, int paymode, string sCreditCardno, int BankName, int ssupplierID, int ssupppaymode, string ssuppcardno, int ssuppbank, double salamount, double Amount, double freight, double dLU, DataSet salesDS, string sOtherCusName, int sfreightpaymode, string sfreightcardno, int sfreightbank, int slupaymode, string slucardno, int slubank, double CommissionValue, string Remarks, string username, string subname, string check)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        CultureInfo culture = new CultureInfo("pt-BR");
        string dbQry = string.Empty;

        string sQry = string.Empty;
        string sAuditStr = string.Empty;
        string dbQryRecDate = string.Empty;
        string sNarration = string.Empty;
        string sVoucherType = string.Empty;
        string oldTransDate = string.Empty;

        string supVoucherType = string.Empty;
        string frVoucherType = string.Empty;

        string luVoucherType = string.Empty;

        DataSet dsOld = new DataSet();
        DataSet roleDs = new DataSet();
        DataSet dsOld1 = new DataSet();

        DateTime sBilldate;

        int CusTransNo = 0;
        int SupTransNo = 0;
        int frTransNo = 0;

        int luTransNo = 0;
        int oldDebitID = 0;
        int oldBillNo = 0;
        int oldCreditID = 0;
        double oldAmt = 0;
        int creditorID = 2;
        int supcreditorID = 0;
        int supDebtorID = 3;
        double oldval = 0;

        string ddNarration = string.Empty;
        int DebtorID = 0;
        //int BillNo = 0;
        int salesID = 0;
        int iSno = 0;
        StringBuilder dbQryData = new StringBuilder();
        StringBuilder dbQry1 = new StringBuilder();

        string[] sDate;
        string delim = "/";
        char[] delimA = delim.ToCharArray();

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID

            try
            {
                sDate = CommissionDate.Trim().Split(delimA);
                sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));

                dbQryRecDate = "Select recon_date from last_recon";

                object recDateVal = manager.ExecuteScalar(CommandType.Text, dbQryRecDate);


                dbQry1.Append("Select tblCommissionitems.TransNo FROM tblCommissionitems ");
                dbQry1.Append(" Where tblCommissionitems.CommissionNo = " + CommissionNo);

                dsOld1 = manager.ExecuteDataSet(CommandType.Text, dbQry1.ToString());

                if (dsOld1 != null)
                {
                    if (dsOld1.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < dsOld1.Tables[0].Rows.Count; i++)
                        {
                            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", dsOld1.Tables[0].Rows[i]["TransNo"]);
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        }
                    }
                }







                if ((recDateVal != null) && (recDateVal != DBNull.Value))
                {

                    dbQryData.Append("SELECT tblCommission.CommissionNo,Format(tblCommission.CommDate, 'dd/mm/yyyy') As CommissionDate,tblCommission.CustomerID,tblCommission.CustomerName,tblCommission.suptransno,tblCommission.frtransno,tblCommission.lutransno,tblCommission.custransno,tblCommission.salesvalue,tblCommission.purchasevalue,tblCommission.supplierId");
                    dbQryData.Append(" FROM tblCommission");
                    dbQryData.Append(" Where tblCommission.CommissionNo=" + CommissionNo + " AND tblCommission.CommDate > #" + DateTime.Parse(recDateVal.ToString()).ToString("MM/dd/yyyy") + "#");
                }
                else
                {
                    dbQryData.Append("SELECT tblCommission.CommissionNo,Format(tblCommission.CommDate, 'dd/mm/yyyy') As CommissionDate,tblCommission.CustomerID,tblCommission.CustomerName,tblCommission.suptransno,tblCommission.frtransno,tblCommission.lutransno,tblCommission.custransno,tblCommission.salesvalue,tblCommission.purchasevalue,tblCommission.supplierId");
                    dbQryData.Append(" FROM tblCommission  Where tblCommission.CommissionNo=" + CommissionNo + " ");
                }

                dsOld = manager.ExecuteDataSet(CommandType.Text, dbQryData.ToString());

                if (dsOld != null)
                {
                    if (dsOld != null)
                    {
                        if (dsOld.Tables[0].Rows.Count > 0)
                        {
                            if (dsOld.Tables[0].Rows[0]["custransno"] != null)
                            {
                                if (dsOld.Tables[0].Rows[0]["custransno"].ToString() != string.Empty)
                                {
                                    CusTransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["custransno"].ToString());
                                }
                            }
                            if (dsOld.Tables[0].Rows[0]["suptransno"] != null)
                            {
                                if (dsOld.Tables[0].Rows[0]["suptransno"].ToString() != string.Empty)
                                {
                                    SupTransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["suptransno"].ToString());
                                }
                            }
                            if (dsOld.Tables[0].Rows[0]["frtransno"] != null)
                            {
                                if (dsOld.Tables[0].Rows[0]["frtransno"].ToString() != string.Empty)
                                {
                                    frTransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["frtransno"].ToString());
                                }
                            }

                            if (dsOld.Tables[0].Rows[0]["lutransno"] != null)
                            {
                                if (dsOld.Tables[0].Rows[0]["lutransno"].ToString() != string.Empty)
                                {
                                    luTransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["lutransno"].ToString());
                                }
                            }
                            oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CustomerID"]);
                            oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["SupplierID"]);
                            oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["salesvalue"]);
                            oldval = Convert.ToDouble(dsOld.Tables[0].Rows[0]["purchasevalue"]);
                            oldTransDate = Convert.ToString(dsOld.Tables[0].Rows[0]["CommissionDate"]);
                        }
                        else
                        {
                            throw new Exception("Unable to find details for Commission No :" + CommissionNo.ToString());
                        }
                    }
                    else
                    {
                        throw new Exception("Unable to find details for Commission No :" + CommissionNo.ToString());
                    }


                    //dbQry = string.Format("Select DebtorID,CreditorID,Amount,transDate from tblDaybook Where TransNo={0}", TransNo);

                    //dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);

                    //if (dsOld != null)
                    //{
                    //    if (dsOld.Tables[0].Rows.Count == 1)
                    //    {
                    //        oldBillNo = Billno;
                    //        oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
                    //        oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
                    //        oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
                    //        oldTransDate = Convert.ToString(dsOld.Tables[0].Rows[0]["transDate"]);
                    //    }
                    //    else
                    //    {
                    //        throw new Exception("More than 1 row found in tblDaybook for TransNo :" + TransNo.ToString());
                    //    }

                    //}

                    dbQry = string.Format("Delete From tblCommissionItems Where CommissionNo={0}", CommissionNo);
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                }



                dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", SupTransNo);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", frTransNo);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", luTransNo);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);



                if (ssupppaymode == 1)
                    supcreditorID = 1;
                else if (ssupppaymode == 2)
                    supcreditorID = ssuppbank;
                else
                    supcreditorID = ssupplierID;

                supVoucherType = "Purchase";

                dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,Chequeno,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
               sBilldate.ToShortDateString(), supDebtorID, supcreditorID, Amount, sNarration, supVoucherType, ssuppcardno, 0);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                int NewsupTransNo = 0;

                object retVall = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

                if ((retVall != null) && (retVall != DBNull.Value))
                {
                    NewsupTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
                }
                else
                {
                    NewsupTransNo = NewsupTransNo + 1;
                }

                sNarration = supVoucherType + " - Commission No:" + CommissionNo;
                dbQry = string.Format("Update tblDayBook SET Narration = '{0}' Where TransNo={1}", sNarration, NewsupTransNo);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                int frdebtorid = 0;
                int frcreditorID = 0;

                if (sfreightpaymode == 1)
                    frcreditorID = 1;
                else if (sfreightpaymode == 2)
                    frcreditorID = sfreightbank;
                else
                    frcreditorID = ssupplierID;

                frVoucherType = "Payment";

                sNarration = " Bill No:" + CommissionNo;

                object retValll = manager.ExecuteScalar(CommandType.Text, "select ledgerid from tblledger where ledgername = 'Customer Fright Expenses'");

                if ((retValll != null) && (retValll != DBNull.Value))
                {
                    frdebtorid = (Int32)manager.ExecuteScalar(CommandType.Text, "select ledgerid from tblledger where ledgername = 'Customer Fright Expenses'");
                }

                if (freight > 0)
                {
                    dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                       sBilldate.ToShortDateString(), frdebtorid, frcreditorID, freight, sNarration, frVoucherType, sfreightcardno, 0, 0);

                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    frTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
                }


                int ludebtorid = 0;
                int lucreditorID = 0;

                if (slupaymode == 1)
                    lucreditorID = 1;
                else if (slupaymode == 2)
                    lucreditorID = slubank;
                else
                    lucreditorID = ssupplierID;

                luVoucherType = "Payment";

                object retVallll = manager.ExecuteScalar(CommandType.Text, "select ledgerid from tblledger where ledgername = 'Customer loading and unloading Expenses'");

                if ((retVallll != null) && (retVallll != DBNull.Value))
                {
                    ludebtorid = (Int32)manager.ExecuteScalar(CommandType.Text, "select ledgerid from tblledger where ledgername = 'Customer loading and unloading Expenses'");
                }


                if (dLU > 0)
                {
                    dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                       sBilldate.ToShortDateString(), ludebtorid, lucreditorID, dLU, sNarration, luVoucherType, slucardno, 0, 0);

                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    luTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
                }


                // dbQry = string.Format("INSERT INTO tblCommission(CommissionNo,SeriesID,CommDate,cusTransNo,CustomerID,CustomerName,SellingPayMode,SupplierID,SupplierPayMode,freight,FreightPaymode,LoadUnload,LoadUnLoadPaymode,OtherCusName,Comissionvalue,Remarks,subname,salesvalue,purchasevalue,supTransNo,frTransNo,luTransNo,CusDebtorID, CusCreditorID, CusCardno, SupDebtorID, SupcreditorID, Supcardno, FrdebtorID, FrcreditorID, Frcardno,Ludebtorid, LucreditorID, Lucardno) VALUES({0},{1},Format('{2}', 'dd/mm/yyyy'),{3},{4},'{5}',{6},{7},{8},{9},{10},{11},{12},'{13}',{14},'{15}','{16}',{17},{18},{19},{20},{21},{22},{23},'{24}',{25},{26},'{27}',{28},{29},'{30}',{31},{32},'{33}')",
                //salesBillno, Series, sBilldate.ToShortDateString(), NewTransNo, sCustomerID, sCustomerName, paymode, ssupplierID, ssupppaymode, freight, sfreightpaymode, dLU, slupaymode, sOtherCusName, CommissionValue, Remarks, subname, salamount, Amount, NewsupTransNo, frTransNo, luTransNo, DebtorID, creditorID, sCreditCardno, supDebtorID, supcreditorID, ssuppcardno, frdebtorid, frcreditorID, sfreightcardno, ludebtorid, lucreditorID, slucardno);
                // manager.ExecuteNonQuery(CommandType.Text, dbQry);

                dbQry = string.Format("UPDATE tblCommission SET SeriesID={14},CommDate=Format('{1}', 'dd/mm/yyyy'),CusTransNo={2},CustomerID={3},CustomerName='{4}',SellingPaymode={5},SupplierID={6},SupplierPayMode={7},freight={8},FreightPaymode={9},LoadUnload={10},LoadUnLoadPaymode={11},OtherCusName='{12}',Comissionvalue={13},Remarks='{15}',subname='{16}',salesvalue='{17}',purchasevalue={18},supTransNo={19},frTransNo={20},luTransNo={21},CusDebtorID={22}, CusCreditorID={23}, CusCardno='{24}', SupDebtorID={25}, SupcreditorID={26}, Supcardno='{27}', FrdebtorID={28}, FrcreditorID={29}, Frcardno='{30}',Ludebtorid={31}, LucreditorID={32}, Lucardno='{33}' WHERE CommissionNo={0}",
                CommissionNo, sBilldate.ToShortDateString(), 0, sCustomerID, sCustomerName, paymode, ssupplierID, ssupppaymode, freight, sfreightpaymode, dLU, slupaymode, sOtherCusName, CommissionValue, Series, Remarks, subname, salamount, Amount, NewsupTransNo, frTransNo, luTransNo, DebtorID, creditorID, sCreditCardno, supDebtorID, supcreditorID, ssuppcardno, frdebtorid, frcreditorID, sfreightcardno, ludebtorid, lucreditorID, slucardno);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                dbQry = string.Format("Update tblCommission SET checked = '{0}' Where CommissionNo={1}", check, CommissionNo);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                string dffpaymode = string.Empty;

                if (salesDS != null)
                {
                    if (salesDS.Tables.Count > 0)
                    {
                        foreach (DataRow dr in salesDS.Tables[0].Rows)
                        {
                            //if (paymode == 1)
                            //    DebtorID = 1;
                            //else if (paymode == 2)
                            //    DebtorID = Convert.ToInt32(dr["BankID"]);
                            //else
                            //    DebtorID = Convert.ToInt32(dr["CustomerID"]);


                            dffpaymode = Convert.ToString(dr["SellingPaymode"]);

                            if (dffpaymode == "Cash")
                                DebtorID = 1;
                            else if (dffpaymode == "Bank / Credit Card")
                                DebtorID = Convert.ToInt32(dr["BankID"]);
                            else
                                DebtorID = Convert.ToInt32(dr["CustomerID"]);


                            sVoucherType = "Sales";

                            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,CreditCardNo,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
                             sBilldate.ToShortDateString(), DebtorID, creditorID, Convert.ToDouble(dr["Total"]), ddNarration, sVoucherType, Convert.ToString(dr["CardNo"]), 0);
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);


                            int ddTransNo = 0;

                            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

                            if ((retVal != null) && (retVal != DBNull.Value))
                            {
                                ddTransNo = int.Parse(retVal.ToString());
                            }
                            else
                            {
                                ddTransNo = ddTransNo + 1;
                            }

                            ddNarration = sVoucherType + " - Bill No:" + CommissionNo;
                            dbQry = string.Format("Update tblDayBook SET Narration = '{0}' Where TransNo={1}", ddNarration, ddTransNo);
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);


                            dbQry = string.Format("INSERT INTO tblCommissionItems(CommissionNo,ItemCode,Qty,Rate,SlNo,isrole,CustomerName,CustomerID,BankName,CardNo,OtherCustName,SellingPaymode,TransNo,BankID) VALUES({0},'{1}',{2},{3},{4},'{5}','{6}',{7},'{8}','{9}','{10}','{11}',{12},{13})", CommissionNo, Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["Qty"]), Convert.ToDouble(dr["Rate"]), iSno, Convert.ToString(dr["isRole"]), Convert.ToString(dr["CustomerName"]), Convert.ToInt32(dr["CustomerID"]), Convert.ToString(dr["BankName"]), Convert.ToString(dr["CardNo"]), Convert.ToString(dr["OtherCusName"]), Convert.ToString(dr["SellingPaymode"]), ddTransNo, Convert.ToInt32(dr["BankID"]));
                            manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        }

                        iSno = 0;
                    }
                }

                sAuditStr = "Commission No : " + CommissionNo + " got edited. Old Record Details : User =" + username + " ,SupplierID=" + oldCreditID + ",Sales Value=" + oldAmt + ",Purchase Value=" + oldval + ", DateTime:" + oldTransDate;

                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}', Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Edit and Update", DateTime.Now.ToString());
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                manager.CommitTransaction();
                return CommissionNo;
            }
            catch (Exception e)
            {
                manager.Transaction.Rollback();
                throw e;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void DeleteCommission(int CommissionNo, string UserID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;

        string sQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        StringBuilder dbQry1 = new StringBuilder();

        DataSet dsOld1 = new DataSet();
        int oldDebitID = 0;
        int oldCreditID = 0;
        double oldAmt = 0;
        double oldval = 0;
        string transdate = string.Empty;
        DataSet roleDs = new DataSet();
        string sNarration = string.Empty;

        int creditorID = 0;
        int DebtorID = 3;
        int SupTransNo = 0;
        int frTransNo = 0;

        int luTransNo = 0;
        int CusTransNo = 0;


        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();


            dbQry1.Append("Select tblCommissionitems.TransNo FROM tblCommissionitems ");
            dbQry1.Append(" Where tblCommissionitems.CommissionNo = " + CommissionNo);

            dsOld1 = manager.ExecuteDataSet(CommandType.Text, dbQry1.ToString());

            if (dsOld1 != null)
            {
                if (dsOld1.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < dsOld1.Tables[0].Rows.Count; i++)
                    {
                        dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", dsOld1.Tables[0].Rows[i]["TransNo"]);
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }
            }


            dsOld = GetCommissionForId(CommissionNo);

            if (dsOld != null)
            {
                if (dsOld.Tables[0].Rows.Count > 0)
                {
                    if (dsOld.Tables[0].Rows[0]["CusTransno"] != null)
                    {
                        if (dsOld.Tables[0].Rows[0]["CusTransno"].ToString() != string.Empty)
                        {
                            CusTransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CusTransno"].ToString());
                        }
                    }
                    if (dsOld.Tables[0].Rows[0]["supTransno"] != null)
                    {
                        if (dsOld.Tables[0].Rows[0]["supTransno"].ToString() != string.Empty)
                        {
                            SupTransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["supTransno"].ToString());
                        }
                    }
                    if (dsOld.Tables[0].Rows[0]["frTransno"] != null)
                    {
                        if (dsOld.Tables[0].Rows[0]["frTransno"].ToString() != string.Empty)
                        {
                            frTransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["frTransno"].ToString());
                        }
                    }


                    if (dsOld.Tables[0].Rows[0]["luTransno"] != null)
                    {
                        if (dsOld.Tables[0].Rows[0]["luTransno"].ToString() != string.Empty)
                        {
                            luTransNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["luTransno"].ToString());
                        }
                    }

                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CustomerID"]);
                    oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["SupplierID"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["salesvalue"]);
                    oldval = Convert.ToDouble(dsOld.Tables[0].Rows[0]["purchasevalue"]);
                    transdate = Convert.ToString(dsOld.Tables[0].Rows[0]["CommissionDate"]);
                }
            }
            //dbQry = string.Format("Select DebtorID,CreditorID,Amount,transDate from tblDaybook Where TransNo={0}", TransNo);
            //dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            //if (dsOld != null)
            //{
            //    if (dsOld.Tables[0].Rows.Count > 0)
            //    {
            //        oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["DebtorID"]);
            //        oldCreditID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CreditorID"]);
            //        oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["Amount"]);
            //        transdate = Convert.ToString(dsOld.Tables[0].Rows[0]["transDate"]);
            //    }

            //}

            //Step 1 - Start

            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", oldDebitID);
            //double DebitDel = 0;
            //object retDebitDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retDebitDel != null) && (retDebitDel != DBNull.Value))
            //{
            //    DebitDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}

            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", DebitDel - oldAmt, oldDebitID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", oldCreditID);
            //double CreditDel = 0;
            //object retCreditDel = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retCreditDel != null) && (retCreditDel != DBNull.Value))
            //{
            //    CreditDel = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}

            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", CreditDel - oldAmt, oldCreditID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //Step 1 - End


            //Step 2 - Start
            //Start Delete the old record
            //dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", CusTransNo);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", SupTransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", frTransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = string.Format("Delete From tblDayBook Where TransNo={0}", luTransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = string.Format("Delete From tblCommission Where CommissionNo={0}", CommissionNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblCommissionItems Where CommissionNo={0}", CommissionNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Deleting the old record


            sAuditStr = "Commission got deleted old Record Details : User:" + UserID + ", CustomerID=" + oldDebitID + " ,SupplierID=" + oldCreditID + ",Sales Value=" + oldAmt + ",Purchase Value=" + oldval + ", DateTime:" + transdate;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}', Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Delete", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetProductCommissionBill(int CommissionNo, string itemcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();

            dbQry.Append("SELECT itemCode,Qty As Quantity,Rate ");
            dbQry.Append(" FROM tblCommissionItems");
            dbQry.Append("  where CommissionNo=" + CommissionNo + " and itemcode='" + itemcode + "'");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }


    public DataSet getcommissiondetails(string sDataSource, DateTime startDate, DateTime endDate, string condtion, string method, string metho)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();

            if (method == "No")
            {
                if (metho == "All")
                {
                    dbQry.Append("SELECT tblCommission.CommissionNo,Format(tblCommission.Commdate, 'dd/mm/yyyy') As CommDate,tblCommission.CustomerName, ");
                    dbQry.Append(" tblCommission.SellingPayMode,SupplierPayMode,freight,FreightPaymode,LoadUnload,LoadUnLoadPaymode,Comissionvalue,Remarks,subname,salesvalue,purchasevalue FROM tblCommission  ");
                    dbQry.Append(" Where Commdate >=#" + startDate.ToString("MM/dd/yyyy") + "# AND Commdate<=#" + endDate.ToString("MM/dd/yyyy") + "# " + condtion + " order by tblCommission.CommissionNo");
                }
                else
                {
                    dbQry.Append("SELECT tblCommission.CommissionNo,Format(tblCommission.Commdate, 'dd/mm/yyyy') As CommDate,tblCommissionItems.CustomerName, ");
                    dbQry.Append(" tblCommissionItems.SellingPayMode,SupplierPayMode,freight,FreightPaymode,LoadUnload,LoadUnLoadPaymode,Comissionvalue,Remarks,subname,salesvalue,purchasevalue FROM tblCommission inner join tblCommissionItems on tblCommission.CommissionNo=tblCommissionItems.CommissionNo ");
                    dbQry.Append(" Where Commdate >=#" + startDate.ToString("MM/dd/yyyy") + "# AND Commdate<=#" + endDate.ToString("MM/dd/yyyy") + "# " + condtion + " order by tblCommission.CommissionNo");
                }
            }
            else if (method == "Yes")
            {
                if (metho == "All")
                {
                    dbQry.Append("SELECT tblCommission.CommissionNo,Format(tblCommission.Commdate, 'dd/mm/yyyy') As CommDate,SupplierPayMode, ");
                    dbQry.Append(" tblCommission.freight,tblCommission.FreightPaymode,tblCommission.LoadUnload,tblCommission.LoadUnLoadPaymode,tblCommission.Comissionvalue,tblCommission.Remarks,tblCommission.subname,tblCommission.salesvalue,tblCommission.purchasevalue FROM tblCommission");
                    dbQry.Append(" Where tblCommission.Commdate >=#" + startDate.ToString("MM/dd/yyyy") + "# AND tblCommission.Commdate<=#" + endDate.ToString("MM/dd/yyyy") + "# " + condtion + " order by tblCommission.CommissionNo");
                }
                else
                {
                    dbQry.Append("SELECT tblCommission.CommissionNo,Format(tblCommission.Commdate, 'dd/mm/yyyy') As CommDate,tblCommissionItems.CustomerName,tblCommissionItems.ItemCode,tblCommissionItems.Qty,tblCommissionItems.rate,tblproductmaster.productname,tblproductmaster.productdesc as brand,tblproductmaster.model, ");
                    dbQry.Append(" tblCommissionItems.SellingPayMode,tblCommissionItems.CardNo,tblCommissionItems.BankName,tblCommissionItems.CardNo,tblCommissionItems.OtherCustName,tblCommissionItems.CustomerID,tblCommissionItems.BankID,tblCommission.SupplierPayMode,tblCommission.freight,tblCommission.FreightPaymode,tblCommission.LoadUnload,tblCommission.LoadUnLoadPaymode,tblCommission.Comissionvalue,tblCommission.Remarks,tblCommission.subname,tblCommission.salesvalue,tblCommission.purchasevalue FROM (tblCommission inner join tblCommissionItems on tblCommission.CommissionNo=tblCommissionItems.CommissionNo) inner join tblproductmaster on tblCommissionItems.ItemCode=tblproductmaster.ItemCode");
                    dbQry.Append(" Where tblCommission.Commdate >=#" + startDate.ToString("MM/dd/yyyy") + "# AND tblCommission.Commdate<=#" + endDate.ToString("MM/dd/yyyy") + "# " + condtion + " order by tblCommission.CommissionNo");
                }
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListSundryDebtorsPaymentMade(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}') Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors");
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName='Sundry Debtors' and Paymentmade='YES' Order By ledgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public double getCommissionConfig()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();

            dbQry.Append("SELECT percentage From tblConfigCommission ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return Convert.ToDouble(ds.Tables[0].Rows[0]["percentage"]);
            else
                return 0;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void InsertBankReconciliation(DataSet BankDS, string Username, int iLedgerID, DateTime dtSdate, string iLedgerName, string Types)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();

        StringBuilder dbQry1 = new StringBuilder();

        StringBuilder dbQry2 = new StringBuilder();

        string sAudit = string.Empty;
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();


            dbQry1.Append("SELECT TransNo,TransDate,DebtorID,Debtor,CreditorID,Creditor,Amount,Narration,VoucherType,Chequeno,RefNo,ReconcilatedBy,Reconcilateddate,Result FROM tblBankRecon");
            dbQry1.Append(" WHERE (DebtorID=" + iLedgerID + " OR CreditorID=" + iLedgerID + ") AND TransDate ='" + dtSdate.ToString("yyyy-MM-dd") + "' And Types='" + Types + "' ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry1.ToString());

            if (ds != null)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    sAudit = " Old Record Deleted on " + dtSdate.ToShortDateString();

                    dbQry = string.Format("Delete From tblBankRecon WHERE (DebtorID=" + iLedgerID + " OR CreditorID=" + iLedgerID + ") AND TransDate ='" + dtSdate.ToString("yyyy-MM-dd") + "' And Types='" + Types + "' ");
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                }
            }

            dbQry2.Append("SELECT LedgerID FROM tblBankRec");
            dbQry2.Append(" WHERE LedgerID=" + iLedgerID + " AND DateT ='" + dtSdate.ToString("yyyy-MM-dd") + "' And Types='" + Types + "' ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (ds != null)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    dbQry = string.Format("Delete From tblBankRec WHERE LedgerID=" + iLedgerID + " AND DateT ='" + dtSdate.ToString("yyyy-MM-dd") + "' And Types='" + Types + "' ");
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                }
            }


            if (BankDS != null)
            {
                if (BankDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in BankDS.Tables[0].Rows)
                    {
                        dbQry = string.Format("INSERT INTO tblBankRecon(TransNo,TransDate,DebtorID,Debtor,CreditorID,Creditor,Amount,Narration,VoucherType,Chequeno,RefNo,ReconcilatedBy,Reconcilateddate,Types,Result,BranchCode) VALUES({0},'{1}',{2},'{3}',{4},'{5}',{6},'{7}','{8}','{9}',{10},'{11}','{12}','{13}','{14}','{15}')", Convert.ToInt32(dr["TransNo"]), Convert.ToDateTime(dr["Date"].ToString()).ToString("yyyy-MM-dd"), Convert.ToInt32(dr["DebtorID"]), Convert.ToString(dr["Debtor"]), Convert.ToInt32(dr["creditorID"]), Convert.ToString(dr["creditor"]), Convert.ToDouble(dr["Amount"]), Convert.ToString(dr["Narration"]), Convert.ToString(dr["VoucherType"]), Convert.ToString(dr["Chequeno"]), 0, Convert.ToString(dr["ReconcilatedBy"]), Convert.ToDateTime(dr["Reconcilateddate"].ToString()).ToString("yyyy-MM-dd"), Types, Convert.ToString(dr["Result"]), Convert.ToString(dr["BranchCode"]));
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }
            }

            dbQry = string.Format("INSERT INTO tblBankRec(DateT,LedgerID,Ledger,Types,Username) VALUES('{0}',{1},'{2}','{3}','{4}')", dtSdate.ToString("yyyy-MM-dd"), iLedgerID, iLedgerName, Types, Username);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Bank Reconciliation on: " + dtSdate.ToShortDateString() + " .Record Details :  User :" + Username + " Ledger = " + iLedgerName;

            sAuditStr = sAuditStr + sAudit;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Bank Reconciliation", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public int GetCuForId(string ddd)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("select LedgerId from tblledger where ledgername='" + ddd + "'");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return Convert.ToInt32(ds.Tables[0].Rows[0]["LedgerId"]);
            else
                return 0;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet GetBankRec()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select DateT,LedgerID,Ledger,Types,Username,ID from tblBankRec Order By DateT");
            dbQry = "SELECT TransNo,TransDate,Debitor.ledgername as debi,Creditor.ledgername,Amount,Narration,VoucherType,chequeNo,RefNo,tblDayBook.BranchCode FROM ((tblDayBook INNER JOIN tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) WHERE tblDayBook.Transno not in (select transno from tblbankrecon) and tblDayBook.VoucherType in ('Receipt','Payment') and debtorid<>1 and creditorid<>1 Order by tblDayBook.TransDate ";

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetBankRecID(string strBillno, string strTransNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();

        StringBuilder dbQry2 = new StringBuilder();

        string dbQry = string.Empty;

        try
        {
            dbQry2.Append("SELECT TransNo,TransDate,Debitor.ledgername as debi,Creditor.ledgername,Amount,Narration,VoucherType,chequeNo,RefNo,tblDayBook.BranchCode FROM ((tblDayBook INNER JOIN tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) WHERE tblDayBook.Transno not in (select transno from tblbankrecon) and tblDayBook.VoucherType in ('Receipt','Payment') and debtorid<>1 and creditorid<>1 ");

            if (strTransNo != "")
            {
                if (strTransNo != "0")
                    dbQry2.Append(" AND tblDayBook.TransNo = " + strTransNo + "");

            }

            if (strBillno != "")
            {
                if (strBillno != "0")
                    dbQry2.Append(" AND tblDayBook.Refno=" + strBillno.Trim() + "");
            }

            dbQry2.Append(" ORDER BY tblDayBook.TransDate Desc");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void BulkProductUpdates(DataSet BankDS, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();

        StringBuilder dbQry1 = new StringBuilder();

        string sAuditStr = string.Empty;
        DataSet dsOld = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        string dbQry3 = string.Empty;

        DateTime mrpdat = DateTime.Now;
        DateTime dpdat = DateTime.Now;
        DateTime nlcdat = DateTime.Now;

        string items = string.Empty;

        DateTime mrpprevdat;
        DateTime nlcprevdat;
        DateTime dpprevdat;

        double oldmrp = 0;
        double oldnlc = 0;
        double olddp = 0;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            if (BankDS != null)
            {
                if (BankDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in BankDS.Tables[0].Rows)
                    {
                        dbQry3 = string.Format("Select mrpeffdate,dpeffdate,nlceffdate,rate,nlc,dealerrate from tblproductmaster Where itemcode='{0}' ", Convert.ToString(dr["ItemCode"]));
                        dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry3);
                        if (dsOld != null)
                        {
                            if (dsOld.Tables.Count > 0)
                            {
                                mrpdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["mrpeffdate"]);
                                dpdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["dpeffdate"]);
                                nlcdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["nlceffdate"]);
                                oldmrp = Convert.ToDouble(dsOld.Tables[0].Rows[0]["rate"]);
                                oldnlc = Convert.ToDouble(dsOld.Tables[0].Rows[0]["nlc"]);
                                olddp = Convert.ToDouble(dsOld.Tables[0].Rows[0]["dealerrate"]);
                            }
                        }

                        if (mrpdat == Convert.ToDateTime(dr["MRPEffDate"]))
                        {
                            mrpprevdat = Convert.ToDateTime(dr["MRPEffDate"]);
                        }
                        else
                        {
                            mrpprevdat = Convert.ToDateTime(dr["MRPEffDate"]).AddDays(-1);
                        }
                        if (nlcdat == Convert.ToDateTime(dr["NLCEffDate"]))
                        {
                            nlcprevdat = Convert.ToDateTime(dr["NLCEffDate"]);
                        }
                        else
                        {
                            nlcprevdat = Convert.ToDateTime(dr["NLCEffDate"]).AddDays(-1);
                        }
                        if (dpdat == Convert.ToDateTime(dr["DPEffDate"]))
                        {
                            dpprevdat = Convert.ToDateTime(dr["DPEffDate"]);
                        }
                        else
                        {
                            dpprevdat = Convert.ToDateTime(dr["DPEffDate"]).AddDays(-1);
                        }



                        dbQry3 = string.Format("Select rol,Rate,DealerRate,mrpeffdate,NLC,dpeffdate,nlceffdate from tblproductmaster Where itemcode='{0}' ", Convert.ToString(dr["ItemCode"]));
                        dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry3);
                        if (dsOld != null)
                        {
                            if (dsOld.Tables.Count > 0)
                            {
                                if ((Convert.ToDateTime(dr["MRPEffDate"]) == Convert.ToDateTime(dsOld.Tables[0].Rows[0]["mrpeffdate"])) && (Convert.ToDateTime(dr["nlcEffDate"]) == Convert.ToDateTime(dsOld.Tables[0].Rows[0]["nlceffdate"])) && (Convert.ToDateTime(dr["dpEffDate"]) == Convert.ToDateTime(dsOld.Tables[0].Rows[0]["dpeffdate"])) && (Convert.ToDouble(dr["nlc"]) == Convert.ToDouble(dsOld.Tables[0].Rows[0]["nlc"])) && (Convert.ToDouble(dr["rate"]) == Convert.ToDouble(dsOld.Tables[0].Rows[0]["rate"])) && (Convert.ToDouble(dr["dealerrate"]) == Convert.ToDouble(dsOld.Tables[0].Rows[0]["dealerrate"])) && (Convert.ToInt32(dr["rol"]) == Convert.ToInt32(dsOld.Tables[0].Rows[0]["rol"])))
                                {

                                }
                                else
                                {
                                    dbQry2 = string.Format("INSERT INTO tblProducthistory VALUES('{0}','{1}', '{2}',{3},'{4}',{5},{6},{7},{8},'{9}',Format('{10}', 'dd/mm/yyyy'),Format('{11}', 'dd/mm/yyyy'),Format('{12}', 'dd/mm/yyyy'),Format('{13}', 'dd/mm/yyyy'),Format('{14}', 'dd/mm/yyyy'),Format('{15}', 'dd/mm/yyyy'),Format('{16}', 'dd/mm/yyyy'),Format('{17}', 'dd/mm/yyyy'),Format('{18}', 'dd/mm/yyyy'))",
                                         Convert.ToString(dr["ItemCode"]), Convert.ToString(dr["ProductName"]), Convert.ToString(dr["Model"]), Convert.ToInt32(dr["CategoryID"]), Convert.ToString(dr["ProductDesc"]), Convert.ToInt32(dr["ROL"]), oldmrp, olddp, oldnlc, 'n', dr["MRPEffDate"].ToString(), dr["DPEffDate"].ToString(), dr["NLCEffDate"].ToString(), mrpdat.ToShortDateString(), mrpprevdat.ToShortDateString(), dpdat.ToShortDateString(), dpprevdat.ToShortDateString(), nlcdat.ToShortDateString(), nlcprevdat.ToShortDateString());
                                    manager.ExecuteDataSet(CommandType.Text, dbQry2);
                                }
                            }
                        }



                        items = items + Convert.ToString(dr["ItemCode"]) + ", ";

                        dbQry = string.Format("UPDATE tblProductMaster SET ROL={0}, Rate={1}, DealerRate={2}, NLC={3}, MRPEffDate=Format('{4}', 'dd/mm/yyyy'),DPEffDate=Format('{5}', 'dd/mm/yyyy'),NLCEffDate=Format('{6}', 'dd/mm/yyyy'),mrpstartdate=Format('{7}', 'dd/mm/yyyy'),dpstartdate=Format('{8}', 'dd/mm/yyyy'),nlcstartdate=Format('{9}', 'dd/mm/yyyy'),mrpenddate=Format('{10}', 'dd/mm/yyyy'),dpenddate=Format('{11}', 'dd/mm/yyyy'),nlcenddate=Format('{12}', 'dd/mm/yyyy'),vat={14},buyvat={15} where ItemCode = '{13}' ",
                              Convert.ToInt32(dr["rol"]), Convert.ToDouble(dr["Rate"]), Convert.ToDouble(dr["DealerRate"]), Convert.ToDouble(dr["NLC"]), dr["MRPEffDate"].ToString(), dr["DPEffDate"].ToString(), dr["NLCEffDate"].ToString(), mrpdat.ToShortDateString(), mrpprevdat.ToShortDateString(), dpdat.ToShortDateString(), dpprevdat.ToShortDateString(), nlcdat.ToShortDateString(), nlcprevdat.ToShortDateString(), Convert.ToString(dr["ItemCode"]), Convert.ToDouble(dr["vat"]), Convert.ToDouble(dr["buyvat"]));

                        manager.ExecuteDataSet(CommandType.Text, dbQry);







                    }
                }
            }

            //sAuditStr = "Bulk product Updation User :" + Username + " for the items " + format(items, ;
            //dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Update Product", DateTime.Now.ToString());
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetRolesMethod(string connection, string UserName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select UserName,Role,Add,Edit,Delete,View from tblUserLockRoles where UserName= '" + UserName + "'";
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetCustReceivedAmount(string connection, string BillNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT BillNo, Amount ,ReceiptNo From tblReceivedAmount where BillNo =" + BillNo + " ");

            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            DataTable dt;
            DataRow drNew;
            DataColumn dc;

            dt = new DataTable();

            dc = new DataColumn("ReceiptNo");
            dt.Columns.Add(dc);

            dc = new DataColumn("BillNo");
            dt.Columns.Add(dc);

            dc = new DataColumn("Amount");
            dt.Columns.Add(dc);

            ds.Tables.Add(dt);

            DataRow dr = ds.Tables[0].NewRow();

            dr["ReceiptNo"] = "0";
            dr["BillNo"] = "0";
            dr["Amount"] = "0";

            if (ds == null || ds.Tables[0].Rows.Count == 0)
            {
                if (ds.Tables[0].Rows.Count == 0)
                    ds.Tables[0].Rows.InsertAt(dr, 0);
            }

            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public void InsertManualAdjustment(string connection, DataSet dsBillNos, DataSet dsold, string usernam)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string dbQry1 = string.Empty;

        string num = string.Empty;
        string sAuditStr = string.Empty;
        try
        {

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();



            //if (dsold != null)
            //{
            //    if (dsold.Tables[0].Rows.Count > 0)
            //    {
            //        foreach (DataRow dr in dsold.Tables[0].Rows)
            //        {
            //            dbQry = string.Format("Delete From tblReceivedAmount Where ReceiptNo = {0}", dr["ReceiptNo"].ToString());

            //            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //        }
            //    }
            //}


            //if (dsBillNos != null)
            //{
            //    foreach (DataRow dr in dsBillNos.Tables[0].Rows)
            //    {
            //        if (dr["BillNo"].ToString() != "0")
            //        {
            //            num = dr["BillNo"].ToString();
            //            dbQry = string.Format("INSERT INTO tblReceivedAmount(ReceiptNo,BillNo,Amount) VALUES({0},{1},{2})", dr["ReceiptNo"].ToString(), dr["BillNo"].ToString(), Convert.ToDouble(dr["Amount"]));
            //            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //        }
            //    }
            //}

            //NewTransNo = int.Parse(num.ToString());

            sAuditStr = "Manual Adjustment added. Record Details : User=" + usernam;

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Add New", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListManual(string connection, string txtSearch, string dropDown)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            manager.Open();

            return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet ListCreditSalesNotCleared(string connection, string CustomerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "Select BillNo,BillDate,CustomerName,Amount,Amount as pay from tblSales inner join tblDayBook on tblSales.JournalID = tblDayBook.TransNo Where PayMode = 3 AND CustomerID=" + CustomerID + " and BillNo not in (select billno from tblreceivedamount) ";

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListCreditSalesCleared(string connection, string CustomerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "Select BillNo,BillDate,CustomerName,Amount,Amount as pay from tblSales inner join tblDayBook on tblSales.JournalID = tblDayBook.TransNo Where PayMode = 3 AND CustomerID=" + CustomerID + " and BillNo in (select billno from tblreceivedamount) ";

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListCreditPurchaseNotCleared(string connection, string SupplierID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "Select Purchaseid, BillNo,BillDate,tblledger.ledgername as CustomerName, Amount,Amount as pay from (tblPurchase inner join tblDayBook on tblPurchase.JournalID = tblDayBook.TransNo) inner join tblledger on tblPurchase.SupplierID = tblledger.ledgerid Where PayMode = 3 AND SupplierID=" + SupplierID + " and BillNo not in (select billno from tblpaymentamount) ";

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListCreditPurchaseNotCleared(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "Select Purchaseid, BillNo,BillDate,tblledger.ledgername as CustomerName,tblledger.ledgerid as Customerid, Amount,Amount as pay from (tblPurchase inner join tblDayBook on tblPurchase.JournalID = tblDayBook.TransNo) inner join tblledger on tblPurchase.SupplierID = tblledger.ledgerid Where PayMode = 3 AND BillNo not in (select billno from tblpaymentamount) order by tblledger.ledgername";

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListCreditPurchaseCleared(string connection, string SupplierID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "Select Purchaseid, BillNo,BillDate,tblledger.ledgername as CustomerName, Amount,Amount as pay from (tblPurchase inner join tblDayBook on tblPurchase.JournalID = tblDayBook.TransNo) inner join tblledger on tblPurchase.SupplierID = tblledger.ledgerid Where PayMode = 3 AND SupplierID=" + SupplierID + " and BillNo in (select billno from tblpaymentamount) ";

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListCreditPurchaseCleared(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "Select Purchaseid, BillNo,BillDate,tblledger.ledgername as CustomerName,tblledger.ledgerid as Customerid, Amount,Amount as pay from (tblPurchase inner join tblDayBook on tblPurchase.JournalID = tblDayBook.TransNo) inner join tblledger on tblPurchase.SupplierID = tblledger.ledgerid Where PayMode = 3 AND BillNo in (select billno from tblpaymentamount) order by tblledger.ledgername";

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void InsertManualAdjustmentPur(out int NewTransNo, string connection, DataSet dsBillNos, DataSet dsold, string usernam)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string dbQry1 = string.Empty;

        string num = string.Empty;
        string sAuditStr = string.Empty;
        try
        {

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();



            if (dsold != null)
            {
                if (dsold.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsold.Tables[0].Rows)
                    {
                        dbQry = string.Format("Delete From tblPaymentAmount Where BillNo = '{0}'", dr["BillNo"].ToString());

                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }
            }


            if (dsBillNos != null)
            {
                foreach (DataRow dr in dsBillNos.Tables[0].Rows)
                {
                    if (dr["BillNo"].ToString() != "0")
                    {
                        num = dr["BillNo"].ToString();
                        dbQry = string.Format("INSERT INTO tblPaymentAmount(paymentno,BillNo,Amount) VALUES({0},'{1}',{2})", 0, dr["BillNo"].ToString(), Convert.ToDouble(dr["Amount"]));
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }
                }
            }

            NewTransNo = int.Parse(num.ToString());

            sAuditStr = "Manual Adjustment added. Record Details : User=" + usernam;

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Add New", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetSuppPaymentAmount(string connection, string BillNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            dbQry.Append("SELECT BillNo, Amount ,paymentno as ReceiptNo From tblPaymentAmount where BillNo ='" + BillNo + "' ");

            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            DataTable dt;
            DataRow drNew;
            DataColumn dc;

            dt = new DataTable();

            dc = new DataColumn("ReceiptNo");
            dt.Columns.Add(dc);

            dc = new DataColumn("BillNo");
            dt.Columns.Add(dc);

            dc = new DataColumn("Amount");
            dt.Columns.Add(dc);

            ds.Tables.Add(dt);

            DataRow dr = ds.Tables[0].NewRow();

            dr["ReceiptNo"] = "0";
            dr["BillNo"] = "0";
            dr["Amount"] = "0";

            if (ds == null || ds.Tables[0].Rows.Count == 0)
            {
                if (ds.Tables[0].Rows.Count == 0)
                    ds.Tables[0].Rows.InsertAt(dr, 0);
            }

            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet GetPayAmountId(string connection, int paymentNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT paymentNo,BillNo, Amount From tblpaymentAmount ");
            dbQry.AppendFormat("Where paymentNo = {0}", paymentNo);

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            DataTable dt = new DataTable();
            DataColumn dc;

            dc = new DataColumn("ID");
            dt.Columns.Add(dc);

            dc = new DataColumn("BillNo");
            dt.Columns.Add(dc);

            dc = new DataColumn("Amount");
            dt.Columns.Add(dc);

            ds.Tables.Add(dt);

            DataRow dr = ds.Tables[0].NewRow();

            dr["ReceiptNo"] = "0";
            dr["BillNo"] = "0";
            dr["Amount"] = "0";

            if (ds == null || ds.Tables[0].Rows.Count == 0)
            {
                if (ds.Tables[0].Rows.Count == 0)
                    ds.Tables[0].Rows.InsertAt(dr, 0);
            }

            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public bool IsChequeNoAlreadyPresent(string connection, string chequeno)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        try
        {
            dbQry = "Select chequeno from tbldaybook where chequeno='" + chequeno + "' ";

            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            return false;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetChequeNoGiven(string connection, string chequeno)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        DataSet ds = new DataSet();

        try
        {
            dbQry = "Select fromchequeno,tochequeno from tblcheque ";

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }


    public int DeleteCommissionProduct(int billno, string itemCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();

        DataSet roleDs = new DataSet();

        string dbQry = string.Empty;
        string sQry = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            dbQry = string.Format("SELECT Qty,ItemCode,RoleID,isRole From tblCommissionItems Where CommissionNo={0} AND itemcode='{1}'", billno, itemCode.Trim());
            DataSet salesDS = (DataSet)manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (salesDS != null)
            {
                if (salesDS.Tables.Count > 0)
                {
                    dbQry = string.Format("Delete From tblCommissionItems Where CommissionNo={0} AND itemcode='{1}'", billno, itemCode.Trim());
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                }
            }
            return -1;
            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet getcommissiondetails1(string sDataSource, DateTime startDate, DateTime endDate, string condtion, string method, string metho)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();


            dbQry.Append("SELECT CommissionNo,Format(Commdate, 'dd/mm/yyyy') As CommDate, ");
            dbQry.Append(" SupplierPayMode,freight,FreightPaymode,LoadUnload,LoadUnLoadPaymode,Comissionvalue,Remarks,subname,salesvalue,purchasevalue FROM tblCommission  ");
            dbQry.Append(" Where Commdate >=#" + startDate.ToString("MM/dd/yyyy") + "# AND Commdate<=#" + endDate.ToString("MM/dd/yyyy") + "# " + condtion + " order by CommissionNo");



            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet getcommissiondetails2(string sDataSource, DateTime startDate, DateTime endDate, string condtion, string method, string metho)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();


            dbQry.Append("SELECT tblCommission.CommissionNo,Format(tblCommission.Commdate, 'dd/mm/yyyy') As CommDate,tblCommissionItems.CustomerName,tblCommissionItems.ItemCode,tblCommissionItems.Qty,tblCommissionItems.rate,tblproductmaster.productname,tblproductmaster.productdesc as brand,tblproductmaster.model, ");
            dbQry.Append(" tblCommissionItems.SellingPayMode,tblCommissionItems.CardNo,tblCommissionItems.BankName,tblCommissionItems.CardNo,tblCommissionItems.OtherCustName,tblCommissionItems.CustomerID,tblCommissionItems.BankID,tblCommission.SupplierPayMode,tblCommission.freight,tblCommission.FreightPaymode,tblCommission.LoadUnload,tblCommission.LoadUnLoadPaymode,tblCommission.Comissionvalue,tblCommission.Remarks,tblCommission.subname,tblCommission.salesvalue,tblCommission.purchasevalue FROM (tblCommission inner join tblCommissionItems on tblCommission.CommissionNo=tblCommissionItems.CommissionNo) inner join tblproductmaster on tblCommissionItems.ItemCode=tblproductmaster.ItemCode");
            dbQry.Append(" Where tblCommission.Commdate >=#" + startDate.ToString("MM/dd/yyyy") + "# AND tblCommission.Commdate<=#" + endDate.ToString("MM/dd/yyyy") + "# " + condtion + " order by tblCommission.CommissionNo");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetCommissionItemsForIdNo(int CommissionNo, int Customerid)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("Select tblCommissionitems.ItemCode,tblCommissionitems.CustomerName,tblCommissionitems.CustomerID,tblCommissionitems.BankName,tblCommissionitems.SellingPaymode,tblCommissionitems.otherCustName,tblCommissionitems.BankID,tblCommissionitems.CardNo,tblProductMaster.ProductName,tblProductMaster.ProductDesc,tblCommissionitems.Rate,tblCommissionitems.Qty, ");
            dbQry.Append("tblCommissionitems.CommissionNo,tblCommissionitems.SlNo,tblCommissionitems.RoleID,tblCommissionitems.isRole,tblProductMaster.Model FROM tblCommissionitems INNER JOIN tblProductmaster ON tblCommissionitems.itemCode = tblProductMaster.itemCode ");
            dbQry.Append(" Where tblCommissionitems.CommissionNo = " + CommissionNo + " and tblCommissionitems.CustomerID = " + Customerid);
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetProductSalesBillVarIncl(int billno, string itemcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();

            dbQry.Append("SELECT itemCode,Sum(Qty) As Quantity,rate,Sum((qty*Rate) - ((discount/100) * qty*rate)) As SalesDiscount,");
            dbQry.Append("vatamount, totalmrp, ");
            dbQry.Append("Sum( (Qty * Rate) - ((discount/100) * Qty * Rate) + ((CST/100) * ((Qty * Rate) - ((discount/100) * Qty * Rate)))) As SumCST FROM tblSalesItems");
            dbQry.Append(" Group By itemcode,totalmrp,billno,rate,vatamount having billno=" + billno + " and itemcode='" + itemcode + "'");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet GetPurchaseForpurchaseId(int purchaseID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                /*Start Purchase Loading / Unloading Freight Change - March 16*/
                dbQry.Append("SELECT tblPurchase.PurchaseId,tblPurchase.Billno,tblPurchase.DeliveryNote,tblPurchase.totalamt, tblPurchase.Billdate,tblPurchase.InvoiceNo,tblPurchase.Invoicedate,tblPurchase.Paymode,tblPurchase.InternalTransfer,tblPurchase.SupplierID,tblDaybook.Chequeno,Creditor.LedgerID As CreditorID,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.TransNo,tblDayBook.narration,tblPurchase.JournalID,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason,tblPurchase.LoadUnload,tblPurchase.discamount,tblPurchase.discper,tblPurchase.TotalWORndOff,tblPurchase.dcbillno,tblpurchase.narration2,tblPurchase.Freight,IIF(tblPurchase.BilitID IS NULL,0,tblPurchase.BilitID) AS BilitID ");
                /*Start Purchase Loading / Unloading Freight Change - March 16*/
                dbQry.Append(" FROM (((tblDayBook  INNER JOIN  tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID))");
                dbQry.Append(" Where tblPurchase.purchaseID=" + purchaseID + " AND tblPurchase.InvoiceDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ORDER BY tblPurchase.InvoiceDate Desc");
            }
            else
            {
                /*Start Purchase Loading / Unloading Freight Change - March 16*/
                dbQry.Append("SELECT tblPurchase.PurchaseId,tblPurchase.Billno,tblPurchase.DeliveryNote,tblPurchase.totalamt,tblPurchase.Billdate,tblPurchase.InvoiceNo,tblPurchase.Invoicedate,tblPurchase.Paymode,tblPurchase.InternalTransfer,tblPurchase.SupplierID,tblDaybook.Chequeno,tblDayBook.TransNo,Creditor.LedgerID As CreditorID,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.narration,tblPurchase.JournalID,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason,tblPurchase.LoadUnload,tblPurchase.discamount,tblPurchase.discper,tblPurchase.TotalWORndOff,tblPurchase.dcbillno,tblpurchase.narration2,tblPurchase.Freight,IIF(tblPurchase.BilitID IS NULL,0,tblPurchase.BilitID) AS BilitID ");
                /*Start Purchase Loading / Unloading Freight Change - March 16*/
                dbQry.Append(" FROM (((tblDayBook  INNER JOIN  tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID))");
                dbQry.Append("  ORDER BY tblPurchase.InvoiceDate Desc");
            }
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetSalesForIdMulti(int Billno, string Multipay)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;
        try
        {
            manager.Open();


            dbQry.Append("SELECT tblDayBook.Transno,tblSales.Billno,tblSales.DeliveryNote,tblSales.InternalTransfer,tblSales.SeriesID,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerID,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerID As DebtorID, Debtor.LedgerName As Debtor,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,OtherCusName, Customer.ContactName, MultiPayment,tblSales.CustomerAddress2,tblSales.CustomerAddress3, tblSales.despatchedfrom, tblSales.manualNo,tblSales.manualsales, tblSales.normalsales");
            dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID) INNER JOIN tblLedger Customer ON tblSales.CustomerID = Customer.LedgerID))");
            dbQry.Append(" Where tblSales.Billno=" + Billno + " AND tblSales.Multipayment = '" + Multipay + "' ORDER BY tblSales.BillDate Desc,tblSales.Billno Desc");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public bool IsLedgerFound(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        try
        {

            dbQry = string.Format("Select ledgername from tblledger Where ledgername='CreditDebitNoteId' ");

            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        catch (Exception ex)
        {
            return false;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListSundryDebtorsDc(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName='Sundry Debtors' and tblLedger.dc ='YES' Order By ledgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListSundryDebtorsExcept(string connection, string branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            if (branchcode != "")
            {
                //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}') Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors");
                dbQry = string.Format("select LedgerId, LedgerName, Mobile from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where BranchCode='" + branchcode + "' and tblGroups.GroupName='Sundry Debtors' and tblLedger.dc ='NO' and tblLedger.Inttrans ='NO' Order By ledgerName");
            }
            else
            {
                dbQry = string.Format("select LedgerId, LedgerName, Mobile from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName='Sundry Debtors' and tblLedger.dc ='NO' and tblLedger.Inttrans ='NO' Order By ledgerName");
            }
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListSundryDebtorsExceptIsActive(string connection, string branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}') Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors");
            dbQry = string.Format("select LedgerId, LedgerName, Mobile,BranchCode from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where BranchCode='" + branchcode + "' and tblGroups.GroupName='Sundry Debtors' and tblLedger.dc ='NO' and tblLedger.Inttrans ='NO' and tblLedger.Unuse = 'YES' Order By ledgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListSundryCreditorsDc(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where GroupName = 'Sundry Creditors' and tblLedger.dc ='YES' ORDER By LedgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListSundryCreditorsExcept(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where GroupName = 'Sundry Creditors' and tblLedger.dc ='NO' and tblLedger.Inttrans ='NO' ORDER By LedgerName");


            dbQry = string.Format("select LedgerId, LedgerName, Mobile from (tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID) inner join tblAccHeading on tblAccHeading.HeadingId = tblGroups.HeadingId Where Heading = 'Current Liabilities' and tblLedger.dc ='NO' and tblLedger.Inttrans ='NO' ORDER By LedgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListSundryCreditorsExceptIsActive(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where GroupName = 'Sundry Creditors' and tblLedger.dc ='NO' and tblLedger.Inttrans ='NO' ORDER By LedgerName");


            dbQry = string.Format("select LedgerId, LedgerName, Mobile from (tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID) inner join tblAccHeading on tblAccHeading.HeadingId = tblGroups.HeadingId Where Heading = 'Current Liabilities' and tblLedger.dc ='NO' and tblLedger.Inttrans ='NO' and tblLedger.Unuse = 'YES' ORDER By LedgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public DataSet getSalesreport(DateTime startDate, DateTime endDate, string Category, string brand, string product)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        if (Category == "All")
        {
            if (brand == "All")
            {
                if (product == "All")
                {
                    dbQry = ("SELECT tblProductMaster.productdesc as brand,tblProductMaster.productname,tblProductMaster.model,(((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount,tblSalesItems.Rate,tblSalesItems.Qty,tblCategories.categoryname,tblSalesItems.Itemcode,tblSales.Billno,tblSales.billdate,tblSales.Customername,tblSalesItems.Discount, tblSalesItems.Vat,tblSalesITems.cst,tblSales.paymode FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger ON tblSales.CustomerId = tblLedger.LedgerID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# order by tblsales.billno,productdesc,productname");
                }
                else
                {
                    dbQry = ("SELECT tblProductMaster.productdesc as brand,tblProductMaster.productname,tblProductMaster.model,(((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount,tblSalesItems.Rate,tblSalesItems.Qty,tblCategories.categoryname FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger ON tblSales.CustomerId = tblLedger.LedgerID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblProductMaster.productname = '" + product + "' order by productdesc,productname");
                }
            }
            else
            {
                if (product == "All")
                {
                    dbQry = ("SELECT tblProductMaster.productdesc as brand,tblProductMaster.productname,tblProductMaster.model,tblSalesItems.Rate,(((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount,tblSalesItems.Qty,tblCategories.categoryname FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger ON tblSales.CustomerId = tblLedger.LedgerID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblProductMaster.productdesc = '" + brand + "' order by productdesc,productname");
                }
                else
                {
                    dbQry = ("SELECT tblProductMaster.productdesc as brand,tblProductMaster.productname,tblProductMaster.model,tblSalesItems.Rate,tblSalesItems.Qty,(((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount,tblCategories.categoryname FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger ON tblSales.CustomerId = tblLedger.LedgerID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblProductMaster.productdesc = '" + brand + "' and tblProductMaster.productname = '" + product + "' order by productdesc,productname");
                }
            }
        }
        else
        {
            if (brand == "All")
            {
                if (product == "All")
                {
                    dbQry = ("SELECT tblProductMaster.productdesc as brand,tblProductMaster.productname,tblProductMaster.model,tblSalesItems.Rate,(((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount,tblSalesItems.Qty,tblCategories.categoryname FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger ON tblSales.CustomerId = tblLedger.LedgerID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblCategories.categoryname = '" + Category + "' order by productdesc,productname");
                }
                else
                {
                    dbQry = ("SELECT tblProductMaster.productdesc as brand,tblProductMaster.productname,tblProductMaster.model,(((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount,tblSalesItems.Rate,tblSalesItems.Qty,tblCategories.categoryname FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger ON tblSales.CustomerId = tblLedger.LedgerID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "#  and tblCategories.categoryname = '" + Category + "' and tblProductMaster.productname = '" + product + "' order by productdesc,productname");
                }
            }
            else
            {
                if (product == "All")
                {
                    dbQry = ("SELECT tblProductMaster.productdesc as brand,tblProductMaster.productname,tblProductMaster.model,(((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount,tblSalesItems.Rate,tblSalesItems.Qty,tblCategories.categoryname FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger ON tblSales.CustomerId = tblLedger.LedgerID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblCategories.categoryname = '" + Category + "' and tblProductMaster.productdesc = '" + brand + "' order by productdesc,productname");
                }
                else
                {
                    dbQry = ("SELECT tblProductMaster.productdesc as brand,tblProductMaster.productname,(((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount,tblProductMaster.model,tblSalesItems.Rate,tblSalesItems.Qty,tblCategories.categoryname FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger ON tblSales.CustomerId = tblLedger.LedgerID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblCategories.categoryname = '" + Category + "' and tblProductMaster.productdesc = '" + brand + "' and tblProductMaster.productname = '" + product + "' order by productdesc,productname");
                }
            }
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public bool CheckIfLedgerNameUsedDC(int LedgerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();

            dbQry = "SELECT Count(*) FROM tblSales inner join tblledger on tblSales.CustomerID=tblledger.ledgerid Where tblledger.dc = 'YES' and tblSales.CustomerID =" + LedgerID.ToString();

            object objSalesLedger = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (objSalesLedger != null && objSalesLedger != DBNull.Value)
            {
                if (objSalesLedger.ToString() != "")
                    qty = qty + (int)objSalesLedger;
            }

            dbQry = "SELECT Count(*) FROM tblPurchase inner join tblledger on tblPurchase.SupplierID=tblledger.ledgerid Where tblledger.dc = 'YES' and tblPurchase.SupplierID =" + LedgerID.ToString();

            object objPurchaseLedger = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (objPurchaseLedger != null && objPurchaseLedger != DBNull.Value)
            {
                if (objPurchaseLedger.ToString() != "")
                    qty = qty + (int)objPurchaseLedger;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool CheckIfLedgerNameUsedInt(int LedgerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();

            dbQry = "SELECT Count(*) FROM tblSales inner join tblledger on tblSales.CustomerID=tblledger.ledgerid Where tblledger.inttrans = 'YES' and tblSales.CustomerID =" + LedgerID.ToString();

            object objSalesLedger = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (objSalesLedger != null && objSalesLedger != DBNull.Value)
            {
                if (objSalesLedger.ToString() != "")
                    qty = qty + (int)objSalesLedger;
            }

            dbQry = "SELECT Count(*) FROM tblPurchase inner join tblledger on tblPurchase.SupplierID=tblledger.ledgerid Where tblledger.inttrans = 'YES' and tblPurchase.SupplierID =" + LedgerID.ToString();

            object objPurchaseLedger = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (objPurchaseLedger != null && objPurchaseLedger != DBNull.Value)
            {
                if (objPurchaseLedger.ToString() != "")
                    qty = qty + (int)objPurchaseLedger;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListProdcutName(string brand)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string obsolute = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsd = new DataSet();
        try
        {
            manager.Open();

            if (brand == "All")
            {
                dbQry = "SELECT Distinct ProductName FROM tblProductMaster Order By ProductName Asc";
            }
            else
            {
                dbQry = "SELECT Distinct ProductName FROM tblProductMaster Where ProductDesc='" + brand + "' Order By ProductName Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet getbankreconciliation1(int iLedgerID, DateTime dtSdate, string sDataSource, string usernam)
    {
        double dDebitAmt = 0;
        double dCreditAmt = 0;
        string sTranDate = string.Empty;
        string iQry = "";
        string sParticulars = "";
        string sParticulars1 = "";
        string sVoucherType = string.Empty;
        string sQry = string.Empty;
        string pQry = string.Empty;
        string pgQry = string.Empty;
        string sConStr = string.Empty;
        string sChequeNo = string.Empty;

        SqlConnection oleConn, oleSubConn;
        int sno = 0;
        double samount = 0;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        DataSet dsChildQry;
        string sOrder;
        int sDebtorID = 0;
        int sCreditorID = 0;

        string sBranchCode = string.Empty;

        sConStr = sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;

        //sQry = "SELECT tbldaybook.TransDate,tbldaybook.DebtorID,tbldaybook.CreditorID,tbldaybook.Amount,tbldaybook.Narration,tbldaybook.VoucherType FROM tbldaybook inner join tblledger on tbldaybook.creditorid = tblledger.ledgerid or  tbldaybook.debtorid = tblledger.ledgerid where tblledger.groupid=3 AND (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) Order by TransDate ";
        sQry = "SELECT TransNo,TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,chequeNo,RefNo,BranchCode FROM tblDayBook WHERE (DebtorID=" + iLedgerID + " OR CreditorID=" + iLedgerID + ") AND TransDate ='" + dtSdate.ToString("yyyy-MM-dd") + "' and Transno not in (select transno from tblbankrecon) Order by TransDate ";

        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsParentQry = new DataSet();
        oleAdp.Fill(dsParentQry);

        DataSet ds;
        DataTable dt;
        DataRow drNew;
        DataColumn dc;

        string date1 = string.Empty;
        string sNarration = string.Empty;

        ds = new DataSet();
        dt = new DataTable();
        dc = new DataColumn("TransNo");
        dt.Columns.Add(dc);

        dc = new DataColumn("TransDate");
        dt.Columns.Add(dc);

        dc = new DataColumn("Debtor");
        dt.Columns.Add(dc);

        dc = new DataColumn("DebtorID");
        dt.Columns.Add(dc);

        dc = new DataColumn("Creditor");
        dt.Columns.Add(dc);

        dc = new DataColumn("CreditorID");
        dt.Columns.Add(dc);

        dc = new DataColumn("VoucherType");
        dt.Columns.Add(dc);

        dc = new DataColumn("Narration");
        dt.Columns.Add(dc);

        dc = new DataColumn("Amount");
        dt.Columns.Add(dc);

        dc = new DataColumn("ChequeNo");
        dt.Columns.Add(dc);

        dc = new DataColumn("ReconcilatedBy");
        dt.Columns.Add(dc);

        dc = new DataColumn("Reconcilateddate");
        dt.Columns.Add(dc);

        dc = new DataColumn("Result");
        dt.Columns.Add(dc);

        dc = new DataColumn("Status");
        dt.Columns.Add(dc);

        dc = new DataColumn("BranchCode");
        dt.Columns.Add(dc);

        ds.Tables.Add(dt);

        if (dsParentQry.Tables[0].Rows.Count == 0)
        {
            //drNew = dt.NewRow();
            //drNew["TransNo"] = 0;
            //drNew["Date"] = string.Empty;
            //drNew["Debtor"] = string.Empty;
            //drNew["Creditor"] = string.Empty;
            //drNew["DebtorID"] = 0;
            //drNew["CreditorID"] = 0;
            //drNew["Amount"] = 0;
            //drNew["Narration"] = string.Empty;
            //drNew["ChequeNo"] = string.Empty;
            //drNew["VoucherType"] = string.Empty;
            //drNew["ReconcilatedBy"] = string.Empty;
            //drNew["Reconcilateddate"] = string.Empty;
            //ds.Tables[0].Rows.Add(drNew);
        }
        else
        {
            date1 = DateTime.Now.ToShortDateString();
            foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
            {
                if (drParentQry["TransDate"] != null)
                {
                    sTranDate = Convert.ToDateTime(drParentQry["TransDate"]).ToString("dd-MM-yyyy");
                }
                if (drParentQry["VoucherType"] != null)
                {
                    sVoucherType = Convert.ToString(drParentQry["VoucherType"].ToString());
                }
                if (drParentQry["Narration"] != null)
                {
                    sNarration = Convert.ToString(drParentQry["Narration"].ToString());
                }
                if (drParentQry["ChequeNo"] != null)
                {
                    sChequeNo = Convert.ToString(drParentQry["ChequeNo"].ToString());
                }

                if (drParentQry["BranchCode"] != null)
                {
                    sBranchCode = Convert.ToString(drParentQry["BranchCode"].ToString());
                }


                if (drParentQry["TransNo"] != null)
                {
                    sno = Convert.ToInt32(drParentQry["TransNo"]);
                }
                if (drParentQry["Amount"] != null)
                {
                    samount = Convert.ToDouble(drParentQry["Amount"]);
                }
                if (drParentQry["DebtorID"] != null)
                {
                    sDebtorID = Convert.ToInt32(drParentQry["DebtorID"]);
                }
                if (drParentQry["CreditorID"] != null)
                {
                    sCreditorID = Convert.ToInt32(drParentQry["CreditorID"]);
                }
                if (drParentQry["DebtorID"] != null)
                {
                    pQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drParentQry["DebtorID"].ToString());
                }
                if (drParentQry["CreditorID"] != null)
                {
                    pgQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drParentQry["CreditorID"].ToString());
                }

                if (pQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(sConStr));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            sParticulars = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }

                if (pgQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pgQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(sConStr));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            sParticulars1 = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }

                drNew = dt.NewRow();
                drNew["TransNo"] = sno;
                drNew["TransDate"] = sTranDate;
                drNew["Debtor"] = sParticulars;
                drNew["Creditor"] = sParticulars1;
                drNew["DebtorID"] = sDebtorID;
                drNew["CreditorID"] = sCreditorID;
                drNew["Narration"] = sNarration;
                drNew["VoucherType"] = sVoucherType;
                drNew["ChequeNo"] = sChequeNo;
                drNew["Amount"] = samount;
                drNew["ReconcilatedBy"] = usernam;
                drNew["Reconcilateddate"] = "";
                drNew["Result"] = "";
                drNew["Status"] = "NO";
                drNew["BranchCode"] = sBranchCode;

                ds.Tables[0].Rows.Add(drNew);

            }
        }

        oleConn.Close();

        if (ds.Tables[0].Rows.Count > 0)
            return ds;
        else
            return null;
    }

    public DataSet ListModelsForBrandOnlyStock(string brand, string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsd = new DataSet();
        string obsolute = string.Empty;

        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }
            dbQry2 = "SELECT KeyValue From tblSettings WHERE key='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
                    dbQry = "SELECT Distinct Model FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " AND ProductDesc ='" + brand + "' and tblProductMaster.IsActive = 'YES' and tblBrand.IsActive = 'YES' and stock > 0 Order By Model Asc";
                }
                else
                {
                    dbQry = "SELECT Distinct Model FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductDesc ='" + brand + "' and stock > 0 Order By Model Asc";
                }
            }
            else
            {
                dbQry = "SELECT Distinct Model FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductDesc ='" + brand + "' and stock > 0 Order By Model Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet ListProdcutsForBrandOnlyStock(string brand, string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        string obsolute = string.Empty;
        DataSet dsd = new DataSet();

        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }

            dbQry2 = "SELECT KeyValue From tblSettings WHERE key='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    dbQry = "SELECT ItemCode FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " AND ProductDesc='" + brand + "'  and tblBrand.IsActive='YES' and tblProductMaster.IsActive='YES' and stock > 0 Order By ItemCode Asc";
                }
                else
                {
                    dbQry = "SELECT ItemCode FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductDesc='" + brand + "' and stock > 0 Order By ItemCode Asc";
                }
            }
            else
            {
                dbQry = "SELECT ItemCode FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductDesc='" + brand + "' and stock > 0 Order By ItemCode Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet ListProdcutNameForBrandOnlyStock(string brand, string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string obsolute = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsd = new DataSet();
        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }

            dbQry2 = "SELECT KeyValue From tblSettings WHERE key='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
                    dbQry = "SELECT Distinct ProductName FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " AND ProductDesc='" + brand + "' and tblBrand.IsActive = 'YES' and tblProductMaster.IsActive = 'YES' and stock > 0  Order By ProductName Asc";
                }
                else
                {
                    dbQry = "SELECT Distinct ProductName FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductDesc='" + brand + "' and stock > 0  Order By ProductName Asc";
                }
            }
            else
            {
                dbQry = "SELECT Distinct ProductName FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductDesc='" + brand + "' and stock > 0  Order By ProductName Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet ListProdcutsForModelOnlyStock(string model, string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        string obsolute = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;
        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }

            dbQry2 = "SELECT KeyValue From tblSettings WHERE key='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    dbQry = "SELECT Distinct ItemCode FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " AND Model='" + model + "' and tblBrand.IsActive='YES' and tblProductMaster.IsActive='YES' and stock > 0  Order By ItemCode Asc";
                }
                else
                {
                    dbQry = "SELECT Distinct ItemCode FROM tblProductMaster Where CategoryID=" + CategoryID + " AND Model='" + model + "' and stock > 0  Order By ItemCode Asc";
                }
            }
            else
            {
                dbQry = "SELECT Distinct ItemCode FROM tblProductMaster Where CategoryID=" + CategoryID + " AND Model='" + model + "' and stock > 0  Order By ItemCode Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet ListBrandsForModelOnlyStock(string Model, string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;

        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;
        string obsolute = string.Empty;
        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }
            dbQry2 = "SELECT KeyValue From tblSettings WHERE key='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
                    dbQry = "SELECT Distinct ProductDesc FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " AND Model='" + Model + "' and tblBrand.IsActive = 'YES' and tblProductMaster.IsActive = 'YES' and stock > 0  Order By ProductDesc Asc";
                }
                else
                {
                    dbQry = "SELECT Distinct ProductDesc FROM tblProductMaster Where CategoryID=" + CategoryID + " AND Model='" + Model + "' and stock > 0   Order By ProductDesc Asc";
                }
            }
            else
            {
                dbQry = "SELECT Distinct ProductDesc FROM tblProductMaster Where CategoryID=" + CategoryID + " AND Model='" + Model + "' and stock > 0   Order By ProductDesc Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListProductNameForModelOnlyStock(string Model, string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;
        string obsolute = string.Empty;

        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }

            dbQry2 = "SELECT KeyValue From tblSettings WHERE key='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
                    dbQry = "SELECT Distinct ProductName FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " AND Model='" + Model + "' and tblProductMaster.IsActive = 'YES' and tblBrand.IsActive = 'YES' and stock > 0  Order By ProductName Asc";
                }
                else
                {
                    dbQry = "SELECT Distinct ProductName FROM tblProductMaster Where CategoryID=" + CategoryID + " AND Model='" + Model + "' and stock > 0  Order By ProductName Asc";
                }
            }
            else
            {
                dbQry = "SELECT Distinct ProductName FROM tblProductMaster Where CategoryID=" + CategoryID + " AND Model='" + Model + "' and stock > 0  Order By ProductName Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet ListProdcutsForProductNameOnlyStock(string prodName, string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;
        string obsolute = string.Empty;
        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }

            dbQry2 = "SELECT KeyValue From tblSettings WHERE key='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
                    dbQry = "SELECT ItemCode FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " AND ProductName='" + prodName + "' and tblBrand.IsActive = 'YES' and tblProductMaster.IsActive = 'YES' and stock > 0  Order By ItemCode Asc";
                }
                else
                {
                    dbQry = "SELECT ItemCode FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductName='" + prodName + "' and stock > 0 Order By ItemCode Asc";
                }
            }
            else
            {
                dbQry = "SELECT ItemCode FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductName='" + prodName + "' and stock > 0 Order By ItemCode Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListBrandsForProductNameOnlyStock(string prodName, string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        string obsolute = string.Empty;
        DataSet dsd = new DataSet();

        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }
            dbQry2 = "SELECT KeyValue From tblSettings WHERE key='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
                    dbQry = "SELECT Distinct ProductDesc FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " AND ProductName='" + prodName + "' and tblBrand.IsActive = 'YES' and tblProductMaster.IsActive = 'YES' and stock > 0 Order By ProductDesc Asc";
                }
                else
                {
                    dbQry = "SELECT Distinct ProductDesc FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductName='" + prodName + "' and stock > 0 Order By ProductDesc Asc";
                }
            }
            else
            {
                dbQry = "SELECT Distinct ProductDesc FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductName='" + prodName + "' and stock > 0 Order By ProductDesc Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListModelsForProductNameOnlyStock(string prodName, string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsd = new DataSet();
        string obsolute = string.Empty;

        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }

            dbQry2 = "SELECT KeyValue From tblSettings WHERE key='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
                    dbQry = "SELECT Distinct Model FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName)  Where CategoryID=" + CategoryID + " AND ProductName='" + prodName + "' and tblProductMaster.IsActive = 'YES' and tblBrand.IsActive = 'YES' and stock > 0 Order By Model Asc";
                }
                else
                {
                    dbQry = "SELECT Distinct Model FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductName='" + prodName + "' and stock > 0 Order By Model Asc";
                }
            }
            else
            {
                dbQry = "SELECT Distinct Model FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductName='" + prodName + "' and stock > 0 Order By Model Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet ListProductsForCategoryIDOnlyStock(string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;
        string obsolute = string.Empty;

        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }
            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
                    dbQry = "SELECT Distinct ItemCode FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " and tblBrand.IsActive = 'YES' and tblProductMaster.IsActive = 'YES' and stock > 0 Order By ItemCode Asc";
                }
                else
                {
                    dbQry = "SELECT Distinct ItemCode FROM tblProductMaster Where CategoryID=" + CategoryID + " and stock > 0 Order By ItemCode Asc";
                }
            }
            else
            {
                dbQry = "SELECT Distinct ItemCode FROM tblProductMaster Where CategoryID=" + CategoryID + " and stock > 0 Order By ItemCode Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListBrandsForCategoryIDOnlyStock(string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;
        string obsolute = string.Empty;
        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }
            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
                    dbQry = "SELECT Distinct ProductDesc FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " and tblBrand.IsActive = 'YES' and tblProductMaster.IsActive = 'YES' and stock > 0 Order By ProductDesc Asc";
                }
                else
                {
                    dbQry = "SELECT Distinct ProductDesc FROM tblProductMaster Where CategoryID=" + CategoryID + " and stock > 0  Order By ProductDesc Asc";
                }
            }
            else
            {
                dbQry = "SELECT Distinct ProductDesc FROM tblProductMaster Where CategoryID=" + CategoryID + " and stock > 0  Order By ProductDesc Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListProdNameForCategoryIDOnlyStock(string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;
        string obsolute = string.Empty;
        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }

            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
                    dbQry = "SELECT Distinct ProductName FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + " and tblBrand.IsActive='YES' and tblProductMaster.IsActive='YES' and stock > 0 Order By ProductName Asc";
                }
                else
                {
                    dbQry = "SELECT Distinct ProductName FROM tblProductMaster Where CategoryID=" + CategoryID + " and stock > 0 Order By ProductName Asc";
                }
            }
            else
            {
                dbQry = "SELECT Distinct ProductName FROM tblProductMaster Where CategoryID=" + CategoryID + " and stock > 0 Order By ProductName Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListModelsForCategoryIDOnlyStock(string CategoryID, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsd = new DataSet();
        string obsolute = string.Empty;

        try
        {
            manager.Open();

            int block = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT ReorderLevel FROM tblObsoluteConfig ");
            if ((retVal != null) && (retVal != DBNull.Value))
            {
                block = int.Parse(retVal.ToString());
            }
            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    //dbQry = "select ItemCode,ProductName from tblProductMaster  Order By ProductName";
                    dbQry = "SELECT Distinct Model FROM (tblProductMaster inner join tblBrand on tblProductMaster.ProductDesc = tblBrand.BrandName) Where CategoryID=" + CategoryID + "  and tblProductMaster.IsActive = 'YES' and tblBrand.IsActive = 'YES' and stock > 0 Order By Model Asc";
                }
                else
                {
                    dbQry = "SELECT Distinct Model FROM tblProductMaster Where CategoryID=" + CategoryID + " and stock > 0  Order By Model Asc";
                }
            }
            else
            {
                dbQry = "SELECT Distinct Model FROM tblProductMaster Where CategoryID=" + CategoryID + " and stock > 0  Order By Model Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet GetSalesList(string connection, string txtSearch, string dropDown, string branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();


        if (dropDown == "BillDate" || dropDown == "BillNo" || dropDown == "TransNo")
            txtSearch = txtSearch;
        else
            txtSearch = "%" + txtSearch + "%";

        string dbQry2 = string.Empty;

        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            //if ((retVal != null) && (retVal != DBNull.Value))
            //{
            //    dbQry.Append("SELECT tblDayBook.Transno,tblSales.Billno,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,MultiPayment,despatchedfrom,manualNo,tblSales.narration2 ");
            //    dbQry.Append(" FROM (((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID )) Where tblSales.BillDate > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ");
            //}
            //else
            //{
            //    dbQry.Append("SELECT tblDayBook.Transno,tblSales.Billno,Format(tblSales.Billdate, 'dd/mm/yyyy') As BillDate,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerName As Debtor,tblsales.executive,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,MultiPayment,despatchedfrom,manualNo,tblSales.narration2 ");
            //    dbQry.Append(" FROM (((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID )) Where 1=1 ");
            //}

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                dbQry.Append("SELECT tblDayBook.Transno,tblSales.Billno,Format(tblSales.Billdate, 'dd/MM/yyyy') As BillDate,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerName As Debtor,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,MultiPayment,despatchedfrom,manualNo,tblSales.narration2,tblSales.BranchCode ");
                dbQry.Append(" FROM (((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID )) Where tblSales.BillDate > " + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + " ");
            }
            else
            {
                dbQry.Append("SELECT tblDayBook.Transno,tblSales.Billno,Format(tblSales.Billdate, 'dd/MM/yyyy') As BillDate,tblSales.CustomerName,tblSales.CustomerAddress,tblSales.CustomerContacts,tblSales.Paymode,tblDayBook.Amount,tblDayBook.narration,tblDayBook.CreditCardNo,tblSales.JournalID,Debtor.LedgerName As Debtor,tblSales.purchasereturn,tblSales.purchasereturnreason,freight,LoadUnload,MultiPayment,despatchedfrom,manualNo,tblSales.narration2,tblSales.BranchCode ");
                dbQry.Append(" FROM (((tblDayBook  INNER JOIN  tblSales ON tblSales.JournalID = tblDayBook.Transno)INNER JOIN tblLedger Debtor ON tblDaybook.DebtorID = Debtor.LedgerID )) Where 1=1 ");
            }

            if (txtSearch == null || txtSearch == "")
            {
                dbQry.AppendFormat(" AND 1=1 ");
            }
            else
            {
                if (dropDown == "BillNo" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblSales.Billno = {0} ", txtSearch);
                }
                else if (dropDown == "TransNo" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblDayBook.TransNo = {0} ", txtSearch);
                }
                else if (dropDown == "BillDate" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND Format([tblSales.BillDate], 'dd/MM/yyyy') = '{0}' ", Convert.ToDateTime(txtSearch).ToShortDateString());
                }
                else if (dropDown == "CustomerName" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblSales.CustomerName like '{0}' ", txtSearch);
                }
                else if (dropDown == "0" && txtSearch != "%%")
                {
                    //dbQry.AppendFormat(" AND 1=1 ");
                    dbQry.AppendFormat("AND tblSales.Billno = {0} ", txtSearch + "AND tblSales.CustomerName like '{0}' ", txtSearch + "AND 1=1");
                }
                else if (branchcode != "All")
                {
                    dbQry.AppendFormat("AND tblSales.BranchCode='" + branchcode + "' AND 1=1 ");
                }
                else
                {
                    dbQry.AppendFormat(" AND 1=1 ");
                }
            }

            dbQry.Append("ORDER BY tblSales.BillDate Desc,tblSales.Billno Desc");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public bool IsRateModified(string connection, double price, DateTime datetime, string itemcode, string PriceName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        DataSet ds = new DataSet();
        try
        {
            manager.Open();

            dbQry = "Select price,EffDate from tblproductprices where price <> " + price + " and itemcode= '" + itemcode + "' and PriceName='" + PriceName + "' ";
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
            {
                DateTime lasttime = DateTime.Parse(ds.Tables[0].Rows[0]["EffDate"].ToString());
                if (lasttime == datetime)
                    return false;
                else
                    return true;
            }
            else
            {
                return true;
            }
        }
        catch (Exception ex)
        {
            return true;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool IsRateDateModified(string connection, double rate, DateTime datetime, string itemcode, string PriceName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        DataSet ds = new DataSet();
        try
        {
            manager.Open();

            dbQry = "Select Price,EffDate from tblproductprices where EffDate <> '" + datetime.ToString("yyyy-MM-dd") + "' and itemcode= '" + itemcode + "' and PriceName='" + PriceName + "' ";
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
            {
                double oldrate = Convert.ToDouble(ds.Tables[0].Rows[0]["Price"]);
                if (oldrate == rate)
                    return false;
                else
                    return true;
            }
            else
            {
                return true;
            }
        }
        catch (Exception ex)
        {
            return true;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool IsRateOldDateModified(string connection, double price, DateTime datetime, string itemcode, string PriceName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        DataSet ds = new DataSet();
        try
        {
            manager.Open();

            dbQry = "Select EffDate from tblproductprices where price <> " + price + " and itemcode= '" + itemcode + "' and PriceName='" + PriceName + "'";
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
            {
                DateTime lasttime = DateTime.Parse(ds.Tables[0].Rows[0]["EffDate"].ToString());
                if (lasttime > datetime)
                    return false;
                else
                    return true;
            }
            else
            {
                return true;
            }
        }
        catch (Exception ex)
        {
            return true;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool IsDPRateOldDateModified(string connection, double rate, string datetime, string itemcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        DataSet ds = new DataSet();
        try
        {
            manager.Open();

            dbQry = "Select DPEffDate from tblproductmaster where dealerrate <> " + rate + " and itemcode= '" + itemcode + "' ";
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
            {
                string lasttime = ds.Tables[0].Rows[0]["DPEffDate"].ToString();
                if (Convert.ToDateTime(lasttime) > Convert.ToDateTime(datetime))
                    return false;
                else
                    return true;
            }
            else
            {
                return true;
            }
        }
        catch (Exception ex)
        {
            return true;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool IsNLCRateOldDateModified(string connection, double rate, DateTime datetime, string itemcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        DataSet ds = new DataSet();
        try
        {
            manager.Open();

            dbQry = "Select NLCEffDate from tblproductmaster  where nlc <> " + rate + " and itemcode= '" + itemcode + "' ";
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
            {
                DateTime lasttime = DateTime.Parse(ds.Tables[0].Rows[0]["NLCEffDate"].ToString());
                if (lasttime > datetime)
                    return false;
                else
                    return true;
            }
            else
            {
                return true;
            }
        }
        catch (Exception ex)
        {
            return true;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool ChequeLeafUsed(int ChequeBookID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;

        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string FChequeNo = string.Empty;
        string TChequeNo = string.Empty;

        try
        {
            manager.Open();

            dbQry = "SELECT FromChequeNo,ToChequeNo FROM tblcheque Where ChequeBookID =" + ChequeBookID + " ";

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dd in ds.Tables[0].Rows)
                {
                    FChequeNo = dd["FromChequeNo"].ToString();
                    TChequeNo = dd["ToChequeNo"].ToString();
                }
            }

            dbQry = "SELECT Count(*) FROM tblDayBook Where ChequeNo >='" + FChequeNo.ToString() + "' And ChequeNo <='" + TChequeNo.ToString() + "' ";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                if (qtyObj.ToString() != "")
                    qty = qty + (int)qtyObj;
            }

            if (qty > 0)
                return true;
            else
                return false;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }


    public bool ChequeDamageUsed(int ChequeBookID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;

        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string FChequeNo = string.Empty;
        string TChequeNo = string.Empty;
        //int BankID = 0;

        try
        {
            int bankid = 0;
            manager.Open();

            dbQry = "SELECT FromChequeNo,ToChequeNo,BankID FROM tblcheque Where ChequeBookID =" + ChequeBookID + " ";

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            // if (ds.Tables[0].Rows.Count > 0)


            //BankID = int.Parse(ddBankName.SelectedValue);

            //BankName = ddBankName.SelectedItem.Text;
            //string ddBankID = ddBankName.SelectedValue;

            if (ds.Tables[0].Rows.Count > 0)
            {
                bankid = Convert.ToInt32(ds.Tables[0].Rows[0]["BankID"].ToString());
                foreach (DataRow dd in ds.Tables[0].Rows)
                {
                    FChequeNo = dd["FromChequeNo"].ToString();
                    TChequeNo = dd["ToChequeNo"].ToString();
                }
            }

            dbQry = "SELECT Count(*) FROM tblDamageCheque Where BankID=" + bankid + " And ChequeNo >='" + FChequeNo.ToString() + "' And ChequeNo <='" + TChequeNo.ToString() + "' ";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                if (qtyObj.ToString() != "")
                    qty = qty + (int)qtyObj;
            }

            if (qty > 0)
                return true;
            else
                return false;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListUnusedLeaf(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select FromChequeNo,ToChequeNo,BankName from tblcheque ");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetDamageChequeId(string connection, int ChequeId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select BankName, BankId, AccountNo, ChequeNo, ChequeId from tblDamageCheque where ChequeId = " + ChequeId.ToString();
            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void DeleteDamageCheque(string connection, int ChequeId, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string Bank = string.Empty;
        string AccountNo = string.Empty;
        string FromChequeNo = string.Empty;
        string ToChequeNo = string.Empty;

        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = "select BankName, BankId, AccountNo, ChequeNo, ChequeId from tblDamageCheque where ChequeId = " + ChequeId.ToString();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds != null)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    Bank = ds.Tables[0].Rows[0]["BankName"].ToString();
                    FromChequeNo = ds.Tables[0].Rows[0]["ChequeNo"].ToString();
                }
            }

            dbQry = string.Format("Delete From tblDamageCheque Where ChequeId = {0}", ChequeId);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Damaged Cheque Leaf For : " + Bank + " deleted. Record Details :  User :" + Username + " Cheque No : " + FromChequeNo;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListDamageChequeInfo(string connection, string txtSearch, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        if (dropDown == "BankName")
        {
            dbQry = "select tblledger.ledgername, BankId,AccountNo, ChequeNo, ChequeId,BankName from tblDamageCheque inner join tblledger on tblledger.ledgerid=tblDamageCheque.Bankid Where tblledger.ledgername like '" + txtSearch + "' Order By ChequeId";
        }
        else if (dropDown == "ChequeNo")
        {
            dbQry = "select tblledger.ledgername, BankId,AccountNo, ChequeNo, ChequeId,BankName from tblDamageCheque inner join tblledger on tblledger.ledgerid=tblDamageCheque.Bankid Where tblDamageCheque.ChequeNo like '" + txtSearch + "' Order By ChequeId";
        }
        else
        {
            dbQry = string.Format("select tblledger.ledgername, BankId,AccountNo, ChequeNo, ChequeId,BankName from tblDamageCheque inner join tblledger on tblledger.ledgerid=tblDamageCheque.Bankid Order By ChequeId", txtSearch);
        }

        //dbQry = "select BankId, ChequeNo, ChequeId,BankName from tblDamageCheque  Where ChequeNo like '" + txtSearch + "' Order By ChequeId";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void InsertDamageCheque(string connection, string BankName, int BankID, string ChequeNo, string AccountNo, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        string FChequeNo = string.Empty;
        string TChequeNo = string.Empty;

        string sAuditStr = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            //dbQry = "SELECT FromChequeNo,ToChequeNo FROM tblcheque Where BankID =" + BankID + " ";

            //ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            //if (ds.Tables[0].Rows.Count > 0)
            //{
            //    foreach (DataRow dd in ds.Tables[0].Rows)
            //    {
            //        FChequeNo = dd["FromChequeNo"].ToString();
            //        TChequeNo = dd["ToChequeNo"].ToString();

            //        if (Convert.ToInt32(FChequeNo) <= Convert.ToInt32(ChequeNo) && Convert.ToInt32(TChequeNo) <= Convert.ToInt32(ChequeNo))
            //        {
            //            throw new Exception("Damaged leaf Exists");
            //        }
            //    }

            //}


            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblDamageCheque Where ChequeNo ='" + ChequeNo + "' ");
            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Damaged leaf Exists");
                }
            }


            object exists1 = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblChequeitems Where ChequeNo ='" + ChequeNo + "' and BankID =" + BankID + " ");
            if (exists1.ToString() != string.Empty)
            {
                if (int.Parse(exists1.ToString()) <= 0)
                {
                    throw new Exception("Leaf Not Exists");
                }
            }



            dbQry = string.Format("INSERT INTO tblDamageCheque(BankName, BankID, ChequeNo,AccountNo) VALUES('{0}',{1},'{2}','{3}')",
                    BankName, BankID, ChequeNo, AccountNo);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Update tblChequeitems set DamageCheque='Y' where ChequeNo='" + ChequeNo + "' and BankID='" + BankID + "' and AccountNo='" + AccountNo + "'");               

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int ChequeBookId = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(ChequeID) FROM tblDamageCheque"));


            sAuditStr = "Damaged Cheque Leaf For : " + BankName + " added. Record Details :  User :" + Username + " Cheque No : " + ChequeNo;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            manager.CommitTransaction();


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListProductHistory(string connection, string Itemcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            if (Itemcode != "")
            {
                dbQry = "Select mrpdate,nlc,nlcdate,mrp,dpdate,dp,Itemcode,mrpstartdate,mrpenddate,nlcstartdate,nlcenddate,dpstartdate,dpenddate  from tblProductHistory Where Itemcode='" + Itemcode + "' order by Itemcode";
            }
            else
            {
                dbQry = "Select mrpdate,nlc,nlcdate,mrp,dpdate,dp,Itemcode,productname,model,productdesc,mrpstartdate,mrpenddate,nlcstartdate,nlcenddate,dpstartdate,dpenddate  from tblProductHistory  order by Itemcode";
            }

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListusedLeaf(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select ChequeNo from tbldaybook where ChequeNo <> '' ");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool IsChequeAlreadyEntered(string connection, string BankID, string FromChequeNo, string ToChequeNo, string accountno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        DataTable dtf = new DataTable();
        DataColumn dc;
        DataTable dtfff = new DataTable();
        DataColumn dcc;
        DataRow drddd;
        DataRow drddf;
        DataSet itemDs = new DataSet();
        DataSet ds = new DataSet();
        string fLvlValueTemp = string.Empty;
        string tLvlValueTemp = string.Empty;
        int retVal = 0;
        // int accountno = 0;

        try
        {

            dbQry = string.Format("Select FromChequeNo,ToChequeNo,AccountNo from tblCheque Where AccountNo='" + accountno + "' and BankID = " + BankID);

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);



            //   dbQry = string.Format("Select FromChequeNo,ToChequeNo,AccountNo from tblCheque Where BankID="+BankID+" and  AccountNo = " + accountno);

            //manager.Open();
            //object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

            //if ((retVal != null) && (retVal != DBNull.Value))
            //{
            //    return true;
            //}
            //else
            //{
            //    return false;
            //}

            dc = new DataColumn("ChequeNo");
            dtf.Columns.Add(dc);

            itemDs.Tables.Add(dtf);

            DataTable dt = new DataTable();

            dt.Columns.Add(new DataColumn("ChequeNo"));

            if (ds.Tables[0] != null)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        fLvlValueTemp = dr["FromChequeNo"].ToString().ToUpper().Trim();
                        tLvlValueTemp = dr["ToChequeNo"].ToString().ToUpper().Trim();

                        int difff = Convert.ToInt32(tLvlValueTemp) - Convert.ToInt32(fLvlValueTemp);
                        int g = 0;
                        int ChequeNo = 0;

                        for (int k = 0; k <= difff; k++)
                        {
                            if (g == 0)
                            {
                                drddd = itemDs.Tables[0].NewRow();
                                DataRow dr_final8 = dt.NewRow();
                                dr_final8["ChequeNo"] = fLvlValueTemp;
                                drddd["ChequeNo"] = Convert.ToString(fLvlValueTemp);
                                dt.Rows.Add(dr_final8);
                                ChequeNo = Convert.ToInt32(fLvlValueTemp) + 1;
                                itemDs.Tables[0].Rows.Add(drddd);
                            }
                            else
                            {
                                drddd = itemDs.Tables[0].NewRow();
                                DataRow dr_final8 = dt.NewRow();
                                dr_final8["ChequeNo"] = Convert.ToString(ChequeNo);
                                drddd["ChequeNo"] = Convert.ToString(ChequeNo);
                                dt.Rows.Add(dr_final8);
                                ChequeNo = ChequeNo + 1;
                                itemDs.Tables[0].Rows.Add(drddd);
                                g = 1;
                            }
                            g = 1;
                        }
                    }

                    DataSet dsd = new DataSet();
                    dcc = new DataColumn("ChequeNo");
                    dtfff.Columns.Add(dcc);

                    dsd.Tables.Add(dtfff);

                    int dif = Convert.ToInt32(ToChequeNo) - Convert.ToInt32(FromChequeNo);
                    int ggg = 0;
                    int TChequeNo = 0;

                    for (int k = 0; k <= dif; k++)
                    {
                        if (ggg == 0)
                        {
                            drddf = dsd.Tables[0].NewRow();
                            drddf["ChequeNo"] = Convert.ToString(FromChequeNo);
                            TChequeNo = Convert.ToInt32(FromChequeNo) + 1;
                            dsd.Tables[0].Rows.Add(drddf);
                        }
                        else
                        {
                            drddf = dsd.Tables[0].NewRow();
                            drddf["ChequeNo"] = Convert.ToString(TChequeNo);
                            TChequeNo = TChequeNo + 1;
                            dsd.Tables[0].Rows.Add(drddf);
                            ggg = 1;
                        }
                        ggg = 1;
                    }



                    if (dsd.Tables[0] != null)
                    {
                        DataTable dtttt = dsd.Tables[0];

                        if (itemDs.Tables[0] != null)
                        {
                            foreach (DataRow drd in itemDs.Tables[0].Rows)
                            {
                                var billNo = Convert.ToInt32(drd["ChequeNo"]);

                                for (int i = 0; i < dsd.Tables[0].Rows.Count; i++)
                                {
                                    if (billNo == Convert.ToInt32(dsd.Tables[0].Rows[i]["ChequeNo"]))
                                    {
                                        retVal = 1;
                                        break;
                                    }
                                    else
                                        retVal = 0;
                                }
                                if (retVal == 1)
                                    break;

                            }

                        }
                    }

                    //object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

                    if ((retVal == 1))
                    {
                        //throw new Exception("Given Cheque No already entered for this bank");
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }

            }
            else
            {
                return false;
            }


        }
        catch (Exception ex)
        {
            return false;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool IsDPRateModified(string connection, double Dealerrate, DateTime datetime, string itemcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        DataSet ds = new DataSet();
        try
        {
            manager.Open();

            dbQry = "Select Dealerrate,dpEffDate from tblproductmaster where Dealerrate <> " + Dealerrate + " and itemcode= '" + itemcode + "' ";
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
            {
                DateTime lasttime = DateTime.Parse(ds.Tables[0].Rows[0]["DPEffDate"].ToString());
                if (lasttime == datetime)
                    return false;
                else
                    return true;
            }
            else
            {
                return true;
            }
        }
        catch (Exception ex)
        {
            return true;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool IsDPRateDateModified(string connection, double Dealerrate, string datetime, string itemcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        DataSet ds = new DataSet();
        try
        {
            manager.Open();

            dbQry = "Select Dealerrate,dpEffDate from tblproductmaster where dpEffDate <> #" + datetime + "# and itemcode= '" + itemcode + "' ";
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
            {
                double oldDealerrate = Convert.ToDouble(ds.Tables[0].Rows[0]["Dealerrate"]);
                if (oldDealerrate == Dealerrate)
                    return false;
                else
                    return true;
            }
            else
            {
                return true;
            }
        }
        catch (Exception ex)
        {
            return true;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool IsNLCRateModified(string connection, double nlc, DateTime datetime, string itemcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        DataSet ds = new DataSet();
        try
        {
            manager.Open();

            dbQry = "Select nlc,nlcEffDate from tblproductmaster where nlc <> " + nlc + " and itemcode= '" + itemcode + "' ";
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
            {
                DateTime lasttime = DateTime.Parse(ds.Tables[0].Rows[0]["NLCEffDate"].ToString());
                if (lasttime == datetime)
                    return false;
                else
                    return true;
            }
            else
            {
                return true;
            }
        }
        catch (Exception ex)
        {
            return true;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool IsNLCRateDateModified(string connection, double nlc, string datetime, string itemcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        DataSet ds = new DataSet();
        try
        {
            manager.Open();

            dbQry = "Select nlc,nlcEffDate from tblproductmaster where nlcEffDate <> #" + datetime + "# and itemcode= '" + itemcode + "' ";
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
            {
                double oldnlc = Convert.ToDouble(ds.Tables[0].Rows[0]["nlc"]);
                if (oldnlc == nlc)
                    return false;
                else
                    return true;
            }
            else
            {
                return true;
            }
        }
        catch (Exception ex)
        {
            return true;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet getmissingdc(string connection, DateTime startDate, DateTime endDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        //dbQry = ("SELECT tblSales.billno,tblSales.billdate,tblLedger.LedgerName,tblSales.customeraddress,tblSales.customeraddress2,tblSales.customeraddress3,tblSales.CustomerContacts FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger ON tblSales.CustomerId = tblLedger.LedgerID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and deliverynote='YES' and tblSales.billno not in (select dcbillno from tblpurchase)");
        dbQry = ("SELECT tblSales.billno,tblSales.billdate,tblLedger.LedgerName,tblSales.customeraddress,tblSales.customeraddress2,tblSales.customeraddress3,tblSales.CustomerContacts FROM  tblSales inner join tblLedger ON tblSales.CustomerId = tblLedger.LedgerID WHERE tblSales.billdate>=#09/19/2013# and tblSales.billdate<=#09/19/2013# and deliverynote='YES' ");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet GetPurchaseList(string txtSearch, string dropDown, string branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        DataSet dsdate = new DataSet();

        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        string dbQry3 = string.Empty;

        string username = string.Empty;
        string name = string.Empty;

        if (dropDown == "Date" || dropDown == "VoucherNo" || dropDown == "TransNo" || dropDown == "VoucherDate")
            txtSearch = txtSearch;
        else
            txtSearch = "%" + txtSearch + "%";

        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";

            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                dbQry.Append("SELECT tblPurchase.PurchaseId,tblPurchase.Billno,Format(tblPurchase.Billdate, 'dd/MM/yyyy') As BillDate,Format(tblPurchase.InvoiceDate, 'dd/MM/yyyy') As InvoiceDate,tblPurchase.Paymode,tblPurchase.SupplierID,tblDaybook.Chequeno,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.TransNo,tblDayBook.narration,tblPurchase.JournalID,tblPurchase.narration2,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason,Supplier.LedgerName As Supplier,tblPurchase.BranchCode");
                dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID) INNER JOIN tblLedger Supplier ON tblPurchase.SupplierID = Supplier.LedgerID)) Where tblPurchase.InvoiceDate > '" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "' ");

            }
            else
            {
                dbQry.Append("SELECT tblPurchase.PurchaseId,tblPurchase.Billno,Format(tblPurchase.Billdate, 'dd/MM/yyyy') As BillDate,Format(tblPurchase.InvoiceDate, 'dd/MM/yyyy') As InvoiceDate,tblPurchase.Paymode,tblPurchase.SupplierID,tblDaybook.Chequeno,Creditor.LedgerName As Creditor,tblDayBook.Amount,tblDayBook.narration,tblDayBook.TransNo,tblPurchase.JournalID,tblPurchase.narration2,tblPurchase.SalesReturn,tblPurchase.SalesReturnReason,Supplier.LedgerName As Supplier,tblPurchase.BranchCode");
                dbQry.Append(" FROM ((((tblDayBook  INNER JOIN  tblPurchase ON tblPurchase.JournalID = tblDayBook.Transno) INNER JOIN tblLedger Creditor ON tblDaybook.CreditorID = Creditor.LedgerID) INNER JOIN tblLedger Supplier ON tblPurchase.SupplierID = Supplier.LedgerID)) Where 1=1 ");
            }

            if (txtSearch == null || txtSearch == "" || txtSearch == "%%")
            {
                if (branchcode != "All")
                {
                    dbQry.AppendFormat("AND tblPurchase.BranchCode='" + branchcode + "' AND 1=1 ");
                }
                else
                {
                    dbQry.AppendFormat(" AND 1=1 ");
                }
            }
            else
            {
                if (dropDown == "VoucherNo" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblPurchase.purchaseid = {0} ", txtSearch);
                }
                else if (dropDown == "BillNo" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblPurchase.BillNo like '{0}' ", txtSearch);
                }
                else if (dropDown == "TransNo" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblDayBook.TransNo = {0} ", txtSearch);
                }
                else if (dropDown == "Date" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND Format(tblPurchase.BillDate, 'dd/MM/yyyy') = '{0}' ", Convert.ToDateTime(txtSearch).ToShortDateString());
                }
                else if (dropDown == "VoucherDate" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND Format(tblPurchase.InvoiceDate, 'dd/MM/yyyy') = '{0}' ", Convert.ToDateTime(txtSearch).ToShortDateString());
                }
                else if (dropDown == "SupplierName" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND Supplier.LedgerName like '{0}' ", txtSearch);
                }
                else if (branchcode != "All")
                {
                    dbQry.AppendFormat("AND tblPurchase.BranchCode='" + branchcode + "' AND 1=1 ");
                }
                else
                {
                    dbQry.Append(" AND 1=1 ");
                }
            }

            dbQry.Append(" ORDER BY tblPurchase.BillDate Desc");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetAbsoluteProductlist(string sDataSource, string cond, string Method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();

        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        string smrpeffDate = string.Empty;
        string sdpeffdate = string.Empty;
        string snlceffdate = string.Empty;

        try
        {
            manager.Open();

            if (Method == "All")
            {
                dbQry2 = "select itemcode,productname,model,productdesc as brand,CategoryID,block,rate,dealerrate,nlc,mrpeffdate,dpeffdate,nlceffdate,ROL from tblproductmaster order by productdesc";
            }
            else if (Method == "Absolute")
            {
                dbQry2 = "select itemcode,productname,model,productdesc as brand,block,CategoryID,rate,dealerrate,nlc,mrpeffdate,dpeffdate,nlceffdate,ROL from tblproductmaster where tblproductmaster.Outdated = 'Y' order by productdesc";
            }
            else if (Method == "NotAbsolute")
            {
                dbQry2 = "select itemcode,productname,model,productdesc as brand,block,rate,dealerrate,CategoryID,nlc,ROL,mrpeffdate,dpeffdate,nlceffdate from tblproductmaster  where tblproductmaster.Outdated = 'N' order by productdesc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            DataSet dst;
            DataTable dt;
            DataRow drNew;
            DataColumn dc;

            string date1 = string.Empty;
            string sNarration = string.Empty;

            dst = new DataSet();
            dt = new DataTable();
            dc = new DataColumn("Itemcode");
            dt.Columns.Add(dc);

            dc = new DataColumn("productname");
            dt.Columns.Add(dc);

            dc = new DataColumn("model");
            dt.Columns.Add(dc);

            dc = new DataColumn("brand");
            dt.Columns.Add(dc);

            dc = new DataColumn("rate");
            dt.Columns.Add(dc);

            dc = new DataColumn("dealerrate");
            dt.Columns.Add(dc);

            dc = new DataColumn("nlc");
            dt.Columns.Add(dc);

            dc = new DataColumn("mrpeffdate");
            dt.Columns.Add(dc);

            dc = new DataColumn("dpeffdate");
            dt.Columns.Add(dc);

            dc = new DataColumn("nlceffdate");
            dt.Columns.Add(dc);

            dc = new DataColumn("Rol");
            dt.Columns.Add(dc);

            dc = new DataColumn("CategoryID");
            dt.Columns.Add(dc);

            dst.Tables.Add(dt);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow drd in ds.Tables[0].Rows)
                {
                    if (drd["mrpeffdate"] != null)
                    {
                        smrpeffDate = Convert.ToDateTime(drd["mrpeffdate"].ToString()).ToShortDateString();
                    }
                    if (drd["dpeffdate"] != null)
                    {
                        sdpeffdate = Convert.ToDateTime(drd["dpeffdate"].ToString()).ToShortDateString();
                    }
                    if (drd["nlceffdate"] != null)
                    {
                        snlceffdate = Convert.ToDateTime(drd["nlceffdate"].ToString()).ToShortDateString();
                    }
                    drNew = dt.NewRow();
                    drNew["productname"] = drd["productname"].ToString();
                    drNew["itemcode"] = drd["itemcode"].ToString();
                    drNew["model"] = drd["model"].ToString();
                    drNew["brand"] = drd["brand"].ToString();
                    drNew["Rol"] = Convert.ToInt32(drd["Rol"]);
                    drNew["dealerrate"] = Convert.ToDouble(drd["dealerrate"]);
                    drNew["rate"] = Convert.ToDouble(drd["rate"]);
                    drNew["dpeffdate"] = sdpeffdate;
                    drNew["nlc"] = Convert.ToDouble(drd["nlc"]);
                    drNew["mrpeffdate"] = smrpeffDate;
                    drNew["nlceffdate"] = snlceffdate;
                    drNew["CategoryID"] = Convert.ToInt32(drd["CategoryID"]);
                    dst.Tables[0].Rows.Add(drNew);
                }
            }

            if (dst.Tables[0].Rows.Count > 0)
                return dst;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public bool GetDamageChequeNo(string connection, string ChequeNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select BankName, BankId, ChequeNo,  ChequeId from tblDamageCheque where ChequeNo = '" + ChequeNo + "' ";

            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            return false;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet getstocklevel(string sDataSource, DateTime refDate, string trange, string toption)
    {
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet ds, dsSales, dsPurcahse;
        string sQry = string.Empty;
        string sConStr = string.Empty;

        sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;

        sQry = ("select ProductDesc,ProductName,Model,ItemCode,Stock,rol,Cat.categoryname,rate from tblproductmaster PM, tblCategories Cat where PM.CategoryID = Cat.CategoryID "); //" order by ProductDesc,CategoryID,Model,ProductName"
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        ds = new DataSet();
        oleAdp.Fill(ds);

        sQry = "SELECT SUM(SI.Qty) as Qty,  SI.ItemCode From ((tblSales S Inner join tblSalesItems SI On S.BillNo = SI.BillNo) Inner join tblProductMaster P ON P.ItemCode = SI.ItemCode) Where  S.BillDate >= #" + refDate.ToString("MM/dd/yyyy") + "#" + " Group By SI.ItemCode ORDER BY SI.Itemcode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsSales = new DataSet();
        oleAdp.Fill(dsSales);
        int rowindex = -1;

        foreach (DataRow dr in dsSales.Tables[0].Rows)
        {
            var itemCode = dr["ItemCode"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["ItemCode"].ToString() == itemCode)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) + Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }

            }

            rowindex = -1;
        }

        sQry = "SELECT SUM(PI.Qty) as Qty,  PI.ItemCode From ((tblPurchase P Inner join tblPurchaseItems PI On P.PurchaseID = PI.PurchaseID) Inner join tblProductMaster PM ON PM.ItemCode = PI.ItemCode) Where P.BillDate >= #" + refDate.ToString("MM/dd/yyyy") + "#" + " Group By PI.ItemCode ORDER BY PI.Itemcode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsPurcahse = new DataSet();
        oleAdp.Fill(dsPurcahse);
        rowindex = -1;

        foreach (DataRow dr in dsPurcahse.Tables[0].Rows)
        {
            var itemCode = dr["ItemCode"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["ItemCode"].ToString() == itemCode)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) - Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock > 0 ? currentStock : 0;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }
            }

            rowindex = -1;
        }

        oleConn.Close();
        return ds;
    }

    public DataSet getstocklevelcategory(string sDataSource, DateTime refDate, string trange, string toption)
    {
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet ds, dsSales, dsPurcahse;
        string sQry = string.Empty;
        string sConStr = string.Empty;

        sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;

        sQry = ("select sum(Stock) as Stock,Cat.categorylevel,Cat.categoryname from tblproductmaster PM, tblCategories Cat where PM.CategoryID = Cat.CategoryID group by Cat.categoryname,Cat.categorylevel"); //" order by ProductDesc,CategoryID,Model,ProductName"
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        ds = new DataSet();
        oleAdp.Fill(ds);

        sQry = "SELECT SUM(SI.Qty) as Qty,  cc.categoryname From ((tblSales S Inner join tblSalesItems SI On S.BillNo = SI.BillNo) Inner join tblProductMaster P ON P.ItemCode = SI.ItemCode) Inner join tblcategories cc ON P.categoryid = cc.categoryid Where  S.BillDate >= #" + refDate.ToString("MM/dd/yyyy") + "#" + " Group By cc.categoryname ORDER BY cc.categoryname";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsSales = new DataSet();
        oleAdp.Fill(dsSales);
        int rowindex = -1;

        foreach (DataRow dr in dsSales.Tables[0].Rows)
        {
            var categoryname = dr["categoryname"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["categoryname"].ToString() == categoryname)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) + Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }
            }
            rowindex = -1;
        }

        sQry = "SELECT SUM(PI.Qty) as Qty,  cc.categoryname From ((tblPurchase P Inner join tblPurchaseItems PI On P.PurchaseID = PI.PurchaseID) Inner join tblProductMaster PM ON PM.ItemCode = PI.ItemCode) Inner join tblcategories cc ON PM.categoryid = cc.categoryid Where P.BillDate >= #" + refDate.ToString("MM/dd/yyyy") + "#" + " Group By cc.categoryname ORDER BY cc.categoryname";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsPurcahse = new DataSet();
        oleAdp.Fill(dsPurcahse);
        rowindex = -1;

        foreach (DataRow dr in dsPurcahse.Tables[0].Rows)
        {
            var categoryname = dr["categoryname"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["categoryname"].ToString() == categoryname)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) - Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock > 0 ? currentStock : 0;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }
            }
            rowindex = -1;
        }

        oleConn.Close();
        return ds;
    }

    public DataSet getstocklevelbrand(string sDataSource, DateTime refDate, string trange, string toption)
    {
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet ds, dsSales, dsPurcahse;
        string sQry = string.Empty;
        string sConStr = string.Empty;

        sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;

        sQry = ("select sum(Stock) as Stock,Cat.brandlevel,Cat.brandname from tblproductmaster PM, tblbrand Cat where PM.productdesc = Cat.brandname group by Cat.brandname,Cat.brandlevel"); //" order by ProductDesc,CategoryID,Model,ProductName"
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        ds = new DataSet();
        oleAdp.Fill(ds);

        sQry = "SELECT SUM(SI.Qty) as Qty,  cc.brandname From ((tblSales S Inner join tblSalesItems SI On S.BillNo = SI.BillNo) Inner join tblProductMaster P ON P.ItemCode = SI.ItemCode) Inner join tblbrand cc ON P.productdesc = cc.brandname Where  S.BillDate >= #" + refDate.ToString("MM/dd/yyyy") + "#" + " Group By cc.brandname ORDER BY cc.brandname";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsSales = new DataSet();
        oleAdp.Fill(dsSales);
        int rowindex = -1;

        foreach (DataRow dr in dsSales.Tables[0].Rows)
        {
            var brandname = dr["brandname"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["brandname"].ToString() == brandname)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) + Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }

            }

            rowindex = -1;
        }

        sQry = "SELECT SUM(PI.Qty) as Qty,  cc.brandname From ((tblPurchase P Inner join tblPurchaseItems PI On P.PurchaseID = PI.PurchaseID) Inner join tblProductMaster PM ON PM.ItemCode = PI.ItemCode) Inner join tblbrand cc ON PM.productdesc = cc.brandname Where P.BillDate >= #" + refDate.ToString("MM/dd/yyyy") + "#" + " Group By cc.brandname ORDER BY cc.brandname";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsPurcahse = new DataSet();
        oleAdp.Fill(dsPurcahse);
        rowindex = -1;

        foreach (DataRow dr in dsPurcahse.Tables[0].Rows)
        {
            var brandname = dr["brandname"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["brandname"].ToString() == brandname)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) - Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock > 0 ? currentStock : 0;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }
            }
            rowindex = -1;
        }

        oleConn.Close();
        return ds;
    }

    public bool CategoryExists(string connection, string catDescr)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            dbQry = "SELECT Count(*) FROM tblCategories Where Categoryname ='" + catDescr + "' ";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet getSaleslist(DateTime startDate, DateTime endDate, string Types)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        if (Types == "CategoryWise")
        {
            dbQry = ("SELECT sum((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as amount,sum(tblSalesItems.Qty) as qty,tblcategories.categoryname,sum(tblSalesItems.Qty * tblProductMaster.nlc) as nlcvalue,sum(tblSalesItems.Qty * tblProductMaster.dealerrate) as dpvalue,sum(tblSalesItems.Qty * tblProductMaster.rate) as mrpvalue FROM  ((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') group by tblcategories.categoryname");
        }
        else if (Types == "ProductWise")
        {
            dbQry = ("SELECT sum((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as amount,sum(tblSalesItems.Qty) as qty,tblProductMaster.productname,sum(tblSalesItems.Qty * tblProductMaster.nlc) as nlcvalue,sum(tblSalesItems.Qty * tblProductMaster.dealerrate) as dpvalue,sum(tblSalesItems.Qty * tblProductMaster.rate) as mrpvalue FROM  ((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') group by tblProductMaster.productname");
        }
        else if (Types == "BrandWise")
        {
            dbQry = ("SELECT sum((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as amount,sum(tblSalesItems.Qty) as qty,tblProductMaster.productdesc,sum(tblSalesItems.Qty * tblProductMaster.nlc) as nlcvalue,sum(tblSalesItems.Qty * tblProductMaster.dealerrate) as dpvalue,sum(tblSalesItems.Qty * tblProductMaster.rate) as mrpvalue FROM  ((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') group by tblProductMaster.productdesc");
        }
        else if (Types == "BrandProductWise")
        {
            dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount, tblSalesItems.Rate,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp FROM  ((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') ");
        }
        else if (Types == "BrandProductModelWise")
        {
            dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount, tblSalesItems.Rate,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp  FROM  ((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') ");
        }
        else if (Types == "BillWise")
        {
            dbQry = ("SELECT sum((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,sum(tblSalesItems.Qty) as qty,tblProductMaster.nlc,tblProductMaster.rate as mrp, tblProductMaster.dealerrate as dp,tblSales.billno,tblsales.billdate,tblSalesItems.itemcode  FROM  ((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') group by tblSales.billno,tblsales.billdate,tblSalesItems.itemcode,tblProductMaster.nlc,tblProductMaster.rate, tblProductMaster.dealerrate");
        }
        else if (Types == "BrandModelWise")
        {
            dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount, tblSalesItems.Rate,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.model,tblProductMaster.dealerrate as dp FROM  ((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') ");
        }
        else if (Types == "CategoryBrandWise")
        {
            dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount, tblSalesItems.Rate,tblSalesItems.Qty,tblcategories.categoryname,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.dealerrate as dp,tblProductMaster.rate as mrp FROM  ((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') ");
        }
        else if (Types == "CategoryBrandProductWise")
        {
            dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount, tblSalesItems.Rate,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblcategories.categoryname  FROM  ((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') ");
        }
        else if (Types == "PayModeWise")
        {
            dbQry = ("SELECT sum((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,sum(tblSalesItems.Qty) as qty,sum(tblSalesItems.Qty * tblProductMaster.nlc) as nlc,sum(tblSalesItems.Qty * tblProductMaster.rate) as mrp,sum(tblSalesItems.Qty * tblProductMaster.dealerrate) as dp,tblSales.paymode  FROM  ((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') group by tblSales.paymode");
        }
        else if (Types == "ExecutiveWise")
        {
            dbQry = ("SELECT sum((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,sum(tblSalesItems.Qty) as qty,sum(tblSalesItems.Qty * tblProductMaster.nlc) as nlc,sum(tblSalesItems.Qty * tblProductMaster.rate) as mrp,sum(tblSalesItems.Qty * tblProductMaster.dealerrate) as dp,tblSales.executivename  FROM  ((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') group by tblSales.executivename");
        }
        else if (Types == "DateWise")
        {
            dbQry = ("SELECT sum((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,sum(tblSalesItems.Qty) as qty,sum(tblSalesItems.Qty * tblProductMaster.nlc) as nlc,sum(tblSalesItems.Qty * tblProductMaster.rate) as mrp,sum(tblSalesItems.Qty * tblProductMaster.dealerrate) as dp,tblSales.billdate  FROM  ((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') group by tblSales.billdate");
        }
        else if (Types == "CustomerWise")
        {
            dbQry = ("SELECT sum((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,sum(tblSalesItems.Qty) as qty,sum(tblSalesItems.Qty * tblProductMaster.nlc) as nlc,sum(tblSalesItems.Qty * tblProductMaster.rate) as mrp,sum(tblSalesItems.Qty * tblProductMaster.dealerrate) as dp,tblSales.Customername  FROM  ((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') group by tblSales.Customername");
        }
        else if (Types == "MonthWise")
        {
            dbQry = ("SELECT sum((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,sum(tblSalesItems.Qty) as qty,sum(tblSalesItems.Qty * tblProductMaster.nlc) as nlc,sum(tblSalesItems.Qty * tblProductMaster.rate) as mrp,sum(tblSalesItems.Qty * tblProductMaster.dealerrate) as dp,month(tblSales.billdate) as monthname  FROM  ((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "#  and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') group by month(tblSales.billdate) ");
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public bool IsChequeNoNotLess(string connection, string BankID, string FromChequeNo, string ToChequeNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        DataTable dtf = new DataTable();
        DataColumn dc;
        DataTable dtfff = new DataTable();
        DataColumn dcc;
        DataRow drddd;
        DataRow drddf;
        DataSet itemDs = new DataSet();
        DataSet ds = new DataSet();
        string fLvlValueTemp = string.Empty;
        string tLvlValueTemp = string.Empty;
        int retVal = 0;

        try
        {

            //dbQry = string.Format("Select FromChequeNo,ToChequeNo from tblCheque Where BankID = " + BankID);

            manager.Open();
            //ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (Convert.ToDouble(FromChequeNo) > Convert.ToDouble(ToChequeNo))
            {
                retVal = 1;
            }


            if ((retVal == 1))
            {
                //throw new Exception("ToCheque No Cannot be Less than FromChequeNo");
                return true;
            }
            else
            {
                return false;
            }

            if (Convert.ToDouble(FromChequeNo) == Convert.ToDouble(ToChequeNo))
            {
                retVal = 1;
            }


            if ((retVal == 1))
            {
                //throw new Exception("FromChequeNo Cannot be equal to ToCheque");
                return true;
            }
            else
            {
                return false;
            }

        }
        catch (Exception ex)
        {
            return false;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListJournalDatas(string txtSearch, string dropDown, string sPath)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(sPath);
        string dbQry2 = string.Empty;

        string dbQry3 = string.Empty;
        DataSet ds = new DataSet();
        DataSet dsd = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        String searchStr = string.Empty;

        //if (sRefno != string.Empty && sRefno != null)
        //    searchStr = "tblDayBook.Refno=" + sRefno.Trim();

        //if (sTransNo != string.Empty && sTransNo != null)
        //    searchStr = "tblDayBook.TransNo=" + sTransNo.Trim();

        //if (sNaration != string.Empty && sNaration != null)
        //{
        //    if (searchStr == string.Empty)
        //        searchStr = searchStr + " (Creditor.LedgerName LIKE '%" + sNaration.Trim() + "%' OR Debitor.LedgerName LIKE '%" + sNaration.Trim() + "%')";
        //    else
        //        searchStr = searchStr + " AND (Creditor.LedgerName LIKE '%" + sNaration.Trim() + "%' OR Debitor.LedgerName LIKE '%" + sNaration.Trim() + "%')";
        //}
        //if (sDate != string.Empty && sDate != null)
        //{
        //    if (searchStr == string.Empty)
        //        searchStr = searchStr + "tblDayBook.TransDate=#" + Convert.ToDateTime(sDate).ToString("MM/dd/yyyy").Trim() + "#";
        //    else
        //        searchStr = searchStr + " AND tblDayBook.TransDate=#" + Convert.ToDateTime(sDate).ToString("MM/dd/yyyy").Trim() + "#";
        //}


        //bool dtlock;
        //dbQry3 = "SELECT DateLock From tblUserInfo WHERE UserName='OBSOLUTE'";
        //dsd = manager.ExecuteDataSet(CommandType.Text, dbQry3.ToString());
        //if (dsd.Tables[0].Rows.Count > 0)
        //    dtlock = dsd.Tables[0].Rows[0]["DateLock"].ToString();


        if (dropDown == "Date" || dropDown == "RefNo" || dropDown == "TransNo")
            txtSearch = txtSearch;
        else
            txtSearch = "%" + txtSearch + "%";


        dbQry2 = "Select recon_date from last_recon";
        manager.Open();
        object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

        dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName As Cred, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
        dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo FROM  (((tblDayBook INNER JOIN ");
        dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID))");

        dbQry.AppendFormat(" Where VoucherType='Journal' AND tblDayBook.TransDate > " + DateTime.Parse(retVal.ToString()).ToString("yyyy-MM-dd") + "   ");

        if (txtSearch == null || txtSearch == "")
        {
            dbQry.AppendFormat(" AND 1=1 ");
        }
        else
        {
            if (dropDown == "RefNo" && txtSearch != null)
            {
                dbQry.AppendFormat(" AND tblDayBook.RefNo = {0} ", txtSearch);
            }
            else if (dropDown == "TransNo" && txtSearch != null)
            {
                dbQry.AppendFormat(" AND tblDayBook.TransNo = {0} ", txtSearch);
            }
            else if (dropDown == "Date" && txtSearch != null)
            {
                dbQry.AppendFormat(" AND [tblDayBook.TransDate] = '{0}' ", Convert.ToDateTime(txtSearch).ToString("yyyy-MM-dd"));
            }
            else if (dropDown == "LedgerName" && txtSearch != null)
            {
                //dbQry.AppendFormat(" AND Creditor.LedgerName LIKE '{0}' OR Debitor.LedgerName LIKE '{0}' ", txtSearch);

                dbQry.AppendFormat(" AND Debitor.LedgerName LIKE '{0}' ", txtSearch);
            }
            else if (dropDown == "Creditor" && txtSearch != null)
            {
                dbQry.AppendFormat(" AND Creditor.LedgerName LIKE '{0}' ", txtSearch);

                //dbQry.AppendFormat(" AND Debitor.LedgerName LIKE '{0}' ", txtSearch);
            }
            else if (dropDown == "0" && txtSearch != "%%")
            {
                dbQry.AppendFormat(" AND 1=1 ");
            }
            else
            {
                dbQry.AppendFormat(" AND 1=1 ");
            }
        }

        dbQry.Append(" Order By tblDayBook.TransDate Desc");


        try
        {

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListSundryLedgersDc(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select LedgerId, LedgerName, Mobile from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where (tblGroups.GroupName='Sundry Debtors' or GroupName = 'Sundry Creditors') and tblLedger.dc ='YES' Order By ledgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListDeliveryreturn(string connection, string BranchCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format(" SELECT tblSales.BillNo, tblSales.SeriesID, tblSales.BillDate, tblSales.JournalID, tblSales.CustomerID, tblSales.CustomerName,tblSales.InvoiceReturnStatus, " +
                                  " tblSales.PayMode, tblSales.Tax, tblSales.Discount, tblSales.Cancelled, tblSales.CustomerAddress, tblSales.CustomerContacts, " +
                                  " tblSales.purchaseReturn, tblSales.purchaseReturnreason, tblSales.Freight, tblSales.LoadUnLoad, tblSales.OtherCusName, " +
                                  " tblSales.InternalTransfer, tblSales.MultiPayment, tblSales.DeliveryNote, tblSales.CustomerAddress2, tblSales.CustomerAddress3, " +
                                  " tblSales.despatchedfrom, tblSales.TotalWORndOff, tblSales.Total, tblSales.Manualsales, tblSales.NormalSales, tblSales.Types, " +
                                  " tblSales.Narration2, tblSales.DuplicateCopy, tblSales.CustomerIdMobile, tblSales.Check1, tblSales.cuscategory, tblSales.Discounttype " +
                                  " FROM tblSales where tblSales.BranchCode='" + BranchCode + "' and tblSales.InvoiceReturnStatus='NO' and tblSales.DeliveryNote='YES'");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListSalesreturn(string connection, string BranchCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format(" SELECT tblSales.BillNo, tblSales.SeriesID, tblSales.BillDate, tblSales.JournalID, tblSales.CustomerID, tblSales.CustomerName,tblSales.InvoiceReturnStatus, " +
                                  " tblSales.PayMode, tblSales.Tax, tblSales.Discount, tblSales.Cancelled, tblSales.CustomerAddress, tblSales.CustomerContacts, " +
                                  " tblSales.purchaseReturn, tblSales.purchaseReturnreason, tblSales.Freight, tblSales.LoadUnLoad, tblSales.OtherCusName, " +
                                  " tblSales.InternalTransfer, tblSales.MultiPayment, tblSales.DeliveryNote, tblSales.CustomerAddress2, tblSales.CustomerAddress3, " +
                                  " tblSales.despatchedfrom, tblSales.TotalWORndOff, tblSales.Total, tblSales.Manualsales, tblSales.NormalSales, tblSales.Types, " +
                                  " tblSales.Narration2, tblSales.DuplicateCopy, tblSales.CustomerIdMobile, tblSales.Check1, tblSales.cuscategory, tblSales.Discounttype " +
                                  " FROM tblSales where tblSales.BranchCode='" + BranchCode + "' and tblSales.InvoiceReturnStatus='NO' and (tblSales.Manualsales='YES' or tblSales.NormalSales='YES')");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListSundryLedgersDcIsActive(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select LedgerId, LedgerName, Mobile from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where (tblGroups.GroupName='Sundry Debtors' or GroupName = 'Sundry Creditors') and tblLedger.dc ='YES' and tblLedger.Unuse = 'YES' Order By ledgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool IsChequeNoAlreadyPresentForTransno(string connection, string chequeno, int TransNo)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        try
        {
            dbQry = "Select chequeno from tbldaybook where chequeno='" + chequeno + "' and TransNo <> " + TransNo + " ";

            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            return false;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetEmployeeList(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT * FROM tblEmployee order by empFirstName");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet GetMasterRolesWithArea(string connection, string Types)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            if (Types == "CUSTOMERS")
            {
                dbQry = "Select * from tblRoleMaster where Area = 'CUSTOMERS' order by orderno";
            }
            else if (Types == "SUPPLIERS")
            {
                dbQry = "Select * from tblRoleMaster where Area = 'SUPPLIERS' order by orderno";
            }
            else if (Types == "BANKING")
            {
                dbQry = "Select * from tblRoleMaster where Area = 'BANKING' order by orderno";
            }
            else if (Types == "EXPENSES")
            {
                dbQry = "Select * from tblRoleMaster where Area = 'EXPENSES' order by orderno";
            }
            else if (Types == "INVENTORY")
            {
                dbQry = "Select * from tblRoleMaster where Area = 'INVENTORY' order by orderno";
            }
            else if (Types == "ACCOUNTS")
            {
                dbQry = "Select * from tblRoleMaster where Area = 'ACCOUNTS' order by orderno";
            }
            else if (Types == "RESOURCE")
            {
                dbQry = "Select * from tblRoleMaster where Area = 'RESOURCE' order by orderno";
            }
            else if (Types == "SERVICE")
            {
                dbQry = "Select * from tblRoleMaster where Area = 'SERVICE' order by orderno";
            }
            else if (Types == "OTHER")
            {
                dbQry = "Select * from tblRoleMaster where Area = 'OTHER' order by orderno";
            }
            else if (Types == "REPORT")
            {
                dbQry = "Select * from tblRoleMaster where Area = 'REPORT' order by orderno";
            }
            else if (Types == "SECURITY")
            {
                dbQry = "Select * from tblRoleMaster where Area = 'SECURITY' order by orderno";
            }
            else if (Types == "LEADMANAGEMENT")
            {
                dbQry = "Select * from tblRoleMaster where Area = 'LEADMANAGEMENT' order by orderno";
            }
            else if (Types == "MANUFACTURE")
            {
                dbQry = "Select * from tblRoleMaster where Area = 'MANUFACTURE' order by orderno";
            }
            else if (Types == "PROJECT")
            {
                dbQry = "Select * from tblRoleMaster where Area = 'PROJECT' order by orderno";
            }
            else if (Types == "CONFIG")
            {
                dbQry = "Select * from tblRoleMaster where Area = 'CONFIG' order by orderno";
            }

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public bool InsertUserOptions(DataSet OptionDS, string Userna, string UserName, string Email, bool Locked, bool DateLock, DataSet dsroles, string password, int EmpNo, string UserGroup, bool HideDeviation, DataSet dsbranch, bool brncheck, string defaultbranch)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();

        StringBuilder dbQry1 = new StringBuilder();

        StringBuilder dbQry2 = new StringBuilder();

        string sAudit = string.Empty;
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("Select Count(*) From tblUserInfo Where UserName='{0}'", UserName);

            int exists = (int)manager.ExecuteScalar(CommandType.Text, dbQry);

            if (exists > 0)
                return false;

            dbQry = string.Format("Insert Into tblUserInfo(UserID,UserName,Userpwd,UserGroup,Email,Locked,DateLock,EmpNo,HideDeviation,BranchCheck,DefaultBranch) VALUES ('{0}','{1}','{5}','{7}','{2}','{3}' ,'{4}', {6}, '{8}','{9}','{10}')", UserName, UserName, Email, Locked, DateLock, password, EmpNo, UserGroup, HideDeviation, brncheck, defaultbranch);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);



            if (OptionDS != null)
            {
                if (OptionDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in OptionDS.Tables[0].Rows)
                    {
                        //dbQry = string.Format("INSERT INTO tblUserOptions(UserName,Role,RoleDesc,Section,Area,Add,Edit,Delete,Views) VALUES('{0}','{1}','{2}','{3}','{4}',{5},{6},{7},{8})", Convert.ToString(dr["UserName"]), dr["Role"].ToString(), Convert.ToString(dr["RoleDesc"]), Convert.ToString(dr["Section"]), Convert.ToString(dr["Area"]), Convert.ToBoolean(dr["Add"]), Convert.ToBoolean(dr["Edit"]), Convert.ToBoolean(dr["Delete"]), Convert.ToBoolean(dr["View"]));
                        dbQry = string.Format("INSERT INTO tblUserOptions VALUES('{0}','{1}','{2}','{3}','{4}',{5},'{6}','{7}','{8}','{9}')", Convert.ToString(dr["UserName"]), dr["Role"].ToString(), Convert.ToString(dr["RoleDesc"]), Convert.ToString(dr["Section"]), Convert.ToString(dr["Area"]), Convert.ToInt32(dr["Orderno"]), Convert.ToBoolean(dr["Add"]), Convert.ToBoolean(dr["Edit"]), Convert.ToBoolean(dr["Delete"]), Convert.ToBoolean(dr["View"]));
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }
            }





            if (dsroles != null)
            {
                if (dsroles.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsroles.Tables[0].Rows)
                    {
                        dbQry = string.Format("Insert Into tblUserRole Values('{0}','{1}')", Convert.ToString(dr["UserName"]), dr["Role"].ToString());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }
            }

            if (dsbranch != null)
            {
                if (dsbranch.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsbranch.Tables[0].Rows)
                    {
                        dbQry = string.Format("Insert Into tblUserbranch Values('{0}','{1}','{2}')", Convert.ToString(dr["UserName"]), dr["BranchCode"].ToString(), dr["DefaultBranchCode"].ToString());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }
            }


            sAuditStr = "User Name " + UserName + " Created. Email Id " + Email + " By User " + Userna;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "User And Options", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();
            return true;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetUserOptionsForId(string userId, string connection, string Types)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        try
        {
            if (Types == "CUSTOMERS")
            {
                dbQry = "select * from tblUserOptions where username like '" + userId + "' And Area = 'CUSTOMERS' order by orderno";
            }
            else if (Types == "SUPPLIERS")
            {
                dbQry = "select * from tblUserOptions where username like '" + userId + "' And Area = 'SUPPLIERS' order by orderno";
            }
            else if (Types == "BANKING")
            {
                dbQry = "select * from tblUserOptions where username like '" + userId + "' And Area = 'BANKING' order by orderno";
            }
            else if (Types == "EXPENSES")
            {
                dbQry = "select * from tblUserOptions where username like '" + userId + "' And Area = 'EXPENSES' order by orderno";
            }
            else if (Types == "INVENTORY")
            {
                dbQry = "select * from tblUserOptions where username like '" + userId + "' And Area = 'INVENTORY' order by orderno";
            }
            else if (Types == "ACCOUNTS")
            {
                dbQry = "select * from tblUserOptions where username like '" + userId + "' And Area = 'ACCOUNTS' order by orderno";
            }
            else if (Types == "RESOURCE")
            {
                dbQry = "select * from tblUserOptions where username like '" + userId + "' And Area = 'RESOURCE' order by orderno";
            }
            else if (Types == "SERVICE")
            {
                dbQry = "select * from tblUserOptions where username like '" + userId + "' And Area = 'SERVICE' order by orderno";
            }
            else if (Types == "OTHER")
            {
                dbQry = "select * from tblUserOptions where username like '" + userId + "' And Area = 'OTHER' order by orderno";
            }
            else if (Types == "REPORT")
            {
                dbQry = "select * from tblUserOptions where username like '" + userId + "' And Area = 'REPORT' order by orderno";
            }
            else if (Types == "SECURITY")
            {
                dbQry = "select * from tblUserOptions where username like '" + userId + "' And Area = 'SECURITY' order by orderno";
            }
            else if (Types == "LEADMANAGEMENT")
            {
                dbQry = "select * from tblUserOptions where username like '" + userId + "' And Area = 'LEADMANAGEMENT' order by orderno";
            }
            else if (Types == "MANUFACTURE")
            {
                dbQry = "select * from tblUserOptions where username like '" + userId + "' And Area = 'MANUFACTURE' order by orderno";
            }
            else if (Types == "PROJECT")
            {
                dbQry = "select * from tblUserOptions where username like '" + userId + "' And Area = 'PROJECT' order by orderno";
            }
            else if (Types == "CONFIG")
            {
                dbQry = "select * from tblUserOptions where username like '" + userId + "' And Area = 'CONFIG' order by orderno";
            }

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void UpdateUserOptions(string connection, DataSet OptionDS, string Userna, string UserName, string Email, bool Locked, bool DateLock, DataSet dsroles, string Password, int EmpNo, string UserGroup, bool HideDeviation, DataSet dsbranch, bool brncheck, string defaultbranch)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("Update tblUserInfo SET Email='{0}',Locked='{1}', DateLock='{3}',Userpwd='{4}',EmpNo = {5},UserGroup='{6}', HideDeviation='{7}',BranchCheck='{8}',DefaultBranch='{9}' Where UserName = '{2}' ", Email, Locked, UserName, DateLock, Password, EmpNo, UserGroup, HideDeviation, brncheck, defaultbranch);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Delete From tblUserRole Where UserName = '{0}' and Role not in ('SMS','ACCSYS') ", UserName);

            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //for (int i = 0; i < roles.Count; i++)
            //{
            //    dbQry = string.Format("Insert Into tblUserRole Values('{0}','{1}')", UserName, roles[i]);
            //    manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //}

            dbQry = string.Format("Delete From tblUserOptions Where UserName = '{0}' and Role not in ('SMS','ACCSYS') ", UserName);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            if (OptionDS != null)
            {
                if (OptionDS.Tables.Count > 0)
                {
                    foreach (DataRow dr in OptionDS.Tables[0].Rows)
                    {
                        dbQry = string.Format("INSERT INTO tblUserOptions VALUES('{0}','{1}','{2}','{3}','{4}',{5},'{6}','{7}','{8}','{9}')", Convert.ToString(dr["UserName"]), dr["Role"].ToString(), Convert.ToString(dr["RoleDesc"]), Convert.ToString(dr["Section"]), Convert.ToString(dr["Area"]), Convert.ToInt32(dr["Orderno"]), Convert.ToBoolean(dr["Add"]), Convert.ToBoolean(dr["Edit"]), Convert.ToBoolean(dr["Delete"]), Convert.ToBoolean(dr["View"]));
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }
            }


            dbQry = string.Format("Delete From tblUserRole Where UserName = '{0}' and Role not in ('SMS','ACCSYS') ", UserName);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            if (dsroles != null)
            {
                if (dsroles.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsroles.Tables[0].Rows)
                    {
                        dbQry = string.Format("Insert Into tblUserRole Values('{0}','{1}')", Convert.ToString(dr["UserName"]), dr["Role"].ToString());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }
            }


            dbQry = string.Format("Delete From tblUserbranch  Where UserID = '{0}'", UserName);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            if (dsbranch != null)
            {
                if (dsbranch.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsbranch.Tables[0].Rows)
                    {
                        dbQry = string.Format("Insert Into tblUserbranch Values('{0}','{1}','{2}')", Convert.ToString(dr["UserName"]), dr["BranchCode"].ToString(), dr["DefaultBranchCode"].ToString());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }
            }

            sAuditStr = "User Name " + UserName + " Created. Email Id " + Email + " By User " + Userna;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "User And Options", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void DeleteUserOptions(string connection, string username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("Delete from tblUserInfo Where UserName = '{0}' ", username);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblUserRole Where UserName = '{0}' ", username);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblUserOptions Where UserName = '{0}' ", username);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet getCreditSales(DateTime startDate, DateTime endDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("SELECT tblSales.billno,tblSales.billdate,tblSales.customername,tbldaybook.amount FROM  ((((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tbldaybook on tblSales.journalid= tbldaybook.transno) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger ON tblSales.CustomerId = tblLedger.LedgerID WHERE tblSales.paymode=3 and tblSales.billdate >=#" + startDate.ToString("MM/dd/yyyy") + "# AND tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# ");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }


    public DataSet listopeningstocks(string username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQry3 = string.Empty;
        DataSet dsd = new DataSet();

        string managerid = string.Empty;
        bool defaultid;


        dbQry3 = "SELECT Username,BranchCheck,DefaultBranch from tblUserInfo  WHERE tblUserinfo.Username='" + username + "'";
        manager.Open();
        dsd = manager.ExecuteDataSet(CommandType.Text, dbQry3);

        if (dsd.Tables[0].Rows.Count > 0)
            managerid = Convert.ToString(dsd.Tables[0].Rows[0]["DefaultBranch"].ToString());
        defaultid = Convert.ToBoolean(dsd.Tables[0].Rows[0]["Branchcheck"]);

        if (defaultid == true)
        {
            dbQry = string.Format("select tblStock.ItemCode,tblStock.ProductName,tblStock.Model, tblCategories.CategoryID, tblCategories.CategoryName, " +
                                " tblStock.ProductDesc,tblStock.OpeningStock,tblProductStock.stock,tblStock.BranchCode " +
                                " from (tblStock inner join tblCategories on tblStock.CategoryID = tblCategories.CategoryID) " +
                                " inner join tblProductStock on tblStock.itemcode = tblProductStock.itemcode Order By tblStock.ItemCode");
        }
        else
        {
            dbQry = string.Format("select tblStock.ItemCode,tblStock.ProductName,tblStock.Model, tblCategories.CategoryID, tblCategories.CategoryName, " +
                                 " tblStock.ProductDesc,tblStock.OpeningStock,tblProductStock.stock,tblStock.BranchCode " +
                                 " from (tblStock inner join tblCategories on tblStock.CategoryID = tblCategories.CategoryID) " +
                                 " inner join tblProductStock on tblStock.itemcode = tblProductStock.itemcode Where tblStock.BranchCode='" + managerid + "' Order By tblStock.ItemCode");
        }
        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    public DataSet ListOpeningProductStock(string connection, string txtSearch, string dropDown,string branch)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";      

        if (dropDown == "ItemCode")
        {
            if (branch == "All")
            {
                //dbQry = "select tblStock.ItemCode,tblStock.ProductName, tblStock.Model, tblCategories.CategoryID, tblCategories.CategoryName, tblStock.ProductDesc,tblStock.OpeningStock,tblproductmaster.stock from (tblStock inner join tblCategories on tblStock.CategoryID = tblCategories.CategoryID) inner join tblproductmaster on tblStock.itemcode = tblproductmaster.itemcode Where tblStock.ItemCode like '" + txtSearch + "' Order By tblStock.ItemCode";
              
                //dbQry = string.Format("select tblStock.ItemCode,tblStock.ProductName,tblStock.Model, tblCategories.CategoryID, tblCategories.CategoryName, " +
                //                " tblStock.ProductDesc,tblStock.OpeningStock,tblProductStock.stock,tblStock.BranchCode " +
                //                " from (tblStock inner join tblCategories on tblStock.CategoryID = tblCategories.CategoryID) " +
                //                " inner join tblProductStock on tblStock.itemcode = tblProductStock.itemcode" +
                //                " Where tblStock.ItemCode like '" + txtSearch + "' Order By tblStock.ItemCode");
                
                dbQry=string.Format(" SELECT  tblProductStock.Stock, tblStock.itemCode, tblStock.OpeningStock, tblStock.ProductName, tblStock.Model, tblStock.ProductDesc, " +
                                    " tblStock.BranchCode, tblCategories.CategoryName FROM tblStock INNER JOIN " +
                                    " tblProductStock ON tblStock.itemCode = tblProductStock.ItemCode AND tblStock.BranchCode = tblProductStock.BranchCode INNER JOIN " +
                                    " tblCategories ON tblStock.CategoryID = tblCategories.CategoryID" +
                                    " Where tblStock.itemCode like '" + txtSearch + "' Order By tblStock.itemCode");
            }
            else
            {
                //dbQry = string.Format("select tblStock.ItemCode,tblStock.ProductName,tblStock.Model, tblCategories.CategoryID, tblCategories.CategoryName, " +
                //               " tblStock.ProductDesc,tblStock.OpeningStock,tblProductStock.stock,tblStock.BranchCode " +
                //               " from (tblStock inner join tblCategories on tblStock.CategoryID = tblCategories.CategoryID) " +
                //               " inner join tblProductStock on tblStock.itemcode = tblProductStock.itemcode" +
                //               " Where tblStock.BranchCode='" + branch + "' and tblStock.ItemCode like '" + txtSearch + "' Order By tblStock.ItemCode");
                 
                 dbQry=string.Format(" SELECT  tblProductStock.Stock, tblStock.itemCode, tblStock.OpeningStock, tblStock.ProductName, tblStock.Model, tblStock.ProductDesc, " +
                                    " tblStock.BranchCode, tblCategories.CategoryName FROM tblStock INNER JOIN " +
                                    " tblProductStock ON tblStock.itemCode = tblProductStock.ItemCode AND tblStock.BranchCode = tblProductStock.BranchCode INNER JOIN " +
                                    " tblCategories ON tblStock.CategoryID = tblCategories.CategoryID" +
                                    " Where tblStock.BranchCode='" + branch + "' and tblStock.itemCode like '" + txtSearch + "' Order By tblStock.itemCode");
            }
        }
        else if (dropDown == "ProductName")
        {
            if (branch == "All")
            {
                //dbQry = "select tblStock.ItemCode,tblStock.ProductName, tblStock.Model, tblCategories.CategoryID, tblCategories.CategoryName, tblStock.ProductDesc,tblStock.OpeningStock,tblproductmaster.stock from (tblStock inner join tblCategories on tblStock.CategoryID = tblCategories.CategoryID) inner join tblproductmaster on tblStock.itemcode = tblproductmaster.itemcode Where tblStock.ProductName like '" + txtSearch + "' Order By tblStock.ItemCode";
                //dbQry = string.Format("select tblStock.ItemCode,tblStock.ProductName,tblStock.Model, tblCategories.CategoryID, tblCategories.CategoryName, " +
                //                 " tblStock.ProductDesc,tblStock.OpeningStock,tblProductStock.stock,tblStock.BranchCode " +
                //                 " from (tblStock inner join tblCategories on tblStock.CategoryID = tblCategories.CategoryID) " +
                //                 " inner join tblProductStock on tblStock.itemcode = tblProductStock.itemcode" +
                //                 " Where tblStock.ProductName like '" + txtSearch + "' Order By tblStock.ItemCode");
                 dbQry=string.Format(" SELECT  tblProductStock.Stock, tblStock.itemCode, tblStock.OpeningStock, tblStock.ProductName, tblStock.Model, tblStock.ProductDesc, " +
                                    " tblStock.BranchCode, tblCategories.CategoryName FROM tblStock INNER JOIN " +
                                    " tblProductStock ON tblStock.itemCode = tblProductStock.ItemCode AND tblStock.BranchCode = tblProductStock.BranchCode INNER JOIN " +
                                    " tblCategories ON tblStock.CategoryID = tblCategories.CategoryID" +
                                    " Where tblStock.ProductName like '" + txtSearch + "' Order By tblStock.itemCode");
            }
            else
            {
                //dbQry = string.Format("select tblStock.ItemCode,tblStock.ProductName,tblStock.Model, tblCategories.CategoryID, tblCategories.CategoryName, " +
                //              " tblStock.ProductDesc,tblStock.OpeningStock,tblProductStock.stock,tblStock.BranchCode " +
                //              " from (tblStock inner join tblCategories on tblStock.CategoryID = tblCategories.CategoryID) " +
                //              " inner join tblProductStock on tblStock.itemcode = tblProductStock.itemcode" +
                //              " Where tblStock.BranchCode='" + branch + "' and tblStock.ProductName like '" + txtSearch + "' Order By tblStock.ItemCode");
                  dbQry=string.Format(" SELECT  tblProductStock.Stock, tblStock.itemCode, tblStock.OpeningStock, tblStock.ProductName, tblStock.Model, tblStock.ProductDesc, " +
                                    " tblStock.BranchCode, tblCategories.CategoryName FROM tblStock INNER JOIN " +
                                    " tblProductStock ON tblStock.itemCode = tblProductStock.ItemCode AND tblStock.BranchCode = tblProductStock.BranchCode INNER JOIN " +
                                    " tblCategories ON tblStock.CategoryID = tblCategories.CategoryID" +
                                     " Where tblStock.BranchCode='" + branch + "' and tblStock.ProductName like '" + txtSearch + "' Order By tblStock.itemCode");
            }
        }
        else if (dropDown == "Model")
        {
            if (branch == "All")
            {
                //dbQry = "select tblStock.ItemCode,tblStock.ProductName,tblStock.Model, tblCategories.CategoryID, tblCategories.CategoryName, tblStock.ProductDesc,tblStock.OpeningStock,tblproductmaster.stock from (tblStock inner join tblCategories on tblStock.CategoryID = tblCategories.CategoryID) inner join tblproductmaster on tblStock.itemcode = tblproductmaster.itemcode Where tblStock.Model like '" + txtSearch + "' Order By tblStock.ItemCode";
                //    dbQry = string.Format("select tblStock.ItemCode,tblStock.ProductName,tblStock.Model, tblCategories.CategoryID, tblCategories.CategoryName, " +
                //                      " tblStock.ProductDesc,tblStock.OpeningStock,tblProductStock.stock,tblStock.BranchCode " +
                //                      " from (tblStock inner join tblCategories on tblStock.CategoryID = tblCategories.CategoryID) " +
                //                      " inner join tblProductStock on tblStock.itemcode = tblProductStock.itemcode" +
                //                      " Where tblStock.Model like '" + txtSearch + "' Order By tblStock.ItemCode");
                dbQry = string.Format(" SELECT  tblProductStock.Stock, tblStock.itemCode, tblStock.OpeningStock, tblStock.ProductName, tblStock.Model, tblStock.ProductDesc, " +
                                      " tblStock.BranchCode, tblCategories.CategoryName FROM tblStock INNER JOIN " +
                                      " tblProductStock ON tblStock.itemCode = tblProductStock.ItemCode AND tblStock.BranchCode = tblProductStock.BranchCode INNER JOIN " +
                                      " tblCategories ON tblStock.CategoryID = tblCategories.CategoryID" +
                                      " Where tblStock.Model like '" + txtSearch + "' Order By tblStock.itemCode");
            }
            else
            {
                //dbQry = string.Format("select tblStock.ItemCode,tblStock.ProductName,tblStock.Model, tblCategories.CategoryID, tblCategories.CategoryName, " +
                //                  " tblStock.ProductDesc,tblStock.OpeningStock,tblProductStock.stock,tblStock.BranchCode " +
                //                  " from (tblStock inner join tblCategories on tblStock.CategoryID = tblCategories.CategoryID) " +
                //                  " inner join tblProductStock on tblStock.itemcode = tblProductStock.itemcode" +
                //                  " Where tblStock.BranchCode='" + branch + "' and tblStock.Model like '" + txtSearch + "' Order By tblStock.ItemCode");
                 dbQry = string.Format(" SELECT  tblProductStock.Stock, tblStock.itemCode, tblStock.OpeningStock, tblStock.ProductName, tblStock.Model, tblStock.ProductDesc, " +
                                      " tblStock.BranchCode, tblCategories.CategoryName FROM tblStock INNER JOIN " +
                                      " tblProductStock ON tblStock.itemCode = tblProductStock.ItemCode AND tblStock.BranchCode = tblProductStock.BranchCode INNER JOIN " +
                                      " tblCategories ON tblStock.CategoryID = tblCategories.CategoryID" +
                                      " Where tblStock.Model like '" + txtSearch + "' Order By tblStock.itemCode");
            }
        }
        else if (dropDown == "Brand")
        {
            if (branch == "All")
            {
                //dbQry = "select tblStock.ItemCode,tblStock.ProductName,tblStock.Model, tblCategories.CategoryID, tblCategories.CategoryName, tblStock.ProductDesc,tblStock.OpeningStock,tblproductmaster.stock from (tblStock inner join tblCategories on tblStock.CategoryID = tblCategories.CategoryID) inner join tblproductmaster on tblStock.itemcode = tblproductmaster.itemcode Where tblStock.ProductDesc like '" + txtSearch + "' Order By tblStock.ItemCode";
                //dbQry = string.Format("select tblStock.ItemCode,tblStock.ProductName,tblStock.Model, tblCategories.CategoryID, tblCategories.CategoryName, " +
                //                   " tblStock.ProductDesc,tblStock.OpeningStock,tblProductStock.stock,tblStock.BranchCode " +
                //                   " from (tblStock inner join tblCategories on tblStock.CategoryID = tblCategories.CategoryID) " +
                //                   " inner join tblProductStock on tblStock.itemcode = tblProductStock.itemcode" +
                //                   " Where tblStock.ProductDesc like '" + txtSearch + "' Order By tblStock.ItemCode");
                 dbQry = string.Format(" SELECT  tblProductStock.Stock, tblStock.itemCode, tblStock.OpeningStock, tblStock.ProductName, tblStock.Model, tblStock.ProductDesc, " +
                                      " tblStock.BranchCode, tblCategories.CategoryName FROM tblStock INNER JOIN " +
                                      " tblProductStock ON tblStock.itemCode = tblProductStock.ItemCode AND tblStock.BranchCode = tblProductStock.BranchCode INNER JOIN " +
                                      " tblCategories ON tblStock.CategoryID = tblCategories.CategoryID" +
                                      " Where tblStock.ProductDesc like '" + txtSearch + "' Order By tblStock.itemCode");
            }
            else
            {
                //dbQry = string.Format("select tblStock.ItemCode,tblStock.ProductName,tblStock.Model, tblCategories.CategoryID, tblCategories.CategoryName, " +
                //                  " tblStock.ProductDesc,tblStock.OpeningStock,tblProductStock.stock,tblStock.BranchCode " +
                //                  " from (tblStock inner join tblCategories on tblStock.CategoryID = tblCategories.CategoryID) " +
                //                  " inner join tblProductStock on tblStock.itemcode = tblProductStock.itemcode" +
                //                  " Where tblStock.BranchCode='" + branch + "' and tblStock.ProductDesc like '" + txtSearch + "' Order By tblStock.ItemCode");
                 dbQry = string.Format(" SELECT  tblProductStock.Stock, tblStock.itemCode, tblStock.OpeningStock, tblStock.ProductName, tblStock.Model, tblStock.ProductDesc, " +
                                      " tblStock.BranchCode, tblCategories.CategoryName FROM tblStock INNER JOIN " +
                                      " tblProductStock ON tblStock.itemCode = tblProductStock.ItemCode AND tblStock.BranchCode = tblProductStock.BranchCode INNER JOIN " +
                                      " tblCategories ON tblStock.CategoryID = tblCategories.CategoryID" +
                                      " Where tblStock.ProductDesc like '" + txtSearch + "' Order By tblStock.itemCode");
            }
        }
        else
        {
            if (branch == "All")
            {
                //dbQry = string.Format("select tblStock.ItemCode,tblStock.ProductName,tblStock.Model, tblCategories.CategoryID, tblCategories.CategoryName, tblStock.ProductDesc,tblStock.OpeningStock,tblproductmaster.stock from (tblStock inner join tblCategories on tblStock.CategoryID = tblCategories.CategoryID) inner join tblproductmaster on tblStock.itemcode = tblproductmaster.itemcode Order By tblStock.ItemCode");
                //dbQry = string.Format("select tblStock.ItemCode,tblStock.ProductName,tblStock.Model, tblCategories.CategoryID, tblCategories.CategoryName, " +
                //                    " tblStock.ProductDesc,tblStock.OpeningStock,tblProductStock.stock,tblStock.BranchCode " +
                //                    " from (tblStock inner join tblCategories on tblStock.CategoryID = tblCategories.CategoryID) " +
                //                    " inner join tblProductStock on tblStock.itemcode = tblProductStock.itemcode Order By tblStock.ItemCode");
                dbQry = string.Format(" SELECT  tblProductStock.Stock, tblStock.itemCode, tblStock.OpeningStock, tblStock.ProductName, tblStock.Model, tblStock.ProductDesc, " +
                                    " tblStock.BranchCode, tblCategories.CategoryName FROM tblStock INNER JOIN " +
                                    " tblProductStock ON tblStock.itemCode = tblProductStock.ItemCode AND tblStock.BranchCode = tblProductStock.BranchCode INNER JOIN " +
                                    " tblCategories ON tblStock.CategoryID = tblCategories.CategoryID");
            }
            else
            {
                //dbQry = string.Format("select tblStock.ItemCode,tblStock.ProductName,tblStock.Model, tblCategories.CategoryID, tblCategories.CategoryName, " +
                //                    " tblStock.ProductDesc,tblStock.OpeningStock,tblProductStock.stock,tblStock.BranchCode " +
                //                    " from (tblStock inner join tblCategories on tblStock.CategoryID = tblCategories.CategoryID) " +
                //                    " inner join tblProductStock on tblStock.itemcode = tblProductStock.itemcode Where tblStock.BranchCode='" + branch + "' Order By tblStock.ItemCode");
                dbQry = string.Format(" SELECT  tblProductStock.Stock, tblStock.itemCode, tblStock.OpeningStock, tblStock.ProductName, tblStock.Model, tblStock.ProductDesc, " +
                                   " tblStock.BranchCode, tblCategories.CategoryName FROM tblStock INNER JOIN " +
                                   " tblProductStock ON tblStock.itemCode = tblProductStock.ItemCode AND tblStock.BranchCode = tblProductStock.BranchCode INNER JOIN " +
                                   " tblCategories ON tblStock.CategoryID = tblCategories.CategoryID"+
                                   " Where tblStock.BranchCode='" + branch + "' Order By tblStock.itemCode");

            }
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void DeleteOpeningStock(string connection, string ItemCode, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string Product = string.Empty;
        string Model = string.Empty;
        string Brand = string.Empty;

        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;
        double Stock = 0;
        double OpeningStock = 0;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = "select * from tblProductMaster where ItemCode = '" + ItemCode + "' ";
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (ds != null)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    Product = ds.Tables[0].Rows[0]["ProductName"].ToString();
                    Model = ds.Tables[0].Rows[0]["Model"].ToString();
                    Brand = ds.Tables[0].Rows[0]["ProductDesc"].ToString();
                    Stock = Convert.ToDouble(ds.Tables[0].Rows[0]["Stock"]);
                }
            }

            dbQry = "select * from tblStock where ItemCode = '" + ItemCode + "' ";
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (ds != null)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    OpeningStock = Convert.ToDouble(ds.Tables[0].Rows[0]["OpeningStock"]);
                }
            }

            dbQry = string.Format("Delete from tblStock Where ItemCode = '{0}' ", ItemCode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock = tblProductMaster.Stock - {0} WHERE ItemCode='{1}'", OpeningStock, ItemCode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Opening Stock For ItemCode : " + ItemCode + " got deleted. Record Details :  User :" + Username + " Model : " + Model + " Brand : " + Brand + " Product Name :" + Product + " Old Opening Stock " + OpeningStock + " Old Current Stock " + Stock;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetOpeningStockForItemcode(string connection, string ItemCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;

        dbQry = "select tblStock.ItemCode,tblStock.ProductName, tblStock.Model, tblCategories.CategoryID, tblCategories.CategoryName,tblStock.DueDate, tblStock.ProductDesc,tblStock.OpeningStock,tblproductmaster.stock from (tblStock inner join tblCategories on tblStock.CategoryID = tblCategories.CategoryID) inner join tblproductmaster on tblStock.itemcode = tblproductmaster.itemcode Where tblStock.ItemCode = '" + ItemCode + "' Order By tblStock.ItemCode";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }



    public bool CheckUserHaveEdit(string usernam, string role)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();

            dbQry = "SELECT COUNT(*) FROM tblUserOptions Where UserName ='" + usernam + "' and Role ='" + role + "' and [Edit] = 'False' ";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
                return false;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool CheckUserHaveView(string usernam, string role)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();

            dbQry = "SELECT Count(*) FROM tblUserOptions Where UserName ='" + usernam + "' and Role ='" + role + "' and [Views] = 'False' ";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
                return false;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool CheckUserHaveAdd(string usernam, string role)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();

            dbQry = "SELECT Count(*) FROM tblUserOptions Where UserName ='" + usernam + "' and Role ='" + role + "' and [Add] = 'False' ";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
                return false;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool IsItemAlreadyInOpening(string connection, string ditemCode, string branch)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        try
        {
            dbQry = "Select itemCode from tblstock where itemcode='" + ditemCode + "' and BranchCode='" + branch + "'";

            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            return false;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public double InsertOpeningStock(string connection, string itemCode, string ProductName, string ProductDesc, string model, int catid, int opening, string Username, DateTime DueDate,string branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        double curstock = 0;
        string sAuditStr = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("INSERT INTO tblStock(itemCode,ProductName,ProductDesc,model,categoryid,OpeningStock,DueDate,BranchCode) VALUES('{0}','{1}','{2}','{3}',{4},{5},'{6}','{7}')",
               itemCode, ProductName, ProductDesc, model, catid, opening, DueDate.ToString("yyyy-MM-dd"),branchcode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = string.Format("UPDATE tblProductStock SET tblProductStock.Stock =  tblProductStock.Stock + {0} WHERE ItemCode='{1}' and BranchCode='{2}'", opening, itemCode,branchcode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = "SELECT Stock FROM tblProductStock Where ItemCode ='" + itemCode + "' and BranchCode='" + branchcode + "'";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                curstock = (double)qtyObj;
            }

            sAuditStr = "Opening Stock For ItemCode : " + itemCode + " added. Record Details :  User : " + Username + " Brand : " + ProductDesc + " Model : " + model + " Product Name : " + ProductName + " Opening Stock : " + opening + " Current Stock + " + curstock + " BranchCode + " + branchcode;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

            return curstock;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public double UpdateOpeningStock(string connection, string itemCode, string ProductName, string ProductDesc, string model, int catid, int opening, int CurrentStock, int adjustedStock, string Username, DateTime DueDate,string branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;
        double curstock = 0;
        double opstock = 0;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("Update tblStock SET tblStock.OpeningStock =  tblStock.OpeningStock + {0} WHERE itemCode='{1}' and BranchCode='{2}'", adjustedStock, itemCode, branchcode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = "SELECT OpeningStock FROM tblStock Where ItemCode ='" + itemCode + "' and BranchCode='" + branchcode + "'";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                opstock = (double)qtyObj;
            }


            dbQry = string.Format("UPDATE tblProductStock SET tblProductStock.Stock =  tblProductStock.Stock + {0} WHERE ItemCode='{1}' and BranchCode='{2}'", adjustedStock, itemCode, branchcode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = "SELECT Stock FROM tblProductStock Where ItemCode ='" + itemCode + "' and BranchCode='" + branchcode + "'";

            object qtyObjj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObjj != null && qtyObjj != DBNull.Value)
            {
                curstock = (double)qtyObjj;
            }

            sAuditStr = "Opening Stock For ItemCode : " + itemCode + " updated. Record Details :  User :" + Username + " Model : " + model + " Brand : " + ProductDesc + " Product Name :" + ProductName + " Old Opening Stock " + opening + " Old Current Stock " + CurrentStock + " New Opening Stock : " + opstock + " New Current Stock : " + curstock + " BranchCode: " + branchcode;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit And Update", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

            return curstock;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public string getEnableVatConfig()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();

            dbQry.Append("SELECT   KeyValue  From tblSettings WHERE keyName='ENBLVAT'");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds.Tables[0].Rows[0]["KeyValue"].ToString();
            else
                return "";
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public string getEnableOpBalanceConfig(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();

            dbQry.Append("SELECT   KeyValue  From tblSettings WHERE keyName='OPBAL'");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds.Tables[0].Rows[0]["KeyValue"].ToString();
            else
                return "";
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }








    public DataSet getFlashstatement(string sDataSource, DateTime startDate, DateTime endDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        string sQry = string.Empty;
        string oQry = string.Empty;
        string sConStr = string.Empty;
        string tQry = string.Empty;
        string pQry = string.Empty;

        try
        {
            manager.Open();

            DataSet dsf;
            DataTable dt;
            DataRow drNew;
            DataColumn dc;
            dsf = new DataSet();
            dt = new DataTable();
            dt.Columns.Add(new DataColumn("Type"));
            dt.Columns.Add(new DataColumn("Voucher Nos"));
            dt.Columns.Add(new DataColumn("Total"));
            dt.Columns.Add(new DataColumn("Cash"));
            dt.Columns.Add(new DataColumn("Credit"));
            dt.Columns.Add(new DataColumn("Bank"));
            dt.Columns.Add(new DataColumn("Finance"));
            dt.Columns.Add(new DataColumn("Exchange"));
            dt.Columns.Add(new DataColumn("Card"));
            dsf.Tables.Add(dt);

            int billno = 0;
            int sno = 1;

            drNew = dt.NewRow();
            drNew["Type"] = "Sales";
            tQry = ("select billno from tblsales inner join tbldaybook on tblsales.journalid = tbldaybook.transno where tblSales.BillDate>=#" + startDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + endDate.ToString("MM/dd/yyyy") + "# ");
            ds = manager.ExecuteDataSet(CommandType.Text, tQry.ToString());
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    if (sno == 1)
                    {
                        drNew["Voucher Nos"] = dr["billno"];
                    }
                    sno = sno + 1;
                }
                //drNew["Voucher Nos"] = billno;
            }
            tQry = ("select sum(tbldaybook.amount) as amount from tblsales inner join tbldaybook on tblsales.journalid = tbldaybook.transno where tblSales.BillDate>=#" + startDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + endDate.ToString("MM/dd/yyyy") + "# ");
            ds = manager.ExecuteDataSet(CommandType.Text, tQry.ToString());
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    drNew["Total"] = dr["Amount"];
                }
            }
            tQry = ("select sum(tbldaybook.amount) as amount from tblsales inner join tbldaybook on tblsales.journalid = tbldaybook.transno where tblSales.BillDate>=#" + startDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.paymode=1 ");
            ds = manager.ExecuteDataSet(CommandType.Text, tQry.ToString());
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    drNew["Cash"] = dr["Amount"];
                }
            }
            tQry = ("select sum(tbldaybook.amount) as amount from tblsales inner join tbldaybook on tblsales.journalid = tbldaybook.transno where tblSales.BillDate>=#" + startDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.paymode=3 ");
            ds = manager.ExecuteDataSet(CommandType.Text, tQry.ToString());
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    drNew["Credit"] = dr["Amount"];
                }
            }
            tQry = ("select sum(tbldaybook.amount) as amount from tblsales inner join tbldaybook on tblsales.journalid = tbldaybook.transno where tblSales.BillDate>=#" + startDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.paymode=2 ");
            ds = manager.ExecuteDataSet(CommandType.Text, tQry.ToString());
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    drNew["Bank"] = dr["Amount"];
                }
            }
            drNew["Finance"] = " ";
            drNew["Exchange"] = " ";
            drNew["Card"] = " ";
            dsf.Tables[0].Rows.Add(drNew);

            drNew = dt.NewRow();
            drNew["Type"] = "Receipt";
            drNew["Voucher Nos"] = " ";
            tQry = ("select sum(tbldaybook.amount) as amount from tblDayBook,tblLedger where tblDayBook.DebtorID = tblLedger.LedgerID and (tblDayBook.VoucherType='Payment') and tblDayBook.transno>=#" + startDate.ToString("MM/dd/yyyy") + "# AND tblDayBook.transno<=#" + endDate.ToString("MM/dd/yyyy") + "# ");
            ds = manager.ExecuteDataSet(CommandType.Text, tQry.ToString());
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    drNew["Total"] = dr["Amount"];
                }
            }
            drNew["Total"] = " ";
            drNew["Cash"] = " ";
            drNew["Credit"] = " ";
            drNew["Bank"] = " ";
            drNew["Finance"] = " ";
            drNew["Exchange"] = " ";
            drNew["Card"] = " ";
            dsf.Tables[0].Rows.Add(drNew);


            if (dsf.Tables[0].Rows.Count > 0)
                return dsf;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet GetCustomerReceivedAmount(string connection, int BillNo, string Types)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            if (Types == "Cash")
            {
                dbQry.Append("SELECT BillNo,Sum(Amount) as TotalAmount From tblReceivedAmount inner join tblreceipt on tblReceivedAmount.ReceiptNo = tblreceipt.JournalId where billno= " + BillNo + " and tblreceipt.paymode='Cash' Group By BillNo");
            }
            else
            {
                dbQry.Append("SELECT BillNo,Sum(Amount) as TotalAmount From tblReceivedAmount inner join tblreceipt on tblReceivedAmount.ReceiptNo = tblreceipt.JournalId where billno= " + BillNo + " and tblreceipt.paymode='Cheque' Group By BillNo");
            }

            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet getSuppliers(string txtSearch, string dropdown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        if ((txtSearch != "") || (txtSearch != null))
        {
            if (dropdown == "LedgerName")
            {
                dbQry = ("select LedgerName,AliasName,ContactName,Add1 As Address,TINnumber,CreditLimit,IIF((OpenBalanceDR IS NULL or OpenBalanceDR=0),IIF((OpenBalanceDR IS NULL or OpenBalanceDR=0) ,'',CAST(OpenBalanceCR AS VARCHAR) + 'CR'),CAST(OpenBalanceDR AS VARCHAR) + 'DR') As OpenBal,Phone,LedgerCategory, LedgerCategory,Mobile,CreditDays,tblledger.BranchCode from tblledger where  groupid =2 And LedgerName like '" + txtSearch + "'");
            }
            else if (dropdown == "AliasName")
            {
                dbQry = ("select LedgerName,AliasName,ContactName,Add1 As Address,TINnumber,CreditLimit,IIF((OpenBalanceDR IS NULL or OpenBalanceDR=0),IIF((OpenBalanceDR IS NULL or OpenBalanceDR=0) ,'',CAST(OpenBalanceCR AS VARCHAR) + 'CR'),CAST(OpenBalanceDR AS VARCHAR) + 'DR') As OpenBal,Phone,LedgerCategory, LedgerCategory,Mobile,CreditDays,tblledger.BranchCode from tblledger where  groupid =2 And AliasName like '" + txtSearch + "' ");
            }
            else if (dropdown == "Phone")
            {
                dbQry = ("select LedgerName,AliasName,ContactName,Add1 As Address,TINnumber,CreditLimit,IIF((OpenBalanceDR IS NULL or OpenBalanceDR=0),IIF((OpenBalanceDR IS NULL or OpenBalanceDR=0) ,'',CAST(OpenBalanceCR AS VARCHAR) + 'CR'),CAST(OpenBalanceDR AS VARCHAR) + 'DR') As OpenBal,Phone,LedgerCategory, LedgerCategory,Mobile,CreditDays,tblledger.BranchCode from tblledger where  groupid =2 And Phone like '" + txtSearch + "' ");
            }
            else if (dropdown == "TinNo")
            {
                dbQry = ("select LedgerName,AliasName,ContactName,Add1 As Address,TINnumber,CreditLimit,IIF((OpenBalanceDR IS NULL or OpenBalanceDR=0),IIF((OpenBalanceDR IS NULL or OpenBalanceDR=0) ,'',CAST(OpenBalanceCR AS VARCHAR) + 'CR'),CAST(OpenBalanceDR AS VARCHAR) + 'DR') As OpenBal,Phone,LedgerCategory, LedgerCategory,Mobile,CreditDays,tblledger.BranchCode from tblledger where  groupid =2 And TinNo like '" + txtSearch + "' ");
            }
            else
            {
                dbQry = ("select LedgerName,AliasName,ContactName,Add1 As Address,TINnumber,CreditLimit,IIF((OpenBalanceDR IS NULL or OpenBalanceDR=0),IIF((OpenBalanceDR IS NULL or OpenBalanceDR=0) ,'',CAST(OpenBalanceCR AS VARCHAR) + 'CR'),CAST(OpenBalanceDR AS VARCHAR) + 'DR') As OpenBal,Phone,LedgerCategory, LedgerCategory,Mobile,CreditDays,tblledger.BranchCode from tblledger where  tblledger.groupid =2");
            }
        }
        else
        {
            dbQry = ("select LedgerName,AliasName,ContactName,Add1 As Address,TINnumber,CreditLimit,IIF((OpenBalanceDR IS NULL or OpenBalanceDR=0),IIF((OpenBalanceDR IS NULL or OpenBalanceDR=0) ,'',CAST(OpenBalanceCR AS VARCHAR) + 'CR'),CAST(OpenBalanceDR AS VARCHAR) + 'DR') As OpenBal,Phone,LedgerCategory, LedgerCategory,Mobile,CreditDays,tblledger.BranchCode from tblledger where  tblledger.groupid =2 ");
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet getCustomers(string txtSearch, string dropdown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        if ((txtSearch != "") || (txtSearch != null))
        {
            if (dropdown == "LedgerName")
            {
                //dbQry = ("select LedgerName,AliasName,ContactName,Add1 As Address,TINnumber,CreditLimit,IIf((IsNull(OpenBalanceDR) or OpenBalanceDR=0),IIf((IsNull(OpenBalanceCR) or OpenBalanceCR=0) ,'',OpenBalanceCR & ' CR'),OpenBalanceDR & ' DR') As OpenBal,Phone,LedgerCategory, LedgerCategory,tblEmployee.empFirstName As ExecutiveIncharge,Mobile,CreditDays from tblledger,tblEmployee where  groupid =1  And LedgerName like '" + txtSearch + "' And tblLedger.GroupID=tblEmployee.empno");
                dbQry = ("select LedgerName,AliasName,ContactName,Add1 As Address,TINnumber,CreditLimit,IIF((OpenBalanceDR IS NULL or OpenBalanceDR=0),IIF((OpenBalanceCR IS NULL or OpenBalanceCR=0) ,'', CAST(OpenBalanceCR AS VARCHAR) + 'CR'),CAST(OpenBalanceDR AS VARCHAR) + 'DR') As OpenBal,Phone,LedgerCategory, LedgerCategory,tblEmployee.empFirstName As ExecutiveIncharge,CreditDays,tblledger.BranchCode from tblledger,tblEmployee where  groupid =1 And LedgerName like '" + txtSearch + "' And tblLedger.GroupID=tblEmployee.empno");
            }
            else if (dropdown == "AliasName")
            {
                //dbQry = ("select LedgerName,AliasName,ContactName,Add1 As Address,TINnumber,CreditLimit,IIf((IsNull(OpenBalanceDR) or OpenBalanceDR=0),IIf((IsNull(OpenBalanceCR) or OpenBalanceCR=0) ,'',OpenBalanceCR & ' CR'),OpenBalanceDR & ' DR') As OpenBal,Phone,LedgerCategory, LedgerCategory,tblEmployee.empFirstName As ExecutiveIncharge,Mobile,CreditDays from tblledger,tblEmployee where  groupid =1 And AliasName like '" + txtSearch + "' And tblLedger.GroupID=tblEmployee.empno");
                dbQry = ("select LedgerName,AliasName,ContactName,Add1 As Address,TINnumber,CreditLimit,IIF((OpenBalanceDR IS NULL or OpenBalanceDR=0),IIF((OpenBalanceCR IS NULL or OpenBalanceCR=0) ,'', CAST(OpenBalanceCR AS VARCHAR) + 'CR'),CAST(OpenBalanceDR AS VARCHAR) + 'DR') As OpenBal,Phone,LedgerCategory, LedgerCategory,tblEmployee.empFirstName As ExecutiveIncharge,CreditDays,tblledger.BranchCode from tblledger,tblEmployee where  groupid =1 And LedgerName like '" + txtSearch + "' And tblLedger.GroupID=tblEmployee.empno");
            }
            else if (dropdown == "Phone")
            {
                //dbQry = ("select LedgerName,AliasName,ContactName,Add1 As Address,TINnumber,CreditLimit,IIf((IsNull(OpenBalanceDR) or OpenBalanceDR=0),IIf((IsNull(OpenBalanceCR) or OpenBalanceCR=0) ,'',OpenBalanceCR & ' CR'),OpenBalanceDR & ' DR') As OpenBal,Phone,LedgerCategory, LedgerCategory,tblEmployee.empFirstName As ExecutiveIncharge,Mobile,CreditDays from tblledger,tblEmployee where  groupid =1 And Phone like '" + txtSearch + "' And tblLedger.GroupID=tblEmployee.empno");
                dbQry = ("select LedgerName,AliasName,ContactName,Add1 As Address,TINnumber,CreditLimit,IIF((OpenBalanceDR IS NULL or OpenBalanceDR=0),IIF((OpenBalanceCR IS NULL or OpenBalanceCR=0) ,'', CAST(OpenBalanceCR AS VARCHAR) + 'CR'),CAST(OpenBalanceDR AS VARCHAR) + 'DR') As OpenBal,Phone,LedgerCategory, LedgerCategory,tblEmployee.empFirstName As ExecutiveIncharge,CreditDays,tblledger.BranchCode from tblledger,tblEmployee where  groupid =1 And LedgerName like '" + txtSearch + "' And tblLedger.GroupID=tblEmployee.empno");
            }
            else
            {
                dbQry = ("select LedgerName,AliasName,ContactName,Add1 As Address,TINnumber,CreditLimit,IIF((OpenBalanceDR IS NULL or OpenBalanceDR=0),IIF((OpenBalanceCR IS NULL or OpenBalanceCR=0) ,'', CAST(OpenBalanceCR AS VARCHAR) + 'CR'),CAST(OpenBalanceDR AS VARCHAR) + 'DR') As OpenBal,Phone,LedgerCategory, LedgerCategory,tblEmployee.empFirstName As ExecutiveIncharge,CreditDays,tblledger.BranchCode from tblledger,tblEmployee where  groupid =1 And tblLedger.GroupID=tblEmployee.empno");
                //dbQry = ("select LedgerName,AliasName,ContactName,Add1 As Address,TINnumber,CreditLimit,IIf((IsNull(OpenBalanceDR) or OpenBalanceDR=0),IIf((IsNull(OpenBalanceCR) or OpenBalanceCR=0) ,'',OpenBalanceCR & ' CR'),OpenBalanceDR & ' DR') As OpenBal,Phone,LedgerCategory, LedgerCategory,tblEmployee.empFirstName As ExecutiveIncharge,Mobile,CreditDays from tblledger,tblEmployee where  groupid =1 And tblLedger.GroupID=tblEmployee.empno");
            }
        }
        else
        {
            //dbQry = ("select LedgerName,AliasName,ContactName,Add1 As Address,TINnumber,CreditLimit,IIf((IsNull(OpenBalanceDR) or OpenBalanceDR=0),IIf((IsNull(OpenBalanceCR) or OpenBalanceCR=0) ,'',OpenBalanceCR & ' CR'),OpenBalanceDR & ' DR') As OpenBal,Phone,LedgerCategory, LedgerCategory,tblEmployee.empFirstName As ExecutiveIncharge,Mobile,CreditDays from tblledger,tblEmployee where  groupid =1 And tblLedger.GroupID=tblEmployee.empno");
            dbQry = ("select LedgerName,AliasName,ContactName,Add1 As Address,TINnumber,CreditLimit,IIF((OpenBalanceDR IS NULL or OpenBalanceDR=0),IIF((OpenBalanceCR IS NULL or OpenBalanceCR=0) ,'', CAST(OpenBalanceCR AS VARCHAR) + 'CR'),CAST(OpenBalanceDR AS VARCHAR) + 'DR') As OpenBal,Phone,LedgerCategory, LedgerCategory,tblEmployee.empFirstName As ExecutiveIncharge,CreditDays,tblledger.BranchCode from tblledger,tblEmployee where  groupid =1 And tblLedger.GroupID=tblEmployee.empno");
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet getProductsstock(string sDataSource, DateTime refDate)
    {
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet ds, dsSales, dsPurcahse;
        string sQry = string.Empty;
        string sConStr = string.Empty;

        sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;

        sQry = "SELECT ItemCode,Productname,Model,ProductDesc,Stock,Rate,Unit,VAT,Discount,BuyUnit,tblCategories.CategoryName FROM tblProductMaster inner join tblCategories on tblProductMaster.categoryid = tblCategories.categoryid ORDER BY tblCategories.CategoryName";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        ds = new DataSet();
        oleAdp.Fill(ds);

        sQry = "SELECT SUM(SI.Qty) as Qty,  SI.ItemCode From ((tblSales S Inner join tblSalesItems SI On S.BillNo = SI.BillNo) Inner join tblProductMaster P ON P.ItemCode = SI.ItemCode) Where S.BillDate >= #" + refDate.ToString("MM/dd/yyyy") + "#" + " Group By SI.ItemCode ORDER BY SI.Itemcode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsSales = new DataSet();
        oleAdp.Fill(dsSales);
        int rowindex = -1;

        foreach (DataRow dr in dsSales.Tables[0].Rows)
        {
            var itemCode = dr["ItemCode"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["ItemCode"].ToString() == itemCode)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) + Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }

            }

            rowindex = -1;
        }

        sQry = "SELECT SUM(PI.Qty) as Qty,  PI.ItemCode From ((tblPurchase P Inner join tblPurchaseItems PI On P.PurchaseID = PI.PurchaseID) Inner join tblProductMaster PM ON PM.ItemCode = PI.ItemCode) Where P.BillDate >= #" + refDate.ToString("MM/dd/yyyy") + "#" + " Group By PI.ItemCode ORDER BY PI.Itemcode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsPurcahse = new DataSet();
        oleAdp.Fill(dsPurcahse);
        rowindex = -1;

        foreach (DataRow dr in dsPurcahse.Tables[0].Rows)
        {
            var itemCode = dr["ItemCode"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["ItemCode"].ToString() == itemCode)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) - Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock > 0 ? currentStock : 0;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }
            }

            rowindex = -1;
        }

        sQry = "SELECT SUM(SI.Qty) as Qty,  SI.ItemCode From ((tblSales S Inner join tblSalesItems SI On S.BillNo = SI.BillNo) Inner join tblProductMaster P ON P.ItemCode = SI.ItemCode) Where S.BillDate >= #" + refDate.ToString("MM/dd/yyyy") + "#" + " Group By SI.ItemCode ORDER BY SI.Itemcode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsSales = new DataSet();
        oleAdp.Fill(dsSales);
        rowindex = -1;

        foreach (DataRow dr in dsSales.Tables[0].Rows)
        {
            var itemCode = dr["ItemCode"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["ItemCode"].ToString() == itemCode)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) - Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }

            }

            rowindex = -1;
        }

        sQry = "SELECT SUM(PI.Qty) as Qty,  PI.ItemCode From ((tblPurchase P Inner join tblPurchaseItems PI On P.PurchaseID = PI.PurchaseID) Inner join tblProductMaster PM ON PM.ItemCode = PI.ItemCode) Where P.BillDate >= #" + refDate.ToString("MM/dd/yyyy") + "#" + " Group By PI.ItemCode ORDER BY PI.Itemcode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsPurcahse = new DataSet();
        oleAdp.Fill(dsPurcahse);
        rowindex = -1;

        foreach (DataRow dr in dsPurcahse.Tables[0].Rows)
        {
            var itemCode = dr["ItemCode"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["ItemCode"].ToString() == itemCode)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) + Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock > 0 ? currentStock : 0;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }
            }

            rowindex = -1;
        }

        oleConn.Close();
        return ds;
    }

    public DataSet ListCreditSalesNotCleared(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "Select BillNo,BillDate,CustomerName,customerid,Amount,Amount as pay from tblSales inner join tblDayBook on tblSales.JournalID = tblDayBook.TransNo Where PayMode = 3 and BillNo not in (select billno from tblreceivedamount)  order by tblSales.CustomerName";

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListCreditSalesCleared(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "Select BillNo,BillDate,CustomerName,customerid,Amount,Amount as pay from tblSales inner join tblDayBook on tblSales.JournalID = tblDayBook.TransNo Where PayMode = 3 and BillNo in (select billno from tblreceivedamount) order by tblSales.CustomerName";

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListSundryCreditorsSuppliers(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}','{2}','{3}','{4}') OR tblGroups.HeadingID IN (11) Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors", "Bank Accounts", "Cash in Hand", "InCome");
            dbQry = string.Format("select LedgerId as customerid, LedgerName as customerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where GroupName = 'Sundry Creditors' ORDER By LedgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListCreditSalesClearedCustomerOdr(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "Select BillNo,BillDate,CustomerName,customerid,Amount,Amount as pay from tblSales inner join tblDayBook on tblSales.JournalID = tblDayBook.TransNo Where PayMode = 3 and BillNo in (select billno from tblreceivedamount) order by tblSales.CustomerName";

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet gethistoryrate(string sDataSource, DateTime refDate, DataSet dsrate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        int rowindex = -1;
        string pQry = string.Empty;
        string pdQry = string.Empty;
        string pddQry = string.Empty;

        try
        {
            manager.Open();

            rowindex = -1;

            foreach (DataRow dr in dsrate.Tables[0].Rows)
            {
                pQry = "select itemcode,mrpstartdate,mrpenddate,mrp from tblproducthistory where itemcode= '" + dr["ItemCode"].ToString() + "' order by mrpdate desc";
                ds = manager.ExecuteDataSet(CommandType.Text, pQry.ToString());

                rowindex = rowindex + 1;
                var itemCode = dr["ItemCode"].ToString();

                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow drd in ds.Tables[0].Rows)
                    {
                        double MRP = Convert.ToDouble(drd["MRP"]);
                        if (drd["ItemCode"].ToString() == itemCode)
                        {
                            if (DateTime.Parse(refDate.ToString()) >= DateTime.Parse(drd["mrpstartdate"].ToString()) && DateTime.Parse(refDate.ToString()) <= DateTime.Parse(drd["mrpenddate"].ToString()))
                            {
                                dsrate.Tables[0].Rows[rowindex]["MRP"] = MRP;
                                dsrate.Tables[0].Rows[rowindex].EndEdit();
                                dsrate.Tables[0].Rows[rowindex].AcceptChanges();
                                break;
                            }
                            else
                            {


                            }
                        }
                    }
                    //rowindex = -1;
                }
            }



            //pQry = "select itemcode,mrpstartdate,mrpenddate,mrp from tblproducthistory order by mrpdate desc,itemcode";
            //ds = manager.ExecuteDataSet(CommandType.Text, pQry.ToString());

            //foreach (DataRow dr in ds.Tables[0].Rows)
            //{
            //    var itemCode = dr["ItemCode"].ToString();
            //    double MRP = Convert.ToDouble(dr["MRP"]);

            //    foreach (DataRow row in dsrate.Tables[0].Rows)
            //    {
            //        rowindex = rowindex + 1;

            //        if (row["ItemCode"].ToString() == itemCode)
            //        {
            //            if (DateTime.Parse(refDate.ToString()) >= DateTime.Parse(dr["mrpstartdate"].ToString()) && DateTime.Parse(refDate.ToString()) <= DateTime.Parse(dr["mrpenddate"].ToString()))
            //            {                            
            //                dsrate.Tables[0].Rows[rowindex]["MRP"] = MRP;
            //                dsrate.Tables[0].Rows[rowindex].EndEdit();
            //                dsrate.Tables[0].Rows[rowindex].AcceptChanges();
            //                break;
            //            }
            //        }
            //    }
            //    rowindex = -1;
            //}


            rowindex = -1;
            foreach (DataRow dr in dsrate.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                pdQry = "select itemcode,dpstartdate,dpenddate,dp from tblproducthistory where itemcode= '" + dr["ItemCode"].ToString() + "' order by dpdate desc";
                ds = manager.ExecuteDataSet(CommandType.Text, pdQry.ToString());
                var itemCode1 = dr["ItemCode"].ToString();

                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow drd in ds.Tables[0].Rows)
                    {
                        double DP = Convert.ToDouble(drd["DP"]);
                        if (drd["ItemCode"].ToString() == itemCode1)
                        {
                            if (DateTime.Parse(refDate.ToString()) >= DateTime.Parse(drd["dpstartdate"].ToString()) && DateTime.Parse(refDate.ToString()) <= DateTime.Parse(drd["dpenddate"].ToString()))
                            {
                                dsrate.Tables[0].Rows[rowindex]["DP"] = DP;
                                dsrate.Tables[0].Rows[rowindex].EndEdit();
                                dsrate.Tables[0].Rows[rowindex].AcceptChanges();
                                break;
                            }
                            else
                            {


                            }
                        }
                    }
                    //rowindex = -1;
                }
            }

            rowindex = -1;
            foreach (DataRow dr in dsrate.Tables[0].Rows)
            {
                rowindex = rowindex + 1;
                var itemCode2 = dr["ItemCode"].ToString();

                pQry = "select itemcode,mrpstartdate,mrpenddate,dpstartdate,dpenddate,nlcstartdate,nlcenddate,mrp,dp,nlc from tblproducthistory where itemcode= '" + dr["ItemCode"].ToString() + "' order by nlcdate desc";
                ds = manager.ExecuteDataSet(CommandType.Text, pQry.ToString());
                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow drd in ds.Tables[0].Rows)
                    {
                        double NLC = Convert.ToDouble(drd["NLC"]);
                        if (drd["ItemCode"].ToString() == itemCode2)
                        {
                            if (DateTime.Parse(refDate.ToString()) >= DateTime.Parse(drd["nlcstartdate"].ToString()) && DateTime.Parse(refDate.ToString()) <= DateTime.Parse(drd["nlcenddate"].ToString()))
                            {
                                dsrate.Tables[0].Rows[rowindex]["NLC"] = NLC;
                                dsrate.Tables[0].Rows[rowindex].EndEdit();
                                dsrate.Tables[0].Rows[rowindex].AcceptChanges();
                                break;
                            }
                            else
                            {


                            }
                        }
                    }
                    //rowindex = -1;
                }
            }


            //pdQry = "select itemcode,dpstartdate,dpenddate,dp from tblproducthistory order by dpdate desc,itemcode";
            //ds = manager.ExecuteDataSet(CommandType.Text, pdQry.ToString());

            //foreach (DataRow dr in ds.Tables[0].Rows)
            //{
            //    var itemCode = dr["ItemCode"].ToString();
            //    double DP = Convert.ToDouble(dr["DP"]);

            //    foreach (DataRow row in dsrate.Tables[0].Rows)
            //    {
            //        rowindex = rowindex + 1;

            //        if (row["ItemCode"].ToString() == itemCode)
            //        {
            //            if (DateTime.Parse(refDate.ToString()) >= DateTime.Parse(dr["dpstartdate"].ToString()) && DateTime.Parse(refDate.ToString()) <= DateTime.Parse(dr["dpenddate"].ToString()))
            //            {

            //                dsrate.Tables[0].Rows[rowindex]["DP"] = DP;
            //                dsrate.Tables[0].Rows[rowindex].EndEdit();
            //                dsrate.Tables[0].Rows[rowindex].AcceptChanges();
            //                break;
            //            }
            //        }
            //    }
            //    rowindex = -1;
            //}

            //pddQry = "select itemcode,nlcstartdate,nlcenddate,nlc from tblproducthistory order by nlcdate desc,itemcode";
            //ds = manager.ExecuteDataSet(CommandType.Text, pddQry.ToString());

            //foreach (DataRow dr in ds.Tables[0].Rows)
            //{
            //    var itemCode = dr["ItemCode"].ToString();
            //    double  NLC = Convert.ToDouble(dr["NLC"]);

            //    foreach (DataRow row in dsrate.Tables[0].Rows)
            //    {
            //        rowindex = rowindex + 1;

            //        if (row["ItemCode"].ToString() == itemCode)
            //        {
            //            if (DateTime.Parse(refDate.ToString()) >= DateTime.Parse(dr["nlcstartdate"].ToString()) && DateTime.Parse(refDate.ToString()) <= DateTime.Parse(dr["nlcenddate"].ToString()))
            //            {                            
            //                dsrate.Tables[0].Rows[rowindex]["NLC"] = NLC;
            //                dsrate.Tables[0].Rows[rowindex].EndEdit();
            //                dsrate.Tables[0].Rows[rowindex].AcceptChanges();
            //                break;
            //            }
            //        }
            //    }
            //    rowindex = -1;
            //}

            if (dsrate.Tables[0].Rows.Count > 0)
                return dsrate;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet getPurchaselist(DateTime startDate, DateTime endDate, string Types)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        if (Types == "CategoryWise")
        {
            dbQry = ("SELECT sum((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as amount,sum(tblPurchaseItems.Qty) as qty,tblcategories.categoryname,sum(tblPurchaseItems.Qty * tblProductMaster.nlc) as nlcvalue,sum(tblSalesItems.Qty * tblProductMaster.dealerrate) as dpvalue,sum(tblSalesItems.Qty * tblProductMaster.rate) as mrpvalue FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# group by tblcategories.categoryname");
        }
        else if (Types == "ProductWise")
        {
            dbQry = ("SELECT sum((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as amount,sum(tblPurchaseItems.Qty) as qty,tblProductMaster.productname,sum(tblPurchaseItems.Qty * tblProductMaster.nlc) as nlcvalue,sum(tblSalesItems.Qty * tblProductMaster.dealerrate) as dpvalue,sum(tblSalesItems.Qty * tblProductMaster.rate) as mrpvalue FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# group by tblProductMaster.productname");
        }
        else if (Types == "BrandWise")
        {
            dbQry = ("SELECT sum((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as amount,sum(tblPurchaseItems.Qty) as qty,tblProductMaster.productdesc,sum(tblPurchaseItems.Qty * tblProductMaster.nlc) as nlcvalue,sum(tblPurchaseItems.Qty * tblProductMaster.dealerrate) as dpvalue,sum(tblPurchaseItems.Qty * tblProductMaster.rate) as mrpvalue FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# group by tblProductMaster.productdesc");
        }
        else if (Types == "BrandProductWise")
        {
            dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount, tblPurchaseItems.Rate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# ");
        }
        else if (Types == "BrandProductModelWise")
        {
            dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblSalesItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount, tblPurchaseItems.Rate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# ");
        }
        else if (Types == "BillWise")
        {
            dbQry = ("SELECT sum((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblSalesItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,sum(tblPurchaseItems.Qty) as qty,sum(tblPurchaseItems.Qty * tblProductMaster.nlc) as nlc,sum(tblPurchaseItems.Qty * tblProductMaster.rate) as mrp,sum(tblPurchaseItems.Qty * tblProductMaster.dealerrate) as dp,tblPurchase.billno  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.billno");
        }
        else if (Types == "BrandModelWise")
        {
            dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount, tblPurchaseItems.Rate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.model,tblProductMaster.dealerrate as dp FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# ");
        }
        else if (Types == "CategoryBrandWise")
        {
            dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount, tblPurchaseItems.Rate,tblPurchaseItems.Qty,tblcategories.categoryname,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.dealerrate as dp,tblProductMaster.rate as mrp FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# ");
        }
        else if (Types == "CategoryBrandProductWise")
        {
            dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount, tblPurchaseItems.Rate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblcategories.categoryname  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# ");
        }
        else if (Types == "PayModeWise")
        {
            dbQry = ("SELECT sum((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,sum(tblPurchaseItems.Qty) as qty,sum(tblPurchaseItems.Qty * tblProductMaster.nlc) as nlc,sum(tblPurchaseItems.Qty * tblProductMaster.rate) as mrp,sum(tblPurchaseItems.Qty * tblProductMaster.dealerrate) as dp,tblPurchase.paymode  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.paymode");
        }
        //else if (Types == "ExecutiveWise")
        //{
        //    dbQry = ("SELECT sum((((tblPurchaseItems.Qty * tblPurchaseItems.Rate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.rate) + (((tblPurchaseItems.Qty*tblPurchaseItems.rate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.Rate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.Rate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.Rate)) * tblPurchaseItems.CST/100)))) as rate,sum(tblPurchaseItems.Qty) as qty,sum(tblPurchaseItems.Qty * tblProductMaster.nlc) as nlc,sum(tblPurchaseItems.Qty * tblProductMaster.rate) as mrp,sum(tblPurchaseItems.Qty * tblProductMaster.dealerrate) as dp,tblPurchase.executivename  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.BillNo = tblPurchaseItems.BillNo) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.executivename");
        //}
        else if (Types == "DateWise")
        {
            dbQry = ("SELECT sum((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,sum(tblPurchaseItems.Qty) as qty,sum(tblPurchaseItems.Qty * tblProductMaster.nlc) as nlc,sum(tblPurchaseItems.Qty * tblProductMaster.rate) as mrp,sum(tblPurchaseItems.Qty * tblProductMaster.dealerrate) as dp,tblPurchase.billdate  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# group by tblPurchase.billdate");
        }
        else if (Types == "CustomerWise")
        {
            dbQry = ("SELECT sum((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblSalesItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.raPurchaseRatete)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,sum(tblPurchaseItems.Qty) as qty,sum(tblPurchaseItems.Qty * tblProductMaster.nlc) as nlc,sum(tblPurchaseItems.Qty * tblProductMaster.rate) as mrp,sum(tblPurchaseItems.Qty * tblProductMaster.dealerrate) as dp,tblledger.ledgername as Customername  FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblledger on tblledger.ledgerid = tblpurchase.supplierid WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# group by tblledger.ledgername");
        }
        else if (Types == "MonthWise")
        {
            dbQry = ("SELECT sum((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblSalesItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,sum(tblPurchaseItems.Qty) as qty,sum(tblPurchaseItems.Qty * tblProductMaster.nlc) as nlc,sum(tblPurchaseItems.Qty * tblProductMaster.rate) as mrp,sum(tblPurchaseItems.Qty * tblProductMaster.dealerrate) as dp,month(tblPurchase.billdate) as monthname  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "#  group by month(tblPurchase.billdate) ");
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet GetReceiptForLedger(string connection, int Ledgerid)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            //dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName,tblDayBook.CreditorID,tblDayBook.DebtorID,Creditor.Mobile, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            //dbQry.Append("tblDayBook.VoucherType,Receipt.ReceiptNo, tblDayBook.RefNo, tblDayBook.ChequeNo, Receipt.Paymode, tblDayBook.Amount - Sum(iif(isnull(tblreceivedamount.amount),0,tblreceivedamount.amount )) AS rAmount FROM  (((tblDayBook INNER JOIN ");
            //dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
            //dbQry.Append(" tblReceipt Receipt ON tblDayBook.TransNo = Receipt.JournalID) LEFT join tblreceivedamount on Receipt.JournalId = tblreceivedamount.ReceiptNo");
            //dbQry.AppendFormat(" Where tblDayBook.transno not in (select receiptno from tblreceivedamount) And (tblDayBook.VoucherType='Receipt' or tblDayBook.VoucherType='Journal') And Creditor.Ledgerid = " + Ledgerid + " group by tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName,tblDayBook.CreditorID,tblDayBook.DebtorID,Creditor.Mobile, Debitor.LedgerName, tblDayBook.Amount, tblDayBook.Narration, tblDayBook.VoucherType,Receipt.ReceiptNo, tblDayBook.RefNo, tblDayBook.ChequeNo, Receipt.Paymode,tblreceivedamount.amount  having tblDayBook.Amount - Sum(iif(isnull(tblreceivedamount.amount),0,tblreceivedamount.amount )) > 0 ");

            dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName,tblDayBook.CreditorID,tblDayBook.DebtorID,Creditor.Mobile, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType,Receipt.ReceiptNo, tblDayBook.RefNo, tblDayBook.ChequeNo, Receipt.Paymode, tblDayBook.Amount - Sum(iif(isnull(r.ramount),0,r.ramount )) AS rAmount FROM  (((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
            dbQry.Append(" tblReceipt Receipt ON tblDayBook.TransNo = Receipt.JournalID) LEFT join (select  billno,ReceiptNo,sum(Amount) as ramount FROM tblReceivedAmount  group by  billno,ReceiptNo ) As r on r.receiptno = Receipt.JournalID ");
            dbQry.AppendFormat(" Where (tblDayBook.VoucherType='Receipt' or tblDayBook.VoucherType='Journal') And Creditor.Ledgerid = " + Ledgerid + " group by tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName,tblDayBook.CreditorID,tblDayBook.DebtorID,Creditor.Mobile, Debitor.LedgerName, tblDayBook.Amount, tblDayBook.Narration, tblDayBook.VoucherType,Receipt.ReceiptNo, tblDayBook.RefNo, tblDayBook.ChequeNo, Receipt.Paymode  having tblDayBook.Amount - Sum(iif(isnull(r.ramount),0,r.ramount )) > 0 ");


            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetPaymentForLedger(string connection, int Ledgerid)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            //dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName,tblDayBook.CreditorID,tblDayBook.DebtorID,Creditor.Mobile, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            //dbQry.Append("tblDayBook.VoucherType,tblPaymentamount.PaymentNo as receiptno, tblDayBook.RefNo, tblDayBook.ChequeNo, Payment.Paymode FROM  (((tblDayBook INNER JOIN ");
            //dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
            //dbQry.Append(" tblPayment Payment ON tblDayBook.TransNo = Payment.JournalID) LEFT join tblPaymentamount on Payment.JournalId = tblPaymentamount.PaymentNo");
            //dbQry.AppendFormat(" Where tblDayBook.transno not in (select Paymentno from tblPaymentamount) And (tblDayBook.VoucherType='Payment' or tblDayBook.VoucherType='Journal') And Debitor.Ledgerid = {0} ", Ledgerid);

            dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName,tblDayBook.CreditorID,tblDayBook.DebtorID,Creditor.Mobile, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType,r.PaymentNo as receiptno, tblDayBook.RefNo, tblDayBook.ChequeNo, Payment.Paymode, tblDayBook.Amount - Sum(iif(isnull(r.ramount),0,r.ramount )) AS rAmount FROM  (((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
            dbQry.Append(" tblPayment Payment ON tblDayBook.TransNo = Payment.JournalID) LEFT join (select  billno,paymentno,sum(Amount) as ramount FROM tblpaymentAmount  group by  billno,paymentno ) As r on r.paymentno = Payment.JournalID ");
            dbQry.AppendFormat(" Where (tblDayBook.VoucherType='Payment' or tblDayBook.VoucherType='Journal') And Debitor.Ledgerid = " + Ledgerid + " group by tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName,tblDayBook.CreditorID,tblDayBook.DebtorID,Creditor.Mobile, Debitor.LedgerName, tblDayBook.Amount, tblDayBook.Narration, tblDayBook.VoucherType,r.paymentNo, tblDayBook.RefNo, tblDayBook.ChequeNo, Payment.Paymode  having tblDayBook.Amount - Sum(iif(isnull(r.ramount),0,r.ramount )) > 0 ");


            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetCustReceivedAmountCustomer(string connection, int LedgerId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            //dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName,tblDayBook.CreditorID,tblDayBook.DebtorID,Creditor.Mobile, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            //dbQry.Append("tblDayBook.VoucherType,Receipt.ReceiptNo, tblDayBook.RefNo, tblDayBook.ChequeNo, Receipt.Paymode FROM  (((tblDayBook INNER JOIN ");
            //dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
            //dbQry.Append(" tblReceipt Receipt ON tblDayBook.TransNo = Receipt.JournalID) LEFT join tblreceivedamount on Receipt.JournalId = tblreceivedamount.ReceiptNo");
            //dbQry.AppendFormat(" Where Creditor.Ledgerid = {0}", Ledgerid);

            dbQry.Append("SELECT tblReceivedAmount.BillNo,tblReceivedAmount.Amount,tblReceivedAmount.ReceiptNo,tblReceivedAmount.ID From (tblReceivedAmount inner join tbldaybook ON tblDayBook.TransNo = tblReceivedAmount.receiptno) INNER JOIN  tblLedger ON tblDayBook.CreditorID = tblLedger.LedgerID ");
            dbQry.AppendFormat(" Where tblLedger.Ledgerid = {0}", LedgerId);

            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetSuppPayAmountCustomer(string connection, int LedgerId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {

            //dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName,tblDayBook.CreditorID,tblDayBook.DebtorID,Creditor.Mobile, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            //dbQry.Append("tblDayBook.VoucherType,Receipt.ReceiptNo, tblDayBook.RefNo, tblDayBook.ChequeNo, Receipt.Paymode FROM  (((tblDayBook INNER JOIN ");
            //dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
            //dbQry.Append(" tblReceipt Receipt ON tblDayBook.TransNo = Receipt.JournalID) LEFT join tblreceivedamount on Receipt.JournalId = tblreceivedamount.ReceiptNo");
            //dbQry.AppendFormat(" Where Creditor.Ledgerid = {0}", Ledgerid);

            dbQry.Append("SELECT tblPaymentAmount.BillNo,tblPaymentAmount.Amount,tblPaymentAmount.PaymentNo as receiptno,tblPaymentAmount.id From (tblPaymentAmount inner join tbldaybook ON tblDayBook.TransNo = tblPaymentAmount.Paymentno) INNER JOIN  tblLedger ON tblDayBook.debtorid = tblLedger.LedgerID ");
            dbQry.AppendFormat(" Where tblLedger.Ledgerid = {0}", LedgerId);

            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public void InsertReceivedAmt(string connection, int Transno, int BillNo, double Amount, string usernam)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        string sAuditStr = string.Empty;

        StringBuilder dbQry2 = new StringBuilder();
        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("INSERT INTO tblReceivedAmount(ReceiptNo,BillNo,Amount) VALUES({0},{1},{2})", Transno.ToString(), BillNo, Amount);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            sAuditStr = "Adjustment Transaction: " + Transno + " added. Record Details : User=" + usernam + " DateTime:" + DateTime.Now.ToString();
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Add New", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void DeleteReceivedAmt(string connection, int ID, int BillNo, string usernam)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        StringBuilder dbQry2 = new StringBuilder();
        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("Delete From tblReceivedAmount Where ID = {0} and BillNo={1}", ID, BillNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Adjustment Transaction Bill No : " + BillNo + " ID : " + ID + " deleted. Record Details : User=" + usernam + " DateTime:" + DateTime.Now.ToString();

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Delete", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet getPurchasereport(DateTime startDate, DateTime endDate, string Category, string brand, string product)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        if (Category == "All")
        {
            if (brand == "All")
            {
                if (product == "All")
                {
                    dbQry = ("SELECT tblProductMaster.productdesc as brand,tblProductMaster.productname,tblProductMaster.model,(((tblPurchaseItems.Qty * tblPurchaseItems.purchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.purchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)) * tblPurchaseItems.CST/100))) as amount,tblPurchaseItems.purchaseRate,tblPurchaseItems.Qty,tblCategories.categoryname FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger ON tblPurchase.SupplierId = tblLedger.LedgerID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# order by productdesc,productname");
                }
                else
                {
                    dbQry = ("SELECT tblProductMaster.productdesc as brand,tblProductMaster.productname,tblProductMaster.model,(((tblPurchaseItems.Qty * tblPurchaseItems.purchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.purchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)-((tblSalesItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)) * tblPurchaseItems.CST/100))) as amount,tblPurchaseItems.purchaseRate,tblPurchaseItems.Qty,tblCategories.categoryname FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger ON tblPurchase.SupplierId = tblLedger.LedgerID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblProductMaster.productname = '" + product + "' order by productdesc,productname");
                }
            }
            else
            {
                if (product == "All")
                {
                    dbQry = ("SELECT tblProductMaster.productdesc as brand,tblProductMaster.productname,tblProductMaster.model,tblPurchaseItems.purchaseRate,(((tblPurchaseItems.Qty * tblPurchaseItems.purchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.purchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)) * tblPurchaseItems.CST/100))) as amount,tblPurchaseItems.Qty,tblCategories.categoryname FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger ON tblPurchase.SupplierId = tblLedger.LedgerID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblProductMaster.productdesc = '" + brand + "' order by productdesc,productname");
                }
                else
                {
                    dbQry = ("SELECT tblProductMaster.productdesc as brand,tblProductMaster.productname,tblProductMaster.model,tblPurchaseItems.purchaseRate,tblPurchaseItems.Qty,(((tblPurchaseItems.Qty * tblPurchaseItems.purchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.purchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblSalesItems.purchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)) * tblPurchaseItems.CST/100))) as amount,tblCategories.categoryname FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblSales.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger ON tblPurchase.SupplierId = tblLedger.LedgerID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblProductMaster.productdesc = '" + brand + "' and tblProductMaster.productname = '" + product + "' order by productdesc,productname");
                }
            }
        }
        else
        {
            if (brand == "All")
            {
                if (product == "All")
                {
                    dbQry = ("SELECT tblProductMaster.productdesc as brand,tblProductMaster.productname,tblProductMaster.model,tblPurchaseItems.purchaseRate,(((tblPurchaseItems.Qty * tblPurchaseItems.purchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.purchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)) * tblPurchaseItems.CST/100))) as amount,tblPurchaseItems.Qty,tblCategories.categoryname FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger ON tblPurchase.SupplierId = tblLedger.LedgerID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblCategories.categoryname = '" + Category + "' order by productdesc,productname");
                }
                else
                {
                    dbQry = ("SELECT tblProductMaster.productdesc as brand,tblProductMaster.productname,tblProductMaster.model,(((tblPurchaseItems.Qty * tblPurchaseItems.purchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.purchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)) * tblPurchaseItems.CST/100))) as amount,tblPurchaseItems.purchaseRate,tblPurchaseItems.Qty,tblCategories.categoryname FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger ON tblPurchase.SupplierId = tblLedger.LedgerID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "#  and tblCategories.categoryname = '" + Category + "' and tblProductMaster.productname = '" + product + "' order by productdesc,productname");
                }
            }
            else
            {
                if (product == "All")
                {
                    dbQry = ("SELECT tblProductMaster.productdesc as brand,tblProductMaster.productname,tblProductMaster.model,(((tblPurchaseItems.Qty * tblPurchaseItems.purchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.purchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)) * tblPurchaseItems.CST/100))) as amount,tblPurchaseItems.purchaseRate,tblPurchaseItems.Qty,tblCategories.categoryname FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger ON tblPurchase.SupplierId = tblLedger.LedgerID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblCategories.categoryname = '" + Category + "' and tblProductMaster.productdesc = '" + brand + "' order by productdesc,productname");
                }
                else
                {
                    dbQry = ("SELECT tblProductMaster.productdesc as brand,tblProductMaster.productname,(((tblPurchaseItems.Qty * tblPurchaseItems.purchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.purchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.purchaseRate)) * tblPurchaseItems.CST/100))) as amount,tblProductMaster.model,tblPurchaseItems.purchaseRate,tblPurchaseItems.Qty,tblCategories.categoryname FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblLedger ON tblPurchase.SupplierId = tblLedger.LedgerID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblCategories.categoryname = '" + Category + "' and tblProductMaster.productdesc = '" + brand + "' and tblProductMaster.productname = '" + product + "' order by productdesc,productname");
                }
            }
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    //public DataSet gethistoryallrates(string sDataSource, DateTime refDate)
    //{
    //    DBManager manager = new DBManager(DataProvider.SqlServer);
    //    manager.ConnectionString = CreateConnectionString(this.ConnectionString);
    //    DataSet ds = new DataSet();
    //    StringBuilder dbQry = new StringBuilder();
    //    int rowindex = -1;
    //    string pQry = string.Empty;

    //    try
    //    {
    //        manager.Open();

    //       DataSet dsd = new DataSet();
    //       DataTable dtd = new DataTable();

    //       dtd.Columns.Add(new DataColumn("Itemcode"));
    //       dtd.Columns.Add(new DataColumn("Ratetype"));
    //       dtd.Columns.Add(new DataColumn("Startdate"));
    //       dtd.Columns.Add(new DataColumn("Enddate"));
    //       dtd.Columns.Add(new DataColumn("Rate"));
    //       dsd.Tables.Add(dtd);

    //       pQry = "select itemcode,mrpstartdate,mrpenddate,mrp from tblproducthistory order by mrpdate desc";
    //       ds = manager.ExecuteDataSet(CommandType.Text, pQry.ToString());

    //       rowindex = rowindex + 1;

    //       if (ds.Tables[0].Rows.Count > 0)
    //       {
    //           foreach (DataRow drd in ds.Tables[0].Rows)
    //           {
    //               if (DateTime.Parse(refDate.ToString()) >= DateTime.Parse(drd["mrpstartdate"].ToString()) && DateTime.Parse(refDate.ToString()) <= DateTime.Parse(drd["mrpenddate"].ToString()))
    //               {
    //                   var MRP = decimal.Parse(ds.Tables[0].Rows[rowindex]["MRP"].ToString());
    //                   DataRow dr_final12 = dtd.NewRow();
    //                   dr_final12["Itemcode"] = drd["Itemcode"];
    //                   dr_final12["Ratetype"] = "MRP";
    //                   dr_final12["Startdate"] = drd["mrpstartdate"];
    //                   dr_final12["Enddate"] = drd["mrpenddate"];
    //                   dr_final12["Rate"] = MRP;
    //                   dtd.Rows.Add(dr_final12);
    //                   break;
    //               }
    //               else
    //               {


    //               }
    //           }
    //       }

    //        //rowindex = -1;
    //        //foreach (DataRow dr in dsrate.Tables[0].Rows)
    //        //{
    //        //    rowindex = rowindex + 1;

    //        //    pQry = "select itemcode,mrpstartdate,mrpenddate,dpstartdate,dpenddate,nlcstartdate,nlcenddate,mrp,dp,nlc from tblproducthistory where itemcode= '" + dr["ItemCode"].ToString() + "' order by dpdate desc";
    //        //    ds = manager.ExecuteDataSet(CommandType.Text, pQry.ToString());
    //        //    if (ds.Tables[0].Rows.Count > 0)
    //        //    {
    //        //        foreach (DataRow drd in ds.Tables[0].Rows)
    //        //        {
    //        //            var itemCode1 = drd["ItemCode"].ToString();

    //        //            if (dr["ItemCode"].ToString() == itemCode1)
    //        //            {
    //        //                if (DateTime.Parse(refDate.ToString()) >= DateTime.Parse(drd["dpstartdate"].ToString()) && DateTime.Parse(refDate.ToString()) <= DateTime.Parse(drd["dpenddate"].ToString()))
    //        //                {
    //        //                    dsrate.Tables[0].Rows[rowindex]["DP"] = Convert.ToDouble(drd["DP"]);
    //        //                    dsrate.Tables[0].Rows[rowindex].EndEdit();
    //        //                    dsrate.Tables[0].Rows[rowindex].AcceptChanges();
    //        //                    break;
    //        //                }
    //        //                else
    //        //                {


    //        //                }
    //        //            }
    //        //        }
    //        //        //rowindex = -1;
    //        //    }
    //        //}

    //        //rowindex = -1;
    //        //foreach (DataRow dr in dsrate.Tables[0].Rows)
    //        //{
    //        //    rowindex = rowindex + 1;

    //        //    pQry = "select itemcode,mrpstartdate,mrpenddate,dpstartdate,dpenddate,nlcstartdate,nlcenddate,mrp,dp,nlc from tblproducthistory where itemcode= '" + dr["ItemCode"].ToString() + "' order by nlcdate desc";
    //        //    ds = manager.ExecuteDataSet(CommandType.Text, pQry.ToString());
    //        //    if (ds.Tables[0].Rows.Count > 0)
    //        //    {
    //        //        foreach (DataRow drd in ds.Tables[0].Rows)
    //        //        {
    //        //            var itemCode2 = drd["ItemCode"].ToString();

    //        //            if (dr["ItemCode"].ToString() == itemCode2)
    //        //            {
    //        //                if (DateTime.Parse(refDate.ToString()) >= DateTime.Parse(drd["nlcstartdate"].ToString()) && DateTime.Parse(refDate.ToString()) <= DateTime.Parse(drd["nlcenddate"].ToString()))
    //        //                {
    //        //                    dsrate.Tables[0].Rows[rowindex]["NLC"] = Convert.ToDouble(drd["NLC"]);
    //        //                    dsrate.Tables[0].Rows[rowindex].EndEdit();
    //        //                    dsrate.Tables[0].Rows[rowindex].AcceptChanges();
    //        //                    break;
    //        //                }
    //        //                else
    //        //                {


    //        //                }
    //        //            }
    //        //        }
    //        //        //rowindex = -1;
    //        //    }
    //        //}

    //        if (dsd.Tables[0].Rows.Count > 0)
    //            return dsd;
    //        else
    //            return null;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //}

    public DataSet getallhistoryrate(string sDataSource, DataSet dsrate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        int rowindex = -1;
        string pQry = string.Empty;
        string pdQry = string.Empty;
        string pddQry = string.Empty;

        try
        {
            manager.Open();

            rowindex = -1;

            foreach (DataRow dr in dsrate.Tables[0].Rows)
            {
                pQry = "select itemcode,mrpstartdate,mrpenddate,mrp from tblproducthistory where itemcode= '" + dr["ItemCode"].ToString() + "' order by mrpdate desc";
                ds = manager.ExecuteDataSet(CommandType.Text, pQry.ToString());

                rowindex = rowindex + 1;
                var itemCode = dr["ItemCode"].ToString();
                var refDate = dr["Billdate"].ToString();

                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow drd in ds.Tables[0].Rows)
                    {
                        double MRP = Convert.ToDouble(drd["MRP"]);
                        if (drd["ItemCode"].ToString() == itemCode)
                        {
                            if (DateTime.Parse(refDate.ToString()) >= DateTime.Parse(drd["mrpstartdate"].ToString()) && DateTime.Parse(refDate.ToString()) <= DateTime.Parse(drd["mrpenddate"].ToString()))
                            {
                                dsrate.Tables[0].Rows[rowindex]["MRP"] = MRP;
                                dsrate.Tables[0].Rows[rowindex].EndEdit();
                                dsrate.Tables[0].Rows[rowindex].AcceptChanges();
                                break;
                            }
                            else
                            {


                            }
                        }
                    }
                    //rowindex = -1;
                }
            }



            //pQry = "select itemcode,mrpstartdate,mrpenddate,mrp from tblproducthistory order by mrpdate desc,itemcode";
            //ds = manager.ExecuteDataSet(CommandType.Text, pQry.ToString());

            //foreach (DataRow dr in ds.Tables[0].Rows)
            //{
            //    var itemCode = dr["ItemCode"].ToString();
            //    double MRP = Convert.ToDouble(dr["MRP"]);

            //    foreach (DataRow row in dsrate.Tables[0].Rows)
            //    {
            //        rowindex = rowindex + 1;

            //        if (row["ItemCode"].ToString() == itemCode)
            //        {
            //            if (DateTime.Parse(refDate.ToString()) >= DateTime.Parse(dr["mrpstartdate"].ToString()) && DateTime.Parse(refDate.ToString()) <= DateTime.Parse(dr["mrpenddate"].ToString()))
            //            {                            
            //                dsrate.Tables[0].Rows[rowindex]["MRP"] = MRP;
            //                dsrate.Tables[0].Rows[rowindex].EndEdit();
            //                dsrate.Tables[0].Rows[rowindex].AcceptChanges();
            //                break;
            //            }
            //        }
            //    }
            //    rowindex = -1;
            //}


            rowindex = -1;
            foreach (DataRow dr in dsrate.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                pdQry = "select itemcode,dpstartdate,dpenddate,dp from tblproducthistory where itemcode= '" + dr["ItemCode"].ToString() + "' order by dpdate desc";
                ds = manager.ExecuteDataSet(CommandType.Text, pdQry.ToString());
                var itemCode1 = dr["ItemCode"].ToString();
                var refDate1 = dr["Billdate"].ToString();

                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow drd in ds.Tables[0].Rows)
                    {
                        double DP = Convert.ToDouble(drd["DP"]);
                        if (drd["ItemCode"].ToString() == itemCode1)
                        {
                            if (DateTime.Parse(refDate1.ToString()) >= DateTime.Parse(drd["dpstartdate"].ToString()) && DateTime.Parse(refDate1.ToString()) <= DateTime.Parse(drd["dpenddate"].ToString()))
                            {
                                dsrate.Tables[0].Rows[rowindex]["DP"] = DP;
                                dsrate.Tables[0].Rows[rowindex].EndEdit();
                                dsrate.Tables[0].Rows[rowindex].AcceptChanges();
                                break;
                            }
                            else
                            {


                            }
                        }
                    }
                    //rowindex = -1;
                }
            }

            rowindex = -1;
            foreach (DataRow dr in dsrate.Tables[0].Rows)
            {
                rowindex = rowindex + 1;
                var itemCode2 = dr["ItemCode"].ToString();
                var refDate2 = dr["Billdate"].ToString();

                pQry = "select itemcode,mrpstartdate,mrpenddate,dpstartdate,dpenddate,nlcstartdate,nlcenddate,mrp,dp,nlc from tblproducthistory where itemcode= '" + dr["ItemCode"].ToString() + "' order by nlcdate desc";
                ds = manager.ExecuteDataSet(CommandType.Text, pQry.ToString());
                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow drd in ds.Tables[0].Rows)
                    {
                        double NLC = Convert.ToDouble(drd["NLC"]);
                        if (drd["ItemCode"].ToString() == itemCode2)
                        {
                            if (DateTime.Parse(refDate2.ToString()) >= DateTime.Parse(drd["nlcstartdate"].ToString()) && DateTime.Parse(refDate2.ToString()) <= DateTime.Parse(drd["nlcenddate"].ToString()))
                            {
                                dsrate.Tables[0].Rows[rowindex]["NLC"] = NLC;
                                dsrate.Tables[0].Rows[rowindex].EndEdit();
                                dsrate.Tables[0].Rows[rowindex].AcceptChanges();
                                break;
                            }
                            else
                            {


                            }
                        }
                    }
                    //rowindex = -1;
                }
            }


            //pdQry = "select itemcode,dpstartdate,dpenddate,dp from tblproducthistory order by dpdate desc,itemcode";
            //ds = manager.ExecuteDataSet(CommandType.Text, pdQry.ToString());

            //foreach (DataRow dr in ds.Tables[0].Rows)
            //{
            //    var itemCode = dr["ItemCode"].ToString();
            //    double DP = Convert.ToDouble(dr["DP"]);

            //    foreach (DataRow row in dsrate.Tables[0].Rows)
            //    {
            //        rowindex = rowindex + 1;

            //        if (row["ItemCode"].ToString() == itemCode)
            //        {
            //            if (DateTime.Parse(refDate.ToString()) >= DateTime.Parse(dr["dpstartdate"].ToString()) && DateTime.Parse(refDate.ToString()) <= DateTime.Parse(dr["dpenddate"].ToString()))
            //            {

            //                dsrate.Tables[0].Rows[rowindex]["DP"] = DP;
            //                dsrate.Tables[0].Rows[rowindex].EndEdit();
            //                dsrate.Tables[0].Rows[rowindex].AcceptChanges();
            //                break;
            //            }
            //        }
            //    }
            //    rowindex = -1;
            //}

            //pddQry = "select itemcode,nlcstartdate,nlcenddate,nlc from tblproducthistory order by nlcdate desc,itemcode";
            //ds = manager.ExecuteDataSet(CommandType.Text, pddQry.ToString());

            //foreach (DataRow dr in ds.Tables[0].Rows)
            //{
            //    var itemCode = dr["ItemCode"].ToString();
            //    double  NLC = Convert.ToDouble(dr["NLC"]);

            //    foreach (DataRow row in dsrate.Tables[0].Rows)
            //    {
            //        rowindex = rowindex + 1;

            //        if (row["ItemCode"].ToString() == itemCode)
            //        {
            //            if (DateTime.Parse(refDate.ToString()) >= DateTime.Parse(dr["nlcstartdate"].ToString()) && DateTime.Parse(refDate.ToString()) <= DateTime.Parse(dr["nlcenddate"].ToString()))
            //            {                            
            //                dsrate.Tables[0].Rows[rowindex]["NLC"] = NLC;
            //                dsrate.Tables[0].Rows[rowindex].EndEdit();
            //                dsrate.Tables[0].Rows[rowindex].AcceptChanges();
            //                break;
            //            }
            //        }
            //    }
            //    rowindex = -1;
            //}

            if (dsrate.Tables[0].Rows.Count > 0)
                return dsrate;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet getPurchaselistNormal(DateTime startDate, DateTime endDate, string Types, string options)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;

        if (options == "Purchase")
        {
            if (Types == "CategoryWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as amount,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblcategories.categoryname,tblProductMaster.productdesc as brand, tblProductMaster.productname,tblProductMaster.model,tblProductMaster.itemcode, tblProductMaster.nlc,tblProductMaster.dealerrate as dp,tblPurchase.billno,tblPurchase.billdate,tblProductMaster.rate as mrp FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by tblcategories.categoryname");
            }
            else if (Types == "ProductWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as amount,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.productname,tblcategories.categoryname,tblProductMaster.productdesc as brand,tblProductMaster.model,tblProductMaster.itemcode,tblProductMaster.nlc, tblProductMaster.dealerrate as dp,tblPurchase.billno,tblPurchase.billdate,tblProductMaster.rate as mrp FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO')  order by tblProductMaster.productname");
            }
            else if (Types == "BrandWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as amount,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.productname as brand,tblcategories.categoryname,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.itemcode,tblProductMaster.nlc,tblProductMaster.dealerrate as dp, tblPurchase.billno,tblPurchase.billdate,tblProductMaster.rate as mrp FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO')  order by tblProductMaster.productdesc");
            }
            else if (Types == "BrandProductWise")
            {
                dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount,( tblPurchaseItems.PurchaseRate) as rate1, tblPurchaseItems.PurchaseRate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblProductMaster.model,tblcategories.categoryname,tblPurchase.billno,tblPurchase.billdate,tblPurchaseItems.itemcode FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by tblProductMaster.productdesc,tblProductMaster.productname");
            }
            else if (Types == "BrandProductModelWise")
            {
                dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount, ( tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.PurchaseRate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblProductMaster.model,tblcategories.categoryname,tblPurchase.billno,tblPurchase.billdate,tblPurchaseItems.itemcode  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by tblProductMaster.productdesc,tblProductMaster.productname,tblProductMaster.Model");
            }
            else if (Types == "BillWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp, tblProductMaster.dealerrate as dp,tblPurchase.billno,tblPurchase.billdate,tblPurchaseItems.itemcode,tblProductMaster.model,tblcategories.categoryname,tblPurchase.billno,tblPurchase.billdate,tblProductMaster.productname,tblProductMaster.productdesc  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by tblPurchase.billno");
            }
            else if (Types == "BrandModelWise")
            {
                dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount, (tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.PurchaseRate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.model,tblProductMaster.dealerrate as dp,tblcategories.categoryname,tblPurchaseItems.itemcode,tblPurchase.BillNo ,tblPurchase.Billdate FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by tblProductMaster.productdesc,tblProductMaster.Model");
            }
            else if (Types == "CategoryBrandWise")
            {
                dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount,(tblPurchaseItems.PurchaseRate) as rate1, tblPurchaseItems.PurchaseRate,tblPurchaseItems.Qty,tblcategories.categoryname,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.dealerrate as dp,tblProductMaster.rate as mrp,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc ,tblPurchase.BillNo,tblPurchase.Billdate FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by tblcategories.categoryname,tblProductMaster.productdesc");
            }
            else if (Types == "CategoryBrandProductWise")
            {
                dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount,(tblPurchaseItems.PurchaseRate) as rate1, tblPurchaseItems.PurchaseRate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblcategories.categoryname,tblPurchaseItems.itemcode,tblPurchase.BillNo,tblPurchase.Billdate  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by tblcategories.categoryname,tblProductMaster.productdesc,tblProductMaster.productname");
            }
            else if (Types == "PayModeWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblPurchase.paymode,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.BillNo,tblPurchase.Billdate  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by tblPurchase.paymode");
            }
            else if (Types == "ExecutiveWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblPurchase.executivename,tblPurchase.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.BillNo,tblPurchase.Billdate  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by tblPurchase.executivename");
            }
            else if (Types == "DateWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblPurchase.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.BillNo  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by tblPurchase.billdate");
            }
            else if (Types == "CustomerWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblledger.ledgername as Customername,tblPurchase.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.BillNo  FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblledger ON tblPurchase.supplierid = tblledger.ledgerid WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by tblledger.ledgerid");
            }
            else if (Types == "MonthWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,month(tblPurchase.billdate) as monthname,tblPurchase.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.BillNo  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "#  and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by month(tblPurchase.billdate) ");
            }
        }
        else if (options == "Internal Transfer")
        {
            if (Types == "CategoryWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as amount,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblcategories.categoryname,tblProductMaster.productdesc as brand, tblProductMaster.productname,tblProductMaster.model,tblProductMaster.itemcode, tblProductMaster.nlc,tblProductMaster.dealerrate as dp,tblPurchase.billno,tblPurchase.billdate,tblProductMaster.rate as mrp FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('yes','YES') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by tblcategories.categoryname");
            }
            else if (Types == "ProductWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as amount,( tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.productname,tblcategories.categoryname,tblProductMaster.productdesc as brand,tblProductMaster.model,tblProductMaster.itemcode,tblProductMaster.nlc, tblProductMaster.dealerrate as dp,tblPurchase.billno,tblPurchase.billdate,tblProductMaster.rate as mrp FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('yes','YES') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO')  order by tblProductMaster.productname");
            }
            else if (Types == "BrandWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as amount,( tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.productname as brand,tblcategories.categoryname,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.itemcode,tblProductMaster.nlc,tblProductMaster.dealerrate as dp, tblPurchase.billno,tblPurchase.billdate,tblProductMaster.rate as mrp FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('yes','YES') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO')  order by tblProductMaster.productdesc");
            }
            else if (Types == "BrandProductWise")
            {
                dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount,( tblPurchaseItems.PurchaseRate) as rate1, tblPurchaseItems.PurchaseRate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblProductMaster.model,tblcategories.categoryname,tblPurchase.billno,tblPurchase.billdate,tblPurchaseItems.itemcode FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('yes','YES') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by tblProductMaster.productdesc,tblProductMaster.productname");
            }
            else if (Types == "BrandProductModelWise")
            {
                dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount,( tblPurchaseItems.PurchaseRate) as rate1, tblPurchaseItems.PurchaseRate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblProductMaster.model,tblcategories.categoryname,tblPurchase.billno,tblPurchase.billdate,tblPurchaseItems.itemcode  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('yes','YES') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by tblProductMaster.productdesc,tblProductMaster.productname,tblProductMaster.Model");
            }
            else if (Types == "BillWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp, tblProductMaster.dealerrate as dp,tblPurchase.billno,tblPurchase.billdate,tblPurchaseItems.itemcode,tblProductMaster.model,tblcategories.categoryname,tblPurchase.billno,tblPurchase.billdate,tblProductMaster.productname,tblProductMaster.productdesc  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('yes','YES') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by tblPurchase.billno");
            }
            else if (Types == "BrandModelWise")
            {
                dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount,(tblPurchaseItems.PurchaseRate) as rate1, tblPurchaseItems.PurchaseRate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.model,tblProductMaster.dealerrate as dp,tblcategories.categoryname,tblPurchaseItems.itemcode,tblPurchase.BillNo ,tblPurchase.Billdate FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('yes','YES') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by tblProductMaster.productdesc,tblProductMaster.Model");
            }
            else if (Types == "CategoryBrandWise")
            {
                dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount,(tblPurchaseItems.PurchaseRate) as rate1, tblPurchaseItems.PurchaseRate,tblPurchaseItems.Qty,tblcategories.categoryname,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.dealerrate as dp,tblProductMaster.rate as mrp,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc ,tblPurchase.BillNo,tblPurchase.Billdate FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('yes','YES') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by tblcategories.categoryname,tblProductMaster.productdesc");
            }
            else if (Types == "CategoryBrandProductWise")
            {
                dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount,(tblPurchaseItems.PurchaseRate) as rate1, tblPurchaseItems.PurchaseRate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblcategories.categoryname,tblPurchaseItems.itemcode,tblPurchase.BillNo,tblPurchase.Billdate  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('yes','YES') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by tblcategories.categoryname,tblProductMaster.productdesc,tblProductMaster.productname");
            }
            else if (Types == "PayModeWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,( tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblPurchase.paymode,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.BillNo,tblPurchase.Billdate  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('yes','YES') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by tblPurchase.paymode");
            }
            else if (Types == "ExecutiveWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblSales.executivename,tblPurchase.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.BillNo,tblPurchase.Billdate  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('yes','YES') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by tblPurchase.executivename");
            }
            else if (Types == "DateWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.PurchaseRate,tblPurchaseItems.qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblPurchase.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.BillNo  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('yes','YES') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by tblPurchase.billdate");
            }
            else if (Types == "CustomerWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblledger.ledgername as customername,tblPurchase.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.BillNo  FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblledger on tblpurchase.supplierid=tblledger.ledgerid WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('yes','YES') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by tblledger.ledgername");
            }
            else if (Types == "MonthWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,( tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,month(tblPurchase.billdate) as monthname,tblPurchase.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.BillNo  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "#  and tblPurchase.InternalTransfer in ('yes','YES') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') order by month(tblPurchase.billdate) ");
            }
        }
        else if (options == "Delivery Note")
        {
            if (Types == "CategoryWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as amount,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblcategories.categoryname,tblProductMaster.productdesc as brand, tblProductMaster.productname,tblProductMaster.model,tblProductMaster.itemcode, tblProductMaster.nlc,tblProductMaster.dealerrate as dp,tblPurchase.billno,tblPurchase.billdate,tblProductMaster.rate as mrp FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('yes','YES') order by tblcategories.categoryname");
            }
            else if (Types == "ProductWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as amount,( tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.productname,tblcategories.categoryname,tblProductMaster.productdesc as brand,tblProductMaster.model,tblProductMaster.itemcode,tblProductMaster.nlc, tblProductMaster.dealerrate as dp,tblPurchase.billno,tblPurchase.billdate,tblProductMaster.rate as mrp FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('yes','YES')  order by tblProductMaster.productname");
            }
            else if (Types == "BrandWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as amount,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.productname as brand,tblcategories.categoryname,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.itemcode,tblProductMaster.nlc,tblProductMaster.dealerrate as dp, tblPurchase.billno,tblPurchase.billdate,tblProductMaster.rate as mrp FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('yes','YES')  order by tblProductMaster.productdesc");
            }
            else if (Types == "BrandProductWise")
            {
                dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount, ( tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.PurchaseRate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblProductMaster.model,tblcategories.categoryname,tblPurchase.billno,tblPurchase.billdate,tblPurchaseItems.itemcode FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('yes','YES') order by tblProductMaster.productdesc,tblProductMaster.productname");
            }
            else if (Types == "BrandProductModelWise")
            {
                dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount, (tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.PurchaseRate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblProductMaster.model,tblcategories.categoryname,tblPurchase.billno,tblPurchase.billdate,tblPurchaseItems.itemcode  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('yes','YES') order by tblProductMaster.productdesc,tblProductMaster.productname,tblProductMaster.Model");
            }
            else if (Types == "BillWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp, tblProductMaster.dealerrate as dp,tblPurchase.billno,tblPurchase.billdate,tblPurchaseItems.itemcode,tblProductMaster.model,tblcategories.categoryname,tblPurchase.billno,tblPurchase.billdate,tblProductMaster.productname,tblProductMaster.productdesc  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('yes','YES') order by tblPurchase.billno");
            }
            else if (Types == "BrandModelWise")
            {
                dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount,(tblPurchaseItems.PurchaseRate) as rate1, tblPurchaseItems.PurchaseRate as rate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.model,tblProductMaster.dealerrate as dp,tblcategories.categoryname,tblPurchaseItems.itemcode,tblPurchase.BillNo ,tblPurchase.Billdate FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('yes','YES') order by tblProductMaster.productdesc,tblProductMaster.Model");
            }
            else if (Types == "CategoryBrandWise")
            {
                dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount, (tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.PurchaseRate as rate,tblPurchaseItems.Qty,tblcategories.categoryname,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.dealerrate as dp,tblProductMaster.rate as mrp,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc ,tblPurchase.BillNo,tblPurchase.Billdate FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('yes','YES') order by tblcategories.categoryname,tblProductMaster.productdesc");
            }
            else if (Types == "CategoryBrandProductWise")
            {
                dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount,(tblPurchaseItems.PurchaseRate) as rate1, tblPurchaseItems.PurchaseRate as rate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblcategories.categoryname,tblPurchaseItems.itemcode,tblPurchase.BillNo,tblPurchase.Billdate  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('yes','YES') order by tblcategories.categoryname,tblProductMaster.productdesc,tblProductMaster.productname");
            }
            else if (Types == "PayModeWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblPurchase.paymode,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.BillNo,tblPurchase.Billdate  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('yes','YES') order by tblPurchase.paymode");
            }
            else if (Types == "ExecutiveWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblPurchase.executivename,tblSales.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.BillNo,tblPurchase.Billdate  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('yes','YES') order by tblPurchase.executivename");
            }
            else if (Types == "DateWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblPurchase.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.BillNo  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('yes','YES') order by tblPurchase.billdate");
            }
            else if (Types == "CustomerWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblledger.ledgername as Customername,tblPurchase.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.BillNo  FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblledger on tblpurchase.supplierid=tblledger.ledgerid WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('yes','YES') order by tblledger.ledgerid");
            }
            else if (Types == "MonthWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,month(tblSales.billdate) as monthname,tblPurchase.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.BillNo  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblSalesItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "#  and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('yes','YES') order by month(tblPurchase.billdate) ");
            }
        }
        else if (options == "Sales Return")
        {
            if (Types == "CategoryWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as amount,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblcategories.categoryname,tblProductMaster.productdesc as brand, tblProductMaster.productname,tblProductMaster.model,tblProductMaster.itemcode, tblProductMaster.nlc,tblProductMaster.dealerrate as dp,tblPurchase.billno,tblPurchase.billdate,tblProductMaster.rate as mrp FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by tblcategories.categoryname");
            }
            else if (Types == "ProductWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as amount,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.productname,tblcategories.categoryname,tblProductMaster.productdesc as brand,tblProductMaster.model,tblProductMaster.itemcode,tblProductMaster.nlc, tblProductMaster.dealerrate as dp,tblPurchase.billno,tblPurchase.billdate,tblProductMaster.rate as mrp FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO')  order by tblProductMaster.productname");
            }
            else if (Types == "BrandWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as amount,( tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.productname as brand,tblcategories.categoryname,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.itemcode,tblProductMaster.nlc,tblProductMaster.dealerrate as dp, tblPurchase.billno,tblPurchase.billdate,tblProductMaster.rate as mrp FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO')  order by tblProductMaster.productdesc");
            }
            else if (Types == "BrandProductWise")
            {
                dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount, (tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.PurchaseRate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblProductMaster.model,tblcategories.categoryname,tblPurchase.billno,tblPurchase.billdate,tblPurchaseItems.itemcode FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by tblProductMaster.productdesc,tblProductMaster.productname");
            }
            else if (Types == "BrandProductModelWise")
            {
                dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount,(tblPurchaseItems.PurchaseRate) as rate1, tblPurchaseItems.PurchaseRate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblProductMaster.model,tblcategories.categoryname,tblPurchase.billno,tblPurchase.billdate,tblPurchaseItems.itemcode  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by tblProductMaster.productdesc,tblProductMaster.productname,tblProductMaster.Model");
            }
            else if (Types == "BillWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp, tblProductMaster.dealerrate as dp,tblPurchase.billno,tblPurchase.billdate,tblPurchaseItems.itemcode,tblProductMaster.model,tblcategories.categoryname,tblPurchase.billno,tblPurchase.billdate,tblProductMaster.productname,tblProductMaster.productdesc  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by tblPurchase.billno");
            }
            else if (Types == "BrandModelWise")
            {
                dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount,(tblPurchaseItems.PurchaseRate) as rate1, tblPurchaseItems.PurchaseRate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.model,tblProductMaster.dealerrate as dp,tblcategories.categoryname,tblPurchaseItems.itemcode,tblPurchase.BillNo ,tblPurchase.Billdate FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by tblProductMaster.productdesc,tblProductMaster.Model");
            }
            else if (Types == "CategoryBrandWise")
            {
                dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount,(tblPurchaseItems.PurchaseRate) as rate1, tblPurchaseItems.PurchaseRate,tblPurchaseItems.Qty,tblcategories.categoryname,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.dealerrate as dp,tblProductMaster.rate as mrp,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc ,tblPurchase.BillNo,tblPurchase.Billdate FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by tblcategories.categoryname,tblProductMaster.productdesc");
            }
            else if (Types == "CategoryBrandProductWise")
            {
                dbQry = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount,(tblPurchaseItems.PurchaseRate) as rate1, tblPurchaseItems.PurchaseRate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblcategories.categoryname,tblPurchaseItems.itemcode,tblPurchase.BillNo,tblPurchase.Billdate  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by tblcategories.categoryname,tblProductMaster.productdesc,tblProductMaster.productname");
            }
            else if (Types == "PayModeWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblPurchase.paymode,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.BillNo,tblPurchase.Billdate  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by tblPurchase.paymode");
            }
            else if (Types == "ExecutiveWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblPurchase.executivename,tblPurchase.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.BillNo,tblPurchase.Billdate  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by tblPurchase.executivename");
            }
            else if (Types == "DateWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblPurchase.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.BillNo  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by tblPurchase.billdate");
            }
            else if (Types == "CustomerWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblledger.ledgername as Customername,tblPurchase.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.BillNo  FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblledger on tblledger.ledgerid=tblpurchase.supplierid WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by tblledger.ledgerid");
            }
            else if (Types == "MonthWise")
            {
                dbQry = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,month(tblPurchase.billdate) as monthname,tblPurchase.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.BillNo  FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "#  and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by month(tblPurchase.billdate) ");
            }
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet getSaleslistNormal(DateTime startDate, DateTime endDate, string Types, string options, string salrettype)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();

        DataSet dsd = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;

        if (options == "Sales")
        {
            if (Types == "CategoryWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as amount,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblcategories.categoryname,tblProductMaster.productdesc as brand, tblProductMaster.productname,tblProductMaster.model,tblProductMaster.itemcode, tblProductMaster.nlc,tblProductMaster.dealerrate as dp,tblSales.billno,tblsales.billdate,tblProductMaster.rate as mrp,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by tblcategories.categoryname");
            }
            else if (Types == "ProductWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as amount,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.productname,tblcategories.categoryname,tblProductMaster.productdesc as brand,tblProductMaster.model,tblProductMaster.itemcode,tblProductMaster.nlc, tblProductMaster.dealerrate as dp,tblSales.billno,tblsales.billdate,tblProductMaster.rate as mrp,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO')  order by tblProductMaster.productname");
            }
            else if (Types == "BrandWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as amount,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.productname as brand,tblcategories.categoryname,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.itemcode,tblProductMaster.nlc,tblProductMaster.dealerrate as dp, tblSales.billno,tblsales.billdate,tblProductMaster.rate as mrp,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO')  order by tblProductMaster.productdesc");
            }
            else if (Types == "BrandProductWise")
            {
                dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount,( tblSalesItems.Rate) as rate1, tblSalesItems.Rate,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblProductMaster.model,tblcategories.categoryname,tblSales.billno,tblsales.billdate,tblSalesItems.itemcode,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by tblProductMaster.productdesc,tblProductMaster.productname");
            }
            else if (Types == "BrandProductModelWise")
            {
                dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount, ( tblSalesItems.Rate) as rate1,tblSalesItems.Rate,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblProductMaster.model,tblcategories.categoryname,tblSales.billno,tblsales.billdate,tblSalesItems.itemcode,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by tblProductMaster.productdesc,tblProductMaster.productname,tblProductMaster.Model");
            }
            else if (Types == "BillWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp, tblProductMaster.dealerrate as dp,tblSales.billno,tblsales.billdate,tblSalesItems.itemcode,tblProductMaster.model,tblcategories.categoryname,tblSales.billno,tblsales.billdate,tblProductMaster.productname,tblProductMaster.productdesc,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by tblSales.billno");
            }
            else if (Types == "BrandModelWise")
            {
                dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount, (tblSalesItems.Rate) as rate1,tblSalesItems.Rate,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.model,tblProductMaster.dealerrate as dp,tblcategories.categoryname,tblSalesItems.itemcode,tblSales.BillNo ,tblSales.Billdate,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by tblProductMaster.productdesc,tblProductMaster.Model");
            }
            else if (Types == "CategoryBrandWise")
            {
                dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount,(tblSalesItems.Rate) as rate1, tblSalesItems.Rate,tblSalesItems.Qty,tblcategories.categoryname,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.dealerrate as dp,tblProductMaster.rate as mrp,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc ,tblSales.BillNo,tblSales.Billdate,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by tblcategories.categoryname,tblProductMaster.productdesc");
            }
            else if (Types == "CategoryBrandProductWise")
            {
                dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount,(tblSalesItems.Rate) as rate1, tblSalesItems.Rate,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblcategories.categoryname,tblSalesItems.itemcode,tblSales.BillNo,tblSales.Billdate,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by tblcategories.categoryname,tblProductMaster.productdesc,tblProductMaster.productname");
            }
            else if (Types == "PayModeWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblSales.paymode,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc,tblSales.BillNo,tblSales.Billdate,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by tblSales.paymode");
            }
            else if (Types == "ExecutiveWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblSales.executivename,tblSales.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc,tblSales.BillNo,tblSales.Billdate,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by tblSales.executivename");
            }
            else if (Types == "DateWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblSales.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc,tblSales.BillNo,tblsales.customername,tblsales.customeraddress,tblledger.phone,tblledger.mobile,tblledger.add1,tblledger.add2,tblledger.add3,tbldaybook.transno,tbldaybook.vouchertype  FROM  ((((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblledger on tblledger.ledgerid=tblsales.customerid) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by tblSales.billdate");
            }
            else if (Types == "CustomerWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblSales.Customername,tblSales.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc,tblSales.BillNo,tbldaybook.transno,tbldaybook.vouchertype,tblSales.customeraddress,tblSales.customeraddress2,tblSales.customeraddress3  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by tblSales.Customername");
            }
            else if (Types == "MonthWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,(tblSalesItems.Rate) as rate1,tblSalesItems.qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,month(tblSales.billdate) as monthname,tblSales.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc,tblSales.BillNo,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "#  and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by month(tblSales.billdate) ");
            }
        }
        else if (options == "Internal Transfer")
        {
            if (Types == "CategoryWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as amount,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblcategories.categoryname,tblProductMaster.productdesc as brand, tblProductMaster.productname,tblProductMaster.model,tblProductMaster.itemcode, tblProductMaster.nlc,tblProductMaster.dealerrate as dp,tblSales.billno,tblsales.billdate,tblProductMaster.rate as mrp,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('yes','YES') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by tblcategories.categoryname");
            }
            else if (Types == "ProductWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as amount,( tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.productname,tblcategories.categoryname,tblProductMaster.productdesc as brand,tblProductMaster.model,tblProductMaster.itemcode,tblProductMaster.nlc, tblProductMaster.dealerrate as dp,tblSales.billno,tblsales.billdate,tblProductMaster.rate as mrp,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('yes','YES') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO')  order by tblProductMaster.productname");
            }
            else if (Types == "BrandWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as amount,( tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.productname as brand,tblcategories.categoryname,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.itemcode,tblProductMaster.nlc,tblProductMaster.dealerrate as dp, tblSales.billno,tblsales.billdate,tblProductMaster.rate as mrp,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('yes','YES') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO')  order by tblProductMaster.productdesc");
            }
            else if (Types == "BrandProductWise")
            {
                dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount,( tblSalesItems.Rate) as rate1, tblSalesItems.Rate,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblProductMaster.model,tblcategories.categoryname,tblSales.billno,tblsales.billdate,tblSalesItems.itemcode,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('yes','YES') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by tblProductMaster.productdesc,tblProductMaster.productname");
            }
            else if (Types == "BrandProductModelWise")
            {
                dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount,( tblSalesItems.Rate) as rate1, tblSalesItems.Rate,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblProductMaster.model,tblcategories.categoryname,tblSales.billno,tblsales.billdate,tblSalesItems.itemcode,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('yes','YES') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by tblProductMaster.productdesc,tblProductMaster.productname,tblProductMaster.Model");
            }
            else if (Types == "BillWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp, tblProductMaster.dealerrate as dp,tblSales.billno,tblsales.billdate,tblSalesItems.itemcode,tblProductMaster.model,tblcategories.categoryname,tblSales.billno,tblsales.billdate,tblProductMaster.productname,tblProductMaster.productdesc,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('yes','YES') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by tblSales.billno");
            }
            else if (Types == "BrandModelWise")
            {
                dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount,(tblSalesItems.Rate) as rate1, tblSalesItems.Rate,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.model,tblProductMaster.dealerrate as dp,tblcategories.categoryname,tblSalesItems.itemcode,tblSales.BillNo ,tblSales.Billdate,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('yes','YES') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by tblProductMaster.productdesc,tblProductMaster.Model");
            }
            else if (Types == "CategoryBrandWise")
            {
                dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount,(tblSalesItems.Rate) as rate1, tblSalesItems.Rate,tblSalesItems.Qty,tblcategories.categoryname,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.dealerrate as dp,tblProductMaster.rate as mrp,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc ,tblSales.BillNo,tblSales.Billdate,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('yes','YES') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by tblcategories.categoryname,tblProductMaster.productdesc");
            }
            else if (Types == "CategoryBrandProductWise")
            {
                dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount,(tblSalesItems.Rate) as rate1, tblSalesItems.Rate,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblcategories.categoryname,tblSalesItems.itemcode,tblSales.BillNo,tblSales.Billdate,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('yes','YES') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by tblcategories.categoryname,tblProductMaster.productdesc,tblProductMaster.productname");
            }
            else if (Types == "PayModeWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,( tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblSales.paymode,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc,tblSales.BillNo,tblSales.Billdate,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('yes','YES') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by tblSales.paymode");
            }
            else if (Types == "ExecutiveWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblSales.executivename,tblSales.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc,tblSales.BillNo,tblSales.Billdate,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('yes','YES') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by tblSales.executivename");
            }
            else if (Types == "DateWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblSales.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc,tblSales.BillNo,tblsales.customername,tblsales.customeraddress,tblledger.phone,tblledger.mobile,tblledger.add1,tblledger.add2,tblledger.add3,tbldaybook.transno,tbldaybook.vouchertype  FROM  ((((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblledger on tblledger.ledgerid=tblsales.customerid) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('yes','YES') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by tblSales.billdate");
            }
            else if (Types == "CustomerWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblSales.Customername,tblSales.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc,tblSales.BillNo,tbldaybook.transno,tbldaybook.vouchertype,tblSales.customeraddress,tblSales.customeraddress2,tblSales.customeraddress3  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('yes','YES') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by tblSales.Customername");
            }
            else if (Types == "MonthWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,( tblSalesItems.Rate) as rate1,tblSalesItems.qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,month(tblSales.billdate) as monthname,tblSales.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc,tblSales.BillNo,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "#  and tblsales.InternalTransfer in ('yes','YES') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') order by month(tblSales.billdate) ");
            }
        }
        else if (options == "Delivery Note")
        {
            if (Types == "CategoryWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as amount,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblcategories.categoryname,tblProductMaster.productdesc as brand, tblProductMaster.productname,tblProductMaster.model,tblProductMaster.itemcode, tblProductMaster.nlc,tblProductMaster.dealerrate as dp,tblSales.billno,tblsales.billdate,tblProductMaster.rate as mrp,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('yes','YES') order by tblcategories.categoryname");
            }
            else if (Types == "ProductWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as amount,( tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.productname,tblcategories.categoryname,tblProductMaster.productdesc as brand,tblProductMaster.model,tblProductMaster.itemcode,tblProductMaster.nlc, tblProductMaster.dealerrate as dp,tblSales.billno,tblsales.billdate,tblProductMaster.rate as mrp,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('yes','YES')  order by tblProductMaster.productname");
            }
            else if (Types == "BrandWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as amount,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.productname as brand,tblcategories.categoryname,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.itemcode,tblProductMaster.nlc,tblProductMaster.dealerrate as dp, tblSales.billno,tblsales.billdate,tblProductMaster.rate as mrp,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('yes','YES')  order by tblProductMaster.productdesc");
            }
            else if (Types == "BrandProductWise")
            {
                dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount, ( tblSalesItems.Rate) as rate1,tblSalesItems.Rate,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblProductMaster.model,tblcategories.categoryname,tblSales.billno,tblsales.billdate,tblSalesItems.itemcode,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('yes','YES') order by tblProductMaster.productdesc,tblProductMaster.productname");
            }
            else if (Types == "BrandProductModelWise")
            {
                dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount, (tblSalesItems.Rate) as rate1,tblSalesItems.Rate,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblProductMaster.model,tblcategories.categoryname,tblSales.billno,tblsales.billdate,tblSalesItems.itemcode,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('yes','YES') order by tblProductMaster.productdesc,tblProductMaster.productname,tblProductMaster.Model");
            }
            else if (Types == "BillWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp, tblProductMaster.dealerrate as dp,tblSales.billno,tblsales.billdate,tblSalesItems.itemcode,tblProductMaster.model,tblcategories.categoryname,tblSales.billno,tblsales.billdate,tblProductMaster.productname,tblProductMaster.productdesc,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('yes','YES') order by tblSales.billno");
            }
            else if (Types == "BrandModelWise")
            {
                dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount,(tblSalesItems.Rate) as rate1, tblSalesItems.Rate,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.model,tblProductMaster.dealerrate as dp,tblcategories.categoryname,tblSalesItems.itemcode,tblSales.BillNo ,tblSales.Billdate,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('yes','YES') order by tblProductMaster.productdesc,tblProductMaster.Model");
            }
            else if (Types == "CategoryBrandWise")
            {
                dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount, (tblSalesItems.Rate) as rate1,tblSalesItems.Rate,tblSalesItems.Qty,tblcategories.categoryname,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.dealerrate as dp,tblProductMaster.rate as mrp,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc ,tblSales.BillNo,tblSales.Billdate,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('yes','YES') order by tblcategories.categoryname,tblProductMaster.productdesc");
            }
            else if (Types == "CategoryBrandProductWise")
            {
                dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount,(tblSalesItems.Rate) as rate1, tblSalesItems.Rate,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblcategories.categoryname,tblSalesItems.itemcode,tblSales.BillNo,tblSales.Billdate,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('yes','YES') order by tblcategories.categoryname,tblProductMaster.productdesc,tblProductMaster.productname");
            }
            else if (Types == "PayModeWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblSales.paymode,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc,tblSales.BillNo,tblSales.Billdate,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('yes','YES') order by tblSales.paymode");
            }
            else if (Types == "ExecutiveWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblSales.executivename,tblSales.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc,tblSales.BillNo,tblSales.Billdate,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('yes','YES') order by tblSales.executivename");
            }
            else if (Types == "DateWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblSales.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc,tblSales.BillNo,tblsales.customername,tblsales.customeraddress,tblledger.phone,tblledger.mobile,tblledger.add1,tblledger.add2,tblledger.add3,tbldaybook.transno,tbldaybook.vouchertype  FROM  ((((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblledger on tblledger.ledgerid=tblsales.customerid) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('yes','YES') order by tblSales.billdate");
            }
            else if (Types == "CustomerWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblSales.Customername,tblSales.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc,tblSales.BillNo,tbldaybook.transno,tbldaybook.vouchertype,tblSales.customeraddress,tblSales.customeraddress2,tblSales.customeraddress3  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('yes','YES') order by tblSales.Customername");
            }
            else if (Types == "MonthWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,(tblSalesItems.Rate) as rate1,tblSalesItems.qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,month(tblSales.billdate) as monthname,tblSales.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc,tblSales.BillNo,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "#  and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('yes','YES') order by month(tblSales.billdate) ");
            }
        }
        else if (options == "Purchase Return")
        {
            if (Types == "CategoryWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as amount,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblcategories.categoryname,tblProductMaster.productdesc as brand, tblProductMaster.productname,tblProductMaster.model,tblProductMaster.itemcode, tblProductMaster.nlc,tblProductMaster.dealerrate as dp,tblSales.billno,tblsales.billdate,tblProductMaster.rate as mrp,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('yes','YES') and tblsales.DeliveryNote in ('no','NO') order by tblcategories.categoryname");
            }
            else if (Types == "ProductWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as amount,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.productname,tblcategories.categoryname,tblProductMaster.productdesc as brand,tblProductMaster.model,tblProductMaster.itemcode,tblProductMaster.nlc, tblProductMaster.dealerrate as dp,tblSales.billno,tblsales.billdate,tblProductMaster.rate as mrp,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('yes','YES') and tblsales.DeliveryNote in ('no','NO')  order by tblProductMaster.productname");
            }
            else if (Types == "BrandWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as amount,( tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.productname as brand,tblcategories.categoryname,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.itemcode,tblProductMaster.nlc,tblProductMaster.dealerrate as dp, tblSales.billno,tblsales.billdate,tblProductMaster.rate as mrp,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('yes','YES') and tblsales.DeliveryNote in ('no','NO')  order by tblProductMaster.productdesc");
            }
            else if (Types == "BrandProductWise")
            {
                dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount, (tblSalesItems.Rate) as rate1,tblSalesItems.Rate,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblProductMaster.model,tblcategories.categoryname,tblSales.billno,tblsales.billdate,tblSalesItems.itemcode,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('yes','YES') and tblsales.DeliveryNote in ('no','NO') order by tblProductMaster.productdesc,tblProductMaster.productname");
            }
            else if (Types == "BrandProductModelWise")
            {
                dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount,(tblSalesItems.Rate) as rate1, tblSalesItems.Rate,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblProductMaster.model,tblcategories.categoryname,tblSales.billno,tblsales.billdate,tblSalesItems.itemcode,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('yes','YES') and tblsales.DeliveryNote in ('no','NO') order by tblProductMaster.productdesc,tblProductMaster.productname,tblProductMaster.Model");
            }
            else if (Types == "BillWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp, tblProductMaster.dealerrate as dp,tblSales.billno,tblsales.billdate,tblSalesItems.itemcode,tblProductMaster.model,tblcategories.categoryname,tblSales.billno,tblsales.billdate,tblProductMaster.productname,tblProductMaster.productdesc,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('yes','YES') and tblsales.DeliveryNote in ('no','NO') order by tblSales.billno");
            }
            else if (Types == "BrandModelWise")
            {
                dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount,(tblSalesItems.Rate) as rate1, tblSalesItems.Rate,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.model,tblProductMaster.dealerrate as dp,tblcategories.categoryname,tblSalesItems.itemcode,tblSales.BillNo ,tblSales.Billdate,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('yes','YES') and tblsales.DeliveryNote in ('no','NO') order by tblProductMaster.productdesc,tblProductMaster.Model");
            }
            else if (Types == "CategoryBrandWise")
            {
                dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount,(tblSalesItems.Rate) as rate1, tblSalesItems.Rate,tblSalesItems.Qty,tblcategories.categoryname,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.dealerrate as dp,tblProductMaster.rate as mrp,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc ,tblSales.BillNo,tblSales.Billdate,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('yes','YES') and tblsales.DeliveryNote in ('no','NO') order by tblcategories.categoryname,tblProductMaster.productdesc");
            }
            else if (Types == "CategoryBrandProductWise")
            {
                dbQry = ("SELECT (((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100))) as amount,(tblSalesItems.Rate) as rate1, tblSalesItems.Rate,tblSalesItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblcategories.categoryname,tblSalesItems.itemcode,tblSales.BillNo,tblSales.Billdate,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('yes','YES') and tblsales.DeliveryNote in ('no','NO') order by tblcategories.categoryname,tblProductMaster.productdesc,tblProductMaster.productname");
            }
            else if (Types == "PayModeWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblSales.paymode,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc,tblSales.BillNo,tblSales.Billdate,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('yes','YES') and tblsales.DeliveryNote in ('no','NO') order by tblSales.paymode");
            }
            else if (Types == "ExecutiveWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblSales.executivename,tblSales.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc,tblSales.BillNo,tblSales.Billdate,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('yes','YES') and tblsales.DeliveryNote in ('no','NO') order by tblSales.executivename");
            }
            else if (Types == "DateWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblSales.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc,tblSales.BillNo,tblsales.customername,tblsales.customeraddress,tblledger.phone,tblledger.mobile,tblledger.add1,tblledger.add2,tblledger.add3,tbldaybook.transno,tbldaybook.vouchertype  FROM  ((((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblledger on tblledger.ledgerid=tblsales.customerid WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('yes','YES') and tblsales.DeliveryNote in ('no','NO') order by tblSales.billdate");
            }
            else if (Types == "CustomerWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,(tblSalesItems.Rate) as rate1,tblSalesItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblSales.Customername,tblSales.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc,tblSales.BillNo,tbldaybook.transno,tbldaybook.vouchertype,tblSales.customeraddress,tblSales.customeraddress2,tblSales.customeraddress3  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('yes','YES') and tblsales.DeliveryNote in ('no','NO') order by tblSales.Customername");
            }
            else if (Types == "MonthWise")
            {
                dbQry = ("SELECT ((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,(tblSalesItems.Rate) as rate1,tblSalesItems.qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,month(tblSales.billdate) as monthname,tblSales.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblSalesItems.itemcode,tblProductMaster.productdesc,tblSales.BillNo,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblsales.journalid = tbldaybook.transno WHERE tblSales.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblSales.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "#  and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('yes','YES') and tblsales.DeliveryNote in ('no','NO') order by month(tblSales.billdate) ");
            }
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);


            if (salrettype == "YES")
            {
                if (Types == "CategoryWise")
                {
                    dbQry2 = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as amount,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblcategories.categoryname,tblProductMaster.productdesc as brand, tblProductMaster.productname,tblProductMaster.model,tblProductMaster.itemcode, tblProductMaster.nlc,tblProductMaster.dealerrate as dp,tblPurchase.purchaseid as billno,tblPurchase.billdate,tblProductMaster.rate as mrp,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblpurchase.journalid = tbldaybook.transno WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by tblcategories.categoryname");
                }
                else if (Types == "ProductWise")
                {
                    dbQry2 = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as amount,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.productname,tblcategories.categoryname,tblProductMaster.productdesc as brand,tblProductMaster.model,tblProductMaster.itemcode,tblProductMaster.nlc, tblProductMaster.dealerrate as dp,tblPurchase.purchaseid as billno,tblPurchase.billdate,tblProductMaster.rate as mrp,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblpurchase.journalid = tbldaybook.transno WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO')  order by tblProductMaster.productname");
                }
                else if (Types == "BrandWise")
                {
                    dbQry2 = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as amount,( tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.productname as brand,tblcategories.categoryname,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.itemcode,tblProductMaster.nlc,tblProductMaster.dealerrate as dp, tblPurchase.purchaseid as billno,tblPurchase.billdate,tblProductMaster.rate as mrp,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblpurchase.journalid = tbldaybook.transno WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO')  order by tblProductMaster.productdesc");
                }
                else if (Types == "BrandProductWise")
                {
                    dbQry2 = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount, (tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.PurchaseRate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblProductMaster.model,tblcategories.categoryname,tblPurchase.purchaseid as billno,tblPurchase.billdate,tblPurchaseItems.itemcode,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblpurchase.journalid = tbldaybook.transno WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by tblProductMaster.productdesc,tblProductMaster.productname");
                }
                else if (Types == "BrandProductModelWise")
                {
                    dbQry2 = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount,(tblPurchaseItems.PurchaseRate) as rate1, tblPurchaseItems.PurchaseRate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblProductMaster.model,tblcategories.categoryname,tblPurchase.purchaseid as billno,tblPurchase.billdate,tblPurchaseItems.itemcode,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblpurchase.journalid = tbldaybook.transno WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by tblProductMaster.productdesc,tblProductMaster.productname,tblProductMaster.Model");
                }
                else if (Types == "BillWise")
                {
                    dbQry2 = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp, tblProductMaster.dealerrate as dp,tblPurchase.billno,tblPurchase.billdate,tblPurchaseItems.itemcode,tblProductMaster.model,tblcategories.categoryname,tblPurchase.purchaseid as billno,tblPurchase.billdate,tblProductMaster.productname,tblProductMaster.productdesc,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblpurchase.journalid = tbldaybook.transno WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by tblPurchase.billno");
                }
                else if (Types == "BrandModelWise")
                {
                    dbQry2 = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount,(tblPurchaseItems.PurchaseRate) as rate1, tblPurchaseItems.PurchaseRate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.model,tblProductMaster.dealerrate as dp,tblcategories.categoryname,tblPurchaseItems.itemcode,tblPurchase.purchaseid as billno ,tblPurchase.Billdate,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblpurchase.journalid = tbldaybook.transno WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by tblProductMaster.productdesc,tblProductMaster.Model");
                }
                else if (Types == "CategoryBrandWise")
                {
                    dbQry2 = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount,(tblPurchaseItems.PurchaseRate) as rate1, tblPurchaseItems.PurchaseRate,tblPurchaseItems.Qty,tblcategories.categoryname,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.dealerrate as dp,tblProductMaster.rate as mrp,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc ,tblPurchase.purchaseid as billno,tblPurchase.Billdate,tbldaybook.transno,tbldaybook.vouchertype FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblpurchase.journalid = tbldaybook.transno WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by tblcategories.categoryname,tblProductMaster.productdesc");
                }
                else if (Types == "CategoryBrandProductWise")
                {
                    dbQry2 = ("SELECT (((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100))) as amount,(tblPurchaseItems.PurchaseRate) as rate1, tblPurchaseItems.PurchaseRate,tblPurchaseItems.Qty,tblProductMaster.productdesc,tblProductMaster.nlc,tblProductMaster.model,tblProductMaster.productname,tblProductMaster.rate as mrp,tblProductMaster.productname,tblProductMaster.dealerrate as dp,tblcategories.categoryname,tblPurchaseItems.itemcode,tblPurchase.purchaseid as billno,tblPurchase.Billdate,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblpurchase.journalid = tbldaybook.transno WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by tblcategories.categoryname,tblProductMaster.productdesc,tblProductMaster.productname");
                }
                else if (Types == "PayModeWise")
                {
                    dbQry2 = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblPurchase.paymode,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.purchaseid as billno,tblPurchase.Billdate,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblpurchase.journalid = tbldaybook.transno WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by tblPurchase.paymode");
                }
                else if (Types == "ExecutiveWise")
                {
                    dbQry2 = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblPurchase.executivename,tblPurchase.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.purchaseid as billno,tblPurchase.Billdate,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblpurchase.journalid = tbldaybook.transno WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by tblPurchase.executivename");
                }
                else if (Types == "DateWise")
                {
                    dbQry2 = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblPurchase.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.purchaseid as billno,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblpurchase.journalid = tbldaybook.transno WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by tblPurchase.billdate");
                }
                else if (Types == "CustomerWise")
                {
                    dbQry2 = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.Qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,tblledger.ledgername as Customername,tblPurchase.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.purchaseid as billno,tbldaybook.transno,tbldaybook.vouchertype  FROM  ((((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tblledger on tblledger.ledgerid=tblpurchase.supplierid) inner join tbldaybook on tblpurchase.journalid = tbldaybook.transno WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by tblledger.ledgerid");
                }
                else if (Types == "MonthWise")
                {
                    dbQry2 = ("SELECT ((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as rate,(tblPurchaseItems.PurchaseRate) as rate1,tblPurchaseItems.qty,tblProductMaster.nlc,tblProductMaster.rate as mrp,tblProductMaster.dealerrate as dp,month(tblPurchase.billdate) as monthname,tblPurchase.billdate,tblProductMaster.model,tblProductMaster.productname,tblcategories.categoryname,tblPurchaseItems.itemcode,tblProductMaster.productdesc,tblPurchase.purchaseid as billno,tbldaybook.transno,tbldaybook.vouchertype  FROM  (((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID) inner join tbldaybook on tblpurchase.journalid = tbldaybook.transno WHERE tblPurchase.billdate>=#" + startDate.ToString("MM/dd/yyyy") + "# and tblPurchase.billdate<=#" + endDate.ToString("MM/dd/yyyy") + "#  and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') order by month(tblPurchase.billdate) ");
                }
                dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2);
                if (dsd != null)
                {
                    if (dsd.Tables[0].Rows.Count > 0)
                    {
                        ds.Tables[0].Merge(dsd.Tables[0]);
                    }
                }
            }


            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet checkbankreconciliation1(int iLedgerID, string sDataSource, string usernam, string Types)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        StringBuilder dbQry2 = new StringBuilder();
        try
        {
            manager.Open();

            dbQry.Append("SELECT TransDate FROM tblBankRecon");
            dbQry.Append(" WHERE (DebtorID=" + iLedgerID + " OR CreditorID=" + iLedgerID + ") And Types='" + Types + "' ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet getbankreconciliation2(int iLedgerID, string sDataSource, string usernam)
    {
        double dDebitAmt = 0;
        double dCreditAmt = 0;
        string sTranDate = string.Empty;
        string iQry = "";
        string sParticulars = "";
        string sParticulars1 = "";
        string sVoucherType = string.Empty;
        string sQry = string.Empty;
        string pQry = string.Empty;
        string pgQry = string.Empty;
        string sConStr = string.Empty;
        string sChequeNo = string.Empty;

        SqlConnection oleConn, oleSubConn;
        int sno = 0;
        double samount = 0;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        DataSet dsChildQry;
        string sOrder;
        int sDebtorID = 0;
        int sCreditorID = 0;

        sConStr = sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;

        //sQry = "SELECT tbldaybook.TransDate,tbldaybook.DebtorID,tbldaybook.CreditorID,tbldaybook.Amount,tbldaybook.Narration,tbldaybook.VoucherType FROM tbldaybook inner join tblledger on tbldaybook.creditorid = tblledger.ledgerid or  tbldaybook.debtorid = tblledger.ledgerid where tblledger.groupid=3 AND (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) Order by TransDate ";
        sQry = "SELECT TransNo,TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,chequeNo,RefNo FROM tblDayBook WHERE (DebtorID=" + iLedgerID + " OR CreditorID=" + iLedgerID + ") AND Transno not in (select transno from tblbankrecon) Order by TransDate ";

        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsParentQry = new DataSet();
        oleAdp.Fill(dsParentQry);

        DataSet ds;
        DataTable dt;
        DataRow drNew;
        DataColumn dc;

        string date1 = string.Empty;
        string sNarration = string.Empty;

        ds = new DataSet();
        dt = new DataTable();
        dc = new DataColumn("TransNo");
        dt.Columns.Add(dc);

        dc = new DataColumn("TransDate");
        dt.Columns.Add(dc);

        dc = new DataColumn("Debtor");
        dt.Columns.Add(dc);

        dc = new DataColumn("DebtorID");
        dt.Columns.Add(dc);

        dc = new DataColumn("Creditor");
        dt.Columns.Add(dc);

        dc = new DataColumn("CreditorID");
        dt.Columns.Add(dc);

        dc = new DataColumn("VoucherType");
        dt.Columns.Add(dc);

        dc = new DataColumn("Narration");
        dt.Columns.Add(dc);

        dc = new DataColumn("Amount");
        dt.Columns.Add(dc);

        dc = new DataColumn("ChequeNo");
        dt.Columns.Add(dc);

        dc = new DataColumn("ReconcilatedBy");
        dt.Columns.Add(dc);

        dc = new DataColumn("Reconcilateddate");
        dt.Columns.Add(dc);

        dc = new DataColumn("Result");
        dt.Columns.Add(dc);

        dc = new DataColumn("Status");
        dt.Columns.Add(dc);

        ds.Tables.Add(dt);

        if (dsParentQry.Tables[0].Rows.Count == 0)
        {
            //drNew = dt.NewRow();
            //drNew["TransNo"] = 0;
            //drNew["Date"] = string.Empty;
            //drNew["Debtor"] = string.Empty;
            //drNew["Creditor"] = string.Empty;
            //drNew["DebtorID"] = 0;
            //drNew["CreditorID"] = 0;
            //drNew["Amount"] = 0;
            //drNew["Narration"] = string.Empty;
            //drNew["ChequeNo"] = string.Empty;
            //drNew["VoucherType"] = string.Empty;
            //drNew["ReconcilatedBy"] = string.Empty;
            //drNew["Reconcilateddate"] = string.Empty;
            //ds.Tables[0].Rows.Add(drNew);
        }
        else
        {
            date1 = DateTime.Now.ToShortDateString();
            foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
            {
                if (drParentQry["TransDate"] != null)
                {
                    sTranDate = Convert.ToDateTime(drParentQry["TransDate"]).ToString("dd-MM-yyyy");
                }
                if (drParentQry["VoucherType"] != null)
                {
                    sVoucherType = Convert.ToString(drParentQry["VoucherType"].ToString());
                }
                if (drParentQry["Narration"] != null)
                {
                    sNarration = Convert.ToString(drParentQry["Narration"].ToString());
                }
                if (drParentQry["ChequeNo"] != null)
                {
                    sChequeNo = Convert.ToString(drParentQry["ChequeNo"].ToString());
                }

                if (drParentQry["TransNo"] != null)
                {
                    sno = Convert.ToInt32(drParentQry["TransNo"]);
                }
                if (drParentQry["Amount"] != null)
                {
                    samount = Convert.ToDouble(drParentQry["Amount"]);
                }
                if (drParentQry["DebtorID"] != null)
                {
                    sDebtorID = Convert.ToInt32(drParentQry["DebtorID"]);
                }
                if (drParentQry["CreditorID"] != null)
                {
                    sCreditorID = Convert.ToInt32(drParentQry["CreditorID"]);
                }
                if (drParentQry["DebtorID"] != null)
                {
                    pQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drParentQry["DebtorID"].ToString());
                }
                if (drParentQry["CreditorID"] != null)
                {
                    pgQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drParentQry["CreditorID"].ToString());
                }

                if (pQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(sConStr));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            sParticulars = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }

                if (pgQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pgQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(sConStr));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            sParticulars1 = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }

                drNew = dt.NewRow();
                drNew["TransNo"] = sno;
                drNew["TransDate"] = sTranDate;
                drNew["Debtor"] = sParticulars;
                drNew["Creditor"] = sParticulars1;
                drNew["DebtorID"] = sDebtorID;
                drNew["CreditorID"] = sCreditorID;
                drNew["Narration"] = sNarration;
                drNew["VoucherType"] = sVoucherType;
                drNew["ChequeNo"] = sChequeNo;
                drNew["Amount"] = samount;
                drNew["ReconcilatedBy"] = usernam;
                drNew["Reconcilateddate"] = "";
                drNew["Result"] = "";
                drNew["Status"] = "NO";

                ds.Tables[0].Rows.Add(drNew);

            }
        }

        oleConn.Close();

        if (ds.Tables[0].Rows.Count > 0)
            return ds;
        else
            return null;
    }

    public DataSet getbankrecon1(int iLedgerID, string sDataSource, string usernam, string Types)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        StringBuilder dbQry = new StringBuilder();
        StringBuilder dbQry2 = new StringBuilder();

        string sReconcilateddate = string.Empty;
        string sTransDate = string.Empty;
        try
        {
            manager.Open();

            dbQry.Append("SELECT TransDate,transno,debtorid,creditorid,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo,RefType,CreditCardNo,ChequeId,ReconcilatedBy,Reconcilateddate,Debtor,Creditor,Result FROM tblBankRecon");
            dbQry.Append(" WHERE (DebtorID=" + iLedgerID + " OR CreditorID=" + iLedgerID + ") And Types='" + Types + "'");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            DataSet dst;
            DataTable dt;
            DataRow drNew;

            DataColumn dc;

            string date1 = string.Empty;
            string sNarration = string.Empty;
            string sResult = string.Empty;

            dst = new DataSet();
            dt = new DataTable();
            dc = new DataColumn("TransNo");
            dt.Columns.Add(dc);

            dc = new DataColumn("TransDate");
            dt.Columns.Add(dc);

            dc = new DataColumn("Debtor");
            dt.Columns.Add(dc);

            dc = new DataColumn("DebtorID");
            dt.Columns.Add(dc);

            dc = new DataColumn("Creditor");
            dt.Columns.Add(dc);

            dc = new DataColumn("CreditorID");
            dt.Columns.Add(dc);

            dc = new DataColumn("VoucherType");
            dt.Columns.Add(dc);

            dc = new DataColumn("Narration");
            dt.Columns.Add(dc);

            dc = new DataColumn("Amount");
            dt.Columns.Add(dc);

            dc = new DataColumn("ChequeNo");
            dt.Columns.Add(dc);

            dc = new DataColumn("ReconcilatedBy");
            dt.Columns.Add(dc);

            dc = new DataColumn("Reconcilateddate");
            dt.Columns.Add(dc);

            dc = new DataColumn("Result");
            dt.Columns.Add(dc);

            dc = new DataColumn("Status");
            dt.Columns.Add(dc);

            dst.Tables.Add(dt);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow drd in ds.Tables[0].Rows)
                {
                    if (drd["TransDate"] != null)
                    {
                        sTransDate = Convert.ToDateTime(drd["TransDate"]).ToString("dd-MM-yyyy");
                    }
                    if (drd["Reconcilateddate"] != null)
                    {
                        sReconcilateddate = Convert.ToDateTime(drd["Reconcilateddate"]).ToString("dd-MM-yyyy");
                    }
                    if (drd["Result"] != null)
                    {
                        sResult = Convert.ToString(drd["Result"].ToString());
                    }
                    drNew = dt.NewRow();
                    drNew["TransNo"] = Convert.ToInt32(drd["TransNo"]);
                    drNew["TransDate"] = sTransDate;
                    drNew["Debtor"] = drd["Debtor"].ToString();
                    drNew["Creditor"] = drd["Creditor"].ToString();
                    drNew["DebtorID"] = Convert.ToInt32(drd["DebtorID"]);
                    drNew["CreditorID"] = Convert.ToInt32(drd["CreditorID"]);
                    drNew["Narration"] = drd["Narration"].ToString();
                    drNew["VoucherType"] = drd["VoucherType"].ToString();
                    drNew["ChequeNo"] = drd["ChequeNo"].ToString();
                    drNew["Amount"] = Convert.ToDouble(drd["Amount"]);
                    drNew["ReconcilatedBy"] = drd["ReconcilatedBy"].ToString();
                    drNew["Reconcilateddate"] = sReconcilateddate;
                    drNew["Result"] = sResult;
                    drNew["Status"] = "YES";
                    dst.Tables[0].Rows.Add(drNew);
                }
            }

            if (dst.Tables[0].Rows.Count > 0)
                return dst;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet getbankreconciliation3(int iLedgerID, string sDataSource, string usernam)
    {
        double dDebitAmt = 0;
        double dCreditAmt = 0;
        string sTranDate = string.Empty;
        string iQry = "";
        string sParticulars = "";
        string sParticulars1 = "";
        string sVoucherType = string.Empty;
        string sQry = string.Empty;
        string pQry = string.Empty;
        string pgQry = string.Empty;
        string sConStr = string.Empty;
        string sChequeNo = string.Empty;

        SqlConnection oleConn, oleSubConn;
        int sno = 0;
        double samount = 0;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        DataSet dsChildQry;
        string sOrder;
        int sDebtorID = 0;
        int sCreditorID = 0;

        sConStr = sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;

        //sQry = "SELECT tbldaybook.TransDate,tbldaybook.DebtorID,tbldaybook.CreditorID,tbldaybook.Amount,tbldaybook.Narration,tbldaybook.VoucherType FROM tbldaybook inner join tblledger on tbldaybook.creditorid = tblledger.ledgerid or  tbldaybook.debtorid = tblledger.ledgerid where tblledger.groupid=3 AND (TransDate >=#" + dtSdate.ToString("MM/dd/yyyy") + "# AND TransDate <=#" + dtEdate.ToString("MM/dd/yyyy") + "#) Order by TransDate ";
        sQry = "SELECT TransNo,TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,chequeNo,RefNo FROM tblDayBook WHERE (DebtorID=" + iLedgerID + " OR CreditorID=" + iLedgerID + ") Order by TransDate ";

        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsParentQry = new DataSet();
        oleAdp.Fill(dsParentQry);

        DataSet ds;
        DataTable dt;
        DataRow drNew;
        DataColumn dc;

        string date1 = string.Empty;
        string sNarration = string.Empty;

        ds = new DataSet();
        dt = new DataTable();
        dc = new DataColumn("TransNo");
        dt.Columns.Add(dc);

        dc = new DataColumn("TransDate");
        dt.Columns.Add(dc);

        dc = new DataColumn("Debtor");
        dt.Columns.Add(dc);

        dc = new DataColumn("DebtorID");
        dt.Columns.Add(dc);

        dc = new DataColumn("Creditor");
        dt.Columns.Add(dc);

        dc = new DataColumn("CreditorID");
        dt.Columns.Add(dc);

        dc = new DataColumn("VoucherType");
        dt.Columns.Add(dc);

        dc = new DataColumn("Narration");
        dt.Columns.Add(dc);

        dc = new DataColumn("Amount");
        dt.Columns.Add(dc);

        dc = new DataColumn("ChequeNo");
        dt.Columns.Add(dc);

        dc = new DataColumn("ReconcilatedBy");
        dt.Columns.Add(dc);

        dc = new DataColumn("Reconcilateddate");
        dt.Columns.Add(dc);

        dc = new DataColumn("Result");
        dt.Columns.Add(dc);

        dc = new DataColumn("Status");
        dt.Columns.Add(dc);

        ds.Tables.Add(dt);

        if (dsParentQry.Tables[0].Rows.Count == 0)
        {
            //drNew = dt.NewRow();
            //drNew["TransNo"] = 0;
            //drNew["Date"] = string.Empty;
            //drNew["Debtor"] = string.Empty;
            //drNew["Creditor"] = string.Empty;
            //drNew["DebtorID"] = 0;
            //drNew["CreditorID"] = 0;
            //drNew["Amount"] = 0;
            //drNew["Narration"] = string.Empty;
            //drNew["ChequeNo"] = string.Empty;
            //drNew["VoucherType"] = string.Empty;
            //drNew["ReconcilatedBy"] = string.Empty;
            //drNew["Reconcilateddate"] = string.Empty;
            //ds.Tables[0].Rows.Add(drNew);
        }
        else
        {
            date1 = DateTime.Now.ToShortDateString();
            foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
            {
                if (drParentQry["TransDate"] != null)
                {
                    sTranDate = Convert.ToDateTime(drParentQry["TransDate"]).ToString("dd-MM-yyyy");
                }
                if (drParentQry["VoucherType"] != null)
                {
                    sVoucherType = Convert.ToString(drParentQry["VoucherType"].ToString());
                }
                if (drParentQry["Narration"] != null)
                {
                    sNarration = Convert.ToString(drParentQry["Narration"].ToString());
                }
                if (drParentQry["ChequeNo"] != null)
                {
                    sChequeNo = Convert.ToString(drParentQry["ChequeNo"].ToString());
                }

                if (drParentQry["TransNo"] != null)
                {
                    sno = Convert.ToInt32(drParentQry["TransNo"]);
                }
                if (drParentQry["Amount"] != null)
                {
                    samount = Convert.ToDouble(drParentQry["Amount"]);
                }
                if (drParentQry["DebtorID"] != null)
                {
                    sDebtorID = Convert.ToInt32(drParentQry["DebtorID"]);
                }
                if (drParentQry["CreditorID"] != null)
                {
                    sCreditorID = Convert.ToInt32(drParentQry["CreditorID"]);
                }
                if (drParentQry["DebtorID"] != null)
                {
                    pQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drParentQry["DebtorID"].ToString());
                }
                if (drParentQry["CreditorID"] != null)
                {
                    pgQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drParentQry["CreditorID"].ToString());
                }

                if (pQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(sConStr));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            sParticulars = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }

                if (pgQry != "")
                {
                    oleCmd = new SqlCommand();
                    oleCmd.CommandText = pgQry;
                    oleSubConn = new SqlConnection(CreateConnectionString(sConStr));
                    oleCmd.Connection = oleSubConn;
                    oleAdp = new SqlDataAdapter(oleCmd);
                    dsChildQry = new DataSet();
                    oleAdp.Fill(dsChildQry);
                    if (dsChildQry != null)
                    {
                        if (dsChildQry.Tables[0].Rows.Count > 0)
                        {
                            sParticulars1 = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                        }
                    }
                    oleSubConn.Close();
                }

                drNew = dt.NewRow();
                drNew["TransNo"] = sno;
                drNew["TransDate"] = sTranDate;
                drNew["Debtor"] = sParticulars;
                drNew["Creditor"] = sParticulars1;
                drNew["DebtorID"] = sDebtorID;
                drNew["CreditorID"] = sCreditorID;
                drNew["Narration"] = sNarration;
                drNew["VoucherType"] = sVoucherType;
                drNew["ChequeNo"] = sChequeNo;
                drNew["Amount"] = samount;
                drNew["ReconcilatedBy"] = usernam;
                drNew["Reconcilateddate"] = "";
                drNew["Result"] = "";
                drNew["Status"] = "NO";

                ds.Tables[0].Rows.Add(drNew);

            }
        }

        oleConn.Close();

        if (ds.Tables[0].Rows.Count > 0)
            return ds;
        else
            return null;
    }

    public DataSet SecondLevel(string field2, DateTime sDate, DateTime eDate, string purReturn, string intTrans, string delNote, string GroupBy)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {


            dbQry.Append("SELECT " + field2 + " SUM(tblSalesItems.Qty* tblSalesItems.Rate) As NetRate, ");
            /*March 21*/
            dbQry.Append(" SUM(tblSalesItems.Rate) As SRate ,SUM(tblSalesItems.Qty) As Quantity,");
            /*March 21*/
            dbQry.Append(" SUM((tblSalesItems.qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS SalesDiscount,");
            dbQry.Append(" SUM(((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate)) AS ActualDiscount,");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.VAT/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumVAT, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100)  AS ActualVAT, ");
            dbQry.Append(" SUM((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)+((tblSalesItems.CST/100)*((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)))) AS SumCST, ");
            dbQry.Append(" SUM(((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)  AS ActualCST,tblSales.Freight AS SumFreight,tblSales.LoadUnload As Loading ");
            dbQry.Append(" FROM tblSales,tblSalesItems,tblProductMaster,tblCategories WHERE tblSales.Billno = tblSalesItems.Billno AND tblSalesItems.ItemCode = tblProductmaster.ItemCode AND tblCategories.CategoryID = tblProductMaster.CategoryID and tblsales.cancelled<>true and UCASE(tblSales.purchaseReturn)='" + purReturn + "' and UCASE(tblSales.DeliveryNote)='" + delNote + "' and UCASE(tblSales.InternalTransfer)='" + intTrans + "' and tblSales.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblSales.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#  Group By " + GroupBy + ",tblSales.Freight,tblSales.LoadUnload ");


            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet SecondLevelPurchase(string field2, DateTime sDate, DateTime eDate, string salesReturn, string intTrans, string delNote, string GroupBy)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT " + field2 + " sum(tblPurchaseItems.Qty* tblPurchaseItems.PurchaseRate) As NetPurchaseRate, ");
            dbQry.Append("  sum(tblPurchaseItems.PurchaseRate) As PRate ,sum(tblPurchaseItems.Qty) As Quantity,");
            dbQry.Append(" (tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS SalesDiscount,");
            dbQry.Append(" ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) AS ActualDiscount,");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.VAT/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumVAT, ");
            dbQry.Append("  ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100  AS ActualVAT, ");
            dbQry.Append(" (tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)+((tblPurchaseItems.CST/100)*((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate))) AS SumCST, ");
            dbQry.Append(" tblPurchase.Freight AS SumFreight,tblPurchase.LoadUnload As Loading,");
            dbQry.Append(" ((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100  AS ActualCST ");
            dbQry.Append("  FROM tblPurchase,tblPurchaseItems,tblProductMaster,tblCategories,tblledger WHERE tblPurchase.purchaseID = tblPurchaseItems.purchaseID AND tblPurchaseItems.ItemCode = tblProductmaster.ItemCode AND tblCategories.CategoryID = tblProductMaster.CategoryID And tblledger.ledgerid = tblpurchase.supplierid And ( UCASE(tblPurchase.SalesReturn)='" + salesReturn + "' OR tblPurchase.SalesReturn = '' OR tblPurchase.SalesReturn Is NULL) AND UCASE(tblPurchase.DeliveryNote)='" + delNote + "' AND ( UCASE(tblPurchase.InternalTransfer)='" + intTrans + "' OR tblPurchase.InternalTransfer = '' OR tblPurchase.InternalTransfer Is NULL ) AND  tblPurchase.Billdate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblPurchase.BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#    group by " + GroupBy + ",  tblPurchaseItems.PurchaseRate ,tblPurchaseItems.Qty,tblPurchaseItems.discount,tblPurchaseItems.VAT,tblPurchase.Freight,tblPurchase.LoadUnload,tblPurchase.SalesReturn,tblPurchaseItems.CST ");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
            manager.Dispose();
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public bool CheckUserHaveDeleteNote(string connection, string usernam, string role)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();

            dbQry = "SELECT Count(*) FROM tblUserOptions Where UserName ='" + usernam + "' and Role ='" + role + "' and delete = false ";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
                return false;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool CheckUserHaveEditNote(string connection, string usernam, string role)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        int qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();

            dbQry = "SELECT Count(*) FROM tblUserOptions Where UserName ='" + usernam + "' and Role ='" + role + "' and edit = false ";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
                return false;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool CheckUserHaveDelete(string usernam, string role)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();

            dbQry = "SELECT Count(*) FROM tblUserOptions Where UserName ='" + usernam + "' and Role ='" + role + "' and [Delete] = 'False' ";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
                return false;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool CheckUserHaveViewNote(string connection, string usernam, string role)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();

            dbQry = "SELECT Count(*) FROM tblUserOptions Where UserName ='" + usernam + "' and Role ='" + role + "' and Views = false ";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
                return false;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool CheckUserHaveAddNote(string connection, string usernam, string role)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();

            dbQry = "SELECT Count(*) FROM tblUserOptions Where UserName ='" + usernam + "' and Role ='" + role + "' and Add = false ";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
                return false;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet getLedgerTransaction(int groupID, string sDataSource, DateTime sDate, DateTime eDate)
    {
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        string sQry = string.Empty;
        string sConStr = string.Empty;
        double db = 0;
        double cr = 0;
        double tot = 0;

        /* Start Ms Access Database Connection Information */
        sConStr = sDataSource;

        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        if (groupID != 0)
            sQry = "SELECT  LedgerID,folionumber, LedgerName FROM tblLedger,tblGroups Where tblLedger.GroupID=tblGroups.GroupID AND tblGroups.GroupID=" + groupID + "  ORDER by LedgerName,LedgerID";
        else
            sQry = "SELECT  LedgerID,folionumber, LedgerName FROM tblLedger,tblGroups Where tblLedger.GroupID=tblGroups.GroupID   ORDER by LedgerName,LedgerID";
        //sQry = "SELECT TransDate,DebtorID,CreditorID,Amount,Narration FROM tblDayBook WHERE (DebtorID=" + iLedgerID + "OR CreditorID=" + iLedgerID + ") ";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsParentQry = new DataSet();
        oleAdp.Fill(dsParentQry);

        DataSet dsNew = new DataSet();
        DataTable dtNew = new DataTable();

        DataColumn dcNew = new DataColumn();
        DataRow drNew;
        dcNew = new DataColumn("LedgerName");
        dtNew.Columns.Add(dcNew);
        dcNew = new DataColumn("LedgerID");
        dtNew.Columns.Add(dcNew);
        dcNew = new DataColumn("Folionumber");
        dtNew.Columns.Add(dcNew);

        dcNew = new DataColumn("Debit");
        dtNew.Columns.Add(dcNew);
        dcNew = new DataColumn("Credit");
        dtNew.Columns.Add(dcNew);


        dsNew.Tables.Add(dtNew);

        if (dsParentQry != null)
        {
            if (dsParentQry.Tables[0] != null)
            {
                if (dsParentQry.Tables[0].Rows.Count == 0)
                {
                    drNew = dtNew.NewRow();
                    drNew["LedgerID"] = "";
                    drNew["LedgerName"] = "";
                    drNew["Debit"] = "";
                    drNew["Credit"] = "";
                    drNew["Folionumber"] = "";

                    dsNew.Tables[0].Rows.Add(drNew);

                }
                else
                {
                    foreach (DataRow dr in dsParentQry.Tables[0].Rows)
                    {
                        drNew = dtNew.NewRow();
                        drNew["LedgerID"] = Convert.ToString(dr["LedgerID"]);
                        drNew["LedgerName"] = Convert.ToString(dr["LedgerName"]);
                        drNew["Folionumber"] = Convert.ToString(dr["Folionumber"]);
                        db = GetTotalDebit(sDataSource, Convert.ToInt32(dr["LedgerID"]), sDate, eDate);
                        cr = GetTotalCredit(sDataSource, Convert.ToInt32(dr["LedgerID"]), sDate, eDate);

                        tot = db - cr;
                        if (tot > 0)
                        {
                            drNew["Debit"] = tot.ToString("f2");
                            drNew["Credit"] = "0";
                        }
                        else
                        {
                            drNew["Debit"] = "0";
                            drNew["Credit"] = Math.Abs(tot).ToString("f2");
                        }
                        if (db != 0 || cr != 0)
                            dsNew.Tables[0].Rows.Add(drNew);

                    }

                }
            }
        }

        return dsNew;
    }


    public double GetTotalCredit(string sDataSource, int iLedgerID, DateTime sDate, DateTime eDate)
    {
        //SELECT SUM(Amount) FROM tblDayBook Where  tblDaybook.CreditorID=734 Group By  tblDayBook.CreditorID;
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        string sQry = string.Empty;
        string sConStr = string.Empty;


        /* Start Ms Access Database Connection Information */
        //sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource + ";User Id=admin;Jet OLEDB:Database Password=moonmoon"; ;
        sConStr = sDataSource;
        //sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource + ";User Id=admin;Password=moonmoon;Jet OLEDB:System Database=C:\\Program Files\\Microsoft Office\\Office\\SYSTEM.MDW;";
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleConn.Open();
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;

        sQry = "SELECT SUM(Amount) FROM tblDayBook Where  (tblDayBook.TransDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblDayBook.TransDate <=#" + eDate.ToString("MM/dd/yyyy") + "#)  AND  tblDaybook.CreditorID=" + iLedgerID;


        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;

        object retVal = oleCmd.ExecuteScalar();


        double amt = 0.0d;
        if (retVal != null)
        {
            if (retVal.ToString() != "")
                amt = (double)retVal;
        }
        //sQry = "SELECT OpenBalanceCR AS OB FROM tblLedger WHERE LedgerID=" + iLedgerID;
        //oleCmd.CommandText = sQry;
        //oleCmd.CommandType = CommandType.Text;
        //retVal = oleCmd.ExecuteScalar();
        //getOpeningBalance(

        double oB = 0;
        oB = getOpeningBalance(0, 0, iLedgerID, "credit", sDate, sConStr);

        amt = amt + oB;

        oleConn.Close();
        return amt;

    }

    public double GetTotalDebit(string sDataSource, int iLedgerID, DateTime sDate, DateTime eDate)
    {
        //SELECT SUM(Amount) FROM tblDayBook Where  tblDaybook.CreditorID=734 Group By  tblDayBook.CreditorID;
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        string sQry = string.Empty;
        string sConStr = string.Empty;


        /* Start Ms Access Database Connection Information */
        //sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource + ";User Id=admin;Jet OLEDB:Database Password=moonmoon"; ;
        sConStr = sDataSource;
        //sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource + ";User Id=admin;Password=moonmoon;Jet OLEDB:System Database=C:\\Program Files\\Microsoft Office\\Office\\SYSTEM.MDW;";
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleConn.Open();
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;

        sQry = "SELECT SUM(Amount) FROM tblDayBook Where  (tblDayBook.TransDate>=#" + sDate.ToString("MM/dd/yyyy") + "# AND tblDayBook.TransDate <=#" + eDate.ToString("MM/dd/yyyy") + "#) AND tblDaybook.DebtorID=" + iLedgerID;


        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;

        object retVal = oleCmd.ExecuteScalar();


        double amt = 0.0d;
        if (retVal != null)
        {
            if (retVal.ToString() != "")
                amt = (double)retVal;
        }
        //sQry = "SELECT OpenBalanceDR AS OB FROM tblLedger WHERE LedgerID=" + iLedgerID;
        //oleCmd.CommandText = sQry;
        //oleCmd.CommandType = CommandType.Text;
        //retVal = oleCmd.ExecuteScalar();
        double oB = 0;
        //if (retVal != null)
        //{
        //    oB = (double)retVal;
        //}
        oB = getOpeningBalance(0, 0, iLedgerID, "debit", sDate, sConStr);
        amt = amt + oB;


        oleConn.Close();
        return amt;

    }

    public double getOpeningBalance(int AccHeadingID, int GroupID, int ledgerID, string type, DateTime oDate, string sDataSource)
    {
        string sConStr = string.Empty;
        string sQry = string.Empty;
        SqlConnection oleConn;
        SqlCommand oleCmd;
        sConStr = sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleConn.Open();
        oleCmd.Connection = oleConn;
        double oBal = 0;
        /* End Ms Access Database Connection Information */

        /* Start DB Query Processing - Getting the Details of the Ledger int the Daybook */
        if (type == "debit")
        {
            sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook B Inner Join tblLedger L On L.LedgerID = B.DebtorID) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblAccHeading H On H.HeadingID = G.HeadingID) Where TransDate <#" + oDate.ToString("MM/dd/yyyy") + "#";

            if (ledgerID > 0)
                sQry = sQry + " AND B.DebtorID = " + ledgerID.ToString();
            if (AccHeadingID > 0)
                sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
            if (GroupID > 0)
                sQry = sQry + " AND L.GroupID = " + GroupID.ToString();


        }
        else
        {
            //sQry = "SELECT SUM(Amount)  As OpeningBal  FROM tblDayBook Where CreditorID = " + ledgerID + "  AND TransDate <#" + oDate.ToString("MM/dd/yyyy") + "#";
            sQry = "SELECT SUM(Amount)  As OpeningBal  FROM (((tblDayBook B Inner Join tblLedger L On L.LedgerID = B.CreditorID) Inner Join tblGroups G On G.GroupID = L.GroupID) Inner Join tblAccHeading H On H.HeadingID = G.HeadingID) Where TransDate <#" + oDate.ToString("MM/dd/yyyy") + "#";

            if (ledgerID > 0)
                sQry = sQry + " AND B.CreditorID = " + ledgerID.ToString();
            if (AccHeadingID > 0)
                sQry = sQry + " AND G.HeadingID = " + AccHeadingID.ToString();
            if (GroupID > 0)
                sQry = sQry + " AND L.GroupID = " + GroupID.ToString();

        }
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oBal = getLedgerOpeningBalance(ledgerID, type, sDataSource);

        object amtObj;

        amtObj = oleCmd.ExecuteScalar();
        double amt = 0.0;
        if (amtObj != null && amtObj != DBNull.Value)
            amt = (double)amtObj;
        amt = amt + oBal;
        oleConn.Close();
        return amt;
    }

    public double getLedgerOpeningBalance(int ledgerID, string type, string sDataSource)
    {
        string sConStr = string.Empty;
        string sQry = string.Empty;
        SqlConnection oleConn;
        SqlCommand oleCmd;
        sConStr = sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleConn.Open();
        oleCmd.Connection = oleConn;
        /* End Ms Access Database Connection Information */

        /* Start DB Query Processing - Getting the Details of the Ledger int the Daybook */
        if (type == "debit")
            sQry = "SELECT OpenBalanceDr  FROM tblLedger Where  ledgerID=" + ledgerID;
        else
            sQry = "SELECT OpenBalanceCr  FROM tblLedger Where  ledgerID=" + ledgerID;
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        //oleAdp = new SqlDataAdapter(oleCmd);
        //dsParentQry = new DataSet();
        //oleAdp.Fill(dsParentQry);
        object amtObj;

        amtObj = oleCmd.ExecuteScalar();
        double amt = 0.0;
        if (amtObj != null && amtObj != DBNull.Value)
            amt = (double)amtObj;
        oleConn.Close();
        return amt;
    }

    public DataSet ListExpensesTypes(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}','{2}','{3}','{4}') OR tblGroups.HeadingID IN (11) Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors", "Bank Accounts", "Cash in Hand", "InCome");
            dbQry = string.Format("select * from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where GroupName = 'General Expenses' ORDER By LedgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetLeadContacts(int BillNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = "select ContactRefID,ContactedDate,ContactSummary From tblHireContact Where slno=" + BillNo;

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public int InsertHirePurchase(string Billdate, int sCustomerID, string sCustomerName, double dpurAmt, double dlnamt, double ddochr, double dintamt, double dfinpay, double dnoinst, string txtoth, double dpay, string dpaydate, string dstartdate, double deachpay, string username, DataSet dsLeadContact, string billnonew, string branchrefno, double down, double down1, double emi, double emiper, double upfront, string ddob, string dmobile, int bankid, string BranchName, string AccountNumber, string Dayofpayment, string IFSCCode, int paymode, DataSet dsinstall, string Branchcode)
    {
        /*End Purchase Loading / Unloading Freight Change - March 16*/
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        //DataSet dsOld = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldSupplierID = 0;
        double oldAmt = 0;
        string sNarration = string.Empty;
        int creditorID = 0;
        int DebtorID = 3;
        int slno = 0;
        string sVoucherType = string.Empty;

        string[] sDate, ddate, ddatestart, stDate, sttDate;
        string delim = "/";
        char[] delimA = delim.ToCharArray();
        CultureInfo culture = new CultureInfo("pt-BR");
        DateTime sBilldate;
        DateTime sDayofpayment;
        DateTime sddob;
        DateTime dpaydatenew;
        DateTime dstartdatenew;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();
            //Start Retriving the old Debtor and CreditorID


            try
            {
                sDate = Billdate.Trim().Split(delimA);
                sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));

                sttDate = Dayofpayment.Trim().Split(delimA);
                sDayofpayment = new DateTime(Convert.ToInt32(sttDate[2].ToString()), Convert.ToInt32(sttDate[1].ToString()), Convert.ToInt32(sttDate[0].ToString()));

                stDate = ddob.Trim().Split(delimA);
                sddob = new DateTime(Convert.ToInt32(stDate[2].ToString()), Convert.ToInt32(stDate[1].ToString()), Convert.ToInt32(stDate[0].ToString()));

                ddate = dpaydate.Trim().Split(delimA);
                dpaydatenew = new DateTime(Convert.ToInt32(ddate[2].ToString()), Convert.ToInt32(ddate[1].ToString()), Convert.ToInt32(ddate[0].ToString()));

                ddatestart = dstartdate.Trim().Split(delimA);
                dstartdatenew = new DateTime(Convert.ToInt32(ddatestart[2].ToString()), Convert.ToInt32(ddatestart[1].ToString()), Convert.ToInt32(ddatestart[0].ToString()));
            }
            catch (Exception ex)
            {
                //Response.Write("<b><font face='Trebuchet MS' size=2 color=red>Invalid Bill Date Format</font></b>");
                throw new Exception("Invalid Bill Date Format", ex);
            }


            //if (paymode == 1)
            //    creditorID = 1;
            //else if (paymode == 2)
            //    creditorID = BankName;
            //else
            //    creditorID = SupplierID;

            ////End Retriving the old Debtor and CreditorID
            //if (salesreturn == "NO")
            //    sVoucherType = "Purchase";
            //else
            //    sVoucherType = "Sales Return";

            //sNarration = sVoucherType + " - Bill No:" + Billno;
            //Purchase A/c - 3 will always be the debtor
            //dbQry = string.Format("Select Debit from tblLedger Where LedgerID={0}", DebtorID);
            //double Debit = 0;

            //object retDebit = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retDebit != null) && (retDebit != DBNull.Value))
            //{
            //    Debit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}

            ////double Payment = (double)manager.ExecuteScalar(CommandType.Text, "Select Amount from tblDayBook Where TransNo=" + TransNo);
            //dbQry = string.Format("Update tblLedger SET Debit = {0} Where LedgerID={1}", Debit + Amount, DebtorID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("Select Credit from tblLedger Where LedgerID={0}", creditorID);
            //double Credit = 0;
            //object retCredit = manager.ExecuteScalar(CommandType.Text, dbQry);
            //if ((retCredit != null) && (retCredit != DBNull.Value))
            //{
            //    Credit = (double)manager.ExecuteScalar(CommandType.Text, dbQry);
            //}
            //dbQry = string.Format("Update tblLedger SET Credit = {0} Where LedgerID={1}", Credit + Amount, creditorID);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //End Updating the Debit and credit
            //Start Delete the old record


            dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            //if (Logsave == "YES")
            //{
            //    logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,Chequeno,RefNo) VALUES({0},{1},{2},{3},{4},{5},{6},{7})",
            //        BillDate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, Chequeno, 0);
            //    logdescription = logdescription.Trim();
            //    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
            //         DateTime.Now.ToString(), logdescription.ToString(), usernam, "", "InsertPurchase");
            //    manager.ExecuteNonQuery(CommandType.Text, description);
            //}

            //dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,Chequeno,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7})",
            //BillDate.ToShortDateString(), DebtorID, creditorID, Amount, sNarration, sVoucherType, Chequeno, 0);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //int NewTransNo = 0;

            //object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            //if ((retVal != null) && (retVal != DBNull.Value))
            //{
            //    NewTransNo = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");
            //}
            //else
            //{
            //    NewTransNo = NewTransNo + 1;
            //}



            if (Logsave == "YES")
            {
                string value1 = string.Empty;
                string value2 = string.Empty;
                string value3 = string.Empty;

                int middlePos = 0;
                logdescription = string.Format("INSERT INTO tblHirePurchase(BillDate,CustomerID,Customername,puramt,lnamt,dochr,intamt,finpay,noinst,others,inipay,paydate,startdate,eachpay,BillNoNew,BranchRefNo, Branchcode) VALUES {0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16}",
                sBilldate.ToString("yyyy-MM-dd"), sCustomerID, sCustomerName, dpurAmt, dlnamt, ddochr, dintamt, dfinpay, dnoinst, txtoth, dpay, dpaydatenew.ToString("yyyy-MM-dd"), dstartdatenew.ToString("yyyy-MM-dd"), deachpay, billnonew, branchrefno, Branchcode);
                //logdescription = string.Format("INSERT INTO tblHirePurchase(Billno,BillDate,SupplierID,JournalID,Paymode,TotalAmt,salesreturn,salesreturnreason,freight,LoadUnload,BilitID,InternalTransfer,DeliveryNote,InvoiceNo,InvoiceDate,discamount,discper,dcbillno,TotalWORndOff) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18})",
                //    Billno, BillDate.ToShortDateString(), SupplierID, NewTransNo, paymode, Amount, salesreturn, srReason, freight, dLU, BilitID, intTrans, deliveryNote, Invoiceno, InvoiceDate, discamount, discper, dcbillno, TotalWORndOff);
                logdescription = logdescription.Trim();
                if (logdescription.Length > 255)
                {
                    value1 = logdescription.Substring(0, 255);

                    middlePos = logdescription.Length - (value1.Length);
                    if (middlePos > 0)
                        value2 = logdescription.Substring(255, middlePos);
                    else
                        value2 = "";

                    middlePos = logdescription.Length - (value1.Length + value2.Length);
                    if (middlePos > 0)
                        value3 = logdescription.Substring(510, middlePos);
                    else
                        value3 = "";
                }
                else
                {
                    value1 = logdescription;
                    value2 = "";
                    value3 = "";
                }
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}')",
                DateTime.Now.ToString("yyyy-MM-dd"), value1, username, slno, value2, value3, "InsertHirePurchase");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblHirePurchase(BillDate,CustomerID,Customername,puramt,lnamt,dochr,intamt,finpay,noinst,others,inipay,paydate,startdate,eachpay,BillNoNew,BranchRefNo, down, down1, emi, emiper, upfront,dob,mobile,bankid,BranchName,IFSCCode,AccountNumber,Dayofpayment,paymentmode, Branchcode) VALUES('{0}',{1},'{2}',{3},{4},{5},{6},{7},{8},'{9}',{10},'{11}','{12}',{13},'{14}','{15}',{16},{17},{18},{19},{20},'{21}','{22}',{23},'{24}','{25}','{26}','{27}',{28},'{29}')",
            sBilldate.ToString("yyyy-MM-dd"), sCustomerID, sCustomerName, dpurAmt, dlnamt, ddochr, dintamt, dfinpay, dnoinst, txtoth, dpay, dpaydatenew.ToString("yyyy-MM-dd"), dstartdatenew.ToString("yyyy-MM-dd"), deachpay, billnonew, branchrefno, down, down1, emi, emiper, upfront, sddob.ToString("yyyy-MM-dd"), dmobile, bankid, BranchName, IFSCCode, AccountNumber, sDayofpayment.ToString("yyyy-MM-dd"), paymode, Branchcode);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            object retPurchase = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(Slno) FROM tblHirePurchase");

            if ((retPurchase != null) && (retPurchase != DBNull.Value))
            {
                slno = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(Slno) FROM tblHirePurchase"));
            }
            else
            {
                slno = slno + 1;
            }


            if (dsLeadContact != null)
            {
                if (dsLeadContact.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsLeadContact.Tables[0].Rows)
                    {
                        dbQry = string.Format("INSERT INTO tblHireContact(Slno,ContactedDate,ContactSummary) VALUES({0},'{1}','{2}')", slno, dr["ContactedDate"].ToString(), dr["ContactSummary"].ToString());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }
            }



            int id1 = 0;
            int id2 = 0;
            int id3 = 0;
            string idname1 = "";
            string idname2 = "";
            string idname3 = "";

            dbQry = string.Format("Select ledgername,ledgerid,ordernumber from tblHirePostingID order by ordernumber");
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsOld.Tables[0].Rows)
                    {
                        if (Convert.ToInt32(dr["ordernumber"]) == 1)
                        {
                            id1 = Convert.ToInt32(dr["ledgerid"]);
                            idname1 = dr["ledgername"].ToString();
                        }
                        else if (Convert.ToInt32(dr["ordernumber"]) == 2)
                        {
                            id2 = Convert.ToInt32(dr["ledgerid"]);
                            idname2 = dr["ledgername"].ToString();
                        }
                        else if (Convert.ToInt32(dr["ordernumber"]) == 3)
                        {
                            id3 = Convert.ToInt32(dr["ledgerid"]);
                            idname3 = dr["ledgername"].ToString();
                        }
                    }
                }

            }



            /////// Daybook posting

            string Narration = "Branch ref no : " + branchrefno + " Customer : " + sCustomerName;
            string VoucherType = "SALE";
            int RefNo = 0;

            // Cost  id1 7

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,RefNo, Branchcode) VALUES('{0}',{1},{2},{3},'{4}','{5}',{6},'{7}')",
            sBilldate.ToString("yyyy-MM-dd"), sCustomerID, id1, dpurAmt, Narration, VoucherType, slno, Branchcode);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int NTransNo = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NTransNo = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));
            }
            else
            {
                NTransNo = NTransNo + 1;
            }


            // Margin Amt id1 7 
            string VouType = "INITIAL AMT";

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,RefNo, Branchcode) VALUES('{0}',{1},{2},{3},'{4}','{5}',{6},'{7}')",
            sBilldate.ToString("yyyy-MM-dd"), id1, sCustomerID, dpay, Narration, VouType, slno, Branchcode);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int NNTransNo = 0;
            object retVall = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVall != null) && (retVall != DBNull.Value))
            {
                NNTransNo = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));
            }
            else
            {
                NNTransNo = NNTransNo + 1;
            }

            // Doc Charges id1 7 and id2 9
            string Nar = "Branch ref no : " + branchrefno + " Customer : " + sCustomerName;
            string VoType = "DOC AMT";

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,RefNo, Branchcode) VALUES('{0}',{1},{2},{3},'{4}','{5}',{6},'{7}')",
            sBilldate.ToString("yyyy-MM-dd"), id1, id2, ddochr, Nar, VoType, slno, Branchcode);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int NNNTransNo = 0;
            object retValll = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retValll != null) && (retValll != DBNull.Value))
            {
                NNNTransNo = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));
            }
            else
            {
                NNNTransNo = NNNTransNo + 1;
            }

            // Int Amount id3 11
            string Nartn = "Branch ref no : " + branchrefno + " Customer : " + sCustomerName;
            string VType = "INTEREST AMT";

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,RefNo, Branchcode) VALUES('{0}',{1},{2},{3},'{4}','{5}',{6},'{7}')",
            sBilldate.ToString("yyyy-MM-dd"), sCustomerID, id3, dintamt, Nartn, VType, slno, Branchcode);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int NNNNTransNo = 0;
            object retVallll = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVallll != null) && (retVallll != DBNull.Value))
            {
                NNNNTransNo = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));
            }
            else
            {
                NNNNTransNo = NNNNTransNo + 1;
            }


            //Installment details

            if (dsinstall != null)
            {
                foreach (DataRow dr in dsinstall.Tables[0].Rows)
                {
                    dbQry = string.Format("INSERT INTO tblInstallmentDetails(CustomerId,ChequeNo,Amount,Cancelled,DueDate,Narration,BranchRefNo,BillNo,SlNo, Branchcode) VALUES({0},'{1}',{2},'{3}','{4}','{5}','{6}','{7}',{8},'{9}')", sCustomerID, dr["ChequeNo"].ToString(), Convert.ToDouble(dr["Amount"]), Convert.ToString(dr["Cancelled"]), Convert.ToDateTime(dr["DueDate"]).ToString("yyyy-MM-dd"), dr["Narration"].ToString(), branchrefno, billnonew, slno, Branchcode);
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                }
            }


            sAuditStr = "HirePurchase SlNo : " + slno + " got added. Record Details : User =" + username + " Bill Date= " + Billdate + " CustomerID=" + sCustomerID + ",Amount=" + dpurAmt;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            manager.CommitTransaction();
            return slno;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }



    public DataSet GetHireList(string connection, string txtSearch, string dropDown, string Branch)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();


        if ((dropDown == "BillDate") || (dropDown == "dob") || (dropDown == "Mobile"))
            txtSearch = txtSearch;
        else
            txtSearch = "%" + txtSearch + "%";

        string dbQry2 = string.Empty;

        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                dbQry.Append("SELECT tblHirePurchase.Billdate,Slno,CustomerID,Customername,puramt,lnamt,dochr,intamt,finpay,noinst,others,inipay,tblHirePurchase.paydate,tblHirePurchase.startdate,eachpay,BillNoNew,BranchRefNo, down, down1, emi, emiper, upfront,tblHirePurchase.BranchCode ");
                dbQry.Append(" FROM tblHirePurchase INNER JOIN tblLedger Debtor ON tblHirePurchase.Customerid = Debtor.LedgerID Where tblHirePurchase.BillDate > " + DateTime.Parse(retVal.ToString()).ToString("yyyy-MM-dd") + " ");
            }
            else
            {
                dbQry.Append("SELECT tblHirePurchase.Billdate,Slno,CustomerID,Customername,puramt,lnamt,dochr,intamt,finpay,noinst,others,inipay,tblHirePurchase.paydate,tblHirePurchase.startdate,eachpay,BillNoNew,BranchRefNo, down, down1, emi, emiper, upfront,tblHirePurchase.BranchCode ");
                dbQry.Append(" FROM tblHirePurchase INNER JOIN tblLedger Debtor ON tblHirePurchase.Customerid = Debtor.LedgerID Where 1=1 ");
            }

            if (txtSearch == null || txtSearch == "")
            {
                dbQry.AppendFormat(" AND 1=1 ");
            }
            else
            {
                if (dropDown == "BillNo" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblHirePurchase.billnonew like '{0}' ", txtSearch);
                }
                else if (dropDown == "BillDate" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND [tblHirePurchase.BillDate] = '{0}' ", Convert.ToDateTime(txtSearch).ToString("yyyy-MM-dd"));
                }
                else if (dropDown == "dob" && txtSearch != null)
                {
                    //dbQry.AppendFormat(" AND Format([tblHirePurchase.dob], 'mm/dd/yyyy') = #" + Convert.ToDateTime(txtSearch).ToShortDateString() + "# ");
                    dbQry.AppendFormat(" AND [tblHirePurchase.dob] = '{0}' ", Convert.ToDateTime(txtSearch).ToString("yyyy-MM-dd"));
                }
                else if (dropDown == "CustomerName" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblHirePurchase.CustomerName like '{0}' ", txtSearch);
                }
                else if (dropDown == "RefNo" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblHirePurchase.BranchRefno like '{0}' ", txtSearch);
                }
                else if (dropDown == "Mobile" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblHirePurchase.Mobile = '{0}' ", txtSearch);
                }
                else if (dropDown == "0" && txtSearch != "%%")
                {
                    dbQry.AppendFormat(" AND 1=1 ");
                }
                else
                {
                    dbQry.AppendFormat(" AND 1=1 ");
                }
            }

            if (Branch != "All")
            {
                dbQry.Append(" AND tblDayBook.BranchCode = '" + Branch + "' ");
            }

            dbQry.Append(" ORDER BY tblHirePurchase.BillDate Desc,tblHirePurchase.Slno Desc");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public DataSet GetHirePurchaseForId(int slno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;
        try
        {

            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                dbQry.Append("SELECT BillDate,Slno,CustomerID,Customername,puramt,tblHirePurchase.BranchCode,lnamt,dochr,intamt,finpay,noinst,others,inipay,paydate,startdate,eachpay,BillNoNew,BranchRefNo,down,down1,upfront,emi,emiper,dob,tblHirePurchase.mobile,dayofpayment,bankid,branchname,ifsccode,paymentmode,accountnumber ");
                dbQry.Append(" FROM tblHirePurchase INNER JOIN tblLedger Creditor ON tblHirePurchase.customerid = Creditor.LedgerID ");
                dbQry.Append(" Where tblHirePurchase.slno=" + slno + " AND tblHirePurchase.BillDate > " + DateTime.Parse(retVal.ToString()).ToString("yyyy-MM-dd") + " ORDER BY tblHirePurchase.BillDate Desc");
            }
            else
            {
                dbQry.Append("SELECT BillDate,Slno,CustomerID,Customername,puramt,lnamt,tblHirePurchase.BranchCode,dochr,intamt,finpay,noinst,others,inipay,paydate,startdate,eachpay,BillNoNew,BranchRefNo,down,down1,upfront,emi,emiper,dob,tblHirePurchase.mobile,dayofpayment,bankid,branchname,ifsccode,paymentmode,accountnumber ");
                dbQry.Append(" FROM tblHirePurchase INNER JOIN tblLedger Creditor ON tblHirePurchase.customerid = Creditor.LedgerID ");
                dbQry.Append("  ORDER BY tblHirePurchase.BillDate Desc");
            }
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public int UpdateHirePurchase(int slno, string Billdate, int sCustomerID, string sCustomerName, double dpurAmt, double dlnamt, double ddochr, double dintamt, double dfinpay, double dnoinst, string txtoth, double dpay, string dpaydate, string dstartdate, double deachpay, string usernam, DataSet dsLeadContact, string BillNoNew, string BranchRefNo, double down, double down1, double emi, double emiper, double upfront, string ddob, string dmobile, int bankid, string BranchName, string AccountNumber, string Dayofpayment, string IFSCCode, int paymode, DataSet dsinstall, string Branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldDebitID = 0;
        int oldCreditID = 0;
        int oldBillNo = 0;
        int oldBilitID = 0;
        double oldAmt = 0;
        string sVoucherType = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        string[] sDate, ddate, ddatestart, stDate, sttDate;
        string delim = "/";
        char[] delimA = delim.ToCharArray();
        CultureInfo culture = new CultureInfo("pt-BR");
        DateTime sBilldate;
        DateTime sDayofpayment;
        DateTime sddob;
        DateTime dpaydatenew;
        DateTime dstartdatenew;

        string sNarration = string.Empty;
        string oldtrandate = string.Empty;

        int creditorID = 0;
        int DebtorID = 3;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            try
            {
                sDate = Billdate.Trim().Split(delimA);
                sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));

                sttDate = Dayofpayment.Trim().Split(delimA);
                sDayofpayment = new DateTime(Convert.ToInt32(sttDate[2].ToString()), Convert.ToInt32(sttDate[1].ToString()), Convert.ToInt32(sttDate[0].ToString()));

                stDate = ddob.Trim().Split(delimA);
                sddob = new DateTime(Convert.ToInt32(stDate[2].ToString()), Convert.ToInt32(stDate[1].ToString()), Convert.ToInt32(stDate[0].ToString()));

                ddate = dpaydate.Trim().Split(delimA);
                dpaydatenew = new DateTime(Convert.ToInt32(ddate[2].ToString()), Convert.ToInt32(ddate[1].ToString()), Convert.ToInt32(ddate[0].ToString()));

                ddatestart = dstartdate.Trim().Split(delimA);
                dstartdatenew = new DateTime(Convert.ToInt32(ddatestart[2].ToString()), Convert.ToInt32(ddatestart[1].ToString()), Convert.ToInt32(ddatestart[0].ToString()));
            }
            catch (Exception ex)
            {
                //Response.Write("<b><font face='Trebuchet MS' size=2 color=red>Invalid Bill Date Format</font></b>");
                throw new Exception("Invalid Bill Date Format", ex);
            }

            dbQry = string.Format("Select Customerid,puramt,slno,Billdate from tblHirePurchase Where slno={0}", slno);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldBillNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["slno"]);
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["Customerid"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["puramt"]);
                    oldtrandate = Convert.ToString(dsOld.Tables[0].Rows[0]["Billdate"]);
                }
            }

            dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Delete From tblHirePurchase Where slno={0}", slno);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, "", "UpdateHirePurchase");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            //dbQry = string.Format("INSERT INTO tblAuditHirePurchase Select * From tblHirePurchase Where slno={0}", slno);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblHirePurchase Where slno={0}", slno);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblInstallmentDetails Where slno={0}", slno);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblDayBook Where RefNo={0}", slno);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = string.Format("Delete From tblHireContact Where slno={0}", slno);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            if (Logsave == "YES")
            {
                string value1 = string.Empty;
                string value2 = string.Empty;
                string value3 = string.Empty;
                int middlePos = 0;

                logdescription = string.Format("INSERT INTO tblHirePurchase(BillDate,CustomerID,Customername,puramt,lnamt,dochr,intamt,finpay,noinst,others,inipay,paydate,startdate,eachpay, Branchcode) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14})",
                   sBilldate.ToShortDateString(), sCustomerID, sCustomerName, dpurAmt, dlnamt, ddochr, dintamt, dfinpay, dnoinst, txtoth, dpay, dpaydatenew.ToShortDateString(), dstartdatenew.ToShortDateString(), deachpay, Branchcode);

                logdescription = logdescription.Trim();

                if (logdescription.Length > 255)
                {
                    value1 = logdescription.Substring(0, 255);
                    middlePos = logdescription.Length - (value1.Length);
                    if (middlePos > 0)
                        value2 = logdescription.Substring(255, middlePos);
                    else
                        value3 = "";

                    middlePos = logdescription.Length - (value1.Length + value2.Length);
                    if (middlePos > 0)
                        value3 = logdescription.Substring(510, middlePos);
                    else
                        value3 = "";
                }
                else
                {
                    value1 = logdescription;
                    value2 = "";
                    value3 = "";
                }
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), value1, usernam, "", value2, value3, "UpdatePurchase");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            //dbQry = string.Format("INSERT INTO tblHirePurchase(Slno,BillDate,SupplierID,JournalID,Paymode,TotalAmt,salesreturn,salesreturnreason,freight,LoadUnload,BilitID,InternalTransfer,DeliveryNote,InvoiceNo,InvoiceDate, discamount, discper, dcbillno, TotalWORndOff) VALUES('{0}',Format('{1}', 'dd/mm/yyyy'),{2},{3},{4},{5},'{6}','{7}',{8},{9},{10},'{11}','{12}','{13}',Format('{14}', 'dd/mm/yyyy'),{15},{16},{17},{18})",
            //Billno, BillDate.ToShortDateString(), SupplierID, NewTransNo, paymode, Amount, salesreturn, srReason, freight, dLU, BilitID, intTrans, deliveryNote, Invoiceno, InvoiceDate, discamount, discper, dcbillno, TotalWORndOff);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("INSERT INTO tblHirePurchase(BillDate,CustomerID,Customername,puramt,lnamt,dochr,intamt,finpay,noinst,others,inipay,paydate,startdate,eachpay,BillNoNew,BranchRefNo, down, down1, emi, emiper, upfront) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},'{2}',{3},{4},{5},{6},{7},{8},'{9}',{10},Format('{11}', 'dd/mm/yyyy'),Format('{12}', 'dd/mm/yyyy'),{13},'{14}','{15}',{16},{17},{18},{19},{20})",
            //sBilldate.ToShortDateString(), sCustomerID, sCustomerName, dpurAmt, dlnamt, ddochr, dintamt, dfinpay, dnoinst, txtoth, dpay, dpaydatenew.ToShortDateString(), dstartdatenew.ToShortDateString(), deachpay, BillNoNew, BranchRefNo, down, down1, emi, emiper, upfront);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = string.Format("INSERT INTO tblHirePurchase(BillDate,CustomerID,Customername,puramt,lnamt,dochr,intamt,finpay,noinst,others,inipay,paydate,startdate,eachpay,BillNoNew,BranchRefNo, down, down1, emi, emiper, upfront,dob,mobile,bankid,BranchName,IFSCCode,AccountNumber,Dayofpayment,paymentmode, Branchcode) VALUES('{0}',{1},'{2}',{3},{4},{5},{6},{7},{8},'{9}',{10},'{11}','{12}',{13},'{14}','{15}',{16},{17},{18},{19},{20},'{21}','{22}',{23},'{24}','{25}','{26}','{27}',{28},'{29}')",
            sBilldate.ToString("yyyy-MM-dd"), sCustomerID, sCustomerName, dpurAmt, dlnamt, ddochr, dintamt, dfinpay, dnoinst, txtoth, dpay, dpaydatenew.ToString("yyyy-MM-dd"), dstartdatenew.ToString("yyyy-MM-dd"), deachpay, BillNoNew, BranchRefNo, down, down1, emi, emiper, upfront, sddob.ToString("yyyy-MM-dd"), dmobile, bankid, BranchName, IFSCCode, AccountNumber, sDayofpayment.ToString("yyyy-MM-dd"), paymode, Branchcode);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            object retPurchase = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(slno) FROM tblHirePurchase");

            if ((retPurchase != null) && (retPurchase != DBNull.Value))
            {
                slno = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(slno) FROM tblHirePurchase"));
            }
            else
            {
                slno = slno + 1;
            }



            if (dsLeadContact != null)
            {
                if (dsLeadContact.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsLeadContact.Tables[0].Rows)
                    {
                        dbQry = string.Format("INSERT INTO tblHireContact(Slno,ContactedDate,ContactSummary) VALUES({0},'{1}','{2}')", slno, dr["ContactedDate"].ToString(), dr["ContactSummary"].ToString());
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }

                }
            }




            int id1 = 0;
            int id2 = 0;
            int id3 = 0;
            string idname1 = "";
            string idname2 = "";
            string idname3 = "";

            dbQry = string.Format("Select ledgername,ledgerid,ordernumber from tblHirePostingID order by ordernumber");
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsOld.Tables[0].Rows)
                    {
                        if (Convert.ToInt32(dr["ordernumber"]) == 1)
                        {
                            id1 = Convert.ToInt32(dr["ledgerid"]);
                            idname1 = dr["ledgername"].ToString();
                        }
                        else if (Convert.ToInt32(dr["ordernumber"]) == 2)
                        {
                            id2 = Convert.ToInt32(dr["ledgerid"]);
                            idname2 = dr["ledgername"].ToString();
                        }
                        else if (Convert.ToInt32(dr["ordernumber"]) == 3)
                        {
                            id3 = Convert.ToInt32(dr["ledgerid"]);
                            idname3 = dr["ledgername"].ToString();
                        }
                    }
                }

            }


            /////// Daybook posting

            string Narration = "Branch ref no : " + BranchRefNo + " Customer : " + sCustomerName;
            string VoucherType = "SALE";
            int RefNo = 0;

            // Cost

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,RefNo, Branchcode) VALUES('{0}',{1},{2},{3},'{4}','{5}',{6},'{7}')",
            sBilldate.ToString("yyyy-MM-dd"), sCustomerID, id1, dpurAmt, Narration, VoucherType, slno, Branchcode);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int NTransNo = 0;
            object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                NTransNo = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));
            }
            else
            {
                NTransNo = NTransNo + 1;
            }


            // Margin Amt
            string VouType = "INITIAL AMT";

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,RefNo, Branchcode) VALUES('{0}',{1},{2},{3},'{4}','{5}',{6},'{7}')",
            sBilldate.ToString("yyyy-MM-dd"), id1, sCustomerID, dpay, Narration, VouType, slno, Branchcode);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int NNTransNo = 0;
            object retVall = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVall != null) && (retVall != DBNull.Value))
            {
                NNTransNo = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));
            }
            else
            {
                NNTransNo = NNTransNo + 1;
            }

            // Doc Charges
            string Nar = "Branch ref no : " + BranchRefNo + " Customer : " + sCustomerName;
            string VoType = "DOC AMT";

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,RefNo, Branchcode) VALUES('{0}',{1},{2},{3},'{4}','{5}',{6},'{7}')",
            sBilldate.ToString("yyyy-MM-dd"), id1, id2, ddochr, Nar, VoType, slno, Branchcode);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int NNNTransNo = 0;
            object retValll = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retValll != null) && (retValll != DBNull.Value))
            {
                NNNTransNo = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));
            }
            else
            {
                NNNTransNo = NNNTransNo + 1;
            }

            // Int Amount
            string Nartn = "Branch ref no : " + BranchRefNo + " Customer : " + sCustomerName;
            string VType = "INTEREST AMT";

            dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,RefNo, Branchcode) VALUES('{0}',{1},{2},{3},'{4}','{5}',{6},'{7}')",
            sBilldate.ToString("yyyy-MM-dd"), sCustomerID, id3, dintamt, Nartn, VType, slno, Branchcode);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int NNNNTransNo = 0;
            object retVallll = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

            if ((retVallll != null) && (retVallll != DBNull.Value))
            {
                NNNNTransNo = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));
            }
            else
            {
                NNNNTransNo = NNNNTransNo + 1;
            }





            //Installment details

            if (dsinstall != null)
            {
                foreach (DataRow dr in dsinstall.Tables[0].Rows)
                {
                    dbQry = string.Format("INSERT INTO tblInstallmentDetails(CustomerId,ChequeNo,Amount,Cancelled,DueDate,Narration,BranchRefNo,BillNo,SlNo, Branchcode) VALUES({0},'{1}',{2},'{3}','{4}','{5}','{6}','{7}',{8},'{9}')", sCustomerID, dr["ChequeNo"].ToString(), Convert.ToDouble(dr["Amount"]), Convert.ToString(dr["Cancelled"]), Convert.ToDateTime(dr["DueDate"]).ToString("yyyy-MM-dd"), dr["Narration"].ToString(), BranchRefNo, BillNoNew, slno, Branchcode);
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                }
            }



            sAuditStr = "Hire Purchase Transaction: " + slno + " got edited. User Name = " + usernam + ". Deleted Record Details : Bill No=" + oldBillNo + " DebtorID=" + oldDebitID + ",Pur Amount=" + oldAmt + " DateTime:" + oldtrandate;

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit and Update", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            manager.CommitTransaction();
            return slno;
        }

        catch (Exception ex)
        {
            manager.Transaction.Rollback();
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public void DeleteHirePurchase(string connection, int Slno, string usernam)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        DataSet dsd = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        string sAuditStr = string.Empty;
        int TransNo = 0;
        DataSet dsOld = new DataSet();
        int oldDebitID = 0;
        int oldCreditID = 0;
        int oldBillNo = 0;
        double oldAmt = 0;
        string sNarration = string.Empty;
        string transdate = string.Empty;
        int creditorID = 0;
        int DebtorID = 3;
        int BilitID = 0;
        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("Select Customerid,slno,purAmt,billdate from tblHirePurchase where slno={0}", Slno);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldDebitID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["Customerid"]);
                    oldBillNo = Convert.ToInt32(dsOld.Tables[0].Rows[0]["slno"]);
                    oldAmt = Convert.ToDouble(dsOld.Tables[0].Rows[0]["purAmt"]);
                    transdate = Convert.ToString(dsOld.Tables[0].Rows[0]["billdate"]);
                }
            }


            dbQry2 = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Delete From tblHirePurchase Where slno={0}", Slno);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), usernam, Slno, "DeleteHirePurchase");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            //dbQry = string.Format("INSERT INTO tblAuditHirePurchase Select * From tblHirePurchase Where slno={0}", Slno);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblHirePurchase Where slno={0}", Slno);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblInstallmentDetails Where slno={0}", Slno);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            sAuditStr = "Hire Purchase Transaction: " + Slno + " got deleted old Record Details : User =" + usernam + " BillNo=" + oldBillNo + " CustomerId=" + oldDebitID + ",Pur Amount=" + oldAmt + " TransDate " + transdate;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void InsertImageSettings(string strCompany, string filename, string flpath)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("Delete From ImagesPath ");
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Insert Into ImagesPath(img_title,img_filename,img_flpath) Values ('{0}','{1}','{2}')", strCompany, filename, flpath);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet getImageInfo()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            dbQry = "SELECT img_title,img_flpath,img_filename,img_id FROM ImagesPath";
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    //public DataSet getImageInfo(string connection, string img_id)
    //{
    //    DBManager manager = new DBManager(DataProvider.SqlServer);
    //    manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
    //    DataSet ds = new DataSet();
    //    string dbQry = string.Empty;
    //    try
    //    {
    //        manager.Open();
    //        dbQry = "SELECT img_title,img_stream,img_type,img_id FROM tblImg where img_id = " + img_id;
    //        ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
    //        if (ds.Tables[0].Rows.Count > 0)
    //            return ds;
    //        else
    //            return null;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        if (manager != null)
    //            manager.Dispose();
    //    }
    //}

    public bool IsCustomerFoundInHire(string connection, string Customer)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        try
        {

            dbQry = string.Format("Select CustomerName from tblHirePurchase Where CustomerName= '" + Customer + "' ");

            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        catch (Exception ex)
        {
            return false;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListHireDetails(DateTime startDate, DateTime endDate, string customer, string sDataSource)
    {

        string sConStr = string.Empty;
        string sQry = string.Empty;
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        sConStr = sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleConn.Open();
        oleCmd.Connection = oleConn;
        DataSet ds = new DataSet();


        //sQry = "SELECT ServiceID,RefNumber,Details,CustomerID,Frequency,StartDate,EndDate,Amount FROM tblServiceMaster Where 1=1 ";

        if (customer == "0")
        {
            sQry = "SELECT slno,CustomerID,billdate,customername,puramt,StartDate,noinst,eachpay,finpay,BranchCode FROM tblHirePurchase Where BillDate >='" + startDate.ToString("yyyy-MM-dd") + "' AND BillDate <='" + endDate.ToString("yyyy-MM-dd") + "' ";
        }
        else
        {
            sQry = "SELECT slno,CustomerID,billdate,customername,puramt,StartDate,noinst,eachpay,finpay,BranchCode FROM tblHirePurchase Where BillDate >='" + startDate.ToString("yyyy-MM-dd") + "' AND BillDate <='" + endDate.ToString("yyyy-MM-dd") + "' and customerid = " + customer + " ";
        }

        if (customer != "0")
            sQry += " AND CustomerID=" + customer;


        //if (frequency != "0")
        //    sQry += " AND Frequency=" + frequency;

        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);

        oleAdp.Fill(ds);

        return ds;

    }

    public DataSet ListReceiptsCustomersId(string connection, int CustomerId)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();


        try
        {
            manager.Open();

            dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo, Receipt.Paymode FROM  ((((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
            dbQry.Append("tblReceipt Receipt ON tblDayBook.TransNo = Receipt.JournalID) INNER JOIN tblGroups G ON Creditor.GroupID = G.GroupID) ");
            dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' and Creditor.LedgerId = {0} ", CustomerId);
            dbQry.Append(" AND G.GroupName = 'Sundry Debtors' ");
            dbQry.Append("Order By tblDayBook.TransDate Desc");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }


    public DataSet getProducts(string sDataSource, int iCategoryID, DateTime refDate, string cond, string cond1, string cond2, string cond3, string cond4)
    {
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet ds, dsSales, dsPurcahse;
        string sQry = string.Empty;
        string sConStr = string.Empty;

        //sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sDataSource));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;

          //SELECT tblProductMaster.ItemCode, tblProductMaster.ProductName, tblProductMaster.Model, tblProductMaster.ProductDesc, tblProductMaster.Rate, tblProductMaster.Unit, 
          //tblProductMaster.VAT, tblProductMaster.Discount, tblProductMaster.BuyUnit, tblProductStock.Stock, tblProductStock.BranchCode, tblProductStock.BranchName, 
          //tblProductPrices.Price, tblPriceList.PriceName, tblCategories.CategoryName,tblCategories.CategoryID
          //FROM tblCategories INNER JOIN
          //tblProductStock INNER JOIN
          //tblProductMaster ON tblProductStock.ItemCode = tblProductMaster.ItemCode INNER JOIN
          //tblProductPrices INNER JOIN
          //tblPriceList ON tblProductPrices.PriceId = tblPriceList.Id ON tblProductStock.ItemCode = tblProductPrices.ItemCode ON 
          //tblCategories.CategoryID = tblProductStock.CategoryID

        //sQry = "SELECT ItemCode,Productname,Model,ProductDesc,Stock,Rate,Unit,VAT,Discount,BuyUnit FROM tblProductMaster WHERE CategoryID=" + iCategoryID + " ORDER BY Itemcode";
        sQry=" SELECT tblProductMaster.ItemCode, tblProductMaster.ProductName, tblProductMaster.Model, tblProductMaster.ProductDesc, tblProductMaster.Rate, tblProductMaster.Unit, " +
             " tblProductMaster.VAT, tblProductMaster.Discount, tblProductMaster.BuyUnit, tblProductStock.Stock, tblProductStock.BranchCode, tblProductStock.BranchName, " +
             " tblProductPrices.Price, tblPriceList.PriceName, tblCategories.CategoryName,tblCategories.CategoryID " +
             " FROM tblCategories INNER JOIN " +
             " tblProductStock INNER JOIN " +
             " tblProductMaster ON tblProductStock.ItemCode = tblProductMaster.ItemCode INNER JOIN " +
             " tblProductPrices INNER JOIN " +
             " tblPriceList ON tblProductPrices.PriceId = tblPriceList.Id ON tblProductStock.ItemCode = tblProductPrices.ItemCode ON  " +
             " tblCategories.CategoryID = tblProductStock.CategoryID"+
             " WHERE tblCategories.CategoryID=" + iCategoryID + " and(" + cond + ")and(" + cond1 + ")" +
             " ORDER BY BranchCode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        ds = new DataSet();
        oleAdp.Fill(ds);

        sQry = "SELECT SUM(SI.Qty) as Qty,  SI.ItemCode From ((tblSales S Inner join tblSalesItems SI On S.BillNo = SI.BillNo) Inner join tblProductMaster P ON P.ItemCode = SI.ItemCode) Where (" + cond4 + ") and  P.CategoryID=" + iCategoryID + " AND S.BillDate >= '" + refDate.ToString("MM/dd/yyyy") + "'" + " Group By SI.ItemCode ORDER BY SI.Itemcode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsSales = new DataSet();
        oleAdp.Fill(dsSales);
        int rowindex = -1;

        foreach (DataRow dr in dsSales.Tables[0].Rows)
        {
            var itemCode = dr["ItemCode"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["ItemCode"].ToString() == itemCode)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) + Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }

            }

            rowindex = -1;
        }

        sQry = "SELECT SUM(PI.Qty) as Qty,  PI.ItemCode From ((tblPurchase P Inner join tblPurchaseItems PI On P.PurchaseID = PI.PurchaseID) Inner join tblProductMaster PM ON PM.ItemCode = PI.ItemCode) Where (" + cond3 + ") and PM.CategoryID=" + iCategoryID + " AND P.BillDate >= '" + refDate.ToString("MM/dd/yyyy") + "'" + " Group By PI.ItemCode ORDER BY PI.Itemcode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsPurcahse = new DataSet();
        oleAdp.Fill(dsPurcahse);
        rowindex = -1;

        foreach (DataRow dr in dsPurcahse.Tables[0].Rows)
        {
            var itemCode = dr["ItemCode"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["ItemCode"].ToString() == itemCode)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) - Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock > 0 ? currentStock : 0;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }
            }

            rowindex = -1;
        }


        sQry = "SELECT SUM(SI.Qty) as Qty,  SI.ItemCode From ((tblSales S Inner join tblSalesItems SI On S.BillNo = SI.BillNo) Inner join tblProductMaster P ON P.ItemCode = SI.ItemCode) Where (" + cond2 + ") and P.CategoryID=" + iCategoryID + " AND S.BillDate >= '" + refDate.ToString("MM/dd/yyyy") + "'" + " Group By SI.ItemCode ORDER BY SI.Itemcode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsSales = new DataSet();
        oleAdp.Fill(dsSales);
        rowindex = -1;

        foreach (DataRow dr in dsSales.Tables[0].Rows)
        {
            var itemCode = dr["ItemCode"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["ItemCode"].ToString() == itemCode)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) - Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }

            }

            rowindex = -1;
        }

        sQry = "SELECT SUM(PI.Qty) as Qty,  PI.ItemCode From ((tblPurchase P Inner join tblPurchaseItems PI On P.PurchaseID = PI.PurchaseID) Inner join tblProductMaster PM ON PM.ItemCode = PI.ItemCode) Where P.BranchCode='KKN' and PM.CategoryID=" + iCategoryID + " AND P.BillDate >= '" + refDate.ToString("MM/dd/yyyy") + "'" + " Group By PI.ItemCode ORDER BY PI.Itemcode";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsPurcahse = new DataSet();
        oleAdp.Fill(dsPurcahse);
        rowindex = -1;

        foreach (DataRow dr in dsPurcahse.Tables[0].Rows)
        {
            var itemCode = dr["ItemCode"].ToString();
            decimal Qty = decimal.Parse(dr["Qty"].ToString());

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                rowindex = rowindex + 1;

                if (row["ItemCode"].ToString() == itemCode)
                {
                    var currentStock = decimal.Parse(ds.Tables[0].Rows[rowindex]["Stock"].ToString()) + Qty;
                    ds.Tables[0].Rows[rowindex]["Stock"] = currentStock > 0 ? currentStock : 0;
                    ds.Tables[0].Rows[rowindex].EndEdit();
                    ds.Tables[0].Rows[rowindex].AcceptChanges();
                }
            }

            rowindex = -1;
        }


        oleConn.Close();
        return ds;
    }


    public DataSet getbankrecon2(string sDataSource, DateTime startDate, DateTime EndDate, string usernam, string Types)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        StringBuilder dbQry = new StringBuilder();
        StringBuilder dbQry2 = new StringBuilder();
        string pQry = string.Empty;

        string pgQry = string.Empty;

        string sReconcilateddate = string.Empty;
        string sTransDate = string.Empty;
        string sParticulars = string.Empty;
        string sParticulars1 = string.Empty;
        SqlConnection oleConn, oleSubConn;
        int sno = 0;
        double samount = 0;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        DataSet dsChildQry;
        string sOrder;
        int sDebtorID = 0;
        int sCreditorID = 0;
        string sConStr = string.Empty;
        sConStr = sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;

        try
        {
            manager.Open();

            if (Types == "ReconcilatedDate")
            {
                dbQry.Append("SELECT TransDate,transno,debtorid,creditorid,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo,RefType,CreditCardNo,ChequeId,ReconcilatedBy,Reconcilateddate,Debtor,Creditor,Result FROM tblBankRecon");
                dbQry.Append(" WHERE (Reconcilateddate >='" + startDate.ToString("yyyy-MM-dd") + "' AND Reconcilateddate <='" + EndDate.ToString("yyyy-MM-dd") + "') ");
            }
            else if (Types == "TransDate")
            {
                dbQry.Append("SELECT TransDate,transno,debtorid,creditorid,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo,RefType,CreditCardNo,ChequeId,ReconcilatedBy,Reconcilateddate,Debtor,Creditor,Result FROM tblBankRecon");
                dbQry.Append(" WHERE (TransDate >='" + startDate.ToString("yyyy-MM-dd") + "' AND TransDate <='" + EndDate.ToString("yyyy-MM-dd") + "') ");
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            DataSet dst;
            DataTable dt;
            DataRow drNew;

            DataColumn dc;

            string date1 = string.Empty;
            string sNarration = string.Empty;
            string sResult = string.Empty;

            dst = new DataSet();
            dt = new DataTable();
            dc = new DataColumn("TransNo");
            dt.Columns.Add(dc);

            dc = new DataColumn("TransDate");
            dt.Columns.Add(dc);

            dc = new DataColumn("Debtor");
            dt.Columns.Add(dc);

            dc = new DataColumn("DebtorID");
            dt.Columns.Add(dc);

            dc = new DataColumn("Creditor");
            dt.Columns.Add(dc);

            dc = new DataColumn("CreditorID");
            dt.Columns.Add(dc);

            dc = new DataColumn("VoucherType");
            dt.Columns.Add(dc);

            dc = new DataColumn("Narration");
            dt.Columns.Add(dc);

            dc = new DataColumn("Amount");
            dt.Columns.Add(dc);

            dc = new DataColumn("ChequeNo");
            dt.Columns.Add(dc);

            dc = new DataColumn("ReconcilatedBy");
            dt.Columns.Add(dc);

            dc = new DataColumn("Reconcilateddate");
            dt.Columns.Add(dc);

            dc = new DataColumn("Result");
            dt.Columns.Add(dc);

            dc = new DataColumn("Status");
            dt.Columns.Add(dc);

            dst.Tables.Add(dt);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow drd in ds.Tables[0].Rows)
                {
                    if (drd["TransDate"] != null)
                    {
                        sTransDate = Convert.ToDateTime(drd["TransDate"]).ToString("dd-MM-yyyy");
                    }
                    if (drd["Reconcilateddate"] != null)
                    {
                        sReconcilateddate = Convert.ToDateTime(drd["Reconcilateddate"]).ToString("dd-MM-yyyy");
                    }
                    if (drd["Result"] != null)
                    {
                        sResult = Convert.ToString(drd["Result"].ToString());
                    }

                    if (drd["DebtorID"] != null)
                    {
                        pQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drd["DebtorID"].ToString());
                    }

                    if (drd["CreditorID"] != null)
                    {
                        pgQry = "SELECT Ledgername FROM tblLedger WHERE LedgerID=" + Convert.ToInt32(drd["CreditorID"].ToString());
                    }

                    if (pQry != "")
                    {
                        oleCmd = new SqlCommand();
                        oleCmd.CommandText = pQry;
                        oleSubConn = new SqlConnection(CreateConnectionString(sConStr));
                        oleCmd.Connection = oleSubConn;
                        oleAdp = new SqlDataAdapter(oleCmd);
                        dsChildQry = new DataSet();
                        oleAdp.Fill(dsChildQry);
                        if (dsChildQry != null)
                        {
                            if (dsChildQry.Tables[0].Rows.Count > 0)
                            {
                                sParticulars = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                            }
                        }
                        oleSubConn.Close();
                    }

                    if (pgQry != "")
                    {
                        oleCmd = new SqlCommand();
                        oleCmd.CommandText = pgQry;
                        oleSubConn = new SqlConnection(CreateConnectionString(sConStr));
                        oleCmd.Connection = oleSubConn;
                        oleAdp = new SqlDataAdapter(oleCmd);
                        dsChildQry = new DataSet();
                        oleAdp.Fill(dsChildQry);
                        if (dsChildQry != null)
                        {
                            if (dsChildQry.Tables[0].Rows.Count > 0)
                            {
                                sParticulars1 = dsChildQry.Tables[0].Rows[0]["ledgername"].ToString();
                            }
                        }
                        oleSubConn.Close();
                    }

                    drNew = dt.NewRow();
                    drNew["TransNo"] = Convert.ToInt32(drd["TransNo"]);
                    drNew["TransDate"] = sTransDate;
                    drNew["Debtor"] = sParticulars;
                    drNew["Creditor"] = sParticulars1;
                    drNew["DebtorID"] = Convert.ToInt32(drd["DebtorID"]);
                    drNew["CreditorID"] = Convert.ToInt32(drd["CreditorID"]);
                    drNew["Narration"] = drd["Narration"].ToString();
                    drNew["VoucherType"] = drd["VoucherType"].ToString();
                    drNew["ChequeNo"] = drd["ChequeNo"].ToString();
                    drNew["Amount"] = Convert.ToDouble(drd["Amount"]);
                    drNew["ReconcilatedBy"] = drd["ReconcilatedBy"].ToString();
                    drNew["Reconcilateddate"] = sReconcilateddate;
                    drNew["Result"] = sResult;
                    drNew["Status"] = "YES";
                    dst.Tables[0].Rows.Add(drNew);
                }
            }

            if (dst.Tables[0].Rows.Count > 0)
                return dst;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public string getConfigTinNo()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();

            dbQry.Append("SELECT   KeyValue  From tblSettings WHERE key='TINREQ'");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds.Tables[0].Rows[0]["KeyValue"].ToString();
            else
                return "";
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public void InsertBulkProducts(string connection, DataSet dsbulk, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet dsNew = new DataSet();

        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsOld = new DataSet();
        string dbQry3 = string.Empty;

        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();

            dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                //string value1 = string.Empty;
                //string value2 = string.Empty;
                //string value3 = string.Empty;

                //int middlePos = 0;
                //logdescription = string.Format("INSERT INTO tblProductMaster VALUES({0},{1}, {2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24},{25},{26},{27},{28},{29},{30},{31},{32},{33},{34},{35},{36},{37})",
                //ItemCode, ProductName, Model, CategoryID, ProductDesc, Stock, ROL, Rate, Unit, VAT, Discount, BuyUnit, BuyRate, BuyVAT, BuyDiscount, DealerUnit, DealerRate, DealerVAT, DealerDiscount, Complex, Measure_Unit, Accept_Role, CST, Barcode, ExecutiveCommission, CommodityCode, NLC, block, productlevel, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), NLCEffDate.ToShortDateString());
                //logdescription = logdescription.Trim();
                //if (logdescription.Length > 255)
                //{
                //    value1 = logdescription.Substring(0, 255);
                //    value2 = logdescription.Substring(256, 255);
                //    middlePos = logdescription.Length - (value1.Length + value2.Length);
                //    if (middlePos > 0)
                //        value3 = logdescription.Substring(510, middlePos);
                //    else
                //        value3 = "";
                //}
                //else
                //{
                //    value1 = logdescription;
                //    value2 = "";

                //    value3 = "";
                //}
                //description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}','{5}','{6}')",
                //     DateTime.Now.ToString(), value1, Username, "", value2, value3, "InsertProduct");
                //manager.ExecuteNonQuery(CommandType.Text, description);

                //logdescription = string.Format("INSERT INTO tblProducthistory VALUES({0},{1}, {2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18})",
                //ItemCode, ProductName, Model, CategoryID, ProductDesc, ROL, Rate, DealerRate, NLC, block, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), NLCEffDate.ToShortDateString());
                //logdescription = logdescription.Trim();
                //description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                //     DateTime.Now.ToString(), logdescription.ToString(), Username, "", "InsertProduct");
                //manager.ExecuteNonQuery(CommandType.Text, description);
            }

            string productunit = string.Empty;
            int Catname = 0;

            if (dsbulk != null)
            {
                if (dsbulk.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsbulk.Tables[0].Rows)
                    {
                        if ((Convert.ToString(dr["ItemCode"]) == null) || (Convert.ToString(dr["ItemCode"]) == ""))
                        {

                        }
                        else
                        {
                            dbQry = string.Format("SELECT Categoryid FROM tblCategories where categoryname =  '" + Convert.ToString(dr["Category"]) + "' ");
                            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                foreach (DataRow drd in ds.Tables[0].Rows)
                                {
                                    Catname = Convert.ToInt32(drd["Categoryid"]);
                                }
                            }

                            dbQry = string.Format("INSERT INTO tblProductMaster VALUES('{0}','{1}', '{2}',{3},'{4}',{5},{6},{7},'{8}',{9},{10},'{11}',{12},{13},{14},'{15}',{16},{17},{18},'{19}','{20}','{21}',{22},'{23}',{24},'{25}',{26},'{27}',{28},'{29}','{30}','{31}','{32}','{33}','{34}','{35}','{36}','{37}',{38},{39},'{40}','{41}')",//Jolo Barcode
                                Convert.ToString(dr["ItemCode"]), Convert.ToString(dr["ProductName"]), Convert.ToString(dr["Model"]), Catname, Convert.ToString(dr["Brand"]), 0, 1, 0, productunit, Convert.ToDouble(dr["VAT"]), 0, productunit, 0, Convert.ToDouble(dr["VAT"]), 0, productunit, 0, 0, 0, productunit, productunit, productunit, 0, productunit, 0, 0, 0, 'N', 0, DateTime.Now.ToString("yyyy-MM-dd"), DateTime.Now.ToString("yyyy-MM-dd"), DateTime.Now.ToString("yyyy-MM-dd"), DateTime.Now.ToString("yyyy-MM-dd"), DateTime.Now.ToString("yyyy-MM-dd"), DateTime.Now.ToString("yyyy-MM-dd"), DateTime.Now.ToString("yyyy-MM-dd"), DateTime.Now.ToString("yyyy-MM-dd"), DateTime.Now.ToString("yyyy-MM-dd"), 0, Convert.ToInt32(dr["Deviation"]), 'N', "YES");//Jolo Barcode
                            manager.ExecuteDataSet(CommandType.Text, dbQry);
                        }
                    }
                }
            }

            //dbQry2 = string.Format("INSERT INTO tblProducthistory VALUES('{0}','{1}', '{2}',{3},'{4}',{5},{6},{7},{8},'{9}',Format('{10}', 'dd/mm/yyyy'),Format('{11}', 'dd/mm/yyyy'),Format('{12}', 'dd/mm/yyyy'),Format('{13}', 'dd/mm/yyyy'),Format('{14}', 'dd/mm/yyyy'),Format('{15}', 'dd/mm/yyyy'),Format('{16}', 'dd/mm/yyyy'),Format('{17}', 'dd/mm/yyyy'),Format('{18}', 'dd/mm/yyyy'))",
            //    ItemCode, ProductName, Model, CategoryID, ProductDesc, ROL, Rate, DealerRate, NLC, block, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), NLCEffDate.ToShortDateString());
            //manager.ExecuteDataSet(CommandType.Text, dbQry2);

            sAuditStr = "Products added. Record Details :  User :" + Username + " DateTime: " + DateTime.Now.ToString();
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public bool CheckIfItemCodeDuplicate(string ItemCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int Totalqty = 0;
        int qty = 0;
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            dbQry = "SELECT Count(*) FROM tblProductMaster Where ItemCode ='" + ItemCode + "'";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool Checkexpenseexistornot(string ItemCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int Totalqty = 0;
        int qty = 0;
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            dbQry = "SELECT Count(*) FROM tblExpenseMaster Where ExpenseHead='" + ItemCode + "'";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool CheckIfbrandIsThere(string brand)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int Totalqty = 0;
        int qty = 0;
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            dbQry = "SELECT Count(*) FROM tblBrand Where brandname ='" + brand + "'";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool CheckIfcategoryIsThere(string category)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int Totalqty = 0;
        int qty = 0;
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            dbQry = "SELECT Count(*) FROM tblCategories Where CategoryName ='" + category + "'";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }


    public DataSet generateOutStandingReport(int iGroupID, string sXmlNodeName, string connection, string sXmlPath)
    {
        Decimal temp_balance;
        string sLedgerName = string.Empty, sConStr = string.Empty, sAliasName = string.Empty, sQry = string.Empty;
        string sLedgerId = string.Empty;
        string sLedgerPhone = string.Empty;
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        sConStr = connection;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        sQry = "SELECT tblLedger.LedgerID,tblLedger.LedgerName,tblLedger.phone,tblLedger.AliasName, (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as balance FROM (tblLedger   left  join (SELECT DebtorID,sum(Amount) as debitamount FROM tblDayBook WHERE DebtorID > 0 group by DebtorID) debittable  on tblLedger.LedgerID=debittable.DebtorID) left join (SELECT CreditorID,sum(Amount) as creditamount FROM tblDayBook WHERE CreditorID > 0 group by CreditorID) credittable on tblLedger.LedgerID= credittable.CreditorID where GroupID=" + iGroupID + " and tblledger.inttrans = 'NO' and tblledger.dc = 'NO' and (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) <> 0 ORDER BY tblLedger.LedgerName";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsParentQry = new DataSet();
        oleAdp.Fill(dsParentQry);
        temp_balance = 0;
        DataSet ds;
        DataTable dt;
        DataRow drNew;
        DataColumn dc;
        ds = new DataSet();
        dt = new DataTable();
        dc = new DataColumn("LedgerName");
        dt.Columns.Add(dc);
        dc = new DataColumn("LedgerID");
        dt.Columns.Add(dc);
        dc = new DataColumn("Phone");
        dt.Columns.Add(dc);
        dc = new DataColumn("AliasName");
        dt.Columns.Add(dc);
        dc = new DataColumn("Debit");
        dt.Columns.Add(dc);
        dc = new DataColumn("Credit");
        dt.Columns.Add(dc);
        ds.Tables.Add(dt);
        try
        {
            if (dsParentQry.Tables[0].Rows.Count == 0)
            {
                drNew = dt.NewRow();
                drNew["LedgerName"] = string.Empty;
                drNew["AliasName"] = string.Empty;
                drNew["LedgerID"] = string.Empty;
                drNew["Phone"] = string.Empty;
                drNew["Debit"] = "0.00";
                drNew["Credit"] = "0.00";
                ds.Tables[0].Rows.Add(drNew);
            }
            else
            {
                foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
                {
                    if (drParentQry["LedgerName"] != null)
                        sLedgerName = drParentQry["LedgerName"].ToString();
                    if (drParentQry["AliasName"] != null)
                        sAliasName = drParentQry["AliasName"].ToString();
                    if (drParentQry["LedgerID"] != null)
                        sLedgerId = drParentQry["LedgerID"].ToString();
                    if (drParentQry["Phone"] != null)
                        sLedgerPhone = drParentQry["Phone"].ToString();
                    if ((drParentQry["balance"] != null) && (drParentQry["balance"].ToString() != ""))
                        temp_balance = decimal.Parse(drParentQry["balance"].ToString(), System.Globalization.NumberStyles.Float);
                    else
                        temp_balance = 0;
                    if (temp_balance > 0)
                    {
                        drNew = dt.NewRow();
                        drNew["LedgerName"] = sLedgerName;
                        drNew["AliasName"] = sAliasName;
                        drNew["LedgerID"] = sLedgerId;
                        drNew["Phone"] = sLedgerPhone;
                        drNew["Debit"] = temp_balance;
                        drNew["Credit"] = "0.00";
                        ds.Tables[0].Rows.Add(drNew);
                    }
                    else
                    {
                        drNew = dt.NewRow();
                        drNew["LedgerName"] = sLedgerName;
                        drNew["AliasName"] = sAliasName;
                        drNew["LedgerID"] = sLedgerId;
                        drNew["Phone"] = sLedgerPhone;
                        drNew["Debit"] = "0.00";
                        drNew["Credit"] = Math.Abs(temp_balance).ToString(); /* convert the negative to positive */
                        ds.Tables[0].Rows.Add(drNew);
                    }
                }
            }
            oleConn.Close();
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public void PasswordExpiry(string ExpiryDate, string connection, string userName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        int retValue = 0;
        string dbQry = string.Format("select ExpirtDate from tblUserInfo where UserName = '{1}'", ExpiryDate, userName);

        try
        {
            manager.Open();
            retValue = manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public string GetExpiryDate(string userName, string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.AppendFormat("select ExpiryDate from tblUserInfo Where UserName = '{0}'", userName);
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds.Tables[0].Rows[0]["ExpiryDate"].ToString();
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }



    public bool GetSalesRole(string connection, string UserName)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        try
        {
            dbQry = "select UserName,Role from tblUserRole where UserName= '" + UserName + "' and Role = 'SALES' ";

            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            return false;
        }
        finally
        {
            manager.Dispose();
        }
    }


    public void InsertBulkOpeningStock(string connection, DataSet dsbulk, string Username,string branch)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet dsNew = new DataSet();

        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsOld = new DataSet();
        string dbQry3 = string.Empty;

        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();

            dbQ = "SELECT KeyValue From tblSettings WHERE KEYNAME='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                //string value1 = string.Empty;
                //string value2 = string.Empty;
                //string value3 = string.Empty;

                //int middlePos = 0;
                //logdescription = string.Format("INSERT INTO tblProductMaster VALUES({0},{1}, {2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24},{25},{26},{27},{28},{29},{30},{31},{32},{33},{34},{35},{36},{37})",
                //ItemCode, ProductName, Model, CategoryID, ProductDesc, Stock, ROL, Rate, Unit, VAT, Discount, BuyUnit, BuyRate, BuyVAT, BuyDiscount, DealerUnit, DealerRate, DealerVAT, DealerDiscount, Complex, Measure_Unit, Accept_Role, CST, Barcode, ExecutiveCommission, CommodityCode, NLC, block, productlevel, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), NLCEffDate.ToShortDateString());
                //logdescription = logdescription.Trim();
                //if (logdescription.Length > 255)
                //{
                //    value1 = logdescription.Substring(0, 255);
                //    value2 = logdescription.Substring(256, 255);
                //    middlePos = logdescription.Length - (value1.Length + value2.Length);
                //    if (middlePos > 0)
                //        value3 = logdescription.Substring(510, middlePos);
                //    else
                //        value3 = "";
                //}
                //else
                //{
                //    value1 = logdescription;
                //    value2 = "";

                //    value3 = "";
                //}
                //description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}','{5}','{6}')",
                //     DateTime.Now.ToString(), value1, Username, "", value2, value3, "InsertProduct");
                //manager.ExecuteNonQuery(CommandType.Text, description);

                //logdescription = string.Format("INSERT INTO tblProducthistory VALUES({0},{1}, {2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18})",
                //ItemCode, ProductName, Model, CategoryID, ProductDesc, ROL, Rate, DealerRate, NLC, block, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), NLCEffDate.ToShortDateString());
                //logdescription = logdescription.Trim();
                //description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                //     DateTime.Now.ToString(), logdescription.ToString(), Username, "", "InsertProduct");
                //manager.ExecuteNonQuery(CommandType.Text, description);
            }

            string productunit = string.Empty;
            int Catname = 0;

            if (dsbulk != null)
            {
                if (dsbulk.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsbulk.Tables[0].Rows)
                    {
                        if ((Convert.ToString(dr["ItemCode"]) == null) || (Convert.ToString(dr["ItemCode"]) == ""))
                        {

                        }
                        else
                        {
                            dbQry = string.Format("SELECT Categoryid FROM tblCategories where categoryname =  '" + Convert.ToString(dr["Category"]) + "' ");
                            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                foreach (DataRow drd in ds.Tables[0].Rows)
                                {
                                    Catname = Convert.ToInt32(drd["Categoryid"]);
                                }
                            }

                            dbQry = string.Format("INSERT INTO tblStock(itemCode,ProductName,ProductDesc,model,categoryid,OpeningStock,DueDate,BranchCode) VALUES('{0}','{1}','{2}','{3}',{4},{5},'{6}','{7}')",
                                Convert.ToString(dr["ItemCode"]), Convert.ToString(dr["ProductName"]), Convert.ToString(dr["Brand"]), Convert.ToString(dr["Model"]), Catname, Convert.ToDouble(dr["opening"]), DateTime.Now.ToString("yyyy-MM-dd"),branch);

                            manager.ExecuteNonQuery(CommandType.Text, dbQry);


                            dbQry = string.Format("UPDATE tblProductMaster SET tblProductMaster.Stock =  tblProductMaster.Stock + {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["opening"]), Convert.ToString(dr["ItemCode"]));

                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                            //dbQry = string.Format("UPDATE tblProductStock SET tblProductMaster.Stock =  tblProductMaster.Stock + {0} WHERE ItemCode='{1}'", Convert.ToDouble(dr["opening"]), Convert.ToString(dr["ItemCode"]));

                            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        }
                    }
                }
            }


            sAuditStr = "Opening Stock added. Record Details :  User :" + Username + " DateTime: " + DateTime.Now.ToString();
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet YearEndOutStandingReport(int iGroupID, string sXmlNodeName, string connection, string sXmlPath)
    {
        //DBManager manager = new DBManager(DataProvider.SqlServer);
        //manager.ConnectionString = CreateConnectionString(connection);
        DataSet dsNew = new DataSet();

        Decimal temp_balance;
        string sLedgerName = string.Empty, sConStr = string.Empty, sAliasName = string.Empty, sQry = string.Empty;
        string sLedgerId = string.Empty;
        string sLedgerPhone = string.Empty;
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        sConStr = connection;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        //sQry = "SELECT tblLedger.LedgerID,tblLedger.LedgerName,tblLedger.phone,tblLedger.AliasName, (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as balance FROM (tblLedger   left  join (SELECT DebtorID,sum(Amount) as debitamount FROM tblDayBook WHERE DebtorID > 0 group by DebtorID) debittable  on tblLedger.LedgerID=debittable.DebtorID) left join (SELECT CreditorID,sum(Amount) as creditamount FROM tblDayBook WHERE CreditorID > 0 group by CreditorID) credittable on tblLedger.LedgerID= credittable.CreditorID where GroupID in (2,3,14,16) and tblledger.inttrans = 'NO' and tblledger.dc = 'NO' and (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) <> 0 ORDER BY tblLedger.LedgerName";

        sQry = "SELECT tblLedger.LedgerID,tblLedger.LedgerName,tblLedger.phone,tblLedger.AliasName, (IIF((tblLedger.OpenBalanceDR is null),0,tblLedger.OpenBalanceDR)+ IIF((debittable.debitamount is null),0,debittable.debitamount)) - (IIF((tblLedger.OpenBalanceCR is null),0,tblLedger.OpenBalanceCR)+ IIF((credittable.creditamount is null),0,credittable.creditamount)) as balance FROM (tblLedger   left  join (SELECT DebtorID,sum(Amount) as debitamount FROM tblDayBook WHERE DebtorID > 0 group by DebtorID) debittable  on tblLedger.LedgerID=debittable.DebtorID) left join (SELECT CreditorID,sum(Amount) as creditamount FROM tblDayBook WHERE CreditorID > 0 group by CreditorID) credittable on tblLedger.LedgerID= credittable.CreditorID where GroupID in (1,2,3,14,16,4,19) ORDER BY tblLedger.LedgerName";

        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);

        //oleConn.BeginTransaction();
        dsParentQry = new DataSet();
        oleAdp.Fill(dsParentQry);

        //dsNew = manager.ExecuteDataSet(CommandType.Text, sQry);

        temp_balance = 0;
        DataSet ds;
        DataTable dt;
        DataRow drNew;
        DataColumn dc;
        ds = new DataSet();
        dt = new DataTable();
        dc = new DataColumn("LedgerName");
        dt.Columns.Add(dc);
        dc = new DataColumn("LedgerID");
        dt.Columns.Add(dc);
        dc = new DataColumn("Phone");
        dt.Columns.Add(dc);
        dc = new DataColumn("AliasName");
        dt.Columns.Add(dc);
        dc = new DataColumn("Debit");
        dt.Columns.Add(dc);
        dc = new DataColumn("Credit");
        dt.Columns.Add(dc);
        ds.Tables.Add(dt);
        try
        {
            if (dsParentQry.Tables[0].Rows.Count == 0)
            {
                drNew = dt.NewRow();
                drNew["LedgerName"] = string.Empty;
                drNew["AliasName"] = string.Empty;
                drNew["LedgerID"] = string.Empty;
                drNew["Phone"] = string.Empty;
                drNew["Debit"] = "0.00";
                drNew["Credit"] = "0.00";
                ds.Tables[0].Rows.Add(drNew);
            }
            else
            {
                foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
                {
                    if (drParentQry["LedgerName"] != null)
                        sLedgerName = drParentQry["LedgerName"].ToString();
                    if (drParentQry["AliasName"] != null)
                        sAliasName = drParentQry["AliasName"].ToString();
                    if (drParentQry["LedgerID"] != null)
                        sLedgerId = drParentQry["LedgerID"].ToString();
                    if (drParentQry["Phone"] != null)
                        sLedgerPhone = drParentQry["Phone"].ToString();
                    if ((drParentQry["balance"] != null) && (drParentQry["balance"].ToString() != ""))
                        temp_balance = decimal.Parse(drParentQry["balance"].ToString(), System.Globalization.NumberStyles.Float);
                    else
                        temp_balance = 0;
                    if (temp_balance > 0)
                    {
                        drNew = dt.NewRow();
                        drNew["LedgerName"] = sLedgerName;
                        drNew["AliasName"] = sAliasName;
                        drNew["LedgerID"] = sLedgerId;
                        drNew["Phone"] = sLedgerPhone;
                        drNew["Debit"] = temp_balance;
                        drNew["Credit"] = "0.00";
                        ds.Tables[0].Rows.Add(drNew);
                    }
                    else
                    {
                        drNew = dt.NewRow();
                        drNew["LedgerName"] = sLedgerName;
                        drNew["AliasName"] = sAliasName;
                        drNew["LedgerID"] = sLedgerId;
                        drNew["Phone"] = sLedgerPhone;
                        drNew["Debit"] = "0.00";
                        drNew["Credit"] = Math.Abs(temp_balance).ToString(); /* convert the negative to positive */
                        ds.Tables[0].Rows.Add(drNew);
                    }
                }
            }
            //oleConn.Close();
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet ListLedgersTransfer(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}','{2}','{3}','{4}') OR tblGroups.HeadingID IN (11) Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors", "Bank Accounts", "Cash in Hand", "InCome");
            dbQry = string.Format("select LedgerId, LedgerName, Mobile from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where (tblGroups.GroupName='Sundry Debtors' or GroupName = 'Sundry Creditors') and tblLedger.Inttrans ='YES' ORDER By LedgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListLedgersTransferIsActive(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}','{2}','{3}','{4}') OR tblGroups.HeadingID IN (11) Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors", "Bank Accounts", "Cash in Hand", "InCome");
            dbQry = string.Format("select LedgerId, LedgerName, Mobile from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where (tblGroups.GroupName='Sundry Debtors' or GroupName = 'Sundry Creditors') and tblLedger.Inttrans ='YES' and tblLedger.Unuse = 'YES' ORDER By LedgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListProdcutsForHistory(string Brand, string prodName, string CategoryID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;
        string obsolute = string.Empty;
        try
        {
            manager.Open();

            if ((Brand == "All") && (prodName == "All"))
            {
                dbQry = "SELECT ItemCode FROM tblProductMaster Where CategoryID=" + CategoryID + " Order By ItemCode Asc";
            }
            else if (prodName == "All")
            {
                dbQry = "SELECT ItemCode FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductDesc='" + Brand + "' Order By ItemCode Asc";
            }
            else
            {
                dbQry = "SELECT ItemCode FROM tblProductMaster Where CategoryID=" + CategoryID + " AND ProductName='" + prodName + "' AND ProductDesc='" + Brand + "'  Order By ItemCode Asc";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet GetPurchaseForDcNo(int Billno, string Itemcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("Select tblPurchaseItems.ItemCode,tblProductMaster.ProductName,tblProductMaster.ProductDesc,sum(tblPurchaseItems.Qty) as qty, tblPurchase.DcBillNo, ");
            dbQry.Append(" tblProductMaster.Model FROM (tblPurchaseItems INNER JOIN tblPurchase ON tblPurchaseItems.PurchaseId = tblPurchase.PurchaseId) inner join tblproductmaster on tblPurchaseItems.itemcode = tblproductmaster.itemcode ");
            dbQry.Append(" Where tblpurchaseitems.itemcode = '" + Itemcode + "' And tblPurchase.DcBillNo = " + Billno + " group by tblpurchaseitems.itemcode,tblPurchase.DcBillNo,tblProductMaster.ProductName,tblProductMaster.ProductDesc, tblProductMaster.Model ");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void InsertBulkBrands(string connection, DataSet dsbulk, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet dsNew = new DataSet();

        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsOld = new DataSet();
        string dbQry3 = string.Empty;

        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();

            dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                //string value1 = string.Empty;
                //string value2 = string.Empty;
                //string value3 = string.Empty;

                //int middlePos = 0;
                //logdescription = string.Format("INSERT INTO tblProductMaster VALUES({0},{1}, {2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24},{25},{26},{27},{28},{29},{30},{31},{32},{33},{34},{35},{36},{37})",
                //ItemCode, ProductName, Model, CategoryID, ProductDesc, Stock, ROL, Rate, Unit, VAT, Discount, BuyUnit, BuyRate, BuyVAT, BuyDiscount, DealerUnit, DealerRate, DealerVAT, DealerDiscount, Complex, Measure_Unit, Accept_Role, CST, Barcode, ExecutiveCommission, CommodityCode, NLC, block, productlevel, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), NLCEffDate.ToShortDateString());
                //logdescription = logdescription.Trim();
                //if (logdescription.Length > 255)
                //{
                //    value1 = logdescription.Substring(0, 255);
                //    value2 = logdescription.Substring(256, 255);
                //    middlePos = logdescription.Length - (value1.Length + value2.Length);
                //    if (middlePos > 0)
                //        value3 = logdescription.Substring(510, middlePos);
                //    else
                //        value3 = "";
                //}
                //else
                //{
                //    value1 = logdescription;
                //    value2 = "";

                //    value3 = "";
                //}
                //description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}','{5}','{6}')",
                //     DateTime.Now.ToString(), value1, Username, "", value2, value3, "InsertProduct");
                //manager.ExecuteNonQuery(CommandType.Text, description);

                //logdescription = string.Format("INSERT INTO tblProducthistory VALUES({0},{1}, {2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18})",
                //ItemCode, ProductName, Model, CategoryID, ProductDesc, ROL, Rate, DealerRate, NLC, block, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), NLCEffDate.ToShortDateString());
                //logdescription = logdescription.Trim();
                //description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                //     DateTime.Now.ToString(), logdescription.ToString(), Username, "", "InsertProduct");
                //manager.ExecuteNonQuery(CommandType.Text, description);
            }

            string productunit = string.Empty;
            int Catname = 0;

            if (dsbulk != null)
            {
                if (dsbulk.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsbulk.Tables[0].Rows)
                    {
                        if ((Convert.ToString(dr["Brand"]) == null) || (Convert.ToString(dr["Brand"]) == ""))
                        {

                        }
                        else
                        {
                            dbQry = string.Format("INSERT INTO tblBrand(BrandName,Brandlevel, Deviation,IsActive) VALUES('{0}',{1},{2},'{3}')",
                                Convert.ToString(dr["Brand"]), Convert.ToDouble(dr["Brand%"]), Convert.ToDouble(dr["Deviation"]), "YES");
                            manager.ExecuteDataSet(CommandType.Text, dbQry);
                        }
                    }
                }
            }

            sAuditStr = "Brand added. Record Details :  User :" + Username + " DateTime: " + DateTime.Now.ToString();
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void InsertBulkCategories(string connection, DataSet dsbulk, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet dsNew = new DataSet();

        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsOld = new DataSet();
        string dbQry3 = string.Empty;

        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();

            dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                //string value1 = string.Empty;
                //string value2 = string.Empty;
                //string value3 = string.Empty;

                //int middlePos = 0;
                //logdescription = string.Format("INSERT INTO tblProductMaster VALUES({0},{1}, {2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24},{25},{26},{27},{28},{29},{30},{31},{32},{33},{34},{35},{36},{37})",
                //ItemCode, ProductName, Model, CategoryID, ProductDesc, Stock, ROL, Rate, Unit, VAT, Discount, BuyUnit, BuyRate, BuyVAT, BuyDiscount, DealerUnit, DealerRate, DealerVAT, DealerDiscount, Complex, Measure_Unit, Accept_Role, CST, Barcode, ExecutiveCommission, CommodityCode, NLC, block, productlevel, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), NLCEffDate.ToShortDateString());
                //logdescription = logdescription.Trim();
                //if (logdescription.Length > 255)
                //{
                //    value1 = logdescription.Substring(0, 255);
                //    value2 = logdescription.Substring(256, 255);
                //    middlePos = logdescription.Length - (value1.Length + value2.Length);
                //    if (middlePos > 0)
                //        value3 = logdescription.Substring(510, middlePos);
                //    else
                //        value3 = "";
                //}
                //else
                //{
                //    value1 = logdescription;
                //    value2 = "";

                //    value3 = "";
                //}
                //description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}','{5}','{6}')",
                //     DateTime.Now.ToString(), value1, Username, "", value2, value3, "InsertProduct");
                //manager.ExecuteNonQuery(CommandType.Text, description);

                //logdescription = string.Format("INSERT INTO tblProducthistory VALUES({0},{1}, {2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18})",
                //ItemCode, ProductName, Model, CategoryID, ProductDesc, ROL, Rate, DealerRate, NLC, block, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), NLCEffDate.ToShortDateString());
                //logdescription = logdescription.Trim();
                //description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                //     DateTime.Now.ToString(), logdescription.ToString(), Username, "", "InsertProduct");
                //manager.ExecuteNonQuery(CommandType.Text, description);
            }

            string productunit = string.Empty;
            int Catname = 0;

            if (dsbulk != null)
            {
                if (dsbulk.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsbulk.Tables[0].Rows)
                    {
                        if ((Convert.ToString(dr["Category"]) == null) || (Convert.ToString(dr["Category"]) == ""))
                        {

                        }
                        else
                        {
                            dbQry = string.Format("INSERT INTO tblcategories(CategoryName,Categorylevel,IsActive) VALUES('{0}',{1},'{2}')",
                                Convert.ToString(dr["Category"]), Convert.ToDouble(dr["Category%"]), "YES");
                            manager.ExecuteDataSet(CommandType.Text, dbQry);
                        }
                    }
                }
            }

            sAuditStr = "Category added. Record Details :  User :" + Username + " DateTime: " + DateTime.Now.ToString();
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void InsertBulkLedgerCustomer(string connection, DataSet dsbulk, string Username,string branchCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet dsNew = new DataSet();

        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsOld = new DataSet();
        string dbQry3 = string.Empty;

        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();

            //dbQ = "SELECT KeyValue From tblSettings WHERE key='SAVELOG'";
            //dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            //if (dsd.Tables[0].Rows.Count > 0)
            //    Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            //if (Logsave == "YES")
            //{
            //string value1 = string.Empty;
            //string value2 = string.Empty;
            //string value3 = string.Empty;

            //int middlePos = 0;
            //logdescription = string.Format("INSERT INTO tblProductMaster VALUES({0},{1}, {2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24},{25},{26},{27},{28},{29},{30},{31},{32},{33},{34},{35},{36},{37})",
            //ItemCode, ProductName, Model, CategoryID, ProductDesc, Stock, ROL, Rate, Unit, VAT, Discount, BuyUnit, BuyRate, BuyVAT, BuyDiscount, DealerUnit, DealerRate, DealerVAT, DealerDiscount, Complex, Measure_Unit, Accept_Role, CST, Barcode, ExecutiveCommission, CommodityCode, NLC, block, productlevel, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), NLCEffDate.ToShortDateString());
            //logdescription = logdescription.Trim();
            //if (logdescription.Length > 255)
            //{
            //    value1 = logdescription.Substring(0, 255);
            //    value2 = logdescription.Substring(256, 255);
            //    middlePos = logdescription.Length - (value1.Length + value2.Length);
            //    if (middlePos > 0)
            //        value3 = logdescription.Substring(510, middlePos);
            //    else
            //        value3 = "";
            //}
            //else
            //{
            //    value1 = logdescription;
            //    value2 = "";

            //    value3 = "";
            //}
            //description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}','{5}','{6}')",
            //     DateTime.Now.ToString(), value1, Username, "", value2, value3, "InsertProduct");
            //manager.ExecuteNonQuery(CommandType.Text, description);

            //logdescription = string.Format("INSERT INTO tblProducthistory VALUES({0},{1}, {2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18})",
            //ItemCode, ProductName, Model, CategoryID, ProductDesc, ROL, Rate, DealerRate, NLC, block, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), NLCEffDate.ToShortDateString());
            //logdescription = logdescription.Trim();
            //description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
            //     DateTime.Now.ToString(), logdescription.ToString(), Username, "", "InsertProduct");
            //manager.ExecuteNonQuery(CommandType.Text, description);
            //}

            string productunit = string.Empty;
            int Catname = 0;

            if (dsbulk != null)
            {
                if (dsbulk.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsbulk.Tables[0].Rows)
                    {
                        if ((Convert.ToString(dr["LedgerName"]) == null) || (Convert.ToString(dr["LedgerName"]) == ""))
                        {

                        }
                        else
                        {
                            double op1;
                            //if (Convert.ToString(dr["OpenBalanceDR"]) == null)
                            //{
                            //    op1 = 0;
                            //}
                            //else
                            //{
                            //    op1 = Convert.ToDouble(dr["OpenBalanceDR"]);
                            //}
                            int LedgerID = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(LedgerID) FROM tblLedger"));

                            //dbQry = string.Format("SET IDENTITY_INSERT tblLedger ON");
                            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                            dbQry = string.Format("INSERT INTO tblLedger(LedgerID,LedgerName, AliasName,GroupID,OpenBalanceDR,OpenBalanceCR,Debit,Credit,ContactName,Add1,Add2,Add3,Phone,BelongsTo,LedgerCategory,ExecutiveIncharge,TinNumber,Mobile,CreditLimit, CreditDays,Inttrans,Paymentmade,dc,ChequeName,BranchCode,ExpenseID) VALUES({0},'{1}','{2}',{3},{4},{5},{6},{7},'{8}','{9}','{10}','{11}','{12}',{13},'{14}',{15},'{16}','{17}',{18},{19},'{20}','{21}','{22}','{23}','{24}',{25})",
                                LedgerID + 1, Convert.ToString(dr["LedgerName"]), Convert.ToString(dr["LedgerName"]), 1, Convert.ToDouble(dr["OpenBalanceDR"]), Convert.ToDouble(dr["OpenBalanceCR"]), 0, 0, Convert.ToString(dr["ContactName"]), Convert.ToString(dr["Add1"]), Convert.ToString(dr["Add2"]), Convert.ToString(dr["Add3"]), Convert.ToString(dr["Phone"]), 0, "Customer", 0, 0, Convert.ToString(dr["Mobile"]), Convert.ToDouble(dr["CreditLimit"]), Convert.ToDouble(dr["CreditDays"]), "NO", "NO", "NO", Convert.ToString(dr["LedgerName"]),branchCode,0);
                            manager.ExecuteDataSet(CommandType.Text, dbQry);

                            //dbQry = string.Format("SET IDENTITY_INSERT tblLedger OFF");
                            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                            //dbQry = string.Format("INSERT INTO tblProductMaster VALUES('{0}','{1}', '{2}',{3},'{4}',{5},{6},{7},'{8}',{9},{10},'{11}',{12},{13},{14},'{15}',{16},{17},{18},'{19}','{20}','{21}',{22},'{23}',{24},'{25}',{26},'{27}',{28},Format('{29}', 'dd/mm/yyyy'),Format('{30}', 'dd/mm/yyyy'),Format('{31}', 'dd/mm/yyyy'),Format('{32}', 'dd/mm/yyyy'),Format('{33}', 'dd/mm/yyyy'),Format('{34}', 'dd/mm/yyyy'),Format('{35}', 'dd/mm/yyyy'),Format('{36}', 'dd/mm/yyyy'),Format('{37}', 'dd/mm/yyyy'))",//Jolo Barcode
                            //    Convert.ToString(dr["ItemCode"]), Convert.ToString(dr["ProductName"]), Convert.ToString(dr["Model"]), Catname, Convert.ToString(dr["Brand"]), 0, 1, Convert.ToDouble(dr["MRP"]), productunit, Convert.ToDouble(dr["VAT"]), 0, productunit, 0, Convert.ToDouble(dr["VAT"]), 0, productunit, Convert.ToDouble(dr["DP"]), 0, 0, productunit, productunit, productunit, 0, productunit, 0, 0, Convert.ToDouble(dr["NLC"]), 'N', 0, Convert.ToDateTime(DateTime.Now.ToString()), Convert.ToDateTime(DateTime.Now.ToString()), Convert.ToDateTime(DateTime.Now.ToString()), Convert.ToDateTime(DateTime.Now.ToString()), Convert.ToDateTime(DateTime.Now.ToString()), Convert.ToDateTime(DateTime.Now.ToString()), Convert.ToDateTime(DateTime.Now.ToString()), Convert.ToDateTime(DateTime.Now.ToString()), Convert.ToDateTime(DateTime.Now.ToString()));//Jolo Barcode

                        }
                    }
                }
            }

            sAuditStr = "Ledgers added. Record Details :  User :" + Username + " DateTime: " + DateTime.Now.ToString();
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void InsertAllRecord(string connection, string sQl, string Usernam, string types, string smstext)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        int retValue = 0;

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string dbQ = string.Empty;

        try
        {
            dbQry = sQl;
            manager.Open();

            if (types == "SMS")
            {
                object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblSMSText Where smstext='" + smstext + "'");

                if (exists.ToString() != string.Empty)
                {
                    if (int.Parse(exists.ToString()) > 0)
                    {
                        throw new Exception("SMS Text Exists");
                    }
                }
            }

            retValue = manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQ = "SELECT KeyValue From tblSettings WHERE key='SAVELOG'";
            //dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            //if (dsd.Tables[0].Rows.Count > 0)
            //    Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            //if (Logsave == "YES")
            //{
            //    logdescription = sQl;
            //    logdescription = logdescription.Trim();
            //    description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
            //         DateTime.Now.ToString(), logdescription.ToString(), usernam, "", "InsertSalesNewSeries");
            //    manager.ExecuteNonQuery(CommandType.Text, description);
            //}

            if (types == "SMS")
            {
                sAuditStr = "SMS Text " + smstext + " added. Record Details : User = " + Usernam + " DateTime : " + DateTime.Now.ToString();
            }
            else if (types == "UNIT")
            {
                sAuditStr = "UNIT " + smstext + " added. Record Details : User = " + Usernam + " DateTime : " + DateTime.Now.ToString();
            }
            else if (types == "TRANS")
            {
                sAuditStr = "UNIT " + smstext + " added. Record Details : User = " + Usernam + " DateTime : " + DateTime.Now.ToString();
            }

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Add New", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void InsertBulkLedgerSupplier(string connection, DataSet dsbulk, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet dsNew = new DataSet();

        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsOld = new DataSet();
        string dbQry3 = string.Empty;

        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();

            //dbQ = "SELECT KeyValue From tblSettings WHERE key='SAVELOG'";
            //dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            //if (dsd.Tables[0].Rows.Count > 0)
            //    Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            //if (Logsave == "YES")
            //{
            //string value1 = string.Empty;
            //string value2 = string.Empty;
            //string value3 = string.Empty;

            //int middlePos = 0;
            //logdescription = string.Format("INSERT INTO tblProductMaster VALUES({0},{1}, {2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24},{25},{26},{27},{28},{29},{30},{31},{32},{33},{34},{35},{36},{37})",
            //ItemCode, ProductName, Model, CategoryID, ProductDesc, Stock, ROL, Rate, Unit, VAT, Discount, BuyUnit, BuyRate, BuyVAT, BuyDiscount, DealerUnit, DealerRate, DealerVAT, DealerDiscount, Complex, Measure_Unit, Accept_Role, CST, Barcode, ExecutiveCommission, CommodityCode, NLC, block, productlevel, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), NLCEffDate.ToShortDateString());
            //logdescription = logdescription.Trim();
            //if (logdescription.Length > 255)
            //{
            //    value1 = logdescription.Substring(0, 255);
            //    value2 = logdescription.Substring(256, 255);
            //    middlePos = logdescription.Length - (value1.Length + value2.Length);
            //    if (middlePos > 0)
            //        value3 = logdescription.Substring(510, middlePos);
            //    else
            //        value3 = "";
            //}
            //else
            //{
            //    value1 = logdescription;
            //    value2 = "";

            //    value3 = "";
            //}
            //description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}','{5}','{6}')",
            //     DateTime.Now.ToString(), value1, Username, "", value2, value3, "InsertProduct");
            //manager.ExecuteNonQuery(CommandType.Text, description);

            //logdescription = string.Format("INSERT INTO tblProducthistory VALUES({0},{1}, {2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18})",
            //ItemCode, ProductName, Model, CategoryID, ProductDesc, ROL, Rate, DealerRate, NLC, block, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), NLCEffDate.ToShortDateString());
            //logdescription = logdescription.Trim();
            //description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
            //     DateTime.Now.ToString(), logdescription.ToString(), Username, "", "InsertProduct");
            //manager.ExecuteNonQuery(CommandType.Text, description);
            //}

            string productunit = string.Empty;
            int Catname = 0;

            if (dsbulk != null)
            {
                if (dsbulk.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsbulk.Tables[0].Rows)
                    {
                        if ((Convert.ToString(dr["LedgerName"]) == null) || (Convert.ToString(dr["LedgerName"]) == ""))
                        {

                        }
                        else
                        {
                            double op1;
                            //if (Convert.ToString(dr["OpenBalanceDR"]) == null)
                            //{
                            //    op1 = 0;
                            //}
                            //else
                            //{
                            //    op1 = Convert.ToDouble(dr["OpenBalanceDR"]);
                            //}
                            int LedgerID = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(LedgerID) FROM tblLedger"));


                            //dbQry = string.Format("SET IDENTITY_INSERT [tblLedger] ON");
                            //manager.ExecuteNonQuery(CommandType.Text, dbQry);


                            dbQry = string.Format("INSERT INTO tblLedger(LedgerID,LedgerName, AliasName,GroupID,OpenBalanceDR,OpenBalanceCR,Debit,Credit,ContactName,Add1,Add2,Add3,Phone,BelongsTo,LedgerCategory,ExecutiveIncharge,TinNumber,Mobile,CreditLimit, CreditDays,Inttrans,Paymentmade,dc,ChequeName,BranchCode,ExpenseID) VALUES({0},'{1}','{2}',{3},{4},{5},{6},{7},'{8}','{9}','{10}','{11}','{12}',{13},'{14}',{15},'{16}','{17}',{18},{19},'{20}','{21}','{22}','{23}','{24}',{25})",
                                LedgerID + 1, Convert.ToString(dr["LedgerName"]), Convert.ToString(dr["LedgerName"]), 2, Convert.ToDouble(dr["OpenBalanceDR"]), Convert.ToDouble(dr["OpenBalanceCR"]), 0, 0, Convert.ToString(dr["ContactName"]), Convert.ToString(dr["Add1"]), Convert.ToString(dr["Add2"]), Convert.ToString(dr["Add3"]), Convert.ToString(dr["Phone"]), 0, "", 0, Convert.ToString(dr["TinNumber"]), Convert.ToString(dr["Mobile"]), Convert.ToDouble(dr["CreditLimit"]), Convert.ToDouble(dr["CreditDays"]), "NO", "NO", "NO", Convert.ToString(dr["LedgerName"]), "All",0);


                            //dbQry = string.Format("INSERT INTO tblProductMaster VALUES('{0}','{1}', '{2}',{3},'{4}',{5},{6},{7},'{8}',{9},{10},'{11}',{12},{13},{14},'{15}',{16},{17},{18},'{19}','{20}','{21}',{22},'{23}',{24},'{25}',{26},'{27}',{28},Format('{29}', 'dd/mm/yyyy'),Format('{30}', 'dd/mm/yyyy'),Format('{31}', 'dd/mm/yyyy'),Format('{32}', 'dd/mm/yyyy'),Format('{33}', 'dd/mm/yyyy'),Format('{34}', 'dd/mm/yyyy'),Format('{35}', 'dd/mm/yyyy'),Format('{36}', 'dd/mm/yyyy'),Format('{37}', 'dd/mm/yyyy'))",//Jolo Barcode
                            //    Convert.ToString(dr["ItemCode"]), Convert.ToString(dr["ProductName"]), Convert.ToString(dr["Model"]), Catname, Convert.ToString(dr["Brand"]), 0, 1, Convert.ToDouble(dr["MRP"]), productunit, Convert.ToDouble(dr["VAT"]), 0, productunit, 0, Convert.ToDouble(dr["VAT"]), 0, productunit, Convert.ToDouble(dr["DP"]), 0, 0, productunit, productunit, productunit, 0, productunit, 0, 0, Convert.ToDouble(dr["NLC"]), 'N', 0, Convert.ToDateTime(DateTime.Now.ToString()), Convert.ToDateTime(DateTime.Now.ToString()), Convert.ToDateTime(DateTime.Now.ToString()), Convert.ToDateTime(DateTime.Now.ToString()), Convert.ToDateTime(DateTime.Now.ToString()), Convert.ToDateTime(DateTime.Now.ToString()), Convert.ToDateTime(DateTime.Now.ToString()), Convert.ToDateTime(DateTime.Now.ToString()), Convert.ToDateTime(DateTime.Now.ToString()));//Jolo Barcode
                            manager.ExecuteDataSet(CommandType.Text, dbQry);

                            //dbQry = string.Format("SET IDENTITY_INSERT [tblLedger] OFF");
                            //manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        }
                    }
                }
            }

            sAuditStr = "Ledgers added. Record Details :  User :" + Username + " DateTime: " + DateTime.Now.ToString();
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Add New", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void InsertBulkLedgerExpense(string connection, DataSet dsbulk, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet dsNew = new DataSet();

        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsOld = new DataSet();
        string dbQry3 = string.Empty;
        DataSet dsdt = new DataSet();
        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();

            //dbQ = "SELECT KeyValue From tblSettings WHERE key='SAVELOG'";
            //dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            //if (dsd.Tables[0].Rows.Count > 0)
            //    Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            //if (Logsave == "YES")
            //{
            //string value1 = string.Empty;
            //string value2 = string.Empty;
            //string value3 = string.Empty;

            //int middlePos = 0;
            //logdescription = string.Format("INSERT INTO tblProductMaster VALUES({0},{1}, {2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24},{25},{26},{27},{28},{29},{30},{31},{32},{33},{34},{35},{36},{37})",
            //ItemCode, ProductName, Model, CategoryID, ProductDesc, Stock, ROL, Rate, Unit, VAT, Discount, BuyUnit, BuyRate, BuyVAT, BuyDiscount, DealerUnit, DealerRate, DealerVAT, DealerDiscount, Complex, Measure_Unit, Accept_Role, CST, Barcode, ExecutiveCommission, CommodityCode, NLC, block, productlevel, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), NLCEffDate.ToShortDateString());
            //logdescription = logdescription.Trim();
            //if (logdescription.Length > 255)
            //{
            //    value1 = logdescription.Substring(0, 255);
            //    value2 = logdescription.Substring(256, 255);
            //    middlePos = logdescription.Length - (value1.Length + value2.Length);
            //    if (middlePos > 0)
            //        value3 = logdescription.Substring(510, middlePos);
            //    else
            //        value3 = "";
            //}
            //else
            //{
            //    value1 = logdescription;
            //    value2 = "";

            //    value3 = "";
            //}
            //description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}','{5}','{6}')",
            //     DateTime.Now.ToString(), value1, Username, "", value2, value3, "InsertProduct");
            //manager.ExecuteNonQuery(CommandType.Text, description);

            //logdescription = string.Format("INSERT INTO tblProducthistory VALUES({0},{1}, {2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18})",
            //ItemCode, ProductName, Model, CategoryID, ProductDesc, ROL, Rate, DealerRate, NLC, block, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), NLCEffDate.ToShortDateString());
            //logdescription = logdescription.Trim();
            //description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
            //     DateTime.Now.ToString(), logdescription.ToString(), Username, "", "InsertProduct");
            //manager.ExecuteNonQuery(CommandType.Text, description);
            //}

            string productunit = string.Empty;
            int Catname = 0;

            if (dsbulk != null)
            {
                if (dsbulk.Tables.Count > 0)
                {
                    foreach (DataRow dr1 in dsbulk.Tables[0].Rows)
                    {
                        if ((Convert.ToString(dr1["LedgerName"]) == null) || (Convert.ToString(dr1["LedgerName"]) == ""))
                        {

                        }
                        else
                        {
                            double op1;
                            //if (Convert.ToString(dr["OpenBalanceDR"]) == null)
                            //{
                            //    op1 = 0;
                            //}
                            //else
                            //{
                            //    op1 = Convert.ToDouble(dr["OpenBalanceDR"]);
                            //} 
                            dbQ = "SELECT * From tblBranch";
            dsdt = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsdt != null)
            {
                if (dsdt.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsdt.Tables[0].Rows)
                    {
                        int LedgerID = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(LedgerID) FROM tblLedger"));

                        if (Logsave == "YES")
                        {
                            string value1 = string.Empty;
                            string value2 = string.Empty;
                            string value3 = string.Empty;

                            int middlePos = 0;
                            logdescription = string.Format("INSERT INTO tblLedger(LedgerID,LedgerName, AliasName,GroupID,OpenBalanceDR,OpenBalanceCR,Debit,Credit,ContactName,Add1,Add2,Add3,Phone,BelongsTo,LedgerCategory,ExecutiveIncharge,TinNumber,Mobile,Inttrans,Paymentmade,dc,BranchCode,ModeofContact,ExpenseID) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23})",
                           LedgerID + 1, Convert.ToString(dr["LedgerName"]) + " - " + Convert.ToString(dr["Branchcode"]), Convert.ToString(dr["AliasName"]) + " - " + Convert.ToString(dr["Branchcode"]), Convert.ToString(dr["GroupID"]), 0, 0, 0, 0, Convert.ToString(dr["ContactName"]), Convert.ToString(dr["Add1"]), Convert.ToString(dr["Add2"]), Convert.ToString(dr["Add3"]), Convert.ToString(dr["Phone"]), 0, Convert.ToString(dr["LedgerCategory"]), Convert.ToString(dr["xecutiveIncharge"]), Convert.ToString(dr["BTinNumber"]), Convert.ToString(dr["Mobile"]), Convert.ToString(dr["Inttrans"]), Convert.ToString(dr["Paymentmade"]), Convert.ToString(dr["dc"]), Convert.ToString(dr["Branchcode"]),3,0);

                            //logdescription = string.Format("INSERT INTO tblLedger(LedgerID,LedgerName, AliasName,GroupID,OpenBalanceDR,OpenBalanceCR,Debit,Credit,ContactName,Add1,Add2,Add3,Phone,BelongsTo,LedgerCategory,ExecutiveIncharge,TinNumber,Mobile,Inttrans,Paymentmade,dc,BranchCode) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21})",
                            //LedgerID + 1, leadgername + " - " + Convert.ToString(dr["Branchcode"]), AliasName + " - " + Convert.ToString(dr["Branchcode"]), GroupID, 0, 0, 0, 0, ContactName, Add1, Add2, Add3, Phone, 0, LedgerCategory, ExecutiveIncharge, TinNumber, Mobile, Inttrans, Paymentmade, dc, Convert.ToString(dr["Branchcode"]));
                            logdescription = logdescription.Trim();
                            if (logdescription.Length > 255)
                            {
                                value1 = logdescription.Substring(0, 255);

                                middlePos = logdescription.Length - (value1.Length);
                                if (middlePos > 0)
                                    value2 = logdescription.Substring(255, middlePos);
                                else
                                    value2 = "";

                                middlePos = logdescription.Length - (value1.Length + value2.Length);
                                if (middlePos > 0)
                                    value3 = logdescription.Substring(510, middlePos);
                                else
                                    value3 = "";
                            }
                            else
                            {
                                value1 = logdescription;
                                value2 = "";
                                value3 = "";
                            }

                            description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}')",
                                 DateTime.Now.ToString("yyyy-MM-dd"), value1, "", "", value2, value3, "InsertLedgerInfo");
                            manager.ExecuteNonQuery(CommandType.Text, description);
                        }

                        dbQry = string.Format("INSERT INTO tblLedger(LedgerID,LedgerName, AliasName,GroupID,OpenBalanceDR,OpenBalanceCR,Debit,Credit,ContactName,Add1,Add2,Add3,Phone,BelongsTo,LedgerCategory,ExecutiveIncharge,TinNumber,Mobile,Inttrans,Paymentmade,dc,ChequeName,unuse, EmailId, ModeofContact,OpDueDate,BranchCode) VALUES({0},'{1}','{2}',{3},{4},{5},{6},{7},'{8}','{9}','{10}','{11}','{12}',{13},'{14}',{15},'{16}','{17}','{18}','{19}','{20}','{21}','{22}','{23}',{24},'{25}','{26}')",
                            LedgerID + 1, Convert.ToString(dr1["LedgerName"]) + " - " + Convert.ToString(dr["Branchcode"]), Convert.ToString(dr1["LedgerName"]) + " - " + Convert.ToString(dr["Branchcode"]), 8, Convert.ToDouble(dr1["OpenBalanceDR"]), Convert.ToDouble(dr1["OpenBalanceCR"]), 0, 0, Convert.ToString(dr1["ContactName"]), Convert.ToString(dr1["Add1"]), Convert.ToString(dr1["Add2"]), Convert.ToString(dr1["Add3"]), 0, 0, "0", "0", "0", "0", "NO", "NO", "NO", Convert.ToString(dr1["LedgerName"]), "YES", "", 3, "", Convert.ToString(dr["Branchcode"]));

                        //dbQry = string.Format("INSERT INTO tblLedger(LedgerID,LedgerName, AliasName,GroupID,OpenBalanceDR,OpenBalanceCR,Debit,Credit,ContactName,Add1,Add2,Add3,Phone,BelongsTo,LedgerCategory,ExecutiveIncharge,TinNumber,Mobile,Inttrans,Paymentmade,dc,ChequeName,unuse, EmailId, ModeofContact,OpDueDate,BranchCode) VALUES({0},'{1}','{2}',{3},{4},{5},{6},{7},'{8}','{9}','{10}','{11}','{12}',{13},'{14}',{15},'{16}','{17}','{18}','{19}','{20}','{21}','{22}','{23}',{24},'{25}','{26}')",
                        //    LedgerID + 1, LedgerName + " - " + Convert.ToString(dr["Branchcode"]), AliasName + " - " + Convert.ToString(dr["Branchcode"]), GroupID, 0, 0, 0, 0, ContactName, Add1, Add2, Add3, Phone, 0, LedgerCategory, ExecutiveIncharge, TinNumber, Mobile, Inttrans, Paymentmade, dc, ChequeName, unuse, EmailId, ModeofContact, OpDueDate, Convert.ToString(dr["Branchcode"]));

                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        sAuditStr = "Ledger : " + Convert.ToString(dr1["LedgerName"]) + " - " + Convert.ToString(dr["Branchcode"]) + " added. Record Details :  User :" + Username + " AliasName = " + Convert.ToString(dr1["LedgerName"]) + " - " + Convert.ToString(dr["Branchcode"]) + " GroupID= " + 8 + " ,LedgerCategory = " + 0 + " ,Mobile=" + 0 + " Phone :" + 0;
                        dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        dbQry = string.Format("INSERT INTO tblExpenseMaster(ExpenseHead, GroupID) VALUES('{0}','{1}')",
                                   Convert.ToString(dr1["LedgerName"]), 8);

                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                    
                }
            }
          

                            //dbQry = string.Format("SET IDENTITY_INSERT [tblLedger] OFF");
                            //manager.ExecuteNonQuery(CommandType.Text, dbQry);
                        }
                    }
                }
            }

            sAuditStr = "Ledgers added. Record Details :  User :" + Username + " DateTime: " + DateTime.Now.ToString();
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public DataSet ListProductDet(string connection, string Itemcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        if (Itemcode != "")
        {
            dbQry = "select itemcode,ProductName,ProductDesc,Model,Discount,Vat,Rate as mrp,CST,Stock,dealerdiscount,dealervat,dealerrate as dp,Accept_Role,Rate as NLP,nlc,mrpeffdate,dpeffdate,nlceffdate from tblProductMaster Where itemCode='" + Itemcode + "'";
        }
        else
        {
            dbQry = "select itemcode,ProductName,ProductDesc,Model,Discount,Vat,Rate as mrp,CST,Stock,dealerdiscount,dealervat,dealerrate as dp,Accept_Role,Rate as NLP,nlc,mrpeffdate,dpeffdate,nlceffdate from tblProductMaster";
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public void DelBankReconciliation(DataSet BankDS, string Username, int iLedgerID, DateTime dtSdate, string iLedgerName, string Types)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();

        StringBuilder dbQry1 = new StringBuilder();

        StringBuilder dbQry2 = new StringBuilder();

        string sAudit = string.Empty;
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();


            dbQry1.Append("SELECT TransNo,TransDate,DebtorID,Debtor,CreditorID,Creditor,Amount,Narration,VoucherType,Chequeno,RefNo,ReconcilatedBy,Reconcilateddate,Result FROM tblBankRecon");
            dbQry1.Append(" WHERE (DebtorID=" + iLedgerID + " OR CreditorID=" + iLedgerID + ") AND TransDate ='" + dtSdate.ToString("yyyy-MM-dd") + "' And Types='" + Types + "' ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry1.ToString());

            if (ds != null)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    sAudit = " Old Record Deleted on " + dtSdate.ToShortDateString();

                    dbQry = string.Format("Delete From tblBankRecon WHERE (DebtorID=" + iLedgerID + " OR CreditorID=" + iLedgerID + ") AND TransDate ='" + dtSdate.ToString("yyyy-MM-dd") + "' And Types='" + Types + "' ");
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                }
            }

            dbQry2.Append("SELECT LedgerID FROM tblBankRec");
            dbQry2.Append(" WHERE LedgerID=" + iLedgerID + " AND DateT ='" + dtSdate.ToString("yyyy-MM-dd") + "' And Types='" + Types + "' ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (ds != null)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    dbQry = string.Format("Delete From tblBankRec WHERE LedgerID=" + iLedgerID + " AND DateT ='" + dtSdate.ToString("yyyy-MM-dd") + "' And Types='" + Types + "' ");
                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                }
            }




            sAuditStr = "Bank Reconciliation on: " + dtSdate.ToShortDateString() + " .Record Details :  User :" + Username + " Ledger = " + iLedgerName;

            sAuditStr = sAuditStr + sAudit;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Bank Reconciliation", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetPurchaseDataNew(string sDataSource, string itemCode, string condition)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet dsParentQry; string sQry = string.Empty;
        string sConStr = string.Empty;

        if (condition == "")
        {
            if (itemCode != "0")
                sQry = "SELECT PI.ItemCode,P.BillDate,SUM(PI.Qty) as Qty,M.ProductDesc,C.CategoryName,M.ProductName,M.Model FROM (((tblPurchase P Inner Join tblPurchaseItems PI On P.PurchaseID = PI.PurchaseID) Inner Join tblProductMaster M On PI.ItemCode = M.ItemCode) Inner Join tblCategories C On C.CategoryID = M.CategoryID) Where PI.ItemCode='" + itemCode + "' Group By PI.ItemCode,P.BillDate,M.ProductName,M.ProductDesc,M.Model,C.CategoryName";
            else
                sQry = "SELECT PI.ItemCode,P.BillDate,SUM(PI.Qty) as Qty,M.ProductDesc,C.CategoryName,M.ProductName,M.Model FROM (((tblPurchase P Inner Join tblPurchaseItems PI On P.PurchaseID = PI.PurchaseID) Inner Join tblProductMaster M On PI.ItemCode = M.ItemCode) Inner Join tblCategories C On C.CategoryID = M.CategoryID) Group By PI.ItemCode,P.BillDate,M.ProductName,M.ProductDesc,M.Model,C.CategoryName";
        }
        else
        {
            //if (itemCode != "0")
            //    sQry = "SELECT PI.ItemCode,P.BillDate,SUM(PI.Qty) as Qty,M.ProductDesc,C.CategoryName,M.ProductName,M.Model FROM (((tblPurchase P Inner Join tblPurchaseItems PI On P.PurchaseID = PI.PurchaseID) Inner Join tblProductMaster M On PI.ItemCode = M.ItemCode) Inner Join tblCategories C On C.CategoryID = M.CategoryID) Where  PI.ItemCode='" + itemCode + "'  " + condition + " Group By PI.ItemCode,P.BillDate,M.ProductName,M.ProductDesc,M.Model,C.CategoryName";
            //else
            sQry = "SELECT PI.ItemCode,P.BillDate,SUM(PI.Qty) as Qty,M.ProductDesc,C.CategoryName,M.ProductName,M.Model FROM (((tblPurchase P Inner Join tblPurchaseItems PI On P.PurchaseID = PI.PurchaseID) Inner Join tblProductMaster M On PI.ItemCode = M.ItemCode) Inner Join tblCategories C On C.CategoryID = M.CategoryID) Where " + condition + " Group By PI.ItemCode,P.BillDate,M.ProductName,M.ProductDesc,M.Model,C.CategoryName";
        }

        try
        {
            manager.Open();
            dsParentQry = manager.ExecuteDataSet(CommandType.Text, sQry);
            return dsParentQry;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }


    public DataSet GetBillDetail(string connection, int BillNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        StringBuilder dbQry2 = new StringBuilder();

        try
        {
            dbQry2.Append("Select tblSales.BillNo,tblSales.BillDate,tblSales.CustomerName,tblDayBook.Amount,tblDayBook.Amount - Sum(iif(isnull(r.ramount),0,r.ramount ))  as pay from (tblSales inner join tblDayBook on tblSales.JournalID = tblDayBook.TransNo)  ");
            dbQry2.AppendFormat(" LEFT join (select  billno,ReceiptNo,sum(Amount) as ramount FROM tblReceivedAmount  group by  billno,ReceiptNo ) As r on r.billno = tblSales.billno Where tblSales.PayMode = 3 AND tblSales.BillNo=" + BillNo + " Group by tblSales.BillNo,tblSales.BillDate,tblSales.CustomerName,tblDayBook.Amount");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetBillDetailPurchase(string connection, int BillNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        StringBuilder dbQry2 = new StringBuilder();

        try
        {
            dbQry2.Append("Select tblPurchase.BillNo,tblPurchase.BillDate,tblDayBook.Amount,tblDayBook.Amount - Sum(iif(isnull(r.ramount),0,r.ramount ))  as pay from (tblPurchase inner join tblDayBook on tblPurchase.JournalID = tblDayBook.TransNo)  ");
            dbQry2.AppendFormat(" LEFT join (select  billno,paymentNo,sum(Amount) as ramount FROM tblPaymentAmount  group by  billno,paymentNo ) As r on r.billno = tblPurchase.billno Where tblPurchase.PayMode = 3 AND tblPurchase.BillNo='" + BillNo + "' Group by tblPurchase.BillNo,tblPurchase.BillDate,tblDayBook.Amount");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void DeleteCustReceivedAmount(string connection, int TransNo, bool requireValidation, string username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        DataSet dsOld = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;

        int TTransNo = 0;
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("INSERT INTO tblAuditReceivedAmount Select * From tblReceivedAmount Where ReceiptNo = {0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblReceivedAmount Where ReceiptNo = {0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Adjustment Cleared For : " + TransNo + " got deleted old Record Details : User =" + username;

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Delete", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void DeleteSuppPaymentAmount(string connection, int TransNo, bool requireValidation, string username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        DataSet dsOld = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;

        int TTransNo = 0;
        int oldDebitID = 0;
        int oldCreditID = 0;
        string oldBillNo = "";
        int oldBilitID = 0;
        double oldAmt = 0;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("INSERT INTO tblAuditPaymentAmount Select * From tblPaymentAmount Where PaymentNo={0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblPaymentAmount Where PaymentNo = {0}", TransNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Adjustment Cleared For : " + TransNo + " got deleted old Record Details : User =" + username;

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Delete", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void InsertPaymentAmt(string connection, int Transno, int BillNo, double Amount, string usernam)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        string sAuditStr = string.Empty;

        StringBuilder dbQry2 = new StringBuilder();
        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("INSERT INTO tblPaymentAmount(PaymentNo,BillNo,Amount) VALUES({0},{1},{2})", Transno.ToString(), BillNo, Amount);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            sAuditStr = "Adjustment Transaction: " + Transno + " added. Record Details : User=" + usernam + " DateTime:" + DateTime.Now.ToString();
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Add New", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void DeletePaymentAmt(string connection, int ID, string BillNo, string usernam)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        StringBuilder dbQry2 = new StringBuilder();
        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("Delete From tblPaymentAmount Where ID = {0} and BillNo='{1}'", ID, BillNo);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Adjustment Transaction Bill No : " + BillNo + " ID : " + ID + " deleted. Record Details : User=" + usernam + " DateTime:" + DateTime.Now.ToString();

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Delete", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool CheckUserHaveOptions(string usernam, string role)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();

            dbQry = "SELECT Count(*) FROM tblUserOptions Where UserName ='" + usernam + "' and Role ='" + role + "' and [Add] = 'false' ";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
                return false;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetLedgerGroupHeadingForId(string connection, int ledgerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select LedgerID,LedgerName,tblGroups.GroupID,tblGroups.GroupName,tblAccHeading.headingid,tblAccHeading.heading from (tblLedger inner join tblGroups on tblLedger.GroupID = tblGroups.GroupID) inner join tblAccHeading on tblAccHeading.headingid = tblgroups.headingid  where LedgerID = " + ledgerID.ToString();
            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public string getEnableDateConfigInfoMethod()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();

            dbQry.Append("SELECT   KeyValue  From tblSettings WHERE keyName='ENBLDATE'");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds.Tables[0].Rows[0]["KeyValue"].ToString();
            else
                return "";
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListPaymentsForBillNoOrder(string billNo)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            manager.Open();


            dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate,tblDayBook.DebtorID, creditor.LedgerName AS Debi, P.Amount, tblDayBook.Narration, ");
            dbQry.Append(" tblDayBook.RefNo, tblDayBook.ChequeNo, Payment.Paymode FROM  (((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger creditor ON tblDayBook.creditorid = creditor.LedgerID) INNER JOIN  tblPaymentAmount P ON P.PaymentNo = tblDayBook.TransNo) LEFT JOIN ");
            dbQry.Append("tblPayment Payment ON tblDayBook.TransNo = Payment.JournalID) ");
            dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Payment' AND P.BillNo='{0}' ", billNo);
            dbQry.Append("Order By tblDayBook.TransNo");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet getflashreport(string connection, DateTime sDate, DateTime eDate, string Types, int paymode)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();

            if (Types == "CashPurchase")
            {
                dbQry2 = "SELECT tblPurchase.PurchaseID, tblPurchase.BillNo, tblPurchase.BillDate, tblLedger.LedgerName, tblPurchase.TotalAmt,salesreturn,salesreturnreason FROM tblPurchase INNER JOIN tblLedger ON tblPurchase.SupplierID = tblLedger.LedgerID WHERE (salesreturn='No' and paymode=" + paymode + " and (Billdate >= #" + sDate.ToString("MM/dd/yyyy") + "# And BillDate<=#" + eDate.ToString("MM/dd/yyyy") + "#));";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry2);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet GetPostingLedger(string connection)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        try
        {
            dbQry = "Select Ledger From tblJournalPostingLedger";

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void DelPostingLedger(string connection, string Ledger)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        try
        {
            dbQry = "Delete From tblJournalPostingLedger Where Ledger = '" + Ledger + "'";

            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void AddPostingLedger(string connection, string Ledger)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        try
        {
            dbQry = "Insert Into tblJournalPostingLedger(Ledger) Values('" + Ledger + "')";

            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public bool IsLedgerFoundinJournalPosting(string connection, string dledger)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        try
        {
            dbQry = "Select ledger from tblJournalPostingLedger where ledger='" + dledger + "' ";

            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            return false;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool CheckIfModelIsThere(string model)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int Totalqty = 0;
        int qty = 0;
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            dbQry = "SELECT Count(*) FROM tblProductMaster Where model ='" + model + "'";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void UpdateBulkProducts(string connection, DataSet dsbulk, string Username, int type)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet dsNew = new DataSet();

        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsOld = new DataSet();
        string dbQry3 = string.Empty;

        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        DateTime mrpdat = DateTime.Now;
        DateTime dpdat = DateTime.Now;
        DateTime nlcdat = DateTime.Now;

        DateTime mrpprevdat;
        DateTime nlcprevdat;
        DateTime dpprevdat;

        DateTime mrpnewdat;
        DateTime nlcnewdat;
        DateTime dpnewdat;

        double oldmrp = 0;
        double oldnlc = 0;
        double olddp = 0;

        string ItCod = string.Empty;
        string PrName = string.Empty;
        string Bnd = string.Empty;
        int Cate = 0;
        string blk = string.Empty;
        double rl = 0;
        string tim = DateTime.Now.ToString();

        try
        {
            manager.Open();

            string productunit = string.Empty;
            int Catname = 0;

            if (dsbulk != null)
            {
                if (dsbulk.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsbulk.Tables[0].Rows)
                    {
                        if (type == 4)
                        {
                            if ((Convert.ToString(dr["Model"]) == null) || (Convert.ToString(dr["Model"]) == ""))
                            {

                            }
                            else
                            {

                                //dbQry = string.Format("INSERT INTO tblAuditProductMaster Select * From tblProductMaster Where Model = '{0}'", Convert.ToString(dr["Model"]));
                                //manager.ExecuteNonQuery(CommandType.Text, dbQry);


                                dbQry3 = string.Format("Select itemcode,productname,productdesc,CategoryId,block,rol,mrpeffdate,dpeffdate,nlceffdate,rate,nlc,dealerrate from tblproductmaster Where Model='{0}' ", Convert.ToString(dr["Model"]));
                                dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry3);
                                if (dsOld != null)
                                {
                                    if (dsOld.Tables.Count > 0)
                                    {
                                        ItCod = Convert.ToString(dsOld.Tables[0].Rows[0]["itemcode"]);
                                        PrName = Convert.ToString(dsOld.Tables[0].Rows[0]["productname"]);
                                        Bnd = Convert.ToString(dsOld.Tables[0].Rows[0]["productdesc"]);
                                        Cate = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CategoryId"]);
                                        blk = Convert.ToString(dsOld.Tables[0].Rows[0]["block"]);
                                        rl = Convert.ToDouble(dsOld.Tables[0].Rows[0]["rol"]);
                                        mrpdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["mrpeffdate"]);
                                        dpdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["dpeffdate"]);
                                        nlcdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["nlceffdate"]);
                                        oldmrp = Convert.ToDouble(dsOld.Tables[0].Rows[0]["rate"]);
                                        oldnlc = Convert.ToDouble(dsOld.Tables[0].Rows[0]["nlc"]);
                                        olddp = Convert.ToDouble(dsOld.Tables[0].Rows[0]["dealerrate"]);
                                    }
                                }

                                DateTime MRPEffDate = Convert.ToDateTime(dr["MRPEffDate"]);
                                DateTime NLCEffDate = Convert.ToDateTime(dr["NLCEffDate"]);
                                DateTime DPEffDate = Convert.ToDateTime(dr["DPEffDate"]);

                                if (mrpdat == MRPEffDate)
                                {
                                    mrpprevdat = MRPEffDate;
                                    //mrpnewdat = MRPEffDate;
                                }
                                else
                                {
                                    mrpprevdat = MRPEffDate.AddDays(-1);
                                }
                                if (nlcdat == NLCEffDate)
                                {
                                    nlcprevdat = NLCEffDate;
                                }
                                else
                                {
                                    nlcprevdat = NLCEffDate.AddDays(-1);
                                }
                                if (dpdat == DPEffDate)
                                {
                                    dpprevdat = DPEffDate;
                                }
                                else
                                {
                                    dpprevdat = DPEffDate.AddDays(-1);
                                }

                                dbQry = string.Format("UPDATE tblProductMaster SET Rate={0}, DealerRate={1}, NLC={2}, MRPEffDate=Format('{3}', 'dd/mm/yyyy'),DPEffDate=Format('{4}', 'dd/mm/yyyy'),NLCEffDate=Format('{5}', 'dd/mm/yyyy'),mrpstartdate=Format('{6}', 'dd/mm/yyyy'),mrpenddate=Format('{7}', 'dd/mm/yyyy'),dpstartdate=Format('{8}', 'dd/mm/yyyy'),dpenddate=Format('{9}', 'dd/mm/yyyy'),nlcstartdate=Format('{10}', 'dd/mm/yyyy'),nlcenddate=Format('{11}', 'dd/mm/yyyy'),rol={13},OUTDATED='{14}',DEVIATION={15} where Model = '{12}' ", //Jolo Barcode
                                Convert.ToDouble(dr["MRP"]), Convert.ToDouble(dr["DP"]), Convert.ToDouble(dr["NLC"]), MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), mrpdat.ToShortDateString(), mrpprevdat.ToShortDateString(), dpdat.ToShortDateString(), dpprevdat.ToShortDateString(), nlcdat.ToShortDateString(), nlcprevdat.ToShortDateString(), Convert.ToString(dr["Model"]), Convert.ToDouble(dr["StockLevel"]), Convert.ToString(dr["OUTDATED"]), Convert.ToInt32(dr["DEVIATION"])); //Jolo Barcode

                                manager.ExecuteDataSet(CommandType.Text, dbQry);

                                if ((mrpdat == MRPEffDate) && (nlcdat == NLCEffDate) && (dpdat == DPEffDate))
                                {
                                }
                                else
                                {
                                    dbQry2 = string.Format("INSERT INTO tblProducthistory VALUES('{0}','{1}', '{2}',{3},'{4}',{5},{6},{7},{8},'{9}',Format('{10}', 'dd/mm/yyyy'),Format('{11}', 'dd/mm/yyyy'),Format('{12}', 'dd/mm/yyyy'),Format('{13}', 'dd/mm/yyyy'),Format('{14}', 'dd/mm/yyyy'),Format('{15}', 'dd/mm/yyyy'),Format('{16}', 'dd/mm/yyyy'),Format('{17}', 'dd/mm/yyyy'),Format('{18}', 'dd/mm/yyyy'))",
                                        ItCod, PrName, Convert.ToString(dr["Model"]), Cate, Bnd, rl, oldmrp, olddp, oldnlc, blk, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), mrpdat.ToShortDateString(), mrpprevdat.ToShortDateString(), dpdat.ToShortDateString(), dpprevdat.ToShortDateString(), nlcdat.ToShortDateString(), nlcprevdat.ToShortDateString());
                                    manager.ExecuteDataSet(CommandType.Text, dbQry2);
                                }
                            }
                        }
                        else if (type == 1)
                        {
                            if ((Convert.ToString(dr["Model"]) == null) || (Convert.ToString(dr["Model"]) == ""))
                            {

                            }
                            else
                            {
                                DateTime NLCEffDate = Convert.ToDateTime(tim);
                                DateTime DPEffDate = Convert.ToDateTime(tim);

                                dbQry = string.Format("INSERT INTO tblAuditProductMaster Select * From tblProductMaster Where Model = '{0}'", Convert.ToString(dr["Model"]));
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                                dbQry3 = string.Format("Select itemcode,productname,productdesc,CategoryId,block,rol,mrpeffdate,dpeffdate,nlceffdate,rate,nlc,dealerrate from tblproductmaster Where Model='{0}' ", Convert.ToString(dr["Model"]));
                                dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry3);
                                if (dsOld != null)
                                {
                                    if (dsOld.Tables.Count > 0)
                                    {
                                        ItCod = Convert.ToString(dsOld.Tables[0].Rows[0]["itemcode"]);
                                        PrName = Convert.ToString(dsOld.Tables[0].Rows[0]["productname"]);
                                        Bnd = Convert.ToString(dsOld.Tables[0].Rows[0]["productdesc"]);
                                        Cate = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CategoryId"]);
                                        blk = Convert.ToString(dsOld.Tables[0].Rows[0]["block"]);
                                        rl = Convert.ToDouble(dsOld.Tables[0].Rows[0]["rol"]);
                                        mrpdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["mrpeffdate"]);
                                        dpdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["dpeffdate"]);
                                        nlcdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["nlceffdate"]);
                                        oldmrp = Convert.ToDouble(dsOld.Tables[0].Rows[0]["rate"]);
                                        oldnlc = Convert.ToDouble(dsOld.Tables[0].Rows[0]["nlc"]);
                                        olddp = Convert.ToDouble(dsOld.Tables[0].Rows[0]["dealerrate"]);
                                        NLCEffDate = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["nlceffdate"]);
                                        DPEffDate = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["dpeffdate"]);
                                    }
                                }

                                DateTime MRPEffDate = Convert.ToDateTime(dr["MRPEffDate"]);


                                if (mrpdat == MRPEffDate)
                                {
                                    mrpprevdat = MRPEffDate;
                                }
                                else
                                {
                                    mrpprevdat = MRPEffDate.AddDays(-1);
                                }
                                if (nlcdat == NLCEffDate)
                                {
                                    nlcprevdat = NLCEffDate;
                                }
                                else
                                {
                                    nlcprevdat = NLCEffDate.AddDays(-1);
                                }
                                if (dpdat == DPEffDate)
                                {
                                    dpprevdat = DPEffDate;
                                }
                                else
                                {
                                    dpprevdat = DPEffDate.AddDays(-1);
                                }

                                dbQry = string.Format("UPDATE tblProductMaster SET Rate={0}, MRPEffDate=Format('{1}', 'dd/mm/yyyy'),mrpstartdate=Format('{2}', 'dd/mm/yyyy'),mrpenddate=Format('{3}', 'dd/mm/yyyy') where Model = '{4}' ", //Jolo Barcode
                                Convert.ToDouble(dr["MRP"]), MRPEffDate.ToShortDateString(), mrpdat.ToShortDateString(), mrpprevdat.ToShortDateString(), Convert.ToString(dr["Model"])); //Jolo Barcode

                                manager.ExecuteDataSet(CommandType.Text, dbQry);

                                if ((mrpdat == MRPEffDate))
                                {
                                }
                                else
                                {
                                    dbQry2 = string.Format("INSERT INTO tblProducthistory VALUES('{0}','{1}', '{2}',{3},'{4}',{5},{6},{7},{8},'{9}',Format('{10}', 'dd/mm/yyyy'),Format('{11}', 'dd/mm/yyyy'),Format('{12}', 'dd/mm/yyyy'),Format('{13}', 'dd/mm/yyyy'),Format('{14}', 'dd/mm/yyyy'),Format('{15}', 'dd/mm/yyyy'),Format('{16}', 'dd/mm/yyyy'),Format('{17}', 'dd/mm/yyyy'),Format('{18}', 'dd/mm/yyyy'))",
                                        ItCod, PrName, Convert.ToString(dr["Model"]), Cate, Bnd, rl, oldmrp, olddp, oldnlc, blk, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), mrpdat.ToShortDateString(), mrpprevdat.ToShortDateString(), dpdat.ToShortDateString(), dpprevdat.ToShortDateString(), nlcdat.ToShortDateString(), nlcprevdat.ToShortDateString());
                                    manager.ExecuteDataSet(CommandType.Text, dbQry2);
                                }
                            }
                        }
                        else if (type == 2)
                        {
                            if ((Convert.ToString(dr["Model"]) == null) || (Convert.ToString(dr["Model"]) == ""))
                            {

                            }
                            else
                            {
                                dbQry = string.Format("INSERT INTO tblAuditProductMaster Select * From tblProductMaster Where Model = '{0}'", Convert.ToString(dr["Model"]));
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                                DateTime MRPEffDate = Convert.ToDateTime(tim);
                                DateTime DPEffDate = Convert.ToDateTime(tim);
                                dbQry3 = string.Format("Select itemcode,productname,productdesc,CategoryId,block,rol,mrpeffdate,dpeffdate,nlceffdate,rate,nlc,dealerrate from tblproductmaster Where Model='{0}' ", Convert.ToString(dr["Model"]));
                                dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry3);
                                if (dsOld != null)
                                {
                                    if (dsOld.Tables.Count > 0)
                                    {
                                        ItCod = Convert.ToString(dsOld.Tables[0].Rows[0]["itemcode"]);
                                        PrName = Convert.ToString(dsOld.Tables[0].Rows[0]["productname"]);
                                        Bnd = Convert.ToString(dsOld.Tables[0].Rows[0]["productdesc"]);
                                        Cate = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CategoryId"]);
                                        blk = Convert.ToString(dsOld.Tables[0].Rows[0]["block"]);
                                        rl = Convert.ToDouble(dsOld.Tables[0].Rows[0]["rol"]);
                                        mrpdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["mrpeffdate"]);
                                        dpdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["dpeffdate"]);
                                        nlcdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["nlceffdate"]);
                                        oldmrp = Convert.ToDouble(dsOld.Tables[0].Rows[0]["rate"]);
                                        oldnlc = Convert.ToDouble(dsOld.Tables[0].Rows[0]["nlc"]);
                                        olddp = Convert.ToDouble(dsOld.Tables[0].Rows[0]["dealerrate"]);
                                        MRPEffDate = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["mrpeffdate"]);
                                        DPEffDate = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["dpeffdate"]);
                                    }
                                }


                                DateTime NLCEffDate = Convert.ToDateTime(dr["NLCEffDate"]);


                                if (mrpdat == MRPEffDate)
                                {
                                    mrpprevdat = MRPEffDate;
                                }
                                else
                                {
                                    mrpprevdat = MRPEffDate.AddDays(-1);
                                }
                                if (nlcdat == NLCEffDate)
                                {
                                    nlcprevdat = NLCEffDate;
                                }
                                else
                                {
                                    nlcprevdat = NLCEffDate.AddDays(-1);
                                }
                                if (dpdat == DPEffDate)
                                {
                                    dpprevdat = DPEffDate;
                                }
                                else
                                {
                                    dpprevdat = DPEffDate.AddDays(-1);
                                }

                                dbQry = string.Format("UPDATE tblProductMaster SET NLC={0}, NLCEffDate=Format('{1}', 'dd/mm/yyyy'), nlcstartdate=Format('{2}', 'dd/mm/yyyy'), nlcenddate=Format('{3}', 'dd/mm/yyyy') where Model = '{4}' ",
                                Convert.ToDouble(dr["NLC"]), NLCEffDate.ToShortDateString(), nlcdat.ToShortDateString(), nlcprevdat.ToShortDateString(), Convert.ToString(dr["Model"]));

                                manager.ExecuteDataSet(CommandType.Text, dbQry);

                                if ((nlcdat == NLCEffDate))
                                {
                                }
                                else
                                {
                                    dbQry2 = string.Format("INSERT INTO tblProducthistory VALUES('{0}','{1}', '{2}',{3},'{4}',{5},{6},{7},{8},'{9}',Format('{10}', 'dd/mm/yyyy'),Format('{11}', 'dd/mm/yyyy'),Format('{12}', 'dd/mm/yyyy'),Format('{13}', 'dd/mm/yyyy'),Format('{14}', 'dd/mm/yyyy'),Format('{15}', 'dd/mm/yyyy'),Format('{16}', 'dd/mm/yyyy'),Format('{17}', 'dd/mm/yyyy'),Format('{18}', 'dd/mm/yyyy'))",
                                        ItCod, PrName, Convert.ToString(dr["Model"]), Cate, Bnd, rl, oldmrp, olddp, oldnlc, blk, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), mrpdat.ToShortDateString(), mrpprevdat.ToShortDateString(), dpdat.ToShortDateString(), dpprevdat.ToShortDateString(), nlcdat.ToShortDateString(), nlcprevdat.ToShortDateString());
                                    manager.ExecuteDataSet(CommandType.Text, dbQry2);
                                }
                            }
                        }
                        else if (type == 3)
                        {
                            if ((Convert.ToString(dr["Model"]) == null) || (Convert.ToString(dr["Model"]) == ""))
                            {

                            }
                            else
                            {
                                dbQry = string.Format("INSERT INTO tblAuditProductMaster Select * From tblProductMaster Where Model = '{0}'", Convert.ToString(dr["Model"]));
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                                DateTime MRPEffDate = Convert.ToDateTime(tim);
                                DateTime NLCEffDate = Convert.ToDateTime(tim);

                                dbQry3 = string.Format("Select itemcode,productname,productdesc,CategoryId,block,rol,mrpeffdate,dpeffdate,nlceffdate,rate,nlc,dealerrate from tblproductmaster Where Model='{0}' ", Convert.ToString(dr["Model"]));
                                dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry3);
                                if (dsOld != null)
                                {
                                    if (dsOld.Tables.Count > 0)
                                    {
                                        ItCod = Convert.ToString(dsOld.Tables[0].Rows[0]["itemcode"]);
                                        PrName = Convert.ToString(dsOld.Tables[0].Rows[0]["productname"]);
                                        Bnd = Convert.ToString(dsOld.Tables[0].Rows[0]["productdesc"]);
                                        Cate = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CategoryId"]);
                                        blk = Convert.ToString(dsOld.Tables[0].Rows[0]["block"]);
                                        rl = Convert.ToDouble(dsOld.Tables[0].Rows[0]["rol"]);
                                        mrpdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["mrpeffdate"]);
                                        dpdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["dpeffdate"]);
                                        nlcdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["nlceffdate"]);
                                        oldmrp = Convert.ToDouble(dsOld.Tables[0].Rows[0]["rate"]);
                                        oldnlc = Convert.ToDouble(dsOld.Tables[0].Rows[0]["nlc"]);
                                        olddp = Convert.ToDouble(dsOld.Tables[0].Rows[0]["dealerrate"]);
                                        MRPEffDate = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["mrpeffdate"]);
                                        NLCEffDate = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["nlceffdate"]);
                                    }
                                }


                                DateTime DPEffDate = Convert.ToDateTime(dr["DPEffDate"]);

                                if (mrpdat == MRPEffDate)
                                {
                                    mrpprevdat = MRPEffDate;
                                }
                                else
                                {
                                    mrpprevdat = MRPEffDate.AddDays(-1);
                                }
                                if (nlcdat == NLCEffDate)
                                {
                                    nlcprevdat = NLCEffDate;
                                }
                                else
                                {
                                    nlcprevdat = NLCEffDate.AddDays(-1);
                                }
                                if (dpdat == DPEffDate)
                                {
                                    dpprevdat = DPEffDate;
                                }
                                else
                                {
                                    dpprevdat = DPEffDate.AddDays(-1);
                                }

                                dbQry = string.Format("UPDATE tblProductMaster SET DealerRate={0}, DPEffDate=Format('{1}', 'dd/mm/yyyy'),dpstartdate=Format('{2}', 'dd/mm/yyyy'),dpenddate=Format('{3}', 'dd/mm/yyyy') where Model = '{4}' ", //Jolo Barcode
                                Convert.ToDouble(dr["DP"]), DPEffDate.ToShortDateString(), dpdat.ToShortDateString(), dpprevdat.ToShortDateString(), Convert.ToString(dr["Model"])); //Jolo Barcode

                                manager.ExecuteDataSet(CommandType.Text, dbQry);

                                if ((dpdat == DPEffDate))
                                {
                                }
                                else
                                {
                                    dbQry2 = string.Format("INSERT INTO tblProducthistory VALUES('{0}','{1}', '{2}',{3},'{4}',{5},{6},{7},{8},'{9}',Format('{10}', 'dd/mm/yyyy'),Format('{11}', 'dd/mm/yyyy'),Format('{12}', 'dd/mm/yyyy'),Format('{13}', 'dd/mm/yyyy'),Format('{14}', 'dd/mm/yyyy'),Format('{15}', 'dd/mm/yyyy'),Format('{16}', 'dd/mm/yyyy'),Format('{17}', 'dd/mm/yyyy'),Format('{18}', 'dd/mm/yyyy'))",
                                        ItCod, PrName, Convert.ToString(dr["Model"]), Cate, Bnd, rl, oldmrp, olddp, oldnlc, blk, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), mrpdat.ToShortDateString(), mrpprevdat.ToShortDateString(), dpdat.ToShortDateString(), dpprevdat.ToShortDateString(), nlcdat.ToShortDateString(), nlcprevdat.ToShortDateString());
                                    manager.ExecuteDataSet(CommandType.Text, dbQry2);
                                }
                            }
                        }
                        else if (type == 5)
                        {
                            if ((Convert.ToString(dr["Model"]) == null) || (Convert.ToString(dr["Model"]) == ""))
                            {

                            }
                            else
                            {

                                DateTime NLCEffDate = Convert.ToDateTime(tim);

                                dbQry = string.Format("INSERT INTO tblAuditProductMaster Select * From tblProductMaster Where Model = '{0}'", Convert.ToString(dr["Model"]));
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                                dbQry3 = string.Format("Select itemcode,productname,productdesc,CategoryId,block,rol,mrpeffdate,dpeffdate,nlceffdate,rate,nlc,dealerrate from tblproductmaster Where Model='{0}' ", Convert.ToString(dr["Model"]));
                                dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry3);
                                if (dsOld != null)
                                {
                                    if (dsOld.Tables.Count > 0)
                                    {
                                        ItCod = Convert.ToString(dsOld.Tables[0].Rows[0]["itemcode"]);
                                        PrName = Convert.ToString(dsOld.Tables[0].Rows[0]["productname"]);
                                        Bnd = Convert.ToString(dsOld.Tables[0].Rows[0]["productdesc"]);
                                        Cate = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CategoryId"]);
                                        blk = Convert.ToString(dsOld.Tables[0].Rows[0]["block"]);
                                        rl = Convert.ToDouble(dsOld.Tables[0].Rows[0]["rol"]);
                                        mrpdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["mrpeffdate"]);
                                        dpdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["dpeffdate"]);
                                        nlcdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["nlceffdate"]);
                                        oldmrp = Convert.ToDouble(dsOld.Tables[0].Rows[0]["rate"]);
                                        oldnlc = Convert.ToDouble(dsOld.Tables[0].Rows[0]["nlc"]);
                                        olddp = Convert.ToDouble(dsOld.Tables[0].Rows[0]["dealerrate"]);
                                        NLCEffDate = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["nlceffdate"]);
                                    }
                                }


                                DateTime MRPEffDate = Convert.ToDateTime(dr["MRPEffDate"]);
                                DateTime DPEffDate = Convert.ToDateTime(dr["DPEffDate"]);

                                if (mrpdat == MRPEffDate)
                                {
                                    mrpprevdat = MRPEffDate;
                                }
                                else
                                {
                                    mrpprevdat = MRPEffDate.AddDays(-1);
                                }
                                if (nlcdat == NLCEffDate)
                                {
                                    nlcprevdat = NLCEffDate;
                                }
                                else
                                {
                                    nlcprevdat = NLCEffDate.AddDays(-1);
                                }
                                if (dpdat == DPEffDate)
                                {
                                    dpprevdat = DPEffDate;
                                }
                                else
                                {
                                    dpprevdat = DPEffDate.AddDays(-1);
                                }

                                dbQry = string.Format("UPDATE tblProductMaster SET DealerRate={0}, DPEffDate=Format('{1}', 'dd/mm/yyyy'),dpstartdate=Format('{2}', 'dd/mm/yyyy'),dpenddate=Format('{3}', 'dd/mm/yyyy'),Rate={4}, MRPEffDate=Format('{5}', 'dd/mm/yyyy'),mrpstartdate=Format('{6}', 'dd/mm/yyyy'),mrpenddate=Format('{7}', 'dd/mm/yyyy') where Model = '{8}' ", //Jolo Barcode
                                Convert.ToDouble(dr["DP"]), DPEffDate.ToShortDateString(), dpdat.ToShortDateString(), dpprevdat.ToShortDateString(), Convert.ToDouble(dr["MRP"]), MRPEffDate.ToShortDateString(), mrpdat.ToShortDateString(), mrpprevdat.ToShortDateString(), Convert.ToString(dr["Model"])); //Jolo Barcode

                                manager.ExecuteDataSet(CommandType.Text, dbQry);

                                if ((dpdat == DPEffDate) && (mrpdat == MRPEffDate))
                                {
                                }
                                else
                                {
                                    dbQry2 = string.Format("INSERT INTO tblProducthistory VALUES('{0}','{1}', '{2}',{3},'{4}',{5},{6},{7},{8},'{9}',Format('{10}', 'dd/mm/yyyy'),Format('{11}', 'dd/mm/yyyy'),Format('{12}', 'dd/mm/yyyy'),Format('{13}', 'dd/mm/yyyy'),Format('{14}', 'dd/mm/yyyy'),Format('{15}', 'dd/mm/yyyy'),Format('{16}', 'dd/mm/yyyy'),Format('{17}', 'dd/mm/yyyy'),Format('{18}', 'dd/mm/yyyy'))",
                                        ItCod, PrName, Convert.ToString(dr["Model"]), Cate, Bnd, rl, oldmrp, olddp, oldnlc, blk, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), mrpdat.ToShortDateString(), mrpprevdat.ToShortDateString(), dpdat.ToShortDateString(), dpprevdat.ToShortDateString(), nlcdat.ToShortDateString(), nlcprevdat.ToShortDateString());
                                    manager.ExecuteDataSet(CommandType.Text, dbQry2);
                                }
                            }
                        }
                        else if (type == 6)
                        {
                            if ((Convert.ToString(dr["Model"]) == null) || (Convert.ToString(dr["Model"]) == ""))
                            {

                            }
                            else
                            {

                                DateTime MRPEffDate = Convert.ToDateTime(tim);

                                dbQry = string.Format("INSERT INTO tblAuditProductMaster Select * From tblProductMaster Where Model = '{0}'", Convert.ToString(dr["Model"]));
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                                dbQry3 = string.Format("Select itemcode,productname,productdesc,CategoryId,block,rol,mrpeffdate,dpeffdate,nlceffdate,rate,nlc,dealerrate from tblproductmaster Where Model='{0}' ", Convert.ToString(dr["Model"]));
                                dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry3);
                                if (dsOld != null)
                                {
                                    if (dsOld.Tables.Count > 0)
                                    {
                                        ItCod = Convert.ToString(dsOld.Tables[0].Rows[0]["itemcode"]);
                                        PrName = Convert.ToString(dsOld.Tables[0].Rows[0]["productname"]);
                                        Bnd = Convert.ToString(dsOld.Tables[0].Rows[0]["productdesc"]);
                                        Cate = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CategoryId"]);
                                        blk = Convert.ToString(dsOld.Tables[0].Rows[0]["block"]);
                                        rl = Convert.ToDouble(dsOld.Tables[0].Rows[0]["rol"]);
                                        mrpdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["mrpeffdate"]);
                                        dpdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["dpeffdate"]);
                                        nlcdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["nlceffdate"]);
                                        oldmrp = Convert.ToDouble(dsOld.Tables[0].Rows[0]["rate"]);
                                        oldnlc = Convert.ToDouble(dsOld.Tables[0].Rows[0]["nlc"]);
                                        olddp = Convert.ToDouble(dsOld.Tables[0].Rows[0]["dealerrate"]);
                                        MRPEffDate = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["mrpeffdate"]);
                                    }
                                }


                                DateTime DPEffDate = Convert.ToDateTime(dr["DPEffDate"]);
                                DateTime NLCEffDate = Convert.ToDateTime(dr["NLCEffDate"]);

                                if (mrpdat == MRPEffDate)
                                {
                                    mrpprevdat = MRPEffDate;
                                }
                                else
                                {
                                    mrpprevdat = MRPEffDate.AddDays(-1);
                                }
                                if (nlcdat == NLCEffDate)
                                {
                                    nlcprevdat = NLCEffDate;
                                }
                                else
                                {
                                    nlcprevdat = NLCEffDate.AddDays(-1);
                                }
                                if (dpdat == DPEffDate)
                                {
                                    dpprevdat = DPEffDate;
                                }
                                else
                                {
                                    dpprevdat = DPEffDate.AddDays(-1);
                                }

                                dbQry = string.Format("UPDATE tblProductMaster SET DealerRate={0}, DPEffDate=Format('{1}', 'dd/mm/yyyy'),dpstartdate=Format('{2}', 'dd/mm/yyyy'),dpenddate=Format('{3}', 'dd/mm/yyyy'),NLC={4}, NLCEffDate=Format('{5}', 'dd/mm/yyyy'), nlcstartdate=Format('{6}', 'dd/mm/yyyy'), nlcenddate=Format('{7}', 'dd/mm/yyyy') where Model = '{8}' ", //Jolo Barcode
                                Convert.ToDouble(dr["DP"]), DPEffDate.ToShortDateString(), dpdat.ToShortDateString(), dpprevdat.ToShortDateString(), Convert.ToDouble(dr["NLC"]), NLCEffDate.ToShortDateString(), nlcdat.ToShortDateString(), nlcprevdat.ToShortDateString(), Convert.ToString(dr["Model"])); //Jolo Barcode

                                manager.ExecuteDataSet(CommandType.Text, dbQry);

                                if ((dpdat == DPEffDate) && (nlcdat == NLCEffDate))
                                {
                                }
                                else
                                {
                                    dbQry2 = string.Format("INSERT INTO tblProducthistory VALUES('{0}','{1}', '{2}',{3},'{4}',{5},{6},{7},{8},'{9}',Format('{10}', 'dd/mm/yyyy'),Format('{11}', 'dd/mm/yyyy'),Format('{12}', 'dd/mm/yyyy'),Format('{13}', 'dd/mm/yyyy'),Format('{14}', 'dd/mm/yyyy'),Format('{15}', 'dd/mm/yyyy'),Format('{16}', 'dd/mm/yyyy'),Format('{17}', 'dd/mm/yyyy'),Format('{18}', 'dd/mm/yyyy'))",
                                        ItCod, PrName, Convert.ToString(dr["Model"]), Cate, Bnd, rl, oldmrp, olddp, oldnlc, blk, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), mrpdat.ToShortDateString(), mrpprevdat.ToShortDateString(), dpdat.ToShortDateString(), dpprevdat.ToShortDateString(), nlcdat.ToShortDateString(), nlcprevdat.ToShortDateString());
                                    manager.ExecuteDataSet(CommandType.Text, dbQry2);
                                }
                            }
                        }
                        else if (type == 7)
                        {
                            if ((Convert.ToString(dr["Model"]) == null) || (Convert.ToString(dr["Model"]) == ""))
                            {

                            }
                            else
                            {

                                DateTime DPEffDate = Convert.ToDateTime(tim);

                                dbQry = string.Format("INSERT INTO tblAuditProductMaster Select * From tblProductMaster Where Model = '{0}'", Convert.ToString(dr["Model"]));
                                manager.ExecuteNonQuery(CommandType.Text, dbQry);

                                dbQry3 = string.Format("Select itemcode,productname,productdesc,CategoryId,block,rol,mrpeffdate,dpeffdate,nlceffdate,rate,nlc,dealerrate from tblproductmaster Where Model='{0}' ", Convert.ToString(dr["Model"]));
                                dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry3);
                                if (dsOld != null)
                                {
                                    if (dsOld.Tables.Count > 0)
                                    {
                                        ItCod = Convert.ToString(dsOld.Tables[0].Rows[0]["itemcode"]);
                                        PrName = Convert.ToString(dsOld.Tables[0].Rows[0]["productname"]);
                                        Bnd = Convert.ToString(dsOld.Tables[0].Rows[0]["productdesc"]);
                                        Cate = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CategoryId"]);
                                        blk = Convert.ToString(dsOld.Tables[0].Rows[0]["block"]);
                                        rl = Convert.ToDouble(dsOld.Tables[0].Rows[0]["rol"]);
                                        mrpdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["mrpeffdate"]);
                                        dpdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["dpeffdate"]);
                                        nlcdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["nlceffdate"]);
                                        oldmrp = Convert.ToDouble(dsOld.Tables[0].Rows[0]["rate"]);
                                        oldnlc = Convert.ToDouble(dsOld.Tables[0].Rows[0]["nlc"]);
                                        olddp = Convert.ToDouble(dsOld.Tables[0].Rows[0]["dealerrate"]);
                                        DPEffDate = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["dpeffdate"]);
                                    }
                                }

                                DateTime MRPEffDate = Convert.ToDateTime(dr["MRPEffDate"]);
                                DateTime NLCEffDate = Convert.ToDateTime(dr["NLCEffDate"]);

                                if (mrpdat == MRPEffDate)
                                {
                                    mrpprevdat = MRPEffDate;
                                }
                                else
                                {
                                    mrpprevdat = MRPEffDate.AddDays(-1);
                                }
                                if (nlcdat == NLCEffDate)
                                {
                                    nlcprevdat = NLCEffDate;
                                }
                                else
                                {
                                    nlcprevdat = NLCEffDate.AddDays(-1);
                                }
                                if (dpdat == DPEffDate)
                                {
                                    dpprevdat = DPEffDate;
                                }
                                else
                                {
                                    dpprevdat = DPEffDate.AddDays(-1);
                                }

                                dbQry = string.Format("UPDATE tblProductMaster SET NLC={0}, NLCEffDate=Format('{1}', 'dd/mm/yyyy'), nlcstartdate=Format('{2}', 'dd/mm/yyyy'), nlcenddate=Format('{3}', 'dd/mm/yyyy'),Rate={4}, MRPEffDate=Format('{5}', 'dd/mm/yyyy'),mrpstartdate=Format('{6}', 'dd/mm/yyyy'),mrpenddate=Format('{7}', 'dd/mm/yyyy') where Model = '{8}' ", //Jolo Barcode
                                Convert.ToDouble(dr["NLC"]), NLCEffDate.ToShortDateString(), nlcdat.ToShortDateString(), nlcprevdat.ToShortDateString(), Convert.ToDouble(dr["MRP"]), MRPEffDate.ToShortDateString(), mrpdat.ToShortDateString(), mrpprevdat.ToShortDateString(), Convert.ToString(dr["Model"])); //Jolo Barcode

                                manager.ExecuteDataSet(CommandType.Text, dbQry);

                                if ((nlcdat == NLCEffDate) && (mrpdat == MRPEffDate))
                                {
                                }
                                else
                                {
                                    dbQry2 = string.Format("INSERT INTO tblProducthistory VALUES('{0}','{1}', '{2}',{3},'{4}',{5},{6},{7},{8},'{9}',Format('{10}', 'dd/mm/yyyy'),Format('{11}', 'dd/mm/yyyy'),Format('{12}', 'dd/mm/yyyy'),Format('{13}', 'dd/mm/yyyy'),Format('{14}', 'dd/mm/yyyy'),Format('{15}', 'dd/mm/yyyy'),Format('{16}', 'dd/mm/yyyy'),Format('{17}', 'dd/mm/yyyy'),Format('{18}', 'dd/mm/yyyy'))",
                                        ItCod, PrName, Convert.ToString(dr["Model"]), Cate, Bnd, rl, oldmrp, olddp, oldnlc, blk, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), mrpdat.ToShortDateString(), mrpprevdat.ToShortDateString(), dpdat.ToShortDateString(), dpprevdat.ToShortDateString(), nlcdat.ToShortDateString(), nlcprevdat.ToShortDateString());
                                    manager.ExecuteDataSet(CommandType.Text, dbQry2);
                                }
                            }
                        }
                        else if (type == 8)
                        {
                            if ((Convert.ToString(dr["Model"]) == null) || (Convert.ToString(dr["Model"]) == ""))
                            {

                            }
                            else
                            {
                                //dbQry = string.Format("INSERT INTO tblAuditProductMaster Select * From tblProductMaster Where Model = '{0}'", Convert.ToString(dr["Model"]));
                                //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                                //dbQry = string.Format("UPDATE tblProductMaster SET MinSales={0} where Model = '{1}' ",
                                //Convert.ToInt32(dr["MinSale"]), Convert.ToString(dr["Model"]));

                                manager.ExecuteDataSet(CommandType.Text, dbQry);

                            }
                        }
                        else if (type == 9)
                        {
                            if ((Convert.ToString(dr["Model"]) == null) || (Convert.ToString(dr["Model"]) == ""))
                            {

                            }
                            else
                            {
                                dbQry = string.Format("UPDATE tblProductMaster SET rol={0} where Model = '{1}' ",
                                Convert.ToInt32(dr["StockLevel"]), Convert.ToString(dr["Model"]));

                                manager.ExecuteDataSet(CommandType.Text, dbQry);

                            }
                        }
                        else if (type == 10)
                        {
                            if ((Convert.ToString(dr["Model"]) == null) || (Convert.ToString(dr["Model"]) == ""))
                            {

                            }
                            else
                            {
                                dbQry = string.Format("UPDATE tblProductMaster SET Deviation={0} where Model = '{1}' ",
                                Convert.ToInt32(dr["DEVIATION"]), Convert.ToString(dr["Model"]));

                                manager.ExecuteDataSet(CommandType.Text, dbQry);

                            }
                        }
                        else if (type == 11)
                        {
                            if ((Convert.ToString(dr["Model"]) == null) || (Convert.ToString(dr["Model"]) == ""))
                            {

                            }
                            else
                            {
                                dbQry = string.Format("UPDATE tblProductMaster SET OUTDATED='{0}' where Model = '{1}' ",
                                Convert.ToString(dr["OUTDATED"]), Convert.ToString(dr["Model"]));

                                manager.ExecuteDataSet(CommandType.Text, dbQry);

                            }
                        }
                    }
                }
            }

            sAuditStr = "Products updated. Record Details :  User :" + Username + " DateTime: " + DateTime.Now.ToString();
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Update", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetAllMasters(string connection, string master, string sLedger)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();

            if (master == "Category")
            {
                dbQry2 = "select * from tblcategories order by categoryid";
            }
            else if (master == "Brand")
            {
                dbQry2 = "select * from tblbrand order by brandid";
            }
            else if (master == "Product")
            {
                dbQry2 = "select * from tblproductstock where stock > 0 order by itemcode";
            }
            else if (master == "Users")
            {
                dbQry2 = "select * from tblUserInfo order by Userid";
            }
            else if (master == "UserRole")
            {
                dbQry2 = "select * from tblUserRole order by username";
            }
            else if (master == "UserOptions")
            {
                dbQry2 = "select * from tblUserOptions order by username";
            }
            else if (master == "Lead")
            {
                dbQry2 = "select * from tblLeadReferences order by id";
            }
            else if (master == "StockProducts")
            {
                dbQry2 = "select * from tblproductmaster where stock > 0 order by itemcode";
            }
            else if (master == "Expenses")
            {
                dbQry2 = "select * from tblLedger Where GroupId = 8 and ledgername <> 'VAT A/c' Order By Ledgerid";
            }
            else if (master == "Suppliers")
            {
                dbQry2 = "select * from tblLedger Where GroupId = 2 Order By Ledgerid";
            }
            else if (master == "Ledgers")
            {
                dbQry2 = "select * from tblLedger Where GroupId in (14,16) Order By Ledgerid";
            }
            else if (master == "Customers")
            {
                //dbQry2 = "select * from tblLedger Where GroupId = 1 and ledgername  = '" + sLedger + "' Order By Ledgerid";
                dbQry2 = "select * from tblLedger Where GroupId = 1 and " + sLedger + " Order By Ledgerid";
            }
            else if (master == "Banks")
            {
                dbQry2 = "select * from tblLedger Where GroupId = 3 Order By Ledgerid";
            }
            else if (master == "FixedAsetAndIndInc")
            {
                dbQry2 = "select * from tblLedger Where GroupId In (19,17) Order By Ledgerid";
            }
            else if (master == "Company")
            {
                dbQry2 = "select * from tblCompanyInfo Order By CompanyName";
            }
            else if (master == "Division")
            {
                dbQry2 = "select * from tblDivisions Order By DivisionId";
            }
            else if (master == "Employee")
            {
                dbQry2 = "select * from tblEmployee Order By EmpNo";
            }
            else if (master == "Settings")
            {
                dbQry2 = "select * from tblSettings Order By Key";
            }
            else if (master == "Image")
            {
                dbQry2 = "select * from imagespath";
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public void InsertYearEndUpdation(string connection, string Path, string YearName, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("Delete from tblYearEnd");

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("INSERT INTO tblYearEnd(Path,YearName) VALUES('{0}','{1}')",
                Path, YearName);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetYearEndUpdation(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();

            dbQry2 = "select * from tblYearEnd";

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public void UpdateYearEndUpdation(string connection, string Path, string YearName, string Username, string Type)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            if (Type == "Master")
            {
                dbQry = string.Format("Update tblYearEnd SET MastUpd = 'Y' ");
            }
            else if (Type == "User")
            {
                dbQry = string.Format("Update tblYearEnd SET UserUpd = 'Y' ");
            }

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet YearEndOutStandingReportCustomer(int iGroupID, string sXmlNodeName, string connection, string sXmlPath)
    {
        Decimal temp_balance;
        string sLedgerName = string.Empty, sConStr = string.Empty, sAliasName = string.Empty, sQry = string.Empty;
        string sLedgerId = string.Empty;
        string sLedgerPhone = string.Empty;
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        sConStr = connection;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        //sQry = "SELECT tblLedger.ContactName,tblLedger.mobile,tblLedger.chequename,tblLedger.Add1, tblLedger.Add2, tblLedger.Add3, tblLedger.Phone,tblLedger.BelongsTo,tblLedger.LedgerCategory,tblLedger.ExecutiveIncharge,tblLedger.TinNumber,tblLedger.CreditLimit,tblLedger.CreditDays,tblLedger.Paymentmade,tblLedger.dc,tblLedger.inttrans,tblLedger.Unuse,tblLedger.SFNo,tblLedger.LedgerID,tblLedger.LedgerName,tblLedger.groupid,tblLedger.AliasName, (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as balance FROM (tblLedger   left  join (SELECT DebtorID,sum(Amount) as debitamount FROM tblDayBook WHERE DebtorID > 0 group by DebtorID) debittable  on tblLedger.LedgerID=debittable.DebtorID) left join (SELECT CreditorID,sum(Amount) as creditamount FROM tblDayBook WHERE CreditorID > 0 group by CreditorID) credittable on tblLedger.LedgerID= credittable.CreditorID where GroupID in (1) and tblledger.inttrans = 'NO' and tblledger.dc = 'NO' and (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) <> 0 ORDER BY tblLedger.LedgerName";

        sQry = "SELECT tblLedger.ContactName,tblLedger.mobile,tblLedger.chequename,tblLedger.Add1, tblLedger.Add2, tblLedger.Add3, tblLedger.Phone,tblLedger.BelongsTo,tblLedger.LedgerCategory,tblLedger.ExecutiveIncharge,tblLedger.TinNumber,tblLedger.CreditLimit,tblLedger.CreditDays,tblLedger.Paymentmade,tblLedger.dc,tblLedger.inttrans,tblLedger.Unuse,tblLedger.SFNo,tblLedger.LedgerID,tblLedger.LedgerName,tblLedger.groupid,tblLedger.AliasName, (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as balance FROM (tblLedger   left  join (SELECT DebtorID,sum(Amount) as debitamount FROM tblDayBook WHERE DebtorID > 0 group by DebtorID) debittable  on tblLedger.LedgerID=debittable.DebtorID) left join (SELECT CreditorID,sum(Amount) as creditamount FROM tblDayBook WHERE CreditorID > 0 group by CreditorID) credittable on tblLedger.LedgerID= credittable.CreditorID where GroupID in (1) and tblledger.inttrans = 'NO' and tblledger.dc = 'NO' ORDER BY tblLedger.LedgerName";

        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsParentQry = new DataSet();
        oleAdp.Fill(dsParentQry);
        temp_balance = 0;
        DataSet ds;
        DataTable dt;
        DataRow drNew;
        DataColumn dc;
        ds = new DataSet();
        dt = new DataTable();
        dc = new DataColumn("LedgerName");
        dt.Columns.Add(dc);
        dc = new DataColumn("LedgerID");
        dt.Columns.Add(dc);
        dc = new DataColumn("Phone");
        dt.Columns.Add(dc);
        dc = new DataColumn("AliasName");
        dt.Columns.Add(dc);
        dc = new DataColumn("Debit");
        dt.Columns.Add(dc);
        dc = new DataColumn("Credit");
        dt.Columns.Add(dc);
        dc = new DataColumn("ContactName");
        dt.Columns.Add(dc);
        dc = new DataColumn("mobile");
        dt.Columns.Add(dc);
        dc = new DataColumn("chequename");
        dt.Columns.Add(dc);
        dc = new DataColumn("Add1");
        dt.Columns.Add(dc);
        dc = new DataColumn("Add2");
        dt.Columns.Add(dc);
        dc = new DataColumn("Add3");
        dt.Columns.Add(dc);
        dc = new DataColumn("BelongsTo");
        dt.Columns.Add(dc);
        dc = new DataColumn("LedgerCategory");
        dt.Columns.Add(dc);
        dc = new DataColumn("ExecutiveIncharge");
        dt.Columns.Add(dc);
        dc = new DataColumn("TinNumber");
        dt.Columns.Add(dc);
        dc = new DataColumn("CreditLimit");
        dt.Columns.Add(dc);
        dc = new DataColumn("Dc");
        dt.Columns.Add(dc);
        dc = new DataColumn("Paymentmade");
        dt.Columns.Add(dc);
        dc = new DataColumn("CreditDays");
        dt.Columns.Add(dc);
        dc = new DataColumn("Inttrans");
        dt.Columns.Add(dc);
        dc = new DataColumn("unuse");
        dt.Columns.Add(dc);
        dc = new DataColumn("sfno");
        dt.Columns.Add(dc);
        dc = new DataColumn("groupid");
        dt.Columns.Add(dc);
        ds.Tables.Add(dt);
        try
        {
            if (dsParentQry.Tables[0].Rows.Count == 0)
            {
                drNew = dt.NewRow();
                drNew["LedgerName"] = string.Empty;
                drNew["AliasName"] = string.Empty;
                drNew["LedgerID"] = string.Empty;
                drNew["Phone"] = string.Empty;
                drNew["Debit"] = "0.00";
                drNew["Credit"] = "0.00";

                drNew["ContactName"] = string.Empty;
                drNew["ChequeName"] = string.Empty;
                drNew["dc"] = string.Empty;
                drNew["paymentmade"] = string.Empty;
                drNew["inttrans"] = string.Empty;
                drNew["sfno"] = string.Empty;
                drNew["add1"] = string.Empty;
                drNew["add2"] = string.Empty;
                drNew["add3"] = string.Empty;
                drNew["unuse"] = string.Empty;
                drNew["groupid"] = 0;
                drNew["mobile"] = string.Empty;
                drNew["phone"] = string.Empty;
                drNew["ledgercategory"] = string.Empty;
                drNew["tinnumber"] = string.Empty;
                drNew["executiveincharge"] = 0;

                ds.Tables[0].Rows.Add(drNew);
            }
            else
            {
                foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
                {
                    if (drParentQry["LedgerName"] != null)
                        sLedgerName = drParentQry["LedgerName"].ToString();
                    if (drParentQry["AliasName"] != null)
                        sAliasName = drParentQry["AliasName"].ToString();
                    if (drParentQry["LedgerID"] != null)
                        sLedgerId = drParentQry["LedgerID"].ToString();
                    if (drParentQry["Phone"] != null)
                        sLedgerPhone = drParentQry["Phone"].ToString();
                    if ((drParentQry["balance"] != null) && (drParentQry["balance"].ToString() != ""))
                        temp_balance = decimal.Parse(drParentQry["balance"].ToString(), System.Globalization.NumberStyles.Float);
                    else
                        temp_balance = 0;
                    if (temp_balance > 0)
                    {
                        drNew = dt.NewRow();
                        drNew["LedgerName"] = sLedgerName;
                        drNew["AliasName"] = sAliasName;
                        drNew["LedgerID"] = sLedgerId;
                        drNew["Phone"] = sLedgerPhone;
                        drNew["Debit"] = temp_balance;
                        drNew["Credit"] = "0.00";

                        drNew["ContactName"] = drParentQry["ContactName"].ToString();
                        drNew["ChequeName"] = drParentQry["ChequeName"].ToString();
                        drNew["dc"] = drParentQry["dc"].ToString();
                        drNew["paymentmade"] = drParentQry["paymentmade"].ToString();
                        drNew["inttrans"] = drParentQry["inttrans"].ToString();
                        drNew["sfno"] = drParentQry["sfno"].ToString();
                        drNew["add1"] = drParentQry["add1"].ToString();
                        drNew["add2"] = drParentQry["add2"].ToString();
                        drNew["add3"] = drParentQry["add3"].ToString();
                        drNew["unuse"] = drParentQry["unuse"].ToString();
                        drNew["groupid"] = Convert.ToInt32(drParentQry["groupid"]);
                        drNew["mobile"] = drParentQry["mobile"].ToString();
                        drNew["ledgercategory"] = drParentQry["ledgercategory"].ToString();
                        drNew["tinnumber"] = drParentQry["tinnumber"].ToString();
                        drNew["executiveincharge"] = Convert.ToInt32(drParentQry["executiveincharge"]);

                        ds.Tables[0].Rows.Add(drNew);
                    }
                    else
                    {
                        drNew = dt.NewRow();
                        drNew["LedgerName"] = sLedgerName;
                        drNew["AliasName"] = sAliasName;
                        drNew["LedgerID"] = sLedgerId;
                        drNew["Phone"] = sLedgerPhone;
                        drNew["Debit"] = "0.00";
                        drNew["Credit"] = Math.Abs(temp_balance).ToString(); /* convert the negative to positive */

                        drNew["ContactName"] = drParentQry["ContactName"].ToString();
                        drNew["ChequeName"] = drParentQry["ChequeName"].ToString();
                        drNew["dc"] = drParentQry["dc"].ToString();
                        drNew["paymentmade"] = drParentQry["paymentmade"].ToString();
                        drNew["inttrans"] = drParentQry["inttrans"].ToString();
                        drNew["sfno"] = drParentQry["sfno"].ToString();
                        drNew["add1"] = drParentQry["add1"].ToString();
                        drNew["add2"] = drParentQry["add2"].ToString();
                        drNew["add3"] = drParentQry["add3"].ToString();
                        drNew["unuse"] = drParentQry["unuse"].ToString();
                        drNew["groupid"] = Convert.ToInt32(drParentQry["groupid"]);
                        drNew["mobile"] = drParentQry["mobile"].ToString();
                        drNew["ledgercategory"] = drParentQry["ledgercategory"].ToString();
                        drNew["tinnumber"] = drParentQry["tinnumber"].ToString();
                        drNew["executiveincharge"] = Convert.ToInt32(drParentQry["executiveincharge"]);

                        ds.Tables[0].Rows.Add(drNew);
                    }
                }
            }
            oleConn.Close();
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet YearEndOutStandingReportNew(int iGroupID, string sXmlNodeName, string connection, string sXmlPath)
    {
        Decimal temp_balance;
        string sLedgerName = string.Empty, sConStr = string.Empty, sAliasName = string.Empty, sQry = string.Empty;
        string sLedgerId = string.Empty;
        string sLedgerPhone = string.Empty;
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        sConStr = connection;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        sQry = "SELECT tblLedger.LedgerID,tblLedger.LedgerName,tblLedger.phone,tblLedger.AliasName, (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as balance FROM (tblLedger   left  join (SELECT DebtorID,sum(Amount) as debitamount FROM tblDayBook WHERE DebtorID > 0 group by DebtorID) debittable  on tblLedger.LedgerID=debittable.DebtorID) left join (SELECT CreditorID,sum(Amount) as creditamount FROM tblDayBook WHERE CreditorID > 0 group by CreditorID) credittable on tblLedger.LedgerID= credittable.CreditorID where GroupID in (4,19) and tblledger.inttrans = 'NO' and tblledger.dc = 'NO' and (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) <> 0 ORDER BY tblLedger.LedgerName";
        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsParentQry = new DataSet();
        oleAdp.Fill(dsParentQry);
        temp_balance = 0;
        DataSet ds;
        DataTable dt;
        DataRow drNew;
        DataColumn dc;
        ds = new DataSet();
        dt = new DataTable();
        dc = new DataColumn("LedgerName");
        dt.Columns.Add(dc);
        dc = new DataColumn("LedgerID");
        dt.Columns.Add(dc);
        dc = new DataColumn("Phone");
        dt.Columns.Add(dc);
        dc = new DataColumn("AliasName");
        dt.Columns.Add(dc);
        dc = new DataColumn("Debit");
        dt.Columns.Add(dc);
        dc = new DataColumn("Credit");
        dt.Columns.Add(dc);
        ds.Tables.Add(dt);
        try
        {
            if (dsParentQry.Tables[0].Rows.Count == 0)
            {
                drNew = dt.NewRow();
                drNew["LedgerName"] = string.Empty;
                drNew["AliasName"] = string.Empty;
                drNew["LedgerID"] = string.Empty;
                drNew["Phone"] = string.Empty;
                drNew["Debit"] = "0.00";
                drNew["Credit"] = "0.00";
                ds.Tables[0].Rows.Add(drNew);
            }
            else
            {
                foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
                {
                    if (drParentQry["LedgerName"] != null)
                        sLedgerName = drParentQry["LedgerName"].ToString();
                    if (drParentQry["AliasName"] != null)
                        sAliasName = drParentQry["AliasName"].ToString();
                    if (drParentQry["LedgerID"] != null)
                        sLedgerId = drParentQry["LedgerID"].ToString();
                    if (drParentQry["Phone"] != null)
                        sLedgerPhone = drParentQry["Phone"].ToString();
                    if ((drParentQry["balance"] != null) && (drParentQry["balance"].ToString() != ""))
                        temp_balance = decimal.Parse(drParentQry["balance"].ToString(), System.Globalization.NumberStyles.Float);
                    else
                        temp_balance = 0;
                    if (temp_balance > 0)
                    {
                        drNew = dt.NewRow();
                        drNew["LedgerName"] = sLedgerName;
                        drNew["AliasName"] = sAliasName;
                        drNew["LedgerID"] = sLedgerId;
                        drNew["Phone"] = sLedgerPhone;
                        drNew["Debit"] = temp_balance;
                        drNew["Credit"] = "0.00";
                        ds.Tables[0].Rows.Add(drNew);
                    }
                    else
                    {
                        drNew = dt.NewRow();
                        drNew["LedgerName"] = sLedgerName;
                        drNew["AliasName"] = sAliasName;
                        drNew["LedgerID"] = sLedgerId;
                        drNew["Phone"] = sLedgerPhone;
                        drNew["Debit"] = "0.00";
                        drNew["Credit"] = Math.Abs(temp_balance).ToString(); /* convert the negative to positive */
                        ds.Tables[0].Rows.Add(drNew);
                    }
                }
            }
            oleConn.Close();
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public double getOpeningStockPurchase(string sDataSource, string itemCode, DateTime sDate)
    {
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        string sQry = string.Empty;
        string sConStr = string.Empty;


        /* Start Ms Access Database Connection Information */
        sConStr = sDataSource;  //"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource + ";User Id=admin;Jet OLEDB:Database Password=moonmoon"; ;
        //sConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + sDataSource + ";User Id=admin;Password=moonmoon;Jet OLEDB:System Database=C:\\Program Files\\Microsoft Office\\Office\\SYSTEM.MDW;";
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleConn.Open();
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        /* Start DB Query Processing - Getting the Details of the Ledger int the Daybook */
        sQry = "SELECT SUM(qty) FROM tblPurchaseItems,tblPurchase WHERE tblPurchase.PurchaseID = tblPurchaseItems.purchaseID AND ItemCode ='" + itemCode + "' AND Invoicedate <#" + sDate.ToString("MM/dd/yyyy") + "#";


        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;

        double cnt = 0;
        object retVal = oleCmd.ExecuteScalar();
        if ((retVal != null) && (retVal != DBNull.Value))
        {
            cnt = Convert.ToDouble(oleCmd.ExecuteScalar());


        }
        oleConn.Close();
        return cnt;
    }

    public void RunQuerySQL(string connection, string sQl)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;

        try
        {
            manager.Open();

            dbQry = sQl;
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet getdetails(string sDataSource, DateTime NewDate, string types)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;

        string dbQry2 = string.Empty;
        string sQry = string.Empty;
        string oQry = string.Empty;
        string sConStr = string.Empty;
        string tQry = string.Empty;
        string pQry = string.Empty;

        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dso, dsSales, dsPurcahse;
        oleCmd = new SqlCommand();

        Double closestock;

        try
        {
            manager.Open();

            if (types == "Purchase")
            {
                dbQry = ("SELECT sum((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as amount,sum(tblPurchaseItems.Qty) as qty,tblProductMaster.productname FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.InvoiceDate=#" + NewDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('no','NO') and tblPurchase.DeliveryNote in ('no','NO') group by tblProductMaster.productname");
            }
            else if (types == "Sales")
            {
                dbQry = ("SELECT sum((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as amount,sum(tblSalesItems.Qty) as qty,tblProductMaster.productname FROM  ((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblSales.billdate=#" + NewDate.ToString("MM/dd/yyyy") + "#  and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') group by tblProductMaster.productname");
            }
            else if (types == "SalRet")
            {
                dbQry = ("SELECT sum((((tblPurchaseItems.Qty * tblPurchaseItems.PurchaseRate) - ((tblPurchaseItems.discount/100)*tblPurchaseItems.qty*tblPurchaseItems.PurchaseRate) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)- ((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.VAT/100) + (((tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)-((tblPurchaseItems.discount/100)*tblPurchaseItems.Qty*tblPurchaseItems.PurchaseRate)) * tblPurchaseItems.CST/100)))) as amount,sum(tblPurchaseItems.Qty) as qty,tblProductMaster.productname FROM  ((tblPurchase INNER JOIN tblPurchaseItems ON tblPurchase.purchaseid = tblPurchaseItems.purchaseid) inner join tblProductMaster on tblPurchaseItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblPurchase.InvoiceDate=#" + NewDate.ToString("MM/dd/yyyy") + "# and tblPurchase.InternalTransfer in ('no','NO') and tblPurchase.salesReturn in ('yes','YES') and tblPurchase.DeliveryNote in ('no','NO') group by tblProductMaster.productname");
            }
            else if (types == "PurRet")
            {
                dbQry = ("SELECT sum((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as amount,sum(tblSalesItems.Qty) as qty,tblProductMaster.productname FROM  ((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblSales.billdate=#" + NewDate.ToString("MM/dd/yyyy") + "#  and tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('yes','YES') and tblsales.DeliveryNote in ('no','NO') group by tblProductMaster.productname");
            }

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet ListPaymentCustomersId(string connection, int CustomerId)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();


        try
        {
            manager.Open();

            dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo, Payment.Paymode FROM  ((((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
            dbQry.Append("tblPayment Payment ON tblDayBook.TransNo = Payment.JournalID) INNER JOIN tblGroups G ON debitor.GroupID = G.GroupID) ");
            dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Payment' and debitor.LedgerId = {0} ", CustomerId);
            dbQry.Append(" AND G.GroupName = 'Sundry Debtors' ");
            dbQry.Append("Order By tblDayBook.TransDate Desc");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet Getinstalldetails(int BillNo)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = "select * From tblInstallmentDetails Where slno=" + BillNo;

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetinstalldetailsForDate(DateTime NewDate, string types)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        if (types == "ECS")
        {
            dbQry = "select tblInstallmentDetails.duedate,tblInstallmentDetails.Branchcode,tblInstallmentDetails.slno,tblInstallmentDetails.chequeno,tblInstallmentDetails.narration,tblInstallmentDetails.amount,tblInstallmentDetails.customerid,tblhirepurchase.customername,tblhirepurchase.BankId,tblhirepurchase.paymentmode From tblInstallmentDetails inner join tblhirepurchase on tblInstallmentDetails.slno = tblhirepurchase.slno WHERE tblInstallmentDetails.DueDate<='" + NewDate.ToString("yyyy-MM-dd") + "' and tblInstallmentDetails.cancelled ='N' and tblhirepurchase.paymentmode = 3 ";
        }
        else if (types == "Cheque")
        {
            dbQry = "select tblInstallmentDetails.duedate,tblInstallmentDetails.Branchcode,tblInstallmentDetails.slno,tblInstallmentDetails.chequeno,tblInstallmentDetails.narration,tblInstallmentDetails.amount,tblInstallmentDetails.customerid,tblhirepurchase.customername,tblhirepurchase.BankId,tblhirepurchase.paymentmode From tblInstallmentDetails inner join tblhirepurchase on tblInstallmentDetails.slno = tblhirepurchase.slno WHERE tblInstallmentDetails.DueDate<='" + NewDate.ToString("yyyy-MM-dd") + "' and tblInstallmentDetails.cancelled ='N' and tblhirepurchase.paymentmode = 2 ";
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListReceiptsHire(string connection)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            manager.Open();

            dbQry.Append("SELECT  tblDayBook.TransNo,tblDayBook.Branchcode,tblDayBook.TransDate, Creditor.LedgerName, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType, tblDayBook.RefNo, tblDayBook.ChequeNo, Receipt.Paymode FROM  ((((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
            dbQry.Append("tblReceipt Receipt ON tblDayBook.TransNo = Receipt.JournalID) INNER JOIN tblGroups G ON Creditor.GroupID = G.GroupID) ");
            dbQry.AppendFormat("Where tblDayBook.VoucherType= 'Receipt' ");
            dbQry.Append("Order By tblDayBook.TransDate Desc");


            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public void InsertBulkCustReceipt(string connection, DataSet ds, string usernam)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        //DataSet ds = new DataSet();
        string dbQry = string.Empty;

        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {

            //if (!IsValidDate(connection, TransDate))
            //{
            //    throw new Exception("Invalid Date");
            //}
            int DebitorID = 0;

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            if (ds != null)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {

                    int cid = 0;
                    if (Convert.ToString(dr["Paymode"]) == "Cash")
                    {
                        cid = getCashACLedgerId(connection, dr["Branchcode"].ToString());
                        DebitorID = cid;
                    }
                    else
                    {
                        DebitorID = Convert.ToInt32(dr["DebitorID"]);
                    }


                    dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo,Branchcode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},{8},'{9}')",
                    Convert.ToDateTime(dr["TransDate"]).ToString("yyyy-MM-dd"), DebitorID, Convert.ToInt32(dr["CreditorID"]), Convert.ToDouble(dr["Amount"]), dr["Narration"].ToString(), dr["VoucherType"].ToString(), dr["ChequeNo"].ToString(), 0, Convert.ToInt32(dr["RefNo"]), dr["Branchcode"].ToString());

                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    int TransNo = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));


                    dbQry = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode,Branchcode) Values({0},{1},'{2}','{3}')", Convert.ToInt32(dr["CreditorID"]), TransNo, dr["Paymode"].ToString(), dr["Branchcode"].ToString());

                    manager.ExecuteNonQuery(CommandType.Text, dbQry);
                }
            }

            //sAuditStr = "Receipt Transaction: " + TransNo + " added. Record Details : User=" + usernam + "Ref No=" + RefNo + " DebtorID=" + DebitorID + ",CreditorID=" + CreditorID + ",Amount=" + Amount + " Trans No :" + TransNo + " DateTime:" + DateTime.Now.ToString();

            //dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Add New", DateTime.Now.ToString());
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetReceiptForHireId(string connection, int Slno, int CustomerId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            dbQry.Append("SELECT  tblDayBook.TransNo, tblDayBook.TransDate, Creditor.LedgerName,tblDayBook.CreditorID,tblDayBook.DebtorID,Creditor.Mobile, Debitor.LedgerName AS Debi, tblDayBook.Amount, tblDayBook.Narration, ");
            dbQry.Append("tblDayBook.VoucherType,Receipt.ReceiptNo, tblDayBook.RefNo, tblDayBook.ChequeNo, Receipt.Paymode, Receipt.TypeId FROM  (((tblDayBook INNER JOIN ");
            dbQry.Append("tblLedger Debitor ON tblDayBook.DebtorID = Debitor.LedgerID) INNER JOIN  tblLedger Creditor ON tblDayBook.CreditorID = Creditor.LedgerID) LEFT JOIN ");
            dbQry.Append(" tblReceipt Receipt ON tblDayBook.TransNo = Receipt.JournalID)");
            dbQry.AppendFormat("Where tblDayBook.VoucherType = 'Receipt' and tblDayBook.RefNo = {0} and tblDayBook.CreditorID = {1}", Slno, CustomerId);

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public bool IsBillFoundInHire(string connection, string billnonew, string types)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        try
        {
            if (types == "Billno")
            {
                dbQry = string.Format("Select billnonew from tblHirePurchase Where billnonew= '" + billnonew + "' ");
            }
            else if (types == "branchref")
            {
                dbQry = string.Format("Select branchrefno from tblHirePurchase Where branchrefno= '" + billnonew + "' ");
            }

            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        catch (Exception ex)
        {
            return false;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet generateHireOutStandingReportDSe(int iGroupID, string sDataSource, DateTime startDate)
    {

        Decimal temp_balance;
        string sLedgerName = string.Empty, sConStr = string.Empty, sAliasName = string.Empty, sQry = string.Empty;
        string sLedgerId = string.Empty;
        string sLedgerPhone = string.Empty;
        string sLedgerbranch = string.Empty;
        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dsParentQry;
        sConStr = sDataSource;
        oleConn = new SqlConnection(CreateConnectionString(sConStr));
        oleCmd = new SqlCommand();
        oleCmd.Connection = oleConn;
        //sQry = "SELECT tblLedger.LedgerID,tblLedger.LedgerName,tblLedger.phone,tblLedger.AliasName, (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as balance FROM (tblLedger   left  join (SELECT DebtorID,sum(Amount) as debitamount FROM tblDayBook WHERE tblDayBook.TransDate >=#" + startDate.ToString("MM/dd/yyyy") + "# AND tblDayBook.TransDate<=#" + endDate.ToString("MM/dd/yyyy") + "# and  DebtorID > 0 group by DebtorID) debittable  on tblLedger.LedgerID=debittable.DebtorID) left join (SELECT CreditorID,sum(Amount) as creditamount FROM tblDayBook WHERE tblDayBook.TransDate >=#" + startDate.ToString("MM/dd/yyyy") + "# AND tblDayBook.TransDate<=#" + endDate.ToString("MM/dd/yyyy") + "# and  CreditorID > 0 group by CreditorID) credittable on tblLedger.LedgerID= credittable.CreditorID where GroupID=" + iGroupID + " and tblledger.inttrans = 'NO' and tblledger.dc = 'NO' and (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) <> 0 ORDER BY tblLedger.LedgerName";

        //sQry = "SELECT tblLedger.LedgerID,tblLedger.LedgerName,tblLedger.phone,tblLedger.mobile,tblLedger.AliasName, (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) as balance FROM (tblLedger   left  join (SELECT DebtorID,sum(Amount) as debitamount FROM tblDayBook WHERE DebtorID > 0 group by DebtorID) debittable  on tblLedger.LedgerID=debittable.DebtorID) left join (SELECT CreditorID,sum(Amount) as creditamount FROM tblDayBook WHERE CreditorID > 0 group by CreditorID) credittable on tblLedger.LedgerID= credittable.CreditorID where GroupID = 1 and tblledger.inttrans = 'NO' and tblledger.dc = 'NO' and (IIF(ISNULL(tblLedger.OpenBalanceDR),0,tblLedger.OpenBalanceDR)+ IIF(ISNULL(debittable.debitamount),0,debittable.debitamount)) - (IIF(ISNULL(tblLedger.OpenBalanceCR),0,tblLedger.OpenBalanceCR)+ IIF(ISNULL(credittable.creditamount),0,credittable.creditamount)) <> 0 ORDER BY tblLedger.LedgerName";

        sQry = "SELECT tblLedger.LedgerID,tblLedger.LedgerName,tblLedger.phone,tblLedger.mobile,tblLedger.AliasName,tblLedger.BranchCode, (IIF((tblLedger.OpenBalanceDR IS NULL),0,tblLedger.OpenBalanceDR)+ IIF((debittable.debitamount IS NULL),0,debittable.debitamount)) - (IIF((tblLedger.OpenBalanceCR IS NULL),0,tblLedger.OpenBalanceCR)+ IIF((credittable.creditamount IS NULL),0,credittable.creditamount)) as balance FROM (tblLedger   left  join (SELECT DebtorID,sum(Amount) as debitamount FROM tblDayBook WHERE tblDayBook.TransDate<='" + startDate.ToString("yyyy-MM-dd") + "' and DebtorID > 0 group by DebtorID) debittable  on tblLedger.LedgerID=debittable.DebtorID) left join (SELECT CreditorID,sum(Amount) as creditamount FROM tblDayBook WHERE tblDayBook.TransDate<='" + startDate.ToString("MM/dd/yyyy") + "' and CreditorID > 0 group by CreditorID) credittable on tblLedger.LedgerID= credittable.CreditorID where GroupID = 1 and tblledger.inttrans = 'NO' and tblledger.dc = 'NO' and (IIF((tblLedger.OpenBalanceDR IS NULL),0,tblLedger.OpenBalanceDR)+ IIF((debittable.debitamount IS NULL),0,debittable.debitamount)) - (IIF((tblLedger.OpenBalanceCR IS NULL),0,tblLedger.OpenBalanceCR)+ IIF((credittable.creditamount IS NULL),0,credittable.creditamount)) <> 0 ORDER BY tblLedger.LedgerName";

        oleCmd.CommandText = sQry;
        oleCmd.CommandType = CommandType.Text;
        oleAdp = new SqlDataAdapter(oleCmd);
        dsParentQry = new DataSet();
        oleAdp.Fill(dsParentQry);
        temp_balance = 0;
        DataSet ds;
        DataTable dt;
        DataRow drNew;
        DataColumn dc;
        ds = new DataSet();
        dt = new DataTable();
        dc = new DataColumn("LedgerName");
        dt.Columns.Add(dc);
        dc = new DataColumn("LedgerID");
        dt.Columns.Add(dc);
        dc = new DataColumn("Mobile");
        dt.Columns.Add(dc);
        dc = new DataColumn("AliasName");
        dt.Columns.Add(dc);
        dc = new DataColumn("Debit");
        dt.Columns.Add(dc);
        dc = new DataColumn("Credit");
        dt.Columns.Add(dc);
        dc = new DataColumn("BranchCode");
        dt.Columns.Add(dc);
        ds.Tables.Add(dt);
        try
        {
            if (dsParentQry.Tables[0].Rows.Count == 0)
            {
                drNew = dt.NewRow();
                drNew["LedgerName"] = string.Empty;
                drNew["AliasName"] = string.Empty;
                drNew["LedgerID"] = string.Empty;
                drNew["Mobile"] = string.Empty;
                drNew["BranchCode"] = string.Empty;
                drNew["Debit"] = "0.00";
                drNew["Credit"] = "0.00";
                ds.Tables[0].Rows.Add(drNew);
            }
            else
            {
                foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
                {
                    if (drParentQry["LedgerName"] != null)
                        sLedgerName = drParentQry["LedgerName"].ToString();
                    if (drParentQry["AliasName"] != null)
                        sAliasName = drParentQry["AliasName"].ToString();
                    if (drParentQry["LedgerID"] != null)
                        sLedgerId = drParentQry["LedgerID"].ToString();
                    if (drParentQry["Mobile"] != null)
                        sLedgerPhone = drParentQry["Mobile"].ToString();
                    if (drParentQry["BranchCode"] != null)
                        sLedgerbranch = drParentQry["BranchCode"].ToString();
                    if ((drParentQry["balance"] != null) && (drParentQry["balance"].ToString() != ""))
                        temp_balance = decimal.Parse(drParentQry["balance"].ToString(), System.Globalization.NumberStyles.Float);
                    else
                        temp_balance = 0;
                    if (temp_balance > 0)
                    {
                        drNew = dt.NewRow();
                        drNew["LedgerName"] = sLedgerName;
                        drNew["AliasName"] = sAliasName;
                        drNew["LedgerID"] = sLedgerId;
                        drNew["Mobile"] = sLedgerPhone;
                        drNew["Branchcode"] = sLedgerbranch;
                        drNew["Debit"] = temp_balance;
                        drNew["Credit"] = "0.00";
                        ds.Tables[0].Rows.Add(drNew);
                    }
                    else
                    {
                        drNew = dt.NewRow();
                        drNew["LedgerName"] = sLedgerName;
                        drNew["AliasName"] = sAliasName;
                        drNew["LedgerID"] = sLedgerId;
                        drNew["Mobile"] = sLedgerPhone;
                        drNew["Branchcode"] = sLedgerbranch;
                        drNew["Debit"] = "0.00";
                        drNew["Credit"] = Math.Abs(temp_balance).ToString(); /* convert the negative to positive */
                        ds.Tables[0].Rows.Add(drNew);
                    }
                }
            }
            oleConn.Close();
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet getRateInfo(string itemcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string PRICEName = string.Empty;
        DataSet dsd = new DataSet();
        string dbQ = string.Empty;

        try
        {
            manager.Open();

            dbQ = "SELECT KeyValue From tblSettings WHERE KEYNAME='PRICE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                PRICEName = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            dbQry = "SELECT tblproductprices.price as dealerrate,tblbrand.deviation FROM (tblProductMaster inner join tblbrand on tblProductMaster.productdesc = tblbrand.brandname) inner join tblproductprices on tblProductMaster.itemCode = tblproductprices.itemCode Where tblProductMaster.itemcode ='" + itemcode + "' and tblproductprices.Pricename = '" + PRICEName + "' ";

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void InsertUnitRecord(string sQl, string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        int retValue = 0;

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string dbQ = string.Empty;

        try
        {
            dbQry = sQl;
            manager.Open();

            retValue = manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetEmployeeDetailByUserID(string sUserID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        String searchStr = string.Empty;

        if (sUserID != string.Empty)
        {
            dbQry.Append("SELECT tblUserInfo.UserID, tblUserInfo.UserName, tblUserInfo.UserGroup, tblUserInfo.Empno from tblUserInfo ");
            dbQry.Append("WHERE tblUserInfo.UserID='" + sUserID + "'");
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet GetTimeSheetRangeLookup()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        String searchStr = string.Empty;

        dbQry.Append("SELECT * from lblRangeLookup ");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }


    public DataSet GetUnApprovedSubordinates(int EmployeeNumber)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        String searchStr = string.Empty;

        string searchSubordinatesStr = " Subordinates.ManagerID=" + EmployeeNumber;

        dbQry.Append("SELECT Subordinates.ManagerID, DateSubmitted, FromToDateDesc as DateRange, Subordinates.Empno, Subordinates.EmployeeName, ");
        dbQry.Append("(Select empFirstname from tblEmployee where Empno = Subordinates.ManagerID) as Pendingwith, StatusWeekly, Rejectreason, ");
        dbQry.Append("IIf(wte.IsApproved=True,'Approved', StatusWeekly) as Approved, Subordinates.UserGroups FROM tblWeeklyTimeSheet as wte ");
        dbQry.Append("INNER JOIN ((SELECT DISTINCT e.ManagerID, ts.Empno As Empno, e.empFirstname as EmployeeName, e.UserGroup as UserGroups FROM tblTimesheet ts ");
        dbQry.Append("Inner join tblEmployee e on ts.Empno = e.Empno)  AS Subordinates) ON wte.EmployeeNumber = Subordinates.Empno ");
        dbQry.AppendFormat(" where {0} ", searchSubordinatesStr);

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public void InsertTaskStatusInfo(string connection, string Task_Status_Name, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblTaskStatus Where Task_Status_Name='" + Task_Status_Name + "'");
            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Task Status Exists");
                }
            }

            //int BrandID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BrandID) FROM tblBrand");

            dbQ = "SELECT KeyValue From tblSettings WHERE KEYNAME='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("INSERT INTO tblTaskStatus(Task_Status_Name) VALUES({0})", Task_Status_Name);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "InsertTaskStatusInfo");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblTaskStatus(Task_Status_Name) VALUES('{0}')",
                Task_Status_Name);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Task Status : " + Task_Status_Name + " added. Record Details :  User :" + Username;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void UpdateTaskStatusInfo(string connection, int Task_Status_Id, string Task_Status_Name, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblTaskStatus Where Task_Status_Name='" + Task_Status_Name + "' And Task_Status_Id <> " + Task_Status_Id.ToString() + "");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Task Status Exists");
                }
            }

            dbQ = "SELECT KeyValue From tblSettings WHERE KEYNAME='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Update tblTaskStatus SET Task_Status_Name={0} WHERE Task_Status_Id={1}", Task_Status_Name, Task_Status_Id);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "UpdateTaskStatusInfo");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }


            dbQry = string.Format("Update tblTaskStatus SET Task_Status_Name='{0}' WHERE Task_Status_Id={1}", Task_Status_Name, Task_Status_Id);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Task Status : " + Task_Status_Name + " got edited. Record Details :  User :" + Username;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit And Update", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListTaskStatusInfo(string connection, string txtSearch, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        if (dropDown == "TaskStatusName")
        {
            dbQry = "select A.Task_Status_Name,A.Task_Status_Id, (Select count(*) from tblTaskStatus where A.Task_Status_Id<=Task_Status_Id) as Row from tblTaskStatus as A Where A.Task_Status_Name like '" + txtSearch + "'" + " Order By A.Task_Status_Id desc";
        }
        else
        {
            dbQry = string.Format("select A.Task_Status_Name,A.Task_Status_Id, (Select count(*) from tblTaskStatus where A.Task_Status_Id<=Task_Status_Id) as Row from tblTaskStatus as A Where (A.Task_Status_Name like '{0}') Order By A.Task_Status_Id desc", txtSearch);
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }


    public DataSet GetTaskStatusInfoForId(string connection, int Task_Status_Id)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select Task_Status_Id,Task_Status_Name from tblTaskStatus where Task_Status_Id = " + Task_Status_Id.ToString();
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void DeleteTaskStatus(string connection, int Task_Status_Id, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Delete From tblTaskStatus Where Task_Status_Id = {0}", Task_Status_Id);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, Task_Status_Id, "DeleteTaskStatus");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            //dbQry = string.Format("INSERT INTO tblAuditTaskStatus Select * From tblTaskStatus Where Task_Status_Id = {0}", Task_Status_Id);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = string.Format("Delete From tblTaskStatus Where Task_Status_Id = {0}", Task_Status_Id);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Task Status got deleted : User = " + Username + " old Record Details Task_Status_Id = " + Task_Status_Id;

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetTaskStatusData(string connection, string txtSearch, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        if (dropDown == "TaskStatusName")
        {
            if (txtSearch != null)
                dbQry = "select * from tblTaskStatus Where Task_Status_Name like '" + txtSearch + "' Order By Task_Status_Id";
            else
                dbQry = "Select Task_Status_Id,Task_Status_Name FROM tblTaskStatus";
        }
        else
        {
            dbQry = string.Format("select * from tblTaskStatus Order By Task_Status_Id");
        }
        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }


    //Task Types

    public void InsertTaskTypesInfo(string connection, string Task_Type_Name, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblTaskTypes Where Task_Type_Name='" + Task_Type_Name + "'");
            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Task Type Exists");
                }
            }

            //int BrandID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BrandID) FROM tblBrand");

            dbQ = "SELECT KeyValue From tblSettings WHERE KEYNAME='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("INSERT INTO tblTaskTypes(Task_Type_Name) VALUES({0})", Task_Type_Name);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "InsertTaskTypesInfo");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("INSERT INTO tblTaskTypes(Task_Type_Name) VALUES('{0}')",
                Task_Type_Name);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Task Types : " + Task_Type_Name + " added. Record Details :  User :" + Username;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void UpdateTaskTypesInfo(string connection, int Task_Type_Id, string Task_Type_Name, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblTaskTypes Where Task_Type_Name='" + Task_Type_Name + "' And Task_Type_Id <> " + Task_Type_Id.ToString() + "");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Task Types Exists");
                }
            }

            dbQ = "SELECT KeyValue From tblSettings WHERE KEYNAME='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Update tblTaskTypes SET Task_Type_Name={0} WHERE Task_Type_Id={1}", Task_Type_Name, Task_Type_Id);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, "", "UpdateTaskTypesInfo");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }


            dbQry = string.Format("Update tblTaskTypes SET Task_Type_Name='{0}' WHERE Task_Type_Id={1}", Task_Type_Name, Task_Type_Id);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Task Types : " + Task_Type_Name + " got edited. Record Details :  User :" + Username;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit And Update", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public DataSet ListTaskTypesInfo(string connection, string txtSearch, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        if (dropDown == "TaskTypeName")
        {
            dbQry = "select A.Task_Type_Name,A.Task_Type_Id, (Select count(*) from tblTaskTypes where A.Task_Type_Id<=Task_Type_Id) as Row from tblTaskTypes as A  Where A.Task_Type_Name like '" + txtSearch + "'" + " Order By A.Task_Type_Id desc";
        }
        else
        {
            //dbQry = string.Format("select Task_Type_Name,Task_Type_Id from tblTaskTypes Order By Task_Type_Name");
            dbQry = string.Format("select A.Task_Type_Name,A.Task_Type_Id, (Select count(*) from tblTaskTypes where A.Task_Type_Id<=Task_Type_Id) as Row from tblTaskTypes as A  Where (A.Task_Type_Name like '{0}') Order By A.Task_Type_Id desc", txtSearch);
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetTaskTypesInfoForId(string connection, int Task_Type_Id)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select Task_Type_Id,Task_Type_Name from tblTaskTypes where Task_Type_Id = " + Task_Type_Id.ToString();
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void DeleteTaskTypes(string connection, int Task_Type_Id, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                logdescription = string.Format("Delete From tblTaskTypes Where Task_Type_Id = {0}", Task_Type_Id);
                logdescription = logdescription.Trim();
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), logdescription.ToString(), Username, Task_Type_Id, "DeleteTaskTypes");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            //dbQry = string.Format("INSERT INTO tblAuditTaskTypes Select * From tblTaskTypes Where Task_Type_Id = {0}", Task_Type_Id);
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = string.Format("Delete From tblTaskTypes Where Task_Type_Id = {0}", Task_Type_Id);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Task Types got deleted : User = " + Username + " old Record Details Task_Type_Id = " + Task_Type_Id;

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public DataSet GetTaskTypesData(string connection, string txtSearch, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        if (dropDown == "TaskTypesName")
        {
            if (txtSearch != null)
                dbQry = "select * from tblTaskTypes Where Task_Type_Name like '" + txtSearch + "' Order By Task_Type_Id";
            else
                dbQry = "Select Task_Type_Id,Task_Type_Name FROM tblTaskTypes";
        }
        else
        {
            dbQry = string.Format("select * from tblTaskTypes Order By Task_Type_Id");
        }
        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void InsertProjectEntry(string ProjectCode, DateTime ProjectDate, DateTime ExpWrkSDate, DateTime ExpWrkEDate, int EmpNo, string ProjectName, int EffortDays, string Projectstatus, string ProjectDesc, string Username, string ActStartDate, string ActEndDate, string unitofmeasure, string brncode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        //ActStartDate.ToString("yyyy-MM-dd");
        //ActEndDate.ToString("yyyy-MM-dd");

        //if  (Convert.ToString(ActStartDate) == "0001-01-01" && Convert.ToString( ActEndDate) =="0001-01-01")
        //{
        //    ActStartDate = "";
        //    ActEndDate ="";
        //}
        try
        {
            manager.Open();

            dbQry = string.Format("INSERT INTO tblProjects(Project_Code,Project_Date,Expected_Start_Date,Expected_End_Date,Project_Manager_Id,Project_Name,Expected_Effort_Days,Project_Status,Project_Description,Actual_Start_Date,Actual_End_Date,Unit_Of_Measure,BranchCode) VALUES('{0}','{1}','{2}','{3}',{4},'{5}',{6},'{7}','{8}','{9}','{10}','{11}','{12}')",
            ProjectCode, ProjectDate.ToString("yyyy-MM-dd"), ExpWrkSDate.ToString("yyyy-MM-dd"), ExpWrkEDate.ToString("yyyy-MM-dd"), EmpNo, ProjectName, EffortDays, Projectstatus, ProjectDesc, ActStartDate, ActEndDate, unitofmeasure, brncode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Project : " + ProjectCode + " added. Record Details :  User :" + Username + " ProjectName : " + ProjectName + " EmpNo : " + EmpNo;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public void UpdateProjectEntry(string ProjectCode, DateTime ProjectDate, DateTime ExpWrkSDate, DateTime ExpWrkEDate, int EmpNo, string ProjectName, int EffortDays, string Projectstatus, string ProjectDesc, string Username, int Project_Id, string ActStartDate, string ActEndDate, string unitofmeasure, string brncode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            dbQry = string.Format("UPDATE tblProjects SET Project_Code='{0}',Project_Date='{1}',Expected_Start_Date='{2}',Expected_End_Date='{3}',Project_Manager_Id={4},Project_Name='{5}',Expected_Effort_Days={6},Project_Status='{7}',Project_Description='{8}',Actual_Start_Date='{9}',Actual_End_Date='{10}',Unit_Of_Measure='{11}',BranchCode='{13}'  Where Project_Id={12}",
            ProjectCode, ProjectDate.ToString("yyyy-MM-dd"), ExpWrkSDate.ToString("yyyy-MM-dd"), ExpWrkEDate.ToString("yyyy-MM-dd"), EmpNo, ProjectName, EffortDays, Projectstatus, ProjectDesc, ActStartDate, ActEndDate, unitofmeasure, Project_Id, brncode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Project : " + ProjectCode + " got edited. Record Details :  User :" + Username + " ProjectName : " + ProjectName + " Projectstatus : " + Projectstatus;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit And Update", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet GetProjectForId(string connection, int Project_ID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        StringBuilder dbQry2 = new StringBuilder();
        try
        {
            manager.Open();

            dbQry.Append("SELECT * ");
            dbQry.Append(" FROM tblProjects Where Project_Id = " + Project_ID + "");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }


    public DataSet getfilterproject(string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        //dbQry = "Select empno,empFirstName From tblEmployee Order By empFirstName";
        dbQry.Append("Select tblProjects.Project_Name,tblProjects.Project_Id ,tblProjects.Project_Manager_Id");
        dbQry.Append(" FROM tblProjects Inner Join tblUserInfo On  tblProjects.Project_Manager_Id= tblUserInfo.Empno  ");
        dbQry.Append(" Where tblProjects.Project_Status='Open' and tblUserInfo.UserName = '" + Username + "'");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public DataSet getfilterprojectfromemployee(string connection, int Empno,string branch)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        DataSet dsd = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string branch1 = string.Empty;
        //dbQry = "Select empno,empFirstName From tblEmployee Order By empFirstName";
        dbQry.Append(" Select tblProjects.Project_Name,tblProjects.Project_Id ,tblProjects.Project_Manager_Id,tblProjects.BranchCode ");
        dbQry.Append(" FROM tblProjects Inner Join tblEmployee On  tblProjects.Project_Manager_Id= tblEmployee.Empno ");

        //dsd = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());
        //if (dsd.Tables[0].Rows.Count > 0)
        //    branch1 = dsd.Tables[0].Rows[0]["BranchCode"].ToString();


        dbQry.Append(" Where  tblEmployee.empno= " + Empno);

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetProjectList(string connection, string txtSearch, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();


        if (dropDown == "ProjectDate" || dropDown == "ProjectID")
            txtSearch = txtSearch;
        else
            txtSearch = "%" + txtSearch + "%";

        string dbQry2 = string.Empty;

        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                dbQry.Append("SELECT tblProjects.Project_Id,tblProjects.Project_Code,tblProjects.Project_Date,tblProjects.Expected_Start_Date,tblProjects.Expected_End_Date,tblProjects.Project_Manager_Id,tblProjects.Project_Name,tblProjects.Expected_Effort_Days,tblProjects.Project_Status,tblProjects.Project_Description,tblEmployee.empfirstname,tblProjects.BranchCode ");
                dbQry.Append(" FROM tblProjects INNER JOIN  tblEmployee ON tblProjects.Project_Manager_Id = tblEmployee.empno Where tblProjects.Project_Date > " + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + " ");
            }
            else
            {
                dbQry.Append("SELECT tblProjects.Project_Id,tblProjects.Project_Code,tblProjects.Project_Date,tblProjects.Expected_Start_Date,tblProjects.Expected_End_Date,tblProjects.Project_Manager_Id,tblProjects.Project_Name,tblProjects.Expected_Effort_Days,tblProjects.Project_Status,tblProjects.Project_Description,tblEmployee.empfirstname,tblProjects.BranchCode ");
                dbQry.Append(" FROM tblProjects INNER JOIN  tblEmployee ON tblProjects.Project_Manager_Id = tblEmployee.empno Where 1=1 ");
            }

            if (txtSearch == null || txtSearch == "")
            {
                dbQry.AppendFormat(" AND 1=1 ");
            }
            else
            {
                if (dropDown == "ProjectID" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblProjects.Project_Id = {0} ", txtSearch);
                }
                else if (dropDown == "ProjectCode" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblProjects.Project_Code like '{0}' ", txtSearch);
                }
                else if (dropDown == "ProjectDate" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND Format([tblProjects.Project_Date], 'dd/mm/yyyy') = '{0}' ", Convert.ToDateTime(txtSearch).ToShortDateString());
                }
                else if (dropDown == "ProjectName" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblProjects.Project_Name like '{0}' ", txtSearch);
                }
                else if (dropDown == "ProjectManager" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblEmployee.empfirstname like '{0}' ", txtSearch);
                }
                else if (dropDown == "ProjectStatus" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblProjects.Project_Status like '{0}' ", txtSearch);
                }
                else if (dropDown == "0" && txtSearch != "%%")
                {
                    dbQry.AppendFormat(" AND 1=1 ");
                }
                else
                {
                    dbQry.AppendFormat(" AND 1=1 ");
                }
            }

            dbQry.Append(" ORDER BY tblProjects.Project_Date Desc,tblProjects.Project_Id Desc");



            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void DeleteProjectDetails(int Project_Id)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("DELETE FROM tblProjects WHERE Project_Id={0}", Project_Id);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Project ID : " + Project_Id + " got Deleted.";
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            //sAuditStr = "Task Types got deleted : User = " + Username + " old Record Details Task_Type_Id = " + Task_Type_Id;

            //dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public bool IsProjectCodeAlreadyFound(string connection, string ProjectCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        try
        {

            dbQry = string.Format("Select Project_Code from tblProjects Where Project_Code= '" + ProjectCode + "' ");

            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        catch (Exception ex)
        {
            return false;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetTaskList(string connection, string txtSearch, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();


        if (dropDown == "TaskDate")
            txtSearch = txtSearch;
        else
            txtSearch = "%" + txtSearch + "%";

        string dbQry2 = string.Empty;

        try
        {
            manager.Open();
            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                dbQry.Append("SELECT tblTasks.Task_Id,tblTasks.Task_Code,tblTasks.BranchCode,tblTasks.Task_Name,tblTasks.Task_Date,tblTasks.Expected_Start_Date,tblTasks.Expected_End_Date,tblTasks.Actual_Start_Date,tblTasks.Actual_End_Date,tblTasks.Owner,tblTasks.Task_Type,tblTasks.IsActive,tblTasks.Task_Description,tblEmployee.empfirstname,tblTasks.Dependency_Task,tblTasks.Project_Code, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName  ");
                dbQry.Append(" FROM (tblTasks INNER JOIN  tblEmployee ON tblTasks.Owner = tblEmployee.empno) inner join tblProjects ON tblTasks.Project_Code = tblProjects.Project_Id Where tblTasks.Task_Date > " + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + " ");
            }
            else
            {
                dbQry.Append("SELECT tblTasks.Task_Id,tblTasks.Task_Code,tblTasks.BranchCode,tblTasks.Task_Name,tblTasks.Task_Date,tblTasks.Expected_Start_Date,tblTasks.Expected_End_Date,tblTasks.Actual_Start_Date,tblTasks.Actual_End_Date,tblTasks.Owner,tblTasks.Task_Type,tblTasks.IsActive,tblTasks.Task_Description,tblEmployee.empfirstname,tblTasks.Dependency_Task,tblTasks.Project_Code, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName ");
                dbQry.Append(" FROM (tblTasks INNER JOIN  tblEmployee ON tblTasks.Owner = tblEmployee.empno) inner join tblProjects ON tblTasks.Project_Code = tblProjects.Project_Id Where 1=1 ");
            }

            if (txtSearch == null || txtSearch == "")
            {
                dbQry.AppendFormat(" AND 1=1 ");
            }
            else
            {
                if (dropDown == "TaskCode" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblTasks.Task_Code like '{0}' ", txtSearch);
                }
                else if (dropDown == "TaskDate" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblTasks.Task_Date = '{0}' ", Convert.ToDateTime(txtSearch).ToString("yyyy-MM-dd"));
                }
                else if (dropDown == "ProjectCode" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblProjects.Project_Code like '{0}' ", txtSearch);
                }
                else if (dropDown == "ProjectName" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblProjects.Project_Name like '{0}' ", txtSearch);
                }
                else if (dropDown == "TaskName" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblTasks.Task_Name like '{0}' ", txtSearch);
                }
                else if (dropDown == "Owner" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblEmployee.empfirstname like '{0}' ", txtSearch);
                }
                else if (dropDown == "0" && txtSearch != "%%")
                {
                    dbQry.AppendFormat(" AND 1=1 ");
                }
                else
                {
                    dbQry.AppendFormat(" AND 1=1 ");
                }
            }

            dbQry.Append(" ORDER BY tblTasks.Task_Date Desc,tblTasks.Task_Id Desc");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void InsertTaskEntry(int ProjectCode, DateTime TaskDate, DateTime EWStartDate, DateTime EWEndDate, int Owner, string TaskCode, int TaskType, string IsActive, int DependencyTask, string TaskDesc, string Username, string TaskName, int effortdays, string Branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        try
        {
            manager.Open();

            dbQry = string.Format("INSERT INTO tblTasks(Task_Code, Task_Date,Expected_Start_Date,Expected_End_Date,Project_Code,Owner,Task_Type,IsActive,Task_Description,Dependency_Task,Task_Name,Effort_Task_Days,BranchCode) VALUES('{0}','{1}','{2}','{3}',{4},{5},{6},'{7}','{8}',{9},'{10}',{11},'{12}')",
            TaskCode, TaskDate.ToString("yyyy-MM-dd"), EWStartDate.ToString("yyyy-MM-dd"), EWEndDate.ToString("yyyy-MM-dd"), ProjectCode, Owner, TaskType, IsActive, TaskDesc, DependencyTask, TaskName, effortdays, Branchcode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Task : " + TaskName + " added. Record Details :  User :" + Username + " ProjectCode : " + ProjectCode + " TaskType : " + TaskType;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public void UpdateTaskEntry(int ProjectCode, DateTime TaskDate, DateTime EWStartDate, DateTime EWEndDate, int Owner, string TaskCode, int TaskType, string IsActive, int DependencyTask, string TaskDesc, string Username, int Task_Id, string TaskName, int effortdays, string Branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            dbQry = string.Format("UPDATE tblTasks SET Project_Code={0},Task_Date='{1}',Expected_Start_Date='{2}',Expected_End_Date='{3}',Owner={4},Task_Type={5},Dependency_Task={6},IsActive='{7}',Task_Description='{8}',Task_Code='{9}',Task_Name='{10}',Effort_Task_Days={11},BranchCode='{13}' Where Task_Id={12}",
            ProjectCode, TaskDate.ToString("yyyy-MM-dd"), EWStartDate.ToString("yyyy-MM-dd"), EWEndDate.ToString("yyyy-MM-dd"), Owner, TaskType, DependencyTask, IsActive, TaskDesc, TaskCode, TaskName, effortdays, Task_Id, Branchcode);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Task : " + TaskName + " got edited. Record Details :  User :" + Username + " Owner : " + Owner + " TaskType : " + TaskType + " Task Id : " + Task_Id;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit And Update", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }


    public DataSet GetTaskForId(string connection, int Task_Id)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        StringBuilder dbQry2 = new StringBuilder();
        try
        {
            manager.Open();

            dbQry.Append("SELECT * ");
            dbQry.Append(" FROM tblTasks Where Task_Id = " + Task_Id + "");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public void DeleteTaskDetails(int Task_Id)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("DELETE FROM tblTasks WHERE Task_Id={0}", Task_Id);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Task ID : " + Task_Id + " Got Deleted.";
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Deleted", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public void UpdateTaskUpdateEntry(DateTime TaskUpdateDate, DateTime ActualStartDate, string ActualEndDate, int Per, int TaskStatus, string Blockedflag, string Taskupdate, string BlockingReason, string Username, int effortlastupdate, int effortremain, int Task_Id)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        DataSet dsOld = new DataSet();

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            dbQry = string.Format("Select * from tblTaskUpdates Where Task_Id = " + Task_Id + "");
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (dsOld != null)
            {
                if (dsOld.Tables[0].Rows.Count > 0)
                {
                    dbQry = string.Format("UPDATE tblTaskUpdates SET Task_Update_Date='{0}',Actual_Start_Date='{1}',Actual_End_Date='{2}',Per_of_Completion={3},Task_Status={4},Blocked_Flag='{5}',Task_update='{6}',Blocking_Reason='{7}',Effort_Spend_Last_Update={8},Effort_Remaining={9} Where Task_Id={10}",
                    TaskUpdateDate.ToString("yyyy-MM-dd"), ActualStartDate.ToString("yyyy-MM-dd"), ActualEndDate, Per, TaskStatus, Blockedflag, Taskupdate, BlockingReason, effortlastupdate, effortremain, Task_Id);
                }
                else
                {
                    dbQry = string.Format("INSERT INTO tblTaskUpdates(Task_Update_Date,Actual_Start_Date,Actual_End_Date,Per_of_Completion,Task_Status,Blocked_Flag,Task_update,Blocking_Reason,Effort_Spend_Last_Update,Effort_Remaining,Task_id) VALUES('{0}','{1}','{2}',{3},{4},'{5}','{6}','{7}',{8},{9},{10})",
                    TaskUpdateDate.ToString("yyyy-MM-dd"), ActualStartDate.ToString("yyyy-MM-dd"), ActualEndDate, Per, TaskStatus, Blockedflag, Taskupdate, BlockingReason, effortlastupdate, effortremain, Task_Id);
                }
            }
            else
            {
                dbQry = string.Format("INSERT INTO tblTaskUpdates(Task_Update_Date,Actual_Start_Date,Actual_End_Date,Per_of_Completion,Task_Status,Blocked_Flag,Task_update,Blocking_Reason,Effort_Spend_Last_Update,Effort_Remaining,Task_id) VALUES('{0}','{1}','{2}',{3},{4},'{5}','{6}','{7}',{8},{9},{10})",
                TaskUpdateDate.ToString("yyyy-MM-dd"), ActualStartDate.ToString("yyyy-MM-dd"), ActualEndDate, Per, TaskStatus, Blockedflag, Taskupdate, BlockingReason, effortlastupdate, effortremain, Task_Id);
            }
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            int Task_Update_Id = 0;
            dbQry = string.Format("Select Task_Update_Id from tblTaskUpdates Where Task_Id = " + Task_Id + "");
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (dsOld != null)
            {
                if (dsOld.Tables[0].Rows.Count > 0)
                {
                    Task_Update_Id = Convert.ToInt32(dsOld.Tables[0].Rows[0]["Task_Update_Id"]);
                }
            }


            dbQry = string.Format("INSERT INTO tblTaskUpdatesHistory(Task_Update_Date,Actual_Start_Date,Actual_End_Date,Per_of_Completion,Task_Status,Blocked_Flag,Task_update,Blocking_Reason,Effort_Spend_Last_Update,Effort_Remaining,Task_id,Task_Update_Id) VALUES('{0}','{1}','{2}',{3},{4},'{5}','{6}','{7}',{8},{9},{10},{11})",
                TaskUpdateDate.ToString("yyyy-MM-dd"), ActualStartDate.ToString("yyyy-MM-dd"), ActualEndDate, Per, TaskStatus, Blockedflag, Taskupdate, BlockingReason, effortlastupdate, effortremain, Task_Id, Task_Update_Id);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQry = string.Format("UPDATE tblTasks SET Actual_Start_Date='{0}',Actual_End_Date='{1}' Where Task_Id={2}",
                    ActualStartDate.ToString("yyyy-MM-dd"), ActualEndDate, Task_Id);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            sAuditStr = "Task Updates : " + Task_Id + " got edited. Record Details :  User :" + Username + " TaskStatus : " + TaskStatus + " Blockedflag: " + Blockedflag;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit And Update", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }



    public DataSet GetTaskUpdateForId(string connection, int Task_Id)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        StringBuilder dbQry2 = new StringBuilder();
        try
        {
            manager.Open();

            dbQry.Append("SELECT * ");
            dbQry.Append(" FROM tblTaskUpdates Where Task_Id = " + Task_Id + "");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public DataSet GetTaskUpdateList(string connection, string txtSearch, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;

        try
        {
            manager.Open();

            if (txtSearch == "History")
            {
                dbQry.Append("SELECT tblTaskUpdatesHistory.Task_Update_Id,tblTaskUpdatesHistory.Task_Update_Date,tblTaskUpdatesHistory.Actual_Start_Date,tblTaskUpdatesHistory.Actual_End_Date,tblTaskStatus.Task_Status_Name,tblTaskUpdatesHistory.Per_of_Completion,tblTaskUpdatesHistory.Blocked_Flag,tblTaskUpdatesHistory.Blocking_Reason,tblTaskUpdatesHistory.Effort_Spend_Last_Update,tblTaskUpdatesHistory.Effort_Remaining,tblTaskUpdatesHistory.Task_update,tblTasks.BranchCode ");
                dbQry.Append(" FROM (tblTaskUpdatesHistory INNER JOIN tblTaskStatus ON tblTaskUpdatesHistory.Task_Status = tblTaskStatus.Task_Status_Id) inner join tblTasks on tblTasks.Task_Id=tblTaskUpdatesHistory.Task_id ");
                dbQry.Append(" ORDER BY tblTaskUpdatesHistory.Task_Update_Date Desc");
            }
            else
            {
                dbQry.Append("SELECT tblTaskUpdates.Task_Update_Id,tblTaskUpdates.Task_Update_Date,tblTaskUpdates.Actual_Start_Date,tblTaskUpdates.Actual_End_Date,tblTaskStatus.Task_Status_Name,tblTaskUpdates.Per_of_Completion,tblTaskUpdates.Blocked_Flag,tblTaskUpdates.Blocking_Reason,tblTaskUpdates.Task_update,tbltasks.BranchCode ");
                dbQry.Append(" FROM (tblTaskUpdates INNER JOIN tblTaskStatus ON tblTaskUpdates.Task_Status = tblTaskStatus.Task_Status_Id) inner join tblTasks on tblTasks.Task_Id=tblTaskUpdates.Task_id ");
                dbQry.Append(" ORDER BY tblTaskUpdates.Task_Update_Date Desc");
            }
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetProjectManagementList(string connection, string condtion, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();

            dbQry2 = string.Format("SELECT tblTasks.Task_Id,tblTasks.TaskID,tblTasks.Task_Date,tblTasks.Expected_Start_Date,tblTasks.Expected_End_Date,tblTasks.Owner,tblTasks.Task_Type,tblTasks.IsActive,tblTaskUpdates.Actual_Start_Date,tblTaskUpdates.Actual_End_Date,tblTaskUpdates.Task_Update,tblTasks.Task_Description,tblEmployee.empfirstname,tblTasks.Dependency_Task,tblTasks.Project_Code,tblTaskTypes.Task_Type_Name as Task_Type_Name,tblTaskStatus.Task_Status_Name as Task_Status_Name, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName FROM ((((tblTasks INNER JOIN tblEmployee ON tblTasks.Owner = tblEmployee.empno) inner join tblProjects ON tblTasks.Project_Code = tblProjects.Project_Id) inner join tblTaskTypes on tblTasks.Task_Type = tblTaskTypes.Task_Type_Id) inner join tblTaskUpdates on tblTasks.Task_Id = tblTaskUpdates.Task_Id) inner join tblTaskStatus on tblTaskUpdates.Task_Status = tblTaskStatus.Task_Status_Id Where " + condtion + " ORDER BY tblTasks.TaskID Desc");
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry2);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetTaskUpdateHistoryList(string connection, int Task_Id)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;

        try
        {
            manager.Open();

            dbQry.Append("SELECT tblTaskUpdatesHistory.Task_Update_Id,tblTaskUpdatesHistory.Task_Update_Date,tblTaskUpdatesHistory.Actual_Start_Date,tblTaskUpdatesHistory.Actual_End_Date,tblTaskStatus.Task_Status_Name,tblTaskUpdatesHistory.Per_of_Completion,tblTaskUpdatesHistory.Blocked_Flag,tblTaskUpdatesHistory.Blocking_Reason,tblTaskUpdatesHistory.Task_update,tblTaskUpdatesHistory.Effort_Spend_Last_Update,tblTaskUpdatesHistory.Effort_Remaining ");
            dbQry.Append(" FROM tblTaskUpdatesHistory INNER JOIN tblTaskStatus ON tblTaskUpdatesHistory.Task_Status = tblTaskStatus.Task_Status_Id ");
            dbQry.Append(" Where tblTaskUpdatesHistory.Task_Id = " + Task_Id + " ORDER BY tblTaskUpdatesHistory.Task_Id Desc");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }



    public DataSet ListStagesSetup(string connection, string cond, int StageID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            if (cond == "N")
            {
                dbQry = string.Format("select Stage_Setup_Id,Stage_No,Stage_Perc, Stage_Name from tblStagesSetup Order By Stage_Name");
            }
            else
            {
                dbQry = string.Format("select Stage_Setup_Id,Stage_No,Stage_Perc, Stage_Name from tblStagesSetup where Stage_Setup_Id = " + StageID + " Order By Stage_Name");
            }

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void UpdateCompetitors(string connection, string Unit, int ID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        string dbQry = string.Format("Update tblUnitMnt Set Unit = '{0}' Where ID = {1}", Unit, ID);

        try
        {
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListActivitySetup(string connection, string cond, int ActivityID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            if (cond == "N")
            {
                dbQry = string.Format("select Activity_Setup_Id, Activity_Name from tblActivitySetup Order By Activity_Name");
            }
            else
            {
                dbQry = string.Format("select Activity_Setup_Id, Activity_Name from tblActivitySetup where Activity_Setup_Id = " + ActivityID + " Order By Activity_Name");
            }

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListPotentialAmount(string connection, string cond, int StageID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select Potential_Amount from tblLeadPotential Order By Potential_Amount");

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void GetEmployeeMangerName(int empNo, out string empName, int managerID, out string managerName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();

        empName = "";
        managerName = "";
        dbQry = "Select empno,empFirstName From tblEmployee WHere empno = " + empNo.ToString() + " Order By empFirstName";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
            {
                empName = Convert.ToString(ds.Tables[0].Rows[0]["empFirstName"]);
            }


            dbQry = "Select DISTINCT A.ManagerID , B.empFirstName as ManagerFirstName From tblEmployee A LEFT JOIN ";
            dbQry += "tblEmployee B ON A.ManagerID = B.Empno WHERE A.ManagerID = " + managerID.ToString() + " Order By B.empFirstName";

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
            {
                managerName = Convert.ToString(ds.Tables[0].Rows[0]["ManagerFirstName"]);
            }

        }
        catch (Exception ex)
        {
            //ObjNLog.Error(string.Format("Exception Raised {0}", ex.Message));
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public bool IsManagerForThisEmployee(int empNo, int managerID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select empno,empFirstName From tblEmployee WHere empno = " + empNo.ToString() + " AND ManagerID = " + managerID.ToString() + " Order By empFirstName";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return true;
            else
                return false;

        }
        catch (Exception ex)
        {
            //ObjNLog.Error(string.Format("Exception Raised {0}", ex.Message));
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet generateTSEReportDSNew(string sWeekID, int empNo, int managerID, string SApproved, string sDataSource)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);


        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        String searchStr = string.Empty;

        if (empNo > 0)
            searchStr = " tblTimeSheetEffortDescription.empno=" + empNo;

        if (sWeekID != string.Empty)
        {
            if (searchStr == string.Empty)
                searchStr = searchStr + " tblTimeSheetEffortDescription.WeekID = '" + sWeekID + "'";
            else
                searchStr = searchStr + " AND tblTimeSheetEffortDescription.WeekID = '" + sWeekID + "'";

        }

        //if (SApproved != string.Empty)
        //{
        //    if (searchStr == string.Empty)
        //        searchStr = searchStr + " Approved= " + SApproved;
        //    else
        //        searchStr = searchStr + " AND Approved=" + SApproved;

        //}

        dbQry.Append("TRANSFORM first (tblTimeSheetEffortDescription.RangeDescription) AS Expr1 ");
        dbQry.Append("SELECT  lblRangeLookup.Range as Range ");
        dbQry.Append("FROM tblTimeSheetEffortDescription Inner Join lblRangeLookup on tblTimeSheetEffortDescription.RangeID = lblRangeLookup.RangeID ");
        dbQry.Append(" Where " + searchStr);
        dbQry.Append(" GROUP BY lblRangeLookup.RangeID, lblRangeLookup.Range ");
        dbQry.Append(" Order By lblRangeLookup.RangeID ");
        dbQry.Append(" PIVOT Format(tblTimeSheetEffortDescription.TSDate, 'MM/dd/yyyy');");

        //////if (searchStr != string.Empty)
        //////{
        //////    //dbQry.Append("SELECT * FROM tblTimeSheetEntry");
        //////    //dbQry.AppendFormat(" Where {0} ORDER BY TSDate,empNo", searchStr);

        //////    dbQry.Append("select  TSDate,tblEmployee.empFirstName,Before8,[8to9],[9to10],[10to11],[11to12],[12to1],[1pmto2],[2pmto3],[3pmto4],[4pmto5],[5pmto6],[6pmto7],[7pmto8],[8pmto9],[9pmto10],[After10],IIf(Approved=True,'YES','NO') AS Approved  FROM tblTimeSheetEntry INNER JOIN tblEmployee ON tblTimeSheetEntry.empNo = tblEmployee.empno");
        //////    dbQry.AppendFormat(" Where {0} ORDER BY TSDate,tblEmployee.empNo", searchStr);


        //////}
        //////else
        //////{
        //////    //dbQry.Append("SELECT * FROM tblTimeSheetEntry ORDER BY TSDate,EmpNO");
        //////    dbQry.Append("select  TSDate,tblEmployee.empFirstName,Before8,[8to9],[9to10],[10to11],[11to12],[12to1],[1pmto2],[2pmto3],[3pmto4],[4pmto5],[5pmto6],[6pmto7],[7pmto8],[8pmto9],[9pmto10],After10,IIf(Approved=True,'YES','NO') AS Approved FROM tblTimeSheetEntry INNER JOIN tblEmployee ON tblTimeSheetEntry.empNo = tblEmployee.empno ORDER BY TSDate,empNo");
        //////}
        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListManagers()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select DISTINCT A.ManagerID , B.empFirstName as ManagerFirstName From tblEmployee A LEFT JOIN ";
        dbQry += "tblEmployee B ON A.ManagerID = B.Empno WHERE A.ManagerID > 0 Order By B.empFirstName";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            //ObjNLog.Error(string.Format("Exception Raised {0}", ex.Message));
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetLeadManagementList(string sDataSource, DateTime startDate, DateTime endDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;

        string dbQry2 = string.Empty;
        string sQry = string.Empty;
        string oQry = string.Empty;
        string sConStr = string.Empty;
        string tQry = string.Empty;
        string pQry = string.Empty;

        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dso, dsSales, dsPurcahse;
        oleCmd = new SqlCommand();

        Double closestock;

        try
        {
            manager.Open();

            dbQry = (" SELECT tblLeadHeader.Lead_No, tblLeadHeader.Lead_Name, tblLeadHeader.BP_Name, tblLeadHeader.Address, " +
                   " tblLeadHeader.Mobile, tblLeadHeader.Telephone, tblLeadHeader.Doc_Status, tblLeadHeader.Closing_Date, tblLeadHeader.Emp_Name, " +
                   " tblLeadHeader.Start_Date, tblLeadHeader.Lead_Status, tblLeadHeader.Contact_Name, tblLeadHeader.Predicted_Closing_Date, " +
                   " tblCompetitors.Competitor_Name, tblActivities.Activity_Name, tblActivities.Activity_Date, tblActivities.Activity_Location, " +
                   " tblActivities.Next_Activity, tblActivities.NextActivity_Date,tblActivities.ModeofContact, tblProductInterest.Product_Name " +
                   " FROM ((tblLeadHeader INNER JOIN tblProductInterest ON tblLeadHeader.Lead_No = tblProductInterest.Lead_No) " +
                   " INNER JOIN tblCompetitors ON tblLeadHeader.Lead_No = tblCompetitors.Lead_No) INNER JOIN tblActivities ON tblLeadHeader.Lead_No = tblActivities.Lead_No" +
                   " WHERE Start_Date>=#" + startDate.ToString("MM/dd/yyyy") + "# AND Start_Date <=#" + endDate.ToString("MM/dd/yyyy") + "# ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet GetLeadManagementListFilter(string sDataSource, string condtion)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        string dbQry = string.Empty;

        string dbQry2 = string.Empty;
        string sQry = string.Empty;
        string oQry = string.Empty;
        string sConStr = string.Empty;
        string tQry = string.Empty;
        string pQry = string.Empty;

        SqlConnection oleConn;
        SqlCommand oleCmd;
        SqlDataAdapter oleAdp;
        DataSet dso, dsSales, dsPurcahse;
        oleCmd = new SqlCommand();

        Double closestock;

        try
        {
            manager.Open();

            //dbQry = (" SELECT tblLeadHeader.Lead_No, tblLeadHeader.Lead_Name, tblLeadHeader.BP_Name, tblLeadHeader.Address, " +
            //       " tblLeadHeader.Mobile, tblLeadHeader.Telephone, tblLeadHeader.Doc_Status, tblLeadHeader.Closing_Date, tblLeadHeader.Emp_Name, " +
            //       " tblLeadHeader.Start_Date, tblLeadHeader.Lead_Status, tblLeadHeader.Contact_Name, tblLeadHeader.Predicted_Closing_Date, " +
            //       " tblCompetitors.Competitor_Name, tblActivities.Activity_Name, tblActivities.Activity_Date, tblActivities.Activity_Location, " +
            //       " tblActivities.Next_Activity, tblActivities.NextActivity_Date,tblActivities.ModeofContact, tblProductInterest.Product_Name " +
            //       " FROM ((tblLeadHeader INNER JOIN tblProductInterest ON tblLeadHeader.Lead_No = tblProductInterest.Lead_No) " +
            //       " INNER JOIN tblCompetitors ON tblLeadHeader.Lead_No = tblCompetitors.Lead_No) INNER JOIN tblActivities ON tblLeadHeader.Lead_No = tblActivities.Lead_No" +
            //       " WHERE Start_Date>=#" + startDate.ToString("MM/dd/yyyy") + "# AND Start_Date <=#" + endDate.ToString("MM/dd/yyyy") + "# ");

            //dbQry=(" SELECT tblLeadHeader.Lead_No, tblLeadHeader.Lead_Name, tblLeadHeader.BP_Name, tblLeadHeader.Address, tblLeadHeader.Mobile, " +
            //       " tblLeadHeader.Telephone, tblLeadHeader.Doc_Status, tblLeadHeader.Closing_Date, tblLeadHeader.Emp_Name,tblLeadHeader.Emp_Id, tblLeadHeader.Start_Date, " +
            //       " tblLeadHeader.Lead_Status, tblLeadHeader.Contact_Name, tblLeadHeader.Predicted_Closing_Date, tblCompetitors.Competitor_Name, " +
            //       " tblActivities.Activity_Name, tblActivities.Activity_Date, tblActivities.Activity_Location, tblActivities.Next_Activity, " +
            //       " tblActivities.NextActivity_Date, tblActivities.ModeofContact, tblProductInterest.Product_Name, tblLeadHeader.Emp_Id, tblLeadHeader.Bp_Id, " +
            //       " tblLeadHeader.Area, tblLeadHeader.Category, tblLeadHeader.Information3, tblLeadHeader.Information4, tblActivities.Activity_Name_Id, " +
            //       " tblActivities.Next_Activity_Id, tblProductInterest.Product_Name, tblProductInterest.Product_Id " +
            //       " FROM ((tblLeadHeader INNER JOIN tblProductInterest ON tblLeadHeader.Lead_No = tblProductInterest.Lead_No) " +
            //       " INNER JOIN tblCompetitors ON tblLeadHeader.Lead_No = tblCompetitors.Lead_No) INNER JOIN tblActivities ON tblLeadHeader.Lead_No = tblActivities.Lead_No " +
            //       " WHERE Doc_Status='" + status + "' AND Emp_Id= '" + empname + "' AND Area= " + area + "AND Category=" + category + " AND Activity_Name_Id=" + actname + " AND Next_Activity_Id=" + nxtactname + " AND Information3=" + info3 + " AND Information4= " + info4 + "" +
            //       " AND Start_Date>=#" + startDate.ToString("MM/dd/yyyy") + "# AND Start_Date <=#" + endDate.ToString("MM/dd/yyyy") + "# ");


            dbQry = (" SELECT tblLeadHeader.Lead_No, tblLeadHeader.Lead_Name, tblLeadHeader.BP_Name, tblLeadHeader.Address, tblLeadHeader.Mobile, " +
                  " tblLeadHeader.Telephone, tblLeadHeader.Doc_Status, tblLeadHeader.Closing_Date, tblLeadHeader.Emp_Name,tblLeadHeader.Emp_Id, tblLeadHeader.Start_Date, " +
                  " tblLeadHeader.Lead_Status, tblLeadHeader.Contact_Name, tblLeadHeader.Predicted_Closing_Date, tblCompetitors.Competitor_Name, " +
                  " tblActivities.Activity_Name, tblActivities.Activity_Date, tblActivities.Activity_Location, tblActivities.Next_Activity, " +
                  " tblActivities.NextActivity_Date, tblActivities.ModeofContact, tblProductInterest.Product_Name, tblLeadHeader.Emp_Id, tblLeadHeader.Bp_Id, " +
                  " tblLeadHeader.Area, tblLeadHeader.Category, tblLeadHeader.Information3, tblLeadHeader.Information4, tblActivities.Activity_Name_Id, " +
                  " tblActivities.Next_Activity_Id, tblProductInterest.Product_Name, tblProductInterest.Product_Id " +
                  " FROM ((tblLeadHeader INNER JOIN tblProductInterest ON tblLeadHeader.Lead_No = tblProductInterest.Lead_No) " +
                  " INNER JOIN tblCompetitors ON tblLeadHeader.Lead_No = tblCompetitors.Lead_No) INNER JOIN tblActivities ON tblLeadHeader.Lead_No = tblActivities.Lead_No " +
                  " WHERE " + condtion);
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    #region LeaveType

    public DataSet GetLeaveSummary(string connection, string txtSearchInput, string searchCriteria, string userId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearchInput = "%" + txtSearchInput + "%";


        if (searchCriteria == "LeaveType")
        {
            dbQry = "SELECT ID, LeaveTypeName, IsPayable, IsEncashable, IsActive, IsDefault, LeaveDescription FROM tblLeaveTypes where LeaveTypeName LIKE '" + txtSearchInput + "'";
        }
        else if (searchCriteria == "LeaveDescription")
        {
            dbQry = "SELECT ID, LeaveTypeName, IsPayable, IsEncashable, IsActive, IsDefault, LeaveDescription FROM tblLeaveTypes where LeaveDescription LIKE '" + txtSearchInput + "'";
        }
        else if (searchCriteria == "IsEncashable")
        {
            dbQry = "SELECT ID, LeaveTypeName, IsPayable, IsEncashable, IsActive, IsDefault, LeaveDescription FROM tblLeaveTypes where IsEncashable LIKE '" + txtSearchInput + "'";
        }
        else
        {
            dbQry = "SELECT ID, LeaveTypeName, IsPayable, IsEncashable, IsActive, IsDefault, LeaveDescription FROM tblLeaveTypes";
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetLeaveInfoByID(string connection, int ID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        dbQry = "SELECT ID, LeaveTypeName, IsPayable, IsEncashable, IsActive, IsDefault, LeaveDescription FROM tblLeaveTypes where ID =" + ID;

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }
    public void InsertLeaveInfo(string connection, string Username, string LeaveTypeName, bool IsPayable, bool IsEncashable, bool IsActive, string LeaveDescription)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        int isPay = 0;
        int isEnc = 0;
        int isAct = 0;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object totLeave = manager.ExecuteScalar(CommandType.Text, "SELECT Yearly_Holiday_Count FROM tblHRAdminSettings");

            object actualLeave = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblLeaveTypes Where IsActive =" + true);

            if (totLeave.ToString() != string.Empty && actualLeave != string.Empty)
            {
                if (int.Parse(totLeave.ToString()) <= int.Parse(actualLeave.ToString()))
                {
                    throw new Exception("Maximum Holiday count per year is " + totLeave.ToString());
                }
            }


            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblLeaveTypes Where LeaveTypeName='" + LeaveTypeName + "'");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Leave Type Name Exists");
                }
            }

            if (IsPayable == true)
            {
                isPay = -1;
            }

            if (IsActive == true)
            {
                isAct = -1;
            }

            if (IsEncashable == true)
            {
                isEnc = -1;
            }


            dbQry = string.Format("INSERT INTO tblLeaveTypes(LeaveTypeName, IsPayable, IsEncashable, IsActive, IsDefault, LeaveDescription) VALUES('{0}', {1}, {2}, {3}, {4},'{5}')",
                LeaveTypeName, isPay, isEnc, isAct, -1, LeaveDescription);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void UpdateLeaveInfo(string connection, int ID, string Username, string LeaveTypeName, bool IsPayable, bool IsEncashable, bool IsActive, string LeaveDescription)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        int isPay = 0;
        int isEnc = 0;
        int isAct = 0;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblLeaveTypes Where LeaveTypeName='" + LeaveTypeName + "' AND ID <> " + ID + " ");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Leave Type Name Exists");
                }
            }

            if (IsPayable == true)
            {
                isPay = -1;
            }

            if (IsActive == true)
            {
                isAct = -1;
            }

            if (IsEncashable == true)
            {
                isEnc = -1;
            }

            //int LeaveID = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(ID) FROM tblLeaveTypes");

            dbQry = string.Format("UPDATE tblLeaveTypes SET LeaveTypeName = '{1}', IsPayable = {2}, IsEncashable = {3}, IsActive = {4}, IsDefault = {5}, LeaveDescription = '{6}' WHERE ID = {0}",
                ID, LeaveTypeName, isPay, isEnc, isAct, -1, LeaveDescription);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    #endregion

    public DataSet getSalesForId(int id)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = ("SELECT sum((((tblSalesItems.Qty * tblSalesItems.Rate) - ((tblSalesItems.discount/100)*tblSalesItems.qty*tblSalesItems.rate) + (((tblSalesItems.Qty*tblSalesItems.rate)- ((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.VAT/100) + (((tblSalesItems.Qty*tblSalesItems.Rate)-((tblSalesItems.discount/100)*tblSalesItems.Qty*tblSalesItems.Rate)) * tblSalesItems.CST/100)))) as rate,sum(tblSalesItems.Qty) as qty FROM ((tblSales INNER JOIN tblSalesItems ON tblSales.BillNo = tblSalesItems.BillNo) inner join tblProductMaster on tblSalesItems.ItemCode = tblProductMaster.ItemCode) inner join tblCategories ON tblProductMaster.CategoryID = tblCategories.CategoryID WHERE tblsales.InternalTransfer in ('no','NO') and tblsales.purchaseReturn in ('no','NO') and tblsales.DeliveryNote in ('no','NO') and tblsales.customerid = " + id + " group by tblProductMaster.rate");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public void UpdateScreen(string connection, int ScreenNo, string ScreenName, string Subject, int ScreenId, string Content)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        string dbQry = string.Format("Update tblScreenMaster Set ScreenNo = {0}, ScreenName = '{1}', Subject = '{2}', Content = '{4}' Where ScreenId = {3}", ScreenNo, ScreenName, Subject, ScreenId, Content);

        try
        {
            manager.Open();
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetScreen(string connection, string txtSearch)
    {
        if (connection == null)
        {
            throw new Exception("Connection Expired");
        }

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        //if (txtSearch == null || txtSearch == "")
        //    txtSearch = "";
        //else
        //    txtSearch = "%" + txtSearch + "%";

        try
        {


            if (txtSearch == null || txtSearch == "")
            {
                dbQry = "select A.*, (Select count(*) from tblScreenMaster where A.Id<=Id) as RowNumber from tblScreenMaster as A Order by Id desc ";
            }
            else
            {
                dbQry = "select A.*, (Select count(*) from tblScreenMaster where A.Id<=Id) as RowNumber from tblScreenMaster as A where A.ScreenName like '%" + txtSearch + "%' Order by Id desc ";
            }

            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListEmailConfig()
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            manager.Open();

            dbQry.Append("SELECT * ");
            dbQry.Append("FROM tblEmailConfig ");
            dbQry.Append("Order By Id Asc ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            DataTable dt = new DataTable();
            DataColumn dc;

            dc = new DataColumn("ID");
            dt.Columns.Add(dc);

            dc = new DataColumn("ScreenNo");
            dt.Columns.Add(dc);

            dc = new DataColumn("EmailId");
            dt.Columns.Add(dc);

            dc = new DataColumn("Active");
            dt.Columns.Add(dc);

            dc = new DataColumn("Chk");
            dt.Columns.Add(dc);

            ds.Tables.Add(dt);

            DataRow dr = ds.Tables[0].NewRow();

            dr["ID"] = "0";
            dr["ScreenNo"] = "0";
            dr["EmailId"] = string.Empty;
            dr["Active"] = string.Empty;
            dr["Chk"] = string.Empty;

            //ds.Tables[0].Rows.InsertAt(dr, 0);


            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet ListSMSConfig()
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            manager.Open();

            dbQry.Append("SELECT * ");
            dbQry.Append("FROM tblSMSConfig ");
            dbQry.Append("Order By Id Asc ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            DataTable dt = new DataTable();
            DataColumn dc;

            dc = new DataColumn("ID");
            dt.Columns.Add(dc);

            dc = new DataColumn("ScreenNo");
            dt.Columns.Add(dc);

            dc = new DataColumn("EmailId");
            dt.Columns.Add(dc);

            dc = new DataColumn("Active");
            dt.Columns.Add(dc);

            dc = new DataColumn("Chk");
            dt.Columns.Add(dc);

            ds.Tables.Add(dt);

            DataRow dr = ds.Tables[0].NewRow();

            dr["ID"] = "0";
            dr["ScreenNo"] = "0";
            dr["EmailId"] = string.Empty;
            dr["Active"] = string.Empty;
            dr["Chk"] = string.Empty;

            //ds.Tables[0].Rows.InsertAt(dr, 0);


            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void InsertEmailConfig(string connection, int ScreenNumber, string EmailId, string Active, string Chk)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("INSERT INTO tblEmailConfig(ScreenNo,EmailId,Active,Chk) VALUES({0},'{1}','{2}','{3}')",
            ScreenNumber, EmailId, Active, Chk);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

            manager.Dispose();

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public void InsertSMSConfig(string connection, int ScreenNumber, string EmailId, string Active, string Chk)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("INSERT INTO tblSMSConfig(ScreenNo,EmailId,Active,Chk) VALUES({0},'{1}','{2}','{3}')",
            ScreenNumber, EmailId, Active, Chk);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

            manager.Dispose();

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public DataSet GetConfigForId(string connection, int ID, string txt)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        try
        {
            if (txt == "Email")
            {
                dbQry.Append("SELECT * FROM tblEmailConfig ");
                dbQry.AppendFormat("Where ID = {0}", ID);
            }
            else
            {
                dbQry.Append("SELECT * FROM tblSMSConfig ");
                dbQry.AppendFormat("Where ID = {0}", ID);
            }

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void UpdateEmailConfig(string connection, int ID, int ScreenNo, string EmailId, string Active, string chk)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("UPDATE tblEmailConfig SET ScreenNo= {0},EmailId='{1}',Active='{2}',chk='{3}' WHERE ID={4}",
                ScreenNo, EmailId, Active, chk, ID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

            manager.Dispose();

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public void UpdateSMSConfig(string connection, int ID, int ScreenNo, string EmailId, string Active, string chk)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("UPDATE tblSMSConfig SET ScreenNo= {0},EmailId='{1}',Active='{2}',chk='{3}' WHERE ID={4}",
            ScreenNo, EmailId, Active, chk, ID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

            manager.Dispose();

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetDetailsForScreenNo(string connection, string ScreenName, string type)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;
        string obsolute = string.Empty;
        //string ScreenName = string.Empty;
        try
        {
            manager.Open();

            //if (type == "Email")
            //{
            dbQry = "SELECT tblScreenMaster.*,tblScreenConfig.* FROM tblScreenMaster inner join tblScreenConfig on tblScreenMaster.id = tblScreenConfig.id Where ScreenName='" + ScreenName + "' Order By ScreenNo Asc";
            //}
            //else
            //{
            //    dbQry = "SELECT * FROM tblSMSConfig Where ScreenNo=" + ScreenNo + " Order By ScreenNo Asc";
            //}

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    public DataSet GetScreenNoForScreenName(string connection, string ScreenName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;
        string obsolute = string.Empty;

        try
        {
            manager.Open();

            dbQry = "SELECT * FROM tblScreens Where ScreenName = '" + ScreenName + "' Order By ScreenNo Asc";

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    #region Admin Settings

    public int InsertAdminSettingsInfo(int settingsId, int strHolidayCount, int strPermissionHr, int strNumPermission, int strCompOff, int strWorkdaysWeek, bool boolSupervisorOverwrite)
    {
        int result = 0;

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        int isSuperisor = 0;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            if (boolSupervisorOverwrite == true)
            {
                isSuperisor = -1;
            }

            if (settingsId == 0)
            {
                object exists = manager.ExecuteScalar(CommandType.Text, "DELETE FROM tblHRAdminSettings");

                dbQry = string.Format("INSERT INTO tblHRAdminSettings(Yearly_Holiday_Count, Daily_Permission_Thresold, Monthly_Permission_Count, Compoff_Validity_Period, Weekly_WorkDays_Count, isSupervisorOverwritable) VALUES({0}, {1}, {2}, {3}, {4}, {5})",
                    strHolidayCount, strPermissionHr, strNumPermission, strCompOff, strWorkdaysWeek, isSuperisor);
            }
            else
            {
                dbQry = string.Format("UPDATE tblHRAdminSettings SET Yearly_Holiday_Count = {1}, Daily_Permission_Thresold = {2}, Monthly_Permission_Count = {3}, Compoff_Validity_Period = {4}, Weekly_WorkDays_Count = {5}, isSupervisorOverwritable = {6} WHERE ID = {0}",
                settingsId, strHolidayCount, strPermissionHr, strNumPermission, strCompOff, strWorkdaysWeek, isSuperisor);
            }

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();
            result = 1;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

        return result;
    }

    public DataSet GetAdminSettings()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = "SELECT ID, Yearly_Holiday_Count, Daily_Permission_Thresold, Monthly_Permission_Count, Compoff_Validity_Period, Weekly_WorkDays_Count, isSupervisorOverwritable FROM tblHRAdminSettings";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    #endregion

    #region Admin Holiday

    public DataSet GetHolidaySummary(string connection, string txtSearchInput, string searchCriteria, string userId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearchInput = "%" + txtSearchInput + "%";

        if (searchCriteria == "HolidayName")
        {
            dbQry = "SELECT Holiday_ID, Date, Holiday_Name, Remarks FROM tblHolidayList where Holiday_Name LIKE '" + txtSearchInput + "'";
        }
        else if (searchCriteria == "Date")
        {
            dbQry = "SELECT Holiday_ID, Date, Holiday_Name, Remarks FROM tblHolidayList where [Date] LIKE '" + txtSearchInput + "'";
        }
        else
        {
            dbQry = "SELECT Holiday_ID, Date, Holiday_Name, Remarks FROM tblHolidayList";
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetHolidayInfoByID(string connection, int Holiday_ID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        dbQry = "SELECT Holiday_ID, [Date], Holiday_Name, Remarks FROM tblHolidayList where Holiday_ID =" + Holiday_ID;

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void InsertHolidayInfo(string connection, string Username, string Date, string Holiday_Name, string Remarks)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblHolidayList Where Holiday_Name='" + Holiday_Name + "'");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Holiday Name Exists");
                }
            }

            dbQry = string.Format("INSERT INTO tblHolidayList([Date], Holiday_Name, Remarks) VALUES(Format('{0}', 'dd/mm/yyyy'), '{1}', '{2}')",
              Date, Holiday_Name, Remarks);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void UpdateHolidayInfo(string connection, int Holiday_ID, string Username, string Date, string Holiday_Name, string Remarks)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblHolidayList Where Holiday_Name='" + Holiday_Name + "' AND Holiday_ID <> " + Holiday_ID + " ");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Holiday Name Exists");
                }
            }


            dbQry = string.Format("UPDATE tblHolidayList SET [Date] = Format('{1}', 'dd/mm/yyyy'), Holiday_Name = '{2}', Remarks = '{3}' WHERE Holiday_ID = {0}",
                Holiday_ID, Date, Holiday_Name, Remarks);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void DeleteHolidayInfo(string connection, int Holiday_ID, string UserName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("DELETE FROM tblHolidayList WHERE Holiday_ID = {0}",
                Holiday_ID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    #endregion

    #region Admin Pay Component

    public DataSet GetPayCompSummary(string connection, string txtSearchInput, string searchCriteria, string userId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearchInput = "%" + txtSearchInput + "%";
        dbQry = "SELECT PayComponentID, PayComponentName, A.Description, IsDeduction, IsComputes, IsActive, PayComponentType FROM tblPayComponents A inner join tblPayComponentType B ON A.PayComponentType_ID = B.PayComponentTypeID ";

        if (searchCriteria == "PayComponentName")
        {
            dbQry = "SELECT PayComponentID, PayComponentName, A.Description, IsDeduction, IsComputes, IsActive, PayComponentType FROM tblPayComponents A inner join tblPayComponentType B ON A.PayComponentType_ID = B.PayComponentTypeID where A.PayComponentName LIKE '" + txtSearchInput + "'";
        }
        else if (searchCriteria == "IsDeduction")
        {
            dbQry = "SELECT PayComponentID, PayComponentName, A.Description, IsDeduction, IsComputes, IsActive, PayComponentType FROM tblPayComponents A inner join tblPayComponentType B ON A.PayComponentType_ID = B.PayComponentTypeID where A.IsDeduction LIKE '" + txtSearchInput + "'";
        }
        //else if (searchCriteria == "IsComputes")
        //{
        //    dbQry = "SELECT PayComponentID, PayComponentName, A.Description, IsDeduction, IsComputes, IsActive, PayComponentType FROM tblPayComponents A inner join tblPayComponentType B ON A.PayComponentType_ID = B.PayComponentTypeID where A.IsComputes LIKE '" + txtSearchInput + "'";
        //}
        else
        {
            dbQry = "SELECT PayComponentID, PayComponentName, A.Description, IsDeduction, IsComputes, IsActive, PayComponentType FROM tblPayComponents A inner join tblPayComponentType B ON A.PayComponentType_ID = B.PayComponentTypeID ";
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetPayCompInfoByID(string connection, int PayComponentID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        dbQry = "SELECT PayComponentID, PayComponentName, Description, IsDeduction, IsComputes, IsActive, Description as PayComponentDescription, PayComponentType_ID as PayComponentTypeID FROM tblPayComponents where PayComponentID =" + PayComponentID;

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void InsertPayCompInfo(string connection, string Username, string PayComponentName, int PayComponentTypeID, string PayComponentDescription, bool IsDeduction, bool IsActive)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        int isAct = 0;
        int isDec = 0;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblPayComponents Where PayComponentName='" + PayComponentName + "'");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Pay Component Name Exists");
                }
            }

            if (IsActive == true)
            {
                isAct = -1;
            }

            if (IsDeduction == true)
            {
                isDec = -1;
            }

            dbQry = string.Format("INSERT INTO tblPayComponents(PayComponentName, IsDeduction, IsComputes, IsActive, Description, PayComponentType_ID) VALUES('{0}', {1}, {2}, {3}, '{4}', {5})",
              PayComponentName, isDec, 0, isAct, PayComponentDescription, PayComponentTypeID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void UpdatePayCompInfo(string connection, string Username, int PayComponentID, string PayComponentName, string PayComponentDescription, int PayComponentTypeID, bool IsDeduction, bool IsActive)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        int isAct = 0;
        int isDec = 0;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblPayComponents Where PayComponentName='" + PayComponentName + "' AND PayComponentID <> " + PayComponentID + " ");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Pay Component Name Exists");
                }
            }

            if (IsActive == true)
            {
                isAct = -1;
            }

            if (IsDeduction == true)
            {
                isDec = -1;
            }

            dbQry = string.Format("UPDATE tblPayComponents SET PayComponentName = '{1}', IsDeduction = '{2}', IsComputes = {3}, IsActive = {4}, Description = '{5}', PayComponentType_ID = {6}  WHERE PayComponentID = {0}",
                    PayComponentID, PayComponentName, isDec, 0, isAct, PayComponentDescription, PayComponentTypeID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void DeletePayCompInfo(string connection, int PayComponentID, string UserName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("DELETE FROM tblPayComponents WHERE PayComponentID = {0}",
                PayComponentID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetPayCompTypeList(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        dbQry = "SELECT PayComponentTypeID, PayComponentType FROM tblPayComponentType";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    #endregion


    #region Attendance Methods
    public DataSet GetAttendanceDetails(int attendanceID, string createdByUserId)
    {
        DataTable dtAttendanceSummary = GetAttendanceSummaryById(attendanceID.ToString());
        DataSet dsResult = new DataSet();
        if (dtAttendanceSummary != null && dtAttendanceSummary.Rows.Count > 0)
        {
            DBManager manager = new DBManager();
            manager.ConnectionString = CreateConnectionString(this.ConnectionString);
            string dbQry = string.Empty;

            Dictionary<string, string> reportees = GetReporteesBySupervisorId(createdByUserId);
            string reporteesFilter = string.Join(",", reportees.Keys);
            if (!reporteesFilter.Equals(string.Empty))
                reporteesFilter = "(" + reporteesFilter + ")";

            int year = 0;
            int month = 0;
            int.TryParse(dtAttendanceSummary.Rows[0][2].ToString(), out month);
            int.TryParse(dtAttendanceSummary.Rows[0][1].ToString(), out year);

            dbQry = string.Format(@"SELECT EmployeeNo, AttendanceDate, Remarks FROM   tblAttendanceDetail a WHERE (EmployeeNo IN {0}) and YEAR(AttendanceDate)={1} and MONTH(AttendanceDate)={2} ORDER BY EmployeeNo,AttendanceDate ASC", reporteesFilter, year, month);

            try
            {
                manager.Open();
                DataSet ds = new DataSet();
                ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

                if (ds.Tables[0].Rows.Count > 0)
                {
                    DataTable dtAvailableReportees = FormatAttendanceDetailData(ds.Tables[0], createdByUserId);
                    dsResult.Tables.Add(IncludeMissingRepotees(dtAvailableReportees, reportees, year, month));
                    return dsResult;
                }
                else
                    return null;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                manager.Dispose();
            }
        }
        return null;
    }

    public DataSet GetAttendanceSummary(string txtSearchInput, string userId)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        if (txtSearchInput.ToUpper().Equals("ALL"))
        {
            dbQry = string.Format("SELECT a.AttendanceID, a.AttendanceYear, a.AttendanceMonthId, m.MonthName, m.MonthName+' - '+a.AttendanceYear as Period, a.CreatedBy, a.DateSubmitted, a.Approver, a.Status FROM tblAttendanceSummary a INNER JOIN tblMonth m ON a.AttendanceMonthId = m.MonthId WHERE a.CreatedBy ='{0}'", userId);
        }
        else
        {
            dbQry = string.Format("SELECT a.AttendanceID, a.AttendanceYear, a.AttendanceMonthId, m.MonthName, m.MonthName+' - '+a.AttendanceYear as Period, a.CreatedBy, a.DateSubmitted, a.Approver, a.Status FROM tblAttendanceSummary a INNER JOIN tblMonth m ON a.AttendanceMonthId = m.MonthId WHERE a.CreatedBy ='{0}' AND AttendanceYear='{1}'", userId, txtSearchInput);
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetNewAttendanceDetailsForMonth(string connection, int year, int month, string userId)
    {
        DataSet dsResult = new DataSet();
        DataTable dtAttendanceDetail = new DataTable();
        _connectionstring = connection;



        Dictionary<string, string> reportees = GetReporteesBySupervisorId(userId);
        foreach (string empNo in reportees.Keys)
        {
            List<string> rowDefaultAttendanceData = GetAttendanceDataForTheMonth(empNo, year, month, dtAttendanceDetail);
            rowDefaultAttendanceData[0] = empNo;
            rowDefaultAttendanceData[1] = reportees[empNo];
            dtAttendanceDetail.Rows.Add(rowDefaultAttendanceData.ToArray());
        }
        dsResult.Tables.Add(dtAttendanceDetail);
        return dsResult;
    }

    private List<string> GetAttendanceDataForTheMonth(string empNo, int year, int month, DataTable dtAttendanceDetail = null)
    {
        List<string> rowDefaultAttendanceData = new List<string>();
        List<string> rotaWeekOffDays = GetRotaWeekOffList(empNo, year, month);
        // Add Employee Column
        if (dtAttendanceDetail != null && dtAttendanceDetail.Columns.Count == 0)
        {
            dtAttendanceDetail.Columns.Add(new DataColumn("EmployeeNo", typeof(string)));
            dtAttendanceDetail.Columns.Add(new DataColumn("Employee", typeof(string)));
        }


        // Add the month's days as column
        DateTime dateValue = DateTime.Parse(string.Format("{0}-{1}-{2}", year, month, "01"));
        int index = 1;
        do
        {
            if (dateValue.Month == month)
            {
                string weekOffDaysConfiguration = string.Empty;
                DataColumn column = new DataColumn("Day" + index.ToString(), typeof(string));
                column.Caption = dateValue.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);
                if (dtAttendanceDetail != null && dtAttendanceDetail.Columns.Count < 33)
                {
                    dtAttendanceDetail.Columns.Add(column);
                }
                if (IsHoliday(dateValue))
                {
                    rowDefaultAttendanceData.Add("Holiday");
                }
                else if (HasAppliedleave(dateValue, empNo))
                {
                    rowDefaultAttendanceData.Add("Leave");
                }
                else if (dateValue.DayOfWeek.ToString().Equals("Sunday") || rotaWeekOffDays.Contains(dateValue.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture)))
                {
                    rowDefaultAttendanceData.Add("Week Off");
                }
                else
                {
                    rowDefaultAttendanceData.Add("Present");
                }
            }
            else
            {
                DataColumn column = new DataColumn("Day" + index.ToString(), typeof(string));
                column.Caption = "NA";
                if (dtAttendanceDetail != null && !dtAttendanceDetail.Columns.Contains(column.ColumnName))
                {
                    dtAttendanceDetail.Columns.Add(column);
                }
                rowDefaultAttendanceData.Add("NA");
            }

            dateValue = dateValue.AddDays(1);
            index++;
        } while (index <= 31);


        rowDefaultAttendanceData.Insert(0, "TempEmpName");
        rowDefaultAttendanceData.Insert(0, "TempEmpNo");
        return rowDefaultAttendanceData;
    }

    private List<string> GetRotaWeekOffList(string empNo, int year, int month)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        dbQry = string.Format(@"SELECT a.ShiftedDate
                                FROM tblEmployeeWeekOffRota a
                                WHERE a.EmployeeNo ={0}
                                AND IsActive=1
                                AND (YEAR(a.ShiftedDate) = {1} AND MONTH(a.ShiftedDate) = {2})", empNo, year, month);

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            List<string> weekOffDaysList = new List<string>();
            if (ds != null && ds.Tables.Count > 0)
            {
                Parallel.ForEach(ds.Tables[0].Select("1=1", string.Empty), row =>
                {
                    weekOffDaysList.Add(row[0].ToString());
                });

            }
            return weekOffDaysList;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool HasAppliedleave(DateTime dateValue, string empNo)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        dbQry = string.Format(@"SELECT a.LeaveId, a.EmployeeNo, a.StartDate,a.StartDateSession, a.EndDate,a.EndDateSession
                                FROM tblEmployeeLeave a
                                WHERE a.EmployeeNo ={0}
                                AND (a.StartDate<='{1}' 
								AND a.EndDate>='{1}') AND (Status <>'Rejected' OR Status <> 'Cancelled')"
            , empNo.ToString(), dateValue.ToString("MM/dd/yyyy"));

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return true;
            else
                return false;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool IsHoliday(DateTime dateValue)
    {
        //Get holidays list
        DataTable dtHolidaysList = GetHolidayListForTheYear(dateValue.Year);

        DataRow[] drHolidays = dtHolidaysList.Select(string.Format("Date = '{0}'", dateValue.ToShortDateString()));
        if (drHolidays.Length > 0)
        {
            return true;
        }
        return false;
    }

    public bool IsAttendanceSummaryExists(string userId, string year, string month)
    {
        DataTable dtAttendanceSummary = GetAttendanceSummary(userId, year, month);
        if (dtAttendanceSummary != null && dtAttendanceSummary.Rows.Count > 0)
        {
            return true;
        }
        else
        { return false; }
    }

    public bool SaveAttendanceDetail(DataTable dtAttendanceDetail, string createdByUserId, string managerUserID, string year, string month, bool createSummary, out int attendanceId)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        manager.Open();
        manager.BeginTransaction();
        try
        {
            attendanceId = 0;
            if (createSummary)
            {
                if (string.IsNullOrEmpty(managerUserID))
                {
                    UserInfo userInfo = GetUserInfoByName(createdByUserId);
                    managerUserID = userInfo.ManagerUserId;

                }

                attendanceId = InsertAttendanceDetailSummary(manager, year, month, createdByUserId, managerUserID, "In Progress");
            }
            RemoveExistingAttendanceDetail(manager, year, month, createdByUserId);
            if (InsertAttendanceDetails(manager, dtAttendanceDetail))
            {
                manager.CommitTransaction();
                return true;
            }
            else
            {
                attendanceId = 0;
                manager.RollbackTransaction();
                return false;
            }
        }
        catch (Exception ex)
        {
            manager.RollbackTransaction();
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public bool SubmitAttendance(int attendanceID, string userName, string year, string month, ref string validationMsg)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;

        try
        {
            manager.Open();

            // validate atttendance submission process.
            validationMsg = string.Empty;
            Dictionary<string, string> employeeNos = GetReporteesBySupervisorId(userName);
            string unApprovedLeavesMsg = string.Empty;
            string unAppliedLeavesMsg = string.Empty;

            foreach (string empNoStr in employeeNos.Keys)
            {
                int empNo = 0;
                if (int.TryParse(empNoStr, out empNo))
                {
                    int attYear = int.Parse(year);
                    int attMonth = int.Parse(month);

                    AdminBusinessLogic adminBL = new AdminBusinessLogic(this.ConnectionString);
                    //bool hasUnapprovedLeave = adminBL.HaveUnApprovedLeavesForTheMonth(empNo, attYear, attMonth, ref unApprovedLeavesMsg);
                    bool hasUnapprovedLeave = false;
                    bool hasPendingLeaveEntries = !adminBL.HaveAppliedTheLeavesTaken(empNo, attYear, attMonth, ref unAppliedLeavesMsg);
                    if (hasPendingLeaveEntries || hasUnapprovedLeave)
                    {
                        validationMsg += unApprovedLeavesMsg + Environment.NewLine + unAppliedLeavesMsg + Environment.NewLine;
                    }

                }
                else
                {
                    validationMsg += "Unable to recogonize the Employee number: " + empNoStr + Environment.NewLine;
                }
            }

            if (string.IsNullOrEmpty(validationMsg))
            {
            dbQry = string.Format(@"UPDATE tblAttendanceSummary SET DateSubmitted='{0}',Status='{1}' WHERE AttendanceId ={2}", DateTime.Now.ToString(), "Submitted", attendanceID.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
                return true;
        }
            else
            {
                return false;
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();

        }
        return true;
    }

    public DataTable GetAttendanceYearList(string userId)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = string.Format("SELECT DISTINCT a.AttendanceYear FROM tblAttendanceSummary a WHERE a.CreatedBy ='{0}'", userId);

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds != null)
            {
                DataRow dr = ds.Tables[0].NewRow();
                dr[0] = "All";
                ds.Tables[0].Rows.InsertAt(dr, 0);
                return ds.Tables[0];
            }
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    private DataTable GetAttendanceSummary(string userId, string year, string month)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = string.Format("SELECT a.AttendanceID,a.AttendanceYear,a.AttendanceMonthId,a.CreatedBy FROM tblAttendanceSummary a WHERE a.CreatedBy ='{0}' AND a.AttendanceYear='{1}' AND a.AttendanceMonthId={2}", userId, year, month);

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds.Tables[0];
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    private DataTable GetAttendanceSummaryById(string attendanceId)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = string.Format("SELECT a.AttendanceID,a.AttendanceYear,a.AttendanceMonthId,a.CreatedBy FROM tblAttendanceSummary a WHERE a.AttendanceId ={0}", attendanceId);

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds.Tables[0];
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    private void RemoveExistingAttendanceDetail(DBManager manager, string year, string month, string createdByUserId)
    {
        Dictionary<string, string> reportees = GetReporteesBySupervisorId(createdByUserId);
        string reporteesFilter = "(" + string.Join(",", reportees.Keys) + ")";

        if (!string.IsNullOrEmpty(reporteesFilter))
        {
            string dbQry = string.Empty;
            try
            {

                dbQry = string.Format(@"DELETE FROM tblAttendanceDetail WHERE (EmployeeNo IN {0}) and YEAR(AttendanceDate)={1} and MONTH(AttendanceDate)={2}", reporteesFilter, year, month);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
    }

    private int InsertAttendanceDetailSummary(DBManager manager, string year, string month, string supervisorName, string managerUserID, string status)
    {

        string dbQry = string.Empty;
        int attendanceId = 0;
        try
        {
            dbQry = string.Format(@"Insert into tblAttendanceSummary (AttendanceYear,AttendanceMonthId,CreatedBy,Approver,Status)
                                        Values('{0}',{1},'{2}','{3}','{4}')", year, month, supervisorName, managerUserID, status);
            attendanceId = manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = "SELECT AttendanceId FROM tblAttendanceSummary Order by AttendanceId desc";
            var result = manager.ExecuteScalar(CommandType.Text, dbQry);
            int.TryParse(result.ToString(), out attendanceId);
        }
        catch (Exception ex)
        {
            throw ex;
        }

        return attendanceId;
    }

    private bool InsertAttendanceDetails(DBManager manager, DataTable dtAttendanceDetail)
    {

        string dbQry = string.Empty;

        try
        {

            foreach (DataRow dr in dtAttendanceDetail.Rows)
            {
                dbQry = string.Format(@"Insert into tblAttendanceDetail (EmployeeNo,AttendanceDate,Remarks)Values({0},'{1}','{2}')", dr[0], DateTime.Parse(dr[1].ToString()).ToString("MM/dd/yyyy"), dr[2]);
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }


        }
        catch (Exception ex)
        {
            throw ex;
        }

        return true;
    }

    private Dictionary<string, string> GetReporteesBySupervisorId(string supervisorId)
    {
        Dictionary<string, string> reportees = new Dictionary<string, string>();
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(_connectionstring);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = string.Format("SELECT e.EmpNo,EmpFirstName FROM tblEmployee e INNER JOIN tblUserInfo u on e.ManagerID=u.EmpNo WHERE u.UserName ='{0}'", supervisorId);

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
            {

                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    reportees.Add(row[0].ToString(), row[1].ToString());
                }
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }


        return reportees;

    }

    private DataTable FormatAttendanceDetailData(DataTable dtAttendanceDetailTemp, string supervisorId)
    {
        DataTable dtAttendanceDetail = new DataTable();


        // Add Employee Column
        dtAttendanceDetail.Columns.Add(new DataColumn("EmployeeNo", typeof(string)));
        dtAttendanceDetail.Columns.Add(new DataColumn("Employee", typeof(string)));

        Dictionary<string, string> reportees = GetReporteesBySupervisorId(supervisorId);
        bool columnCreated = false;
        DateTime currentAttendancePeriod;
        foreach (string empNo in reportees.Keys)
        {
            List<string> rowDefaultAttendanceData = new List<string>();
            rowDefaultAttendanceData.Add(empNo);
            rowDefaultAttendanceData.Add(reportees[empNo]);

            DataRow[] rows = dtAttendanceDetailTemp.Select(@"EmployeeNo=" + empNo);
            if (rows != null && rows.Length > 0)
            {
                int index = 1;
                foreach (DataRow row in rows)
                {
                    DateTime dateValue = DateTime.Parse(row[1].ToString());
                    if (!columnCreated)
                    {
                        DataColumn column = new DataColumn("Day" + index.ToString(), typeof(string));
                        column.Caption = dateValue.ToShortDateString();
                        currentAttendancePeriod = dateValue;
                        dtAttendanceDetail.Columns.Add(column);
                        index++;
                    }
                    rowDefaultAttendanceData.Add(GetAttendanceRemarks(dateValue, empNo, row[2].ToString()));
                }

                columnCreated = true;

                dtAttendanceDetail.Rows.Add(rowDefaultAttendanceData.ToArray());
            }
            if (!dtAttendanceDetail.Columns.Count.Equals(33))
            {
                int index = dtAttendanceDetail.Columns.Count - 2;
                do
                {
                    index++;
                    DataColumn column = new DataColumn("Day" + index.ToString(), typeof(string));
                    column.Caption = "NA";
                    dtAttendanceDetail.Columns.Add(column);

                } while (dtAttendanceDetail.Columns.Count < 33);
            }
        }
        if (columnCreated)
        {
            return dtAttendanceDetail;
        }
        else { return null; }
    }

    private string GetAttendanceRemarks(DateTime dateValue, string empNo, string currentRemarks)
    {
        if (HasAppliedleave(dateValue, empNo))
        {
            return "Leave";
        }
        //else if (currentRemarks.ToUpper().Equals("LEAVE"))
        //{
        //    return "Present";
        //}
        else
        {
            return currentRemarks;
        }
    }

    private DataTable IncludeMissingRepotees(DataTable dtAvailableReportees, Dictionary<string, string> reportees, int year, int month)
    {
        foreach (string emp in reportees.Keys)
        {
            string tempQuery = "EmployeeNo = '" + emp + "'";
            if (dtAvailableReportees.Select(tempQuery).Length == 0)
            {
                List<string> defaultAttendanceRow = GetAttendanceDataForTheMonth(emp, year, month);
                defaultAttendanceRow[0] = emp;
                defaultAttendanceRow[1] = reportees[emp];
                dtAvailableReportees.Rows.Add(defaultAttendanceRow.ToArray());
            }
        }
        return dtAvailableReportees;
    }


    #endregion

    #region Leave Methods
    public DataSet GetLeaveSummary(string userName, string searchCriteria)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        int empNo = GetUserInfoByName(userName).EmpNo;

        if (!string.IsNullOrEmpty(searchCriteria))
        {
            searchCriteria = "AND " + searchCriteria;
        }
        dbQry = string.Format(@"SELECT a.LeaveId, a.EmployeeNo,e.EmpFirstName as EmployeeName, a.StartDate, a.EndDate, FORMAT(a.StartDate, 'Short Date')+' - '+FORMAT(a.EndDate, 'Short Date') as DateRange, a.DateApplied, a.LeaveTypeID, l.LeaveTypeName, a.Reason,a.Status, a.Approver, e1.EmpFirstName as ApproverName, a.ApproverComments, a.EmailContact, a.PhoneContact 
                                FROM ((tblEmployeeLeave a 
                                INNER JOIN tblLeaveTypes l ON a.LeaveTypeId = l.Id) 
                                INNER JOIN tblEmployee e on a.EmployeeNo = e.EmpNo)
                                INNER JOIN tblEmployee e1 on a.Approver = e1.EmpNo
                                WHERE a.EmployeeNo ={0} {1}", empNo, searchCriteria);
        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            TroyLiteExceptionManager.HandleException(ex);
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }
    public DataTable GetLeaveDetailsById(int leaveId)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = string.Format(@"SELECT a.LeaveId, a.EmployeeNo,e1.EmpFirstName as EmployeeName, a.StartDate,a.StartDateSession, a.EndDate,a.EndDateSession, a.DateApplied,a.TotalDays, a.LeaveTypeID, a.Reason,a.Status, a.Approver,e.EmpFirstName as ApproverName, a.ApproverComments, a.EmailContact, a.PhoneContact 
                                FROM ((tblEmployeeLeave a 
                                INNER JOIN tblLeaveTypes l ON a.LeaveTypeId = l.Id)
                                INNER JOIN tblEmployee e ON a.Approver = e.EmpNo)
                                INNER JOIN tblEmployee e1 ON a.EmployeeNo = e1.EmpNo
                                WHERE a.LeaveId ={0}", leaveId.ToString());

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables.Count > 0)
                return ds.Tables[0];
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }
    public DataTable GetLeaveInfoById(string connection, Int32 leaveId)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(connection);

        string dbQry = string.Empty;

        try
        {
            manager.Open();
            dbQry = string.Format(@"SELECT LeaveId,EmployeeNo,StartDate,StartDateSession,EndDate,EndDateSession,TotalDays,DateApplied, 
                                        LeaveTypeID,Reason,Status,Approver,ApproverComments,EmailContact,PhoneContanct
                                    FROM tblEmployeeLeave WHERE LeaveID={0}", leaveId);

            DataSet ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables.Count > 0)
                return ds.Tables[0];
            else
                return new DataTable();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();

        }
    }
    public DataSet GetLeaveRequestsSummaryForTheSupervisor(string userName)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        int empNo = GetUserInfoByName(userName).EmpNo;

        dbQry = string.Format(@"SELECT a.LeaveId, a.EmployeeNo,e1.EmpFirstName as EmployeeName,FORMAT(a.StartDate, 'Short Date')+' - '+FORMAT(a.EndDate, 'Short Date') as DateRange, a.DateApplied, a.TotalDays, a.LeaveTypeID, a.Reason,a.Status, a.Approver,e.EmpFirstName as ApproverName, a.ApproverComments, a.EmailContact, a.PhoneContact 
                                FROM ((tblEmployeeLeave a 
                                INNER JOIN tblLeaveTypes l ON a.LeaveTypeId = l.Id)
                                INNER JOIN tblEmployee e ON a.Approver = e.EmpNo)
                                INNER JOIN tblEmployee e1 ON a.EmployeeNo = e1.EmpNo
                                WHERE a.Approver ={0} AND (a.Status <> 'Rejected' OR a.Status <>'Cancelled')", empNo);

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public int ApplyLeave(string EmpNo, DateTime StartDate, string StartDateSession, DateTime EndDate,
        string EndDateSession, DateTime DateApplied, string LeaveTypeId, string Reason, string Approver, string EmailContact, string PhoneContact, string status = "Submitted")
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        string dbQry = string.Empty;

        try
        {
            int empNumber = 0;
            int.TryParse(EmpNo, out empNumber);
            double totalLeaveDays = CalculateTotalLeaveDays(StartDate, StartDateSession, EndDate, EndDateSession);
            UserInfo usrInfo = GetUserInfoByEmpNo(empNumber);

            if (string.IsNullOrEmpty(Approver))
            {
                Approver = usrInfo.ManagerEmpNo.ToString();
            }

            manager.Open();
            dbQry = string.Format(@"INSERT INTO tblEmployeeLeave (EmployeeNo,StartDate,StartDateSession,EndDate,EndDateSession,TotalDays,DateApplied, 
                                        LeaveTypeID,Reason,Status,Approver,ApproverComments,EmailContact,PhoneContact)
                                        VALUES ({0},'{1}','{2}','{3}','{4}',{5},'{6}',{7},'{8}','{9}',{10},'{11}','{12}','{13}')"
                                        , empNumber.ToString(), StartDate.ToString("MM/dd/yyyy"), StartDateSession, EndDate.ToString("MM/dd/yyyy"), EndDateSession, totalLeaveDays, DateApplied.ToString("MM/dd/yyyy"), LeaveTypeId, Reason
                                        , status, Approver, "", EmailContact, PhoneContact);

            int resultId = manager.ExecuteNonQuery(CommandType.Text, dbQry);
            return resultId;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public int UpdateLeave(string leaveId, string EmployeeNo, DateTime StartDate, string StartDateSession, DateTime EndDate, string EndDateSession, DateTime DateApplied, string LeaveTypeId, string Reason, string Approver, string EmailContact, string PhoneContact)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        string dbQry = string.Empty;

        try
        {
            double totalLeaveDays = CalculateTotalLeaveDays(StartDate, StartDateSession, EndDate, EndDateSession);
            EmployeeNo = GetUserInfoByName(EmployeeNo).EmpNo.ToString();
            manager.Open();


            dbQry = string.Format(@"UPDATE tblEmployeeLeave SET EmployeeNo={0},StartDate='{1}',StartDateSession='{2}',EndDate='{3}',EndDateSession='{4}',TotalDays={5},DateApplied='{6}',LeaveTypeID={7},
                                                Reason='{8}',Approver={9},EmailContact='{10}',PhoneContact='{11}' WHERE LeaveId={12}"
                                        , EmployeeNo, StartDate.ToString("MM/dd/yyyy"), StartDateSession, EndDate.ToString("MM/dd/yyyy"), EndDateSession, totalLeaveDays, DateApplied.ToString("MM/dd/yyyy"), LeaveTypeId, Reason
                                        , Approver, EmailContact, PhoneContact, leaveId);

            int resultId = manager.ExecuteNonQuery(CommandType.Text, dbQry);
            return resultId;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();

        }
    }

    public int UpdateLeaveStatus(string leaveId, string status, string approverComments)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        string dbQry = string.Empty;

        try
        {
            manager.Open();


            dbQry = string.Format(@"UPDATE tblEmployeeLeave SET Status='{0}', ApproverComments='{1}' WHERE LeaveId={2}"
                                         , status, approverComments, leaveId);

            int resultId = manager.ExecuteNonQuery(CommandType.Text, dbQry);
            return resultId;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public int DeleteLeave(string leaveId)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        string dbQry = string.Empty;

        try
        {
            manager.Open();
            dbQry = string.Format(@"DELETE FROM tblEmployeeLeave WHERE LeaveId={0}"
                                         , leaveId);

            int resultId = manager.ExecuteNonQuery(CommandType.Text, dbQry);
            return resultId;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public double CalculateTotalLeaveDays(DateTime StartDate, string StartDateSession, DateTime EndDate, string EndDateSession)
    {
        double totalLeaveDays = 0;
        int dateDiffDays = new DateTimeHelper.DateDifference(StartDate, EndDate).Days;
        if (dateDiffDays.Equals(0))
        {
            if (StartDateSession.Equals("FN") && EndDateSession.Equals("AN"))
            {
                totalLeaveDays = 1.0;
            }
            else if (StartDateSession.Equals("FN") && EndDateSession.Equals("FN"))
            {
                totalLeaveDays = 0.5;
            }
            else if (StartDateSession.Equals("AN") && EndDateSession.Equals("AN"))
            {
                totalLeaveDays = 0.5;
            }
        }
        else
        {
            if (StartDateSession.Equals("FN") && EndDateSession.Equals("AN"))
            {
                totalLeaveDays = dateDiffDays + 1;
            }
            else if (StartDateSession.Equals("FN") && EndDateSession.Equals("FN"))
            {
                totalLeaveDays = dateDiffDays + 0.5;
            }
            else if (StartDateSession.Equals("AN") && EndDateSession.Equals("AN"))
            {
                totalLeaveDays = dateDiffDays + 0.5;
            }
            else if (StartDateSession.Equals("AN") && EndDateSession.Equals("FN"))
            {
                totalLeaveDays = dateDiffDays;
            }
        }
        return totalLeaveDays;
    }

    public DataTable ListLeaveTypes(string connection)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(connection);

        string dbQry = string.Empty;

        try
        {
            manager.Open();

            dbQry = string.Format(@"SELECT ID as LeaveTypeId, LeaveTypeName FROM tblLeaveTypes WHERE IsActive='true'");

            DataSet ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables.Count > 0)
                return ds.Tables[0];
            else
                return new DataTable();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public double GetLeaveLimit(int leaveTypeId, int employeeNo, DateTime leaveStartDate)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        string dbQry = string.Empty;
        double allowedCount = 0;
        try
        {
            manager.Open();

            if (leaveTypeId.Equals(3))
            {
                return GetActiveCompOffDays(employeeNo);
            }
            else
            {
                dbQry = string.Format(@"SELECT ll.AllowedCount,e.empDOJ FROM tblEmployeeRoleLeaveLimit ll
                                    INNER JOIN tblEmployee e ON e.EmployeeRoleId = ll.Role_Id
                                    WHERE e.EmpNo={0} AND ll.leaveType_Id={1} AND EffectiveDate <= '{2}'
                                    ORDER BY EffectiveDate DESC", employeeNo, leaveTypeId, leaveStartDate);
            }
            var result = manager.ExecuteDataSet(CommandType.Text, dbQry);
            if (result != null && result.Tables.Count > 0 && result.Tables[0].Rows.Count > 0)
            {
                if (double.TryParse(result.Tables[0].Rows[0][0].ToString(), out allowedCount))
                {
                    DateTime doj = DateTime.Parse(result.Tables[0].Rows[0][1].ToString());
                    double totalDaysCompleted = leaveStartDate.Subtract(doj).TotalDays;

                    double tempCount = (totalDaysCompleted * allowedCount) / 365;

                    double fractionPart = tempCount % 1;
                    double wholePart = Math.Ceiling(tempCount);

                    if (fractionPart >= 0.5)
                    {
                        allowedCount = wholePart + 0.5;
                    }
                    else
                {
                        allowedCount = wholePart;
                    }

                    return allowedCount;
                }
            }
            return allowedCount;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    private int GetActiveCompOffDays(int employeeNo)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        string dbQry = string.Empty;
        int allowedCount = 0;
        try
        {
            manager.Open();

            dbQry = string.Format(@"SELECT Count(1) FROM tblEmployeeCompOff c                                    
                                    WHERE e.EmpNo={0} AND IsActive=True", employeeNo);

            var result = manager.ExecuteScalar(CommandType.Text, dbQry);
            if (result != null)
            {
                if (int.TryParse(result.ToString(), out allowedCount))
                {
                    return allowedCount;
                }
            }
            return allowedCount;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public double GetTotalLeavesTaken(int year, int leaveTypeId, int employeeNo)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        string dbQry = string.Empty;
        double leavesTaken = 0.0;
        try
        {
            manager.Open();


            dbQry = string.Format(@"SELECT SUM(TotalDays) FROM tblEmployeeLeave l                                    
                                    WHERE l.EmployeeNo={0} AND l.leaveTypeId={1} AND YEAR(l.StartDate)={2} AND (l.Status <> 'Rejected' OR l.Status <> 'Cancelled') ", employeeNo, leaveTypeId, year);

            var result = manager.ExecuteScalar(CommandType.Text, dbQry);
            if (result != null)
            {
                if (double.TryParse(result.ToString(), out leavesTaken))
                {
                    return leavesTaken;
                }
            }
            return leavesTaken;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();

        }
    }

    #endregion

    #region Payroll Methods

    public bool QueuePayrollForTheMonth(int year, int month, out int payrollId)
    {
        payrollId = 0;
        payrollId = InsertPayrollDetails(year, month, false, "Queued", DateTime.Now);
        if (payrollId > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private int InsertPayrollDetails(int year, int month, bool isValidated, string status, DateTime dateTime)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        int payrollId = 0;
        try
        {
            manager.Open();
            dbQry = string.Format(@"INSERT INTO tblPayrollQueue (PayrollYear, PayrollMonthId,IsValidated,Status,PayRollInitiatedDateTime) 
                                    VALUES ('{0}',{1},{2},'{3}','{4}')", year, month, isValidated, status, dateTime);

            int result = manager.ExecuteNonQuery(CommandType.Text, dbQry);
            if (result > 0)
            {
                dbQry = string.Format("SELECT Top 1 PayrollId FROM tblPayrollQueue ORDER BY PayrollId DESC");
                string payRollQueueId = manager.ExecuteScalar(CommandType.Text, dbQry).ToString();
                int.TryParse(payRollQueueId, out payrollId);
            }
            return payrollId;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataTable GetPayrollQueueForTheMonth(int year, int month)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        try
        {
            manager.Open();

            dbQry = string.Format(@"SELECT * FROM tblPayrollQueue WHERE PayrollYear = '{0}' AND PayrollMonthId ={1}", year, month);
            DataSet ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            manager.Close();

            if (ds != null && ds.Tables.Count > 0)
            {
                return ds.Tables[0];
            }
            else
            {
                return null;
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataTable GetPayrollProcessLog(int payrollId)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        try
        {
            manager.Open();

            dbQry = string.Format(@"SELECT EmployeeNo,e.EmpFirstName,l.Message FROM tblPayrollGenerationLog l
                                    LEFT JOIN tblEmployee e ON e.EmpNo = l.EmployeeNo WHERE l.PayrollId ={0}", payrollId);
            DataSet ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            manager.Close();

            if (ds != null && ds.Tables.Count > 0)
            {
                return ds.Tables[0];
            }
            else
            {
                return null;
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataTable GetAllPaySlipForThePayroll(int payrolId)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;
        try
        {
            manager.Open();

            dbQry = string.Format(@"SELECT ep.PayslipId,ep.PayrollDate,e.empFirstName as EmployeeName,e.empDesig as Designation,er.Role_Name as Role,e.empDOJ as DateOfJoining,Payments,Deductions,(Payments-Deductions) as TotalPayable, LossOfPayDays, OtherAllowance, OtherDeductions
                                    FROM ((tblEmployeePayslip ep INNER JOIN
                                                tblEmployee e ON ep.EmployeeId = e.empno)
                                            INNER JOIN tblEmployeeRoles er ON er.Id = e.EmployeeRoleId)
                                    WHERE PayrollId = {0}", payrolId);

            DataSet ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            manager.Close();

            if (ds != null && ds.Tables.Count > 0)
            {
                ReCalculateTotalPayableAmount(ds.Tables[0]);
                return ds.Tables[0];
            }
            else
            {
                return null;
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    private void ReCalculateTotalPayableAmount(DataTable dataTable)
    {
        foreach (DataRow drPaySlip in dataTable.Rows)
        {
            double initialTotalPayable = 0;
            double.TryParse(drPaySlip["TotalPayable"].ToString(), out initialTotalPayable);
            double lopDays = 0;
            double.TryParse(drPaySlip["LossOfPayDays"].ToString(), out lopDays);

            double totalDaysInMonth = 30;

            double newTotalPayable = (initialTotalPayable * (totalDaysInMonth - lopDays)) / totalDaysInMonth;

            double otherAllowance = 0;
            double otherDeduction = 0;
            double.TryParse(drPaySlip["OtherAllowance"].ToString(), out otherAllowance);
            double.TryParse(drPaySlip["OtherDeductions"].ToString(), out otherDeduction);

            drPaySlip["TotalPayable"] = newTotalPayable + otherAllowance - otherDeduction;
        }
    }
    #endregion

    #region Timesheet Entry

    public DataSet GetTimesheetSummary(string TimesheetYear, string username)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        UserInfo userInfo = GetUserInfoByName(username);
        if (TimesheetYear.ToUpper().Equals("ALL"))
        {
            dbQry = string.Format("SELECT a.Id, a.StartDate, a.EndDate, (a.StartDate + ' - ' +a.EndDate) as TimesheetPeroid, a.EmpNo,a.TotalHours, a.SubmittedDate, a.ApproverUserId, a.Status FROM tblTimesheetSummary a WHERE a.EmpNo ='{0}'", userInfo.EmpNo);
        }
        else
        {
            dbQry = string.Format("SELECT a.Id, a.StartDate, a.EndDate, (a.StartDate + ' - ' +a.EndDate) as TimesheetPeroid, a.EmpNo,a.TotalHours, a.SubmittedDate, a.ApproverUserId, a.Status FROM tblTimesheetSummary a WHERE a.EmpNo ='{0}' AND (Year(a.StartDate)={1} OR YEAR(a.EndDate)={1}) ", userInfo.EmpNo, TimesheetYear);
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public bool IsTimesheetSummaryExists(string username, DateTime currentDate)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        UserInfo userInfo = GetUserInfoByName(username);
        dbQry = string.Format("SELECT a.Id, a.StartDate, a.EndDate, (a.StartDate + ' - ' +a.EndDate) as TimesheetPeroid, a.EmpNo,a.TotalHours, a.SubmittedDate, a.ApproverUserId, a.Status FROM tblTimesheetSummary a WHERE a.EmpNo ='{0}' AND (a.StartDate >= '{1}' AND a.EndDate <= '{1}' ) ", userInfo.EmpNo, currentDate);


        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return true;
            else
                return false;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public List<DataTable> GetNewTimesheetDetailsForMonth(DateTime dateTime, string username)
    {
        List<DataTable> result = new List<DataTable>();
        List<DateTime> lstWeekDates = GetWeekBoundaryDates(dateTime);

        DataTable dtTimesheetForTheDate = new DataTable();
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = string.Format("SELECT Id, TimeSheetSummaryId, TsDate, StartTime, EndTime, TotalHours, Description, Status, ApproverComments, IsActive FROM tblTimesheetDetail WHERE (1=2) ");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds != null && ds.Tables.Count > 0)
            {
                foreach (DateTime date in lstWeekDates)
                {
                    dtTimesheetForTheDate = new DataTable();
                    dtTimesheetForTheDate = ds.Tables[0].Clone();
                    dtTimesheetForTheDate.TableName = date.ToShortDateString();
                    dtTimesheetForTheDate.DisplayExpression = ((int)date.DayOfWeek).ToString();
                    result.Add(dtTimesheetForTheDate);
                }
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

        return result;
    }

    public void SaveTimeSheetDetails(DataSet dsTsDetailsAllDays)
    {
        throw new NotImplementedException();
    }

    public DataTable GetYearsConstant()
    {
        DataTable dt = new DataTable();
        dt.Columns.Add("Year");
        int year = 2010;
        while (year <= DateTime.Today.Year)
        {
            DataRow row = dt.NewRow();
            row[0] = year.ToString();
            dt.Rows.Add(row);
            year++;
        }
        return dt;
    }

    private List<DateTime> GetWeekBoundaryDates(DateTime dateTime)
    {
        List<DateTime> resultDates = new List<DateTime>(7);
        int dayOfTheWeek = 0;
        DateTime dtFirstDayOfWeek = dateTime.GetFirstDayOfWeek();
        resultDates.Add(dtFirstDayOfWeek);
        int dateIndex = 1;
        while (dateIndex < 7)
        {
            resultDates.Add(dtFirstDayOfWeek.AddDays(dateIndex));
            dateIndex++;
        }
        return resultDates;
    }


    #endregion

    #region Commmon Methods
    private string GetManagerUserID(string userID)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        string dbQry = string.Empty;

        try
        {
            manager.Open();


            dbQry = string.Format(@"SELECT mu.UserID AS ManagerUserID
                                    FROM   ((tblUserInfo u INNER JOIN
                                                tblEmployee e ON u.Empno = e.empno) LEFT OUTER JOIN
                                                tblUserInfo mu ON e.ManagerID = mu.Empno) 
                                    WHERE u.UserID = '{0}'", userID);

            DataSet ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds.Tables[0].Rows[0]["ManagerUserID"].ToString();
            else
                return string.Empty;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public UserInfo GetUserInfoByName(string userName)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        string dbQry = string.Empty;

        try
        {
            manager.Open();


            dbQry = string.Format(@"SELECT u.UserID,u.UserName, u.Empno,e.EmpFirstName, e.ManagerID AS ManagerEmpNo, mu.UserID AS ManagerUserID, mu.UserName as ManagerUserName,me.EmpFirstName as ManagerEmpName,e.EmployeeRoleId
                                    FROM   (((tblUserInfo u INNER JOIN
                                                tblEmployee e ON u.Empno = e.empno) LEFT OUTER JOIN
                                                tblUserInfo mu ON e.ManagerID = mu.Empno) LEFT OUTER JOIN 
                                                tblEmployee me ON mu.Empno = me.empno)
                                    WHERE u.UserName = '{0}'", userName);

            DataSet ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            UserInfo userInfo = new UserInfo();
            if (ds.Tables[0].Rows.Count > 0)
            {
                int empNo = 0;
                userInfo.UserName = ds.Tables[0].Rows[0]["UserName"].ToString();
                userInfo.UserId = ds.Tables[0].Rows[0]["UserID"].ToString();
                int.TryParse(ds.Tables[0].Rows[0]["EmpNo"].ToString(), out empNo);
                userInfo.EmpName = ds.Tables[0].Rows[0]["EmpFirstName"].ToString();
                userInfo.EmpNo = empNo;
                // Manager Info
                userInfo.ManagerUserName = ds.Tables[0].Rows[0]["ManagerUserName"].ToString();
                userInfo.ManagerUserId = ds.Tables[0].Rows[0]["ManagerUserID"].ToString();
                int.TryParse(ds.Tables[0].Rows[0]["ManagerEmpNo"].ToString(), out empNo);
                userInfo.ManagerEmpNo = empNo;
                userInfo.ManagerEmpName = ds.Tables[0].Rows[0]["ManagerEmpName"].ToString();

                int roleId = 0;
                int.TryParse(ds.Tables[0].Rows[0]["EmployeeRoleId"].ToString(), out roleId);
                userInfo.RoleId = roleId;

                return userInfo;
            }
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public UserInfo GetUserInfoByEmpNo(int empNo)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        string dbQry = string.Empty;

        try
        {
            manager.Open();


            dbQry = string.Format(@"SELECT u.UserID,u.UserName, u.Empno,e.EmpFirstName, e.ManagerID AS ManagerEmpNo, mu.UserID AS ManagerUserID, mu.UserName as ManagerUserName,me.EmpFirstName as ManagerEmpName,e.EmployeeRoleId
                                    FROM   (((tblUserInfo u INNER JOIN
                                                tblEmployee e ON u.Empno = e.empno) LEFT OUTER JOIN
                                                tblUserInfo mu ON e.ManagerID = mu.Empno) LEFT OUTER JOIN 
                                                tblEmployee me ON mu.Empno = me.empno)
                                    WHERE u.EmpNo = {0}", empNo);

            DataSet ds = manager.ExecuteDataSet(CommandType.Text, dbQry);
            UserInfo userInfo = new UserInfo();
            if (ds.Tables[0].Rows.Count > 0)
            {
                userInfo.UserName = ds.Tables[0].Rows[0]["UserName"].ToString();
                userInfo.UserId = ds.Tables[0].Rows[0]["UserID"].ToString();
                int.TryParse(ds.Tables[0].Rows[0]["EmpNo"].ToString(), out empNo);
                userInfo.EmpName = ds.Tables[0].Rows[0]["EmpFirstName"].ToString();
                userInfo.EmpNo = empNo;

                // Manager Info
                int managerEmpNo = 0;
                userInfo.ManagerUserName = ds.Tables[0].Rows[0]["ManagerUserName"].ToString();
                userInfo.ManagerUserId = ds.Tables[0].Rows[0]["ManagerUserID"].ToString();
                int.TryParse(ds.Tables[0].Rows[0]["ManagerEmpNo"].ToString(), out managerEmpNo);
                userInfo.ManagerEmpNo = managerEmpNo;
                userInfo.ManagerEmpName = ds.Tables[0].Rows[0]["ManagerEmpName"].ToString();

                int roleId = 0;
                int.TryParse(ds.Tables[0].Rows[0]["EmployeeRoleId"].ToString(), out roleId);
                userInfo.RoleId = roleId;

                return userInfo;
    }
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataTable GetAllMonths()
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        string dbQry = string.Empty;

        try
        {
            manager.Open();


            dbQry = string.Format(@"SELECT MonthId,MonthName,MonthCode FROM tblMonth");

            DataSet ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds != null && ds.Tables.Count > 0)
                return ds.Tables[0];
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public bool AddCompOffForTheEmployee(string empNo, string supervisorEmpNo, DateTime compOffOrginDate, string compOffReason)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            dbQry = string.Format(@"Insert into tblEmployeeCompOff (EmployeeNo,CompOffDate,CompOffReason,ApprovedBy,IsActive)
                                        Values({0},'{1}','{2}',{3},{4})", empNo, compOffOrginDate.ToString("MM/dd/yyyy"), compOffReason, supervisorEmpNo, true.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            return true;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();

        }
    }

    public bool AddWeekOffRotaForTheEmployee(string empNo, string supervisorEmpNo, DateTime rotaSourceOrginDate, DateTime rotaShiftedDate)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            dbQry = string.Format(@"Insert into tblEmployeeWeekOffRota (EmployeeNo,SourceDate,ShiftedDate,ApprovedBy,IsActive)
                                        Values({0},'{1}','{2}',{3},{4})", empNo, rotaSourceOrginDate.ToString("MM/dd/yyyy"), rotaShiftedDate.ToString("MM/dd/yyyy"), supervisorEmpNo, true.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            return true;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataTable GetHolidayListForTheYear(int year)
    {
        DBManager manager = new DBManager();
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        string dbQry = string.Empty;

        try
        {
            manager.Open();
            dbQry = string.Format(@"SELECT Holiday_Id, Date, Holiday_Name FROM tblHolidayList WHERE YEAR(Date)={0}", year);

            DataSet ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables.Count > 0)
                return ds.Tables[0];
            else
                return new DataTable();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }
    #endregion


    public DataSet getRateInformation(string itemcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        DataSet dsd = new DataSet();
        string dbQry = string.Empty;
        string dbQ = string.Empty;
        string PRICEName = string.Empty;

        try
        {
            manager.Open();

            dbQ = "SELECT KeyValue From tblSettings WHERE KEYNAME='PRICE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                PRICEName = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            dbQry = "SELECT tblproductprices.price as dealerrate,tblProductMaster.deviation FROM tblProductMaster inner join tblproductprices on tblProductMaster.itemCode = tblproductprices.itemCode Where tblProductMaster.itemcode = '" + itemcode + "' and tblproductprices.Pricename = '" + PRICEName + "' ";

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool CheckIfUserCanDoDeviation(string usernam)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();

            dbQry = "SELECT Count(*) FROM tblUserInfo Where UserName ='" + usernam + "' and HideDeviation = 'true'";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
                return false;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    #region Admin Employee Role

    public DataSet GetEmpRoleSummary(string connection, string txtSearchInput, string searchCriteria, string userId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearchInput = "%" + txtSearchInput + "%";
        dbQry = "SELECT ID, Role_Name, Remarks, Is_Active FROM tblEmployeeRoles";

        if (searchCriteria == "RoleName")
        {
            dbQry = "SELECT ID, Role_Name, Remarks, Is_Active FROM tblEmployeeRoles where Role_Name LIKE '" + txtSearchInput + "'";
        }
        else if (searchCriteria == "Date")
        {
            dbQry = "SELECT ID, Role_Name, Remarks, Is_Active FROM tblEmployeeRoles where IsActive LIKE '" + txtSearchInput + "'";
        }
        else
        {
            dbQry = "SELECT ID, Role_Name, Remarks, Is_Active FROM tblEmployeeRoles";
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetEmpRoleInfoByID(string connection, int ID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        dbQry = "SELECT ID, Role_Name, Remarks, Is_Active FROM tblEmployeeRoles where ID =" + ID;

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void InsertEmpRoleInfo(string connection, string Username, string Role_Name, string Remarks, bool Is_Active)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        int isAct = 0;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblEmployeeRoles Where Role_Name='" + Role_Name + "'");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Role Name Exists");
                }
            }

            if (Is_Active == true)
            {
                isAct = -1;
            }

            dbQry = string.Format("INSERT INTO tblEmployeeRoles(Role_Name, Remarks, Is_Active) VALUES('{0}', '{1}', '{2}')",
              Role_Name, Remarks, isAct);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void UpdateEmpRoleInfo(string connection, int ID, string Username, string Role_Name, string Remarks, bool Is_Active)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        int isAct = 0;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblEmployeeRoles Where Role_Name='" + Role_Name + "' AND ID <> " + ID + " ");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Role Name Exists");
                }
            }

            if (Is_Active == true)
            {
                isAct = -1;
            }

            dbQry = string.Format("UPDATE tblEmployeeRoles SET Role_Name = '{1}', Remarks = '{2}', Is_Active = '{3}' WHERE ID = {0}",
                    ID, Role_Name, Remarks, isAct);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void DeleteEmpRoleInfo(string connection, int ID, string UserName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("DELETE FROM tblEmployeeRoles WHERE ID = {0}",
                ID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetEmpManageLeaveInfoByID(int roleId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        dbQry = "Select A.LeaveID as LeaveType_ID, A.LeaveTypeName as LeaveTypeName, A.RoleID as Role_ID, ERL.EffectiveDate as EffectiveDate, ERL.AllowedCount as AllowedCount From (SELECT  L.ID as LeaveID,E.ID  as RoleID,  L.LeaveTypeName as LeaveTypeName from  tblLeaveTypes as L, tblEmployeeRoles as E)as A Left Join tblEmployeeRoleLeaveLimit as ERL On ERL.LeaveType_ID = A.LeaveID And ERL.Role_ID = A.RoleID where A.RoleID = " + roleId;

        try
        {
            //object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblLeaveTypes");

            //if (exists.ToString() != string.Empty)
            //{
            //    if (int.TryParse(exists.ToString()) > 0)
            //    {
            //        throw new Exception("No Leaves Found ");
            //    }
            //}

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void InsertEmployeeRoleLeave(DataTable dt, int role_ID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string delQuery = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblEmployeeRoleLeaveLimit Where Role_ID=" + role_ID + "");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    delQuery = string.Format("DELETE FROM tblEmployeeRoleLeaveLimit WHERE Role_ID = {0}", role_ID);

                    manager.ExecuteNonQuery(CommandType.Text, delQuery);

                    manager.CommitTransaction();

                    foreach (DataRow dr in dt.Rows)
                    {
                        dbQry = string.Format("INSERT INTO tblEmployeeRoleLeaveLimit(LeaveType_ID, Role_ID, EffectiveDate, AllowedCount) VALUES({0}, {1}, '{2}', {3})",
                    dr.Field<int>("LeaveType_ID"), dr.Field<int>("Role_ID"), dr.Field<DateTime>("EffectiveDate"), dr.Field<int>("AllowedCount"));

                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        manager.CommitTransaction();
                    }
                }
                else
                {

                    foreach (DataRow dr in dt.Rows)
                    {
                        dbQry = string.Format("INSERT INTO tblEmployeeRoleLeaveLimit(LeaveType_ID, Role_ID, EffectiveDate, AllowedCount) VALUES({0}, {1}, '{2}', {3})",
                      dr.Field<int>("LeaveType_ID"), dr.Field<int>("Role_ID"), dr.Field<DateTime>("EffectiveDate"), dr.Field<int>("AllowedCount"));

                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        manager.CommitTransaction();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetPayCompForRoleManage(string SearchTxt)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        SearchTxt = "%" + SearchTxt + "%";

        if (SearchTxt != "")
        {
            dbQry = "SELECT PayComponentID, PayComponentName, Description from tblPayComponents WHERE PayComponentType_Id =2 AND PayComponentName LIKE '" + SearchTxt + "'";
        }
        else
        {
            dbQry = "SELECT PayComponentID, PayComponentName, Description from tblPayComponents WHERE PayComponentType_Id =2";
        }
        try
        {
            //object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblPayComponents");

            //if (exists.ToString() != string.Empty)
            //{
            //    if (int.TryParse(exists.ToString()) > 0)
            //    {
            //        throw new Exception("No Pay Components Found ");
            //    }
            //}

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetRolePayComp(int RoleId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        dbQry = "SELECT PayComponent_ID, Role_ID, PayComponentName, Description, EffectiveDate, DeclaredAmount from tblPayComponentRoleMapping A Inner Join tblPayComponents B on A.PayComponent_ID = B.PayComponentID where A.Role_ID = " + RoleId;

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void InsertRolePayComp(int role_ID, int payCompId, DateTime frmDate, int amtDeclared)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string delQuery = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblPayComponentRoleMapping Where PayComponent_ID =" + payCompId + "");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    delQuery = string.Format("DELETE FROM tblPayComponentRoleMapping WHERE PayComponent_ID = {0} AND Role_ID = {1}", payCompId, role_ID);

                    manager.ExecuteNonQuery(CommandType.Text, delQuery);

                    manager.CommitTransaction();

                    dbQry = string.Format("INSERT INTO tblPayComponentRoleMapping(PayComponent_ID, Role_ID, EffectiveDate, DeclaredAmount) VALUES({0}, {1}, '{2}', {3})",
                    payCompId, role_ID, frmDate, amtDeclared);

                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    manager.CommitTransaction();
                }
                else
                {
                    dbQry = string.Format("INSERT INTO tblPayComponentRoleMapping(PayComponent_ID, Role_ID, EffectiveDate, DeclaredAmount) VALUES({0}, {1}, '{2}', {3})",
                    payCompId, role_ID, frmDate, amtDeclared);

                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    manager.CommitTransaction();
                }
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void DeleteRolePayComp(int pay_ID, int role_ID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblPayComponentRoleMapping Where PayComponent_ID =" + pay_ID + " AND Role_ID = " + role_ID);

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {

                    dbQry = string.Format("Delete From tblPayComponentRoleMapping WHERE PayComponent_ID = {0} AND Role_ID = {1}  ", pay_ID, role_ID);

                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    manager.CommitTransaction();
                }
            }
            else
            {
                throw new Exception("Pay Component Not Exists");
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataTable ListEmployeeRoles()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        dbQry = "Select ID,Role_Name AS RoleName FROM tblEmployeeRoles WHERE Is_Active = 'True'";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables.Count > 0)
                return ds.Tables[0];
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    #endregion

    public int InsertCustomerInfoDirect(string connection, string LedgerName, string AliasName, int GroupID, double OpenBalanceDR, double OpenBalanceCR, double OpenBalance, string DRORCR, string ContactName, string Add1, string Add2, string Add3, string Phone, string LedgerCategory, int ExecutiveIncharge, string TinNumber, string Mobile, double CreditLimit, int CreditDays, string Inttrans, string Paymentmade, string dc, string ChequeName, string Username, string unuse, string Email, int ModeofContact)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        string sAuditStr = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            //object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblLedger Where LedgerName='" + LedgerName + "'");

            //if (exists.ToString() != string.Empty)
            //{
            //    if (int.Parse(exists.ToString()) > 0)
            //    {
            //        throw new Exception("Ledger Exists");
            //    }
            //}

            int LedgerID = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(LedgerID) FROM tblLedger"));


            dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                string value1 = string.Empty;
                string value2 = string.Empty;
                string value3 = string.Empty;

                int middlePos = 0;

                logdescription = string.Format("INSERT INTO tblLedger(LedgerID,LedgerName, AliasName,GroupID,OpenBalanceDR,OpenBalanceCR,Debit,Credit,ContactName,Add1,Add2,Add3,Phone,BelongsTo,LedgerCategory,ExecutiveIncharge,TinNumber,Mobile,CreditLimit, CreditDays,Inttrans,Paymentmade,dc,ExpenseID) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23})",
                        LedgerID + 1, LedgerName, AliasName, GroupID, OpenBalanceDR, OpenBalanceCR, 0, 0, ContactName, Add1, Add2, Add3, Phone, 0, LedgerCategory, ExecutiveIncharge, TinNumber, Mobile, CreditLimit, CreditDays, Inttrans, Paymentmade, dc,0);
                logdescription = logdescription.Trim();
                if (logdescription.Length > 255)
                {
                    value1 = logdescription.Substring(0, 255);
                    middlePos = logdescription.Length - (value1.Length);
                    if (middlePos > 0)
                        value2 = logdescription.Substring(255, middlePos);
                    else
                        value2 = "";

                    middlePos = logdescription.Length - (value1.Length + value2.Length);
                    if (middlePos > 0)
                        value3 = logdescription.Substring(510, middlePos);
                    else
                        value3 = "";
                }
                else
                {
                    value1 = logdescription;
                    value2 = "";
                    value3 = "";
                }
                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), value1, "", "", value2, value3, "InsertCustmoerInfo");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            //dbQry = string.Format("SET IDENTITY_INSERT tblLedger ON");
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("INSERT INTO tblLedger(LedgerID,LedgerName, AliasName,GroupID,OpenBalanceDR,OpenBalanceCR,Debit,Credit,ContactName,Add1,Add2,Add3,Phone,BelongsTo,LedgerCategory,ExecutiveIncharge,TinNumber,Mobile,CreditLimit, CreditDays,Inttrans,Paymentmade,dc,ChequeName,unuse, EmailId,ModeofContact,ExpenseID) VALUES({0},'{1}','{2}',{3},{4},{5},{6},{7},'{8}','{9}','{10}','{11}','{12}',{13},'{14}',{15},'{16}','{17}',{18},{19},'{20}','{21}','{22}','{23}','{24}','{25}',{26},{27})",
                LedgerID + 1, LedgerName, AliasName, GroupID, OpenBalanceDR, OpenBalanceCR, 0, 0, ContactName, Add1, Add2, Add3, Phone, 0, LedgerCategory, ExecutiveIncharge, TinNumber, Mobile, CreditLimit, CreditDays, Inttrans, Paymentmade, dc, ChequeName, unuse, Email, ModeofContact,0);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            //dbQry = string.Format("SET IDENTITY_INSERT tblLedger OFF");
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Customer Ledger : " + LedgerName + " added. Record Details :  User :" + Username + " AliasName = " + AliasName + " GroupID= " + GroupID + " ,LedgerCategory = " + LedgerCategory + " ,Mobile=" + Mobile + " Phone :" + Phone;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int LedId = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT LedgerID FROM tblLedger where LedgerName ='" + LedgerName + "' "));

            manager.CommitTransaction();

            return LedId;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void UpdateDuplicatebill(int bill)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("Update tblSales set DuplicateCopy = 'Y' WHERE BillNo={0}", bill);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet ListCusCategory(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select * from tblCustomerCategory ORDER By CusCategory_ID");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void InsertMappingInfo(string connection, int PriceList_Id, string PriceList_Name, string CustomerCategory_Value, string CustomerCategory_Name, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            //object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblMapPriceList Where CustomerCategory_Name='" + CustomerCategory_Name + "'");
            //if (exists.ToString() != string.Empty)
            //{
            //    if (int.Parse(exists.ToString()) > 0)
            //    {
            //        throw new Exception("Customer Category already Exists in mapping");
            //    }
            //}

            dbQry = string.Format("INSERT INTO tblMapPriceList(PriceList_Id, PriceList_Name, CustomerCategory_Value, CustomerCategory_Name) VALUES({0},'{1}','{2}','{3}')",
                PriceList_Id, PriceList_Name, CustomerCategory_Value, CustomerCategory_Name);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("INSERT INTO tblCustomerCategory(CusCategory_Value, CusCategory_Name) VALUES('{0}','{1}')",
                CustomerCategory_Value, CustomerCategory_Name);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            sAuditStr = "Mapping : " + PriceList_Name + " + and + " + CustomerCategory_Name + " added. Record Details :  User :" + Username;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListMappingInfo(string connection, string txtSearch, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        if (dropDown == "PriceListName")
        {
            dbQry = "select * from (tblMapPriceList inner join tblCustomerCategory on tblCustomerCategory.CusCategory_Name = tblMapPriceList.CustomerCategory_Name)  Where tblMapPriceList.PriceList_Name like '" + txtSearch + "'" + " Order By tblMapPriceList.Id";
        }
        else if (dropDown == "CusCategoryName")
        {
            dbQry = "select * from (tblMapPriceList inner join tblCustomerCategory on tblCustomerCategory.CusCategory_Name = tblMapPriceList.CustomerCategory_Name) Where tblMapPriceList.CustomerCategory_Name like '" + txtSearch + "'" + " Order By tblMapPriceList.Id";
        }
        else if (dropDown == "0" || dropDown == "All" && txtSearch != "%%")
        {
            dbQry = "select * from (tblMapPriceList inner join tblCustomerCategory on tblCustomerCategory.CusCategory_Name = tblMapPriceList.CustomerCategory_Name) Where (tblMapPriceList.PriceList_Name like '" + txtSearch + "'" + " Or tblMapPriceList.CustomerCategory_Name like '" + txtSearch + "'" + " ) Order By tblMapPriceList.Id";
        }
        else
        {
            dbQry = string.Format("select * from (tblMapPriceList inner join tblCustomerCategory on tblCustomerCategory.CusCategory_Name = tblMapPriceList.CustomerCategory_Name) Order By tblMapPriceList.Id");
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void UpdateMappingInfo(string connection, int ID, int PriceList_Id, string PriceList_Name, string CustomerCategory_Value, string CustomerCategory_Name, string Username, int CusCategory_ID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            //object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblMapPriceList Where CustomerCategory_Name='" + CustomerCategory_Name + "'");
            //if (exists.ToString() != string.Empty)
            //{
            //    if (int.Parse(exists.ToString()) > 0)
            //    {
            //        throw new Exception("Customer Category already Exists in mapping");
            //    }
            //}

            dbQry = string.Format("Update tblMapPriceList SET PriceList_Id={0}, PriceList_Name='{1}', CustomerCategory_Value='{2}', CustomerCategory_Name='{3}' WHERE ID={4}", PriceList_Id, PriceList_Name, CustomerCategory_Value, CustomerCategory_Name, ID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Update tblCustomerCategory SET CusCategory_Value='{0}', CusCategory_Name='{1}' WHERE CusCategory_ID={2}",
                CustomerCategory_Name, CustomerCategory_Name, CusCategory_ID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Mapping : " + PriceList_Name + " + and + " + CustomerCategory_Name + " got edited. Record Details :  User :" + Username;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit And Update", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetMappingInfoForId(string connection, int ID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select * from (tblMapPriceList inner join tblCustomerCategory on tblCustomerCategory.CusCategory_Name = tblMapPriceList.CustomerCategory_Name) where ID = " + ID;
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void DeleteMapping(string connection, int ID, string Username, string CusCategory_Name)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("Delete From tblMapPriceList Where ID = {0}", ID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblCustomerCategory Where CusCategory_Name = '{0}'", CusCategory_Name);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Mapping got deleted : User = " + Username + " old Record Details CategoryID = " + ID;

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListPriceList(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = string.Format("select * from tblPriceList ORDER By PriceName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void InsertPriceList(string connection, string PriceName, string Description, string Username, string Types)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;

        string sAuditStr = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("INSERT INTO tblPriceList(PriceName,Description) VALUES('{0}','{1}')",
                PriceName, Description);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int Id = (Int32)manager.ExecuteScalar(CommandType.Text, "SELECT MAX(ID) FROM tblPriceList");

            if (Types == "New")
            {
                sAuditStr = "Price List For : " + PriceName + " added. Record Details :  User :" + Username;
                dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
                manager.ExecuteNonQuery(CommandType.Text, dbQry);
            }

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void UpdatePriceList(string connection, int ID, string PriceName, string Description, string Username, string Types)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("Update tblPriceList SET PriceName='{0}',Description='{2}' WHERE Id={1}", PriceName, ID, Description);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Cheque Book For : " + PriceName + " updated. Record Details :  User :" + Username;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit And Update", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListPriceListInfo(string connection, string txtSearch, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        if (dropDown == "PriceName")
        {
            dbQry = "select A.Id,A.PriceName,A.Description, (Select count(*) from tblPriceList where A.Id>=Id) as Row from tblPriceList as A Where A.PriceName like '" + txtSearch + "' Order By A.Id";
        }
        else
        {
            dbQry = string.Format("select A.Id,A.PriceName,A.Description, (Select count(*) from tblPriceList where A.Id>=Id) as Row from tblPriceList as A Order By A.Id");
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }


    public void DeletePriceList(string connection, int Id, string Username, string Types)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string Bank = string.Empty;
        string AccountNo = string.Empty;
        string FromChequeNo = string.Empty;
        string ToChequeNo = string.Empty;

        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("Delete From tblPriceList Where Id = {0}", Id);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Price List For : " + Id + " deleted. Record Details :  User :" + Username;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetPriceListForId(string connection, int Id)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select * from tblPriceList where Id = " + Id;
            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public bool IsLedgerAlreadyFound(string connection, string ledgername)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        try
        {

            dbQry = string.Format("Select ledgername from tblledger Where ledgername = '" + ledgername + "' ");

            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        catch (Exception ex)
        {
            return false;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void InsertContras(string sPath, string Username, DataSet ds)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(sPath);
        //DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string sAuditStr = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {

            //if (!IsValidDate(sPath, TransDate))
            //{
            //    throw new Exception("Invalid Date");
            //}

            //if (DebitorID == CreditorID)
            //{
            //    throw new Exception("Same Creditor Debtor");
            //}

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();


            dbQry2 = "SELECT KeyValue From tblSettings WHERE KEYNAME='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                //logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,RefNo) VALUES({0},{1},{2},{3},{4},{5},{6})",
                //    TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, RefNo);
                //logdescription = logdescription.Trim();
                //description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                //     DateTime.Now.ToString(), logdescription.ToString(), Username, "", "InsertJournal");
                //manager.ExecuteNonQuery(CommandType.Text, description);
            }


            if (ds != null)
            {
                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,RefNo,BranchCode) VALUES('{0}',{1},{2},{3},'{4}','{5}',{6},'{7}')",
                        Convert.ToDateTime(dr["Date"]).ToString("yyyy-MM-dd"), Convert.ToInt32(dr["Debtor"]), Convert.ToInt32(dr["Creditor"]), Convert.ToDouble(dr["Amount"]), Convert.ToString(dr["Narration"]), Convert.ToString(dr["VoucherType"]), Convert.ToInt32(dr["RefNo"]),"All");
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        int TransNo = 0;
                        object retVal = manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook");

                        if ((retVal != null) && (retVal != DBNull.Value))
                        {
                            TransNo = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));
                        }
                        else
                        {
                            TransNo = TransNo + 1;
                        }
                    }
                }
            }

            sAuditStr = "Journal Transaction added. Record Details :  User :" + Username + " DateTime: " + DateTime.Now.ToString();
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public void InsertMultipleCustReceipt(string connection, DataSet ds, int CreditorID, DataSet dsBillNos, string usernam, string Branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        string dbQry = string.Empty;

        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;
        string cheque = string.Empty;
        try
        {

            //if (!IsValidDate(connection, TransDate))
            //{
            //    throw new Exception("Invalid Date");
            //}

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                //logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8})",
                //TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);
                //logdescription = logdescription.Trim();
                //description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                //     DateTime.Now.ToString(), logdescription.ToString(), usernam, "", "InsertCustReceipt");
                //manager.ExecuteNonQuery(CommandType.Text, description);
            }
            int DebitorID = 0;

            int paymodeno = 0;
            int TransNo = 0;
            if (ds != null)
            {
                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {

                        int cid = 0;
                        if (Convert.ToString(dr["Paymode"]) == "Cash")
                        {
                            cid = getCashACLedgerId(connection, Branchcode);
                            DebitorID = cid;
                        }
                        else
                        {
                            DebitorID = Convert.ToInt32(dr["DebitorID"]);
                        }

                        dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo,Branchcode) VALUES('{0}',{1},{2},{3},'{4}','{5}','{6}',{7},{8},'{9}')",
                            Convert.ToDateTime(dr["Date"]).ToString("yyyy-MM-dd"), DebitorID, CreditorID, Convert.ToDouble(dr["Amount"]), Convert.ToString(dr["Narration"]), Convert.ToString(dr["VoucherType"]), Convert.ToString(dr["ChequeNo"]), 0, Convert.ToInt32(dr["RefNo"]), Branchcode);

                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        TransNo = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(TransNo) FROM tblDayBook"));

                        dbQry = string.Format("Insert Into tblReceipt(CreditorID,JournalID,Paymode,Branchcode) Values({0},{1},'{2}','{3}')", CreditorID, TransNo, Convert.ToString(dr["Paymode"]), Branchcode);

                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        if (Convert.ToString(dr["Paymode"]) == "Cash")
                        {
                            paymodeno = 1;
                        }
                        else if (Convert.ToString(dr["Paymode"]) == "Cheque")
                        {
                            paymodeno = 2;
                        }
                        else if (Convert.ToString(dr["Paymode"]) == "Card")
                        {
                            paymodeno = 3;
                        }
                        cheque = Convert.ToString(dr["ChequeNo"]);

                        if (dsBillNos != null)
                        {
                            foreach (DataRow drd in dsBillNos.Tables[0].Rows)
                            {
                                if (drd["BillNo"].ToString() != "0")
                                {
                                    if (Logsave == "YES")
                                    {
                                        //logdescription = string.Format("INSERT INTO tblReceivedAmount(ReceiptNo,BillNo,Amount) VALUES({0},{1},{2})", TransNo.ToString(), dr["BillNo"].ToString(), Convert.ToDouble(dr["Amount"]));
                                        //logdescription = logdescription.Trim();
                                        //description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                                        //     DateTime.Now.ToString(), logdescription.ToString(), usernam, TransNo, "InsertCustReceipt");
                                        //manager.ExecuteNonQuery(CommandType.Text, description);
                                    }

                                    //double amount = 0;
                                    //if (Convert.ToDouble(dr["Amount"]) >= Convert.ToDouble(drd["Amount"]))
                                    //{

                                    if (paymodeno == Convert.ToInt32(drd["Type"]))
                                    {
                                        if (Convert.ToDouble(drd["Amount"]) != 0)
                                        {
                                            if (cheque == drd["ChequeNo"].ToString())
                                            {
                                                dbQry = string.Format("INSERT INTO tblReceivedAmount(ReceiptNo,BillNo,Amount,Branchcode) VALUES({0},{1},{2},'{3}')", TransNo.ToString(), drd["BillNo"].ToString(), Convert.ToDouble(drd["Amount"]), Branchcode);
                                                manager.ExecuteNonQuery(CommandType.Text, dbQry);
                                            }
                                        }
                                    }

                                    //    amount = Convert.ToDouble(dr["Amount"]) - Convert.ToDouble(drd["Amount"]);

                                    //}




                                }
                            }
                        }


                    }
                }
            }






            sAuditStr = "Receipt Transaction added. Record Details : User=" + usernam + " DateTime:" + DateTime.Now.ToString();

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void InsertProductPrices(string connection, DataSet ds, string usernam)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        string dbQry = string.Empty;

        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {

            //if (!IsValidDate(connection, TransDate))
            //{
            //    throw new Exception("Invalid Date");
            //}

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                //logdescription = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8})",
                //TransDate.ToShortDateString(), DebitorID, CreditorID, Amount, Narration, VoucherType, ChequeNo, 0, RefNo);
                //logdescription = logdescription.Trim();
                //description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                //     DateTime.Now.ToString(), logdescription.ToString(), usernam, "", "InsertCustReceipt");
                //manager.ExecuteNonQuery(CommandType.Text, description);
            }

            int TransNo = 0;
            if (ds != null)
            {
                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        //dbQry = string.Format("INSERT INTO tblDayBook(TransDate,DebtorID,CreditorID,Amount,Narration,VoucherType,ChequeNo,Commission,RefNo) VALUES(Format('{0}', 'dd/mm/yyyy'),{1},{2},{3},'{4}','{5}','{6}',{7},{8})",
                        //    Convert.ToDateTime(dr["Date"]), Convert.ToInt32(dr["DebitorID"]), CreditorID, Convert.ToDouble(dr["Amount"]), Convert.ToString(dr["Narration"]), Convert.ToString(dr["VoucherType"]), Convert.ToString(dr["ChequeNo"]), 0, Convert.ToInt32(dr["RefNo"]));

                        //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        //dbQry = string.Format("Insert Into tblProductPrices(PriceName,JournalID,Paymode) Values({0},{1},'{2}')", CreditorID, TransNo, Convert.ToString(dr["Paymode"]));

                        //manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }
                }
            }

            sAuditStr = "Receipt Transaction added. Record Details : User=" + usernam + " DateTime:" + DateTime.Now.ToString();

            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}',Format('{2}', 'dd/mm/yyyy'))", sAuditStr, "Add New", DateTime.Now.ToString());
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListProductPrices(string connection, string ItemCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        //txtSearch = "%" + txtSearch + "%";

        dbQry = string.Format("select A.PriceName,A.ItemCode,A.Price,A.Discount,A.EffDate, A.PriceId as id, (Select count(*) from tblProductPrices where A.Id>=Id and ItemCode = '" + ItemCode + "') as Row  from tblProductPrices as A where A.ItemCode = '" + ItemCode + "' Order By A.PriceId");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListSalesProductPriceDetailsLead(string itemCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        DataSet dsd = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        string PriceList_Name = string.Empty;

        manager.Open();


        dbQry = "SELECT tblCategories.CategoryName, tblCategories.CategoryID, tblProductMaster.ItemCode, tblProductMaster.ProductName, tblProductMaster.Model," +
                " tblProductMaster.ProductDesc FROM  tblCategories INNER JOIN tblProductMaster ON tblCategories.CategoryID = tblProductMaster.CategoryID " +
                " Where tblProductMaster.itemCode='" + itemCode + "'";

        try
        {

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public DataSet ListSalesProductPriceDetails(string itemCode, string CatType, string branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();

        DataSet dsd = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        string PriceList_Name = string.Empty;

        manager.Open();

        dbQry2 = string.Format("SELECT PriceList_Name From tblMapPriceList WHERE CustomerCategory_Value = '" + CatType + "' ");
        dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2);
        if (dsd.Tables[0].Rows.Count > 0)
            PriceList_Name = dsd.Tables[0].Rows[0]["PriceList_Name"].ToString();

        // dbQry = "select tblProductMaster.itemcode,ProductName,ProductDesc,Model,Stock,tblproductprices.Discount as Discount,Vat,tblproductprices.price as Rate,CST,Stock,Accept_Role,ExecutiveCommission,Measure_Unit from tblProductMaster inner join tblproductprices on tblProductMaster.itemCode = tblproductprices.itemCode Where tblProductMaster.itemCode='" + itemCode + "' and tblproductprices.pricename = '" + PriceList_Name + "' ";

        dbQry = " SELECT distinct tblProductMaster.ItemCode, tblProductMaster.ProductName, tblProductMaster.ProductDesc, tblProductMaster.Model, tblProductPrices.Discount as Discount, " +
               " tblProductMaster.VAT, tblProductPrices.Price as Rate, tblProductMaster.CST, tblProductMaster.Accept_Role, tblProductMaster.ExecutiveCommission, " +
               " tblProductMaster.Measure_Unit, tblProductStock.Stock, tblProductStock.BranchCode, tblProductStock.BranchName " +
               " FROM tblProductMaster INNER JOIN " +
               " tblProductPrices ON tblProductMaster.ItemCode = tblProductPrices.ItemCode INNER JOIN " +
               " tblProductStock ON tblProductMaster.ItemCode = tblProductStock.ItemCode " +
               " Where tblProductMaster.itemCode='" + itemCode + "' and tblproductprices.pricename = '" + PriceList_Name + "'" +
               " and BranchCode='" + branchcode + "'";

        try
        {

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

    }

    public string getEnableDiscountConfig()
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();

            dbQry.Append("SELECT   KeyValue  From tblSettings WHERE keyName='SDISCOUNT'");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds.Tables[0].Rows[0]["KeyValue"].ToString();
            else
                return "";
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListProductMRPPrices(string ItemCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        //txtSearch = "%" + txtSearch + "%";

        dbQry = string.Format("select PriceName,ItemCode,Price as rate,Discount,EffDate, PriceId as id from tblProductPrices where ItemCode = '" + ItemCode + "' and PriceName = 'MRP' Order By PriceId");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool IsCategoryFoundinMapping(string connection, string CustomerCategory_Name)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;

        try
        {

            dbQry = string.Format("Select CustomerCategory_Name from tblMapPriceList Where CustomerCategory_Name = '" + CustomerCategory_Name + "' ");

            manager.Open();
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        catch (Exception ex)
        {
            return false;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool CheckIfItemCodeDuplicatePriceList(string ItemCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int Totalqty = 0;
        int qty = 0;
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            dbQry = "SELECT Count(*) FROM tblProductPrices Where ItemCode ='" + ItemCode + "'";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }




    public void InsertBulkProductPrices(string connection, DataSet dsbulk, string Username, string Price, int PriceId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet dsNew = new DataSet();

        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsOld = new DataSet();
        string dbQry3 = string.Empty;

        string sAuditStr = string.Empty;

        string Model = string.Empty;
        string PrName = string.Empty;
        string Bnd = string.Empty;
        int Cate = 0;
        string blk = string.Empty;
        double rl = 0;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();

            dbQ = "SELECT KeyValue From tblSettings WHERE keyname='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                //string value1 = string.Empty;
                //string value2 = string.Empty;
                //string value3 = string.Empty;

                //int middlePos = 0;
                //logdescription = string.Format("INSERT INTO tblProductMaster VALUES({0},{1}, {2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24},{25},{26},{27},{28},{29},{30},{31},{32},{33},{34},{35},{36},{37})",
                //ItemCode, ProductName, Model, CategoryID, ProductDesc, Stock, ROL, Rate, Unit, VAT, Discount, BuyUnit, BuyRate, BuyVAT, BuyDiscount, DealerUnit, DealerRate, DealerVAT, DealerDiscount, Complex, Measure_Unit, Accept_Role, CST, Barcode, ExecutiveCommission, CommodityCode, NLC, block, productlevel, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), NLCEffDate.ToShortDateString());
                //logdescription = logdescription.Trim();
                //if (logdescription.Length > 255)
                //{
                //    value1 = logdescription.Substring(0, 255);
                //    value2 = logdescription.Substring(256, 255);
                //    middlePos = logdescription.Length - (value1.Length + value2.Length);
                //    if (middlePos > 0)
                //        value3 = logdescription.Substring(510, middlePos);
                //    else
                //        value3 = "";
                //}
                //else
                //{
                //    value1 = logdescription;
                //    value2 = "";

                //    value3 = "";
                //}
                //description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}','{5}','{6}')",
                //     DateTime.Now.ToString(), value1, Username, "", value2, value3, "InsertProduct");
                //manager.ExecuteNonQuery(CommandType.Text, description);

                //logdescription = string.Format("INSERT INTO tblProducthistory VALUES({0},{1}, {2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18})",
                //ItemCode, ProductName, Model, CategoryID, ProductDesc, ROL, Rate, DealerRate, NLC, block, MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), MRPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), DPEffDate.ToShortDateString(), NLCEffDate.ToShortDateString(), NLCEffDate.ToShortDateString());
                //logdescription = logdescription.Trim();
                //description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogMethod) VALUES(Format('{0}', 'dd/mm/yyyy'),'{1}','{2}','{3}','{4}')",
                //     DateTime.Now.ToString(), logdescription.ToString(), Username, "", "InsertProduct");
                //manager.ExecuteNonQuery(CommandType.Text, description);
            }

            string productunit = string.Empty;
            int Catname = 0;

            if (dsbulk != null)
            {
                if (dsbulk.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsbulk.Tables[0].Rows)
                    {
                        if ((Convert.ToString(dr["ItemCode"]) == null) || (Convert.ToString(dr["ItemCode"]) == ""))
                        {

                        }
                        else
                        {
                            dbQry3 = string.Format("Select tblproductmaster.itemcode,productname,productdesc,CategoryId,block,rol,Model from tblproductmaster Where tblproductmaster.itemcode='{0}' ", Convert.ToString(dr["itemcode"]));
                            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry3);
                            if (dsOld != null)
                            {
                                if (dsOld.Tables.Count > 0)
                                {

                                    Model = Convert.ToString(dsOld.Tables[0].Rows[0]["Model"]);
                                    PrName = Convert.ToString(dsOld.Tables[0].Rows[0]["productname"]);
                                    Bnd = Convert.ToString(dsOld.Tables[0].Rows[0]["productdesc"]);
                                    Cate = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CategoryId"]);
                                    blk = Convert.ToString(dsOld.Tables[0].Rows[0]["block"]);
                                    rl = Convert.ToDouble(dsOld.Tables[0].Rows[0]["rol"]);
                                }
                            }

                            dbQry = string.Format("INSERT INTO tblProductPrices(EffDate,PriceName,Price,PriceId,Discount,ItemCode) VALUES('{0}','{1}',{2},{3},{4},'{5}')",
                            Convert.ToDateTime(dr["EffectiveDate"]).ToString("yyyy-MM-dd"), Price, Convert.ToDouble(dr["Price"]), PriceId, Convert.ToDouble(dr["Discount"]), Convert.ToString(dr["ItemCode"]));

                            manager.ExecuteNonQuery(CommandType.Text, dbQry);

                            dbQry2 = string.Format("INSERT INTO tblProductPricehistory VALUES('{0}','{1}', '{2}',{3},'{4}',{5},'{6}','{7}','{8}','{9}',{10},{11},{12},'{13}')",
                                        Convert.ToString(dr["itemcode"]), PrName, Model, Cate, Bnd, rl, Convert.ToDateTime(dr["EffectiveDate"]).ToString("yyyy-MM-dd"), Convert.ToDateTime(dr["EffectiveDate"]).ToString("yyyy-MM-dd"), Convert.ToDateTime(dr["EffectiveDate"]).ToString("yyyy-MM-dd"), Price, Convert.ToDouble(dr["Price"]), Convert.ToDouble(dr["Discount"]), PriceId, Username);
                            manager.ExecuteDataSet(CommandType.Text, dbQry2);

                        }
                    }
                }
            }

            sAuditStr = "Products added. Record Details :  User :" + Username + " DateTime: " + DateTime.Now.ToString();
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public void UpdateBulkProductPrices(string connection, DataSet dsbulk, string Username, string pricelist, int type)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet dsNew = new DataSet();

        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsOld = new DataSet();
        string dbQry3 = string.Empty;

        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        DateTime mrpdat = DateTime.Now;
        DateTime dpdat = DateTime.Now;
        DateTime nlcdat = DateTime.Now;

        DateTime mrpprevdat;
        DateTime nlcprevdat;
        DateTime dpprevdat;

        DateTime mrpnewdat;
        DateTime nlcnewdat;
        DateTime dpnewdat;

        double oldmrp = 0;
        double oldnlc = 0;
        double olddp = 0;

        string Model = string.Empty;
        string PrName = string.Empty;
        string Bnd = string.Empty;
        int Cate = 0;
        string blk = string.Empty;
        double rl = 0;
        string tim = DateTime.Now.ToString();

        try
        {
            manager.Open();

            string productunit = string.Empty;
            int Catname = 0;

            if (dsbulk != null)
            {
                if (dsbulk.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsbulk.Tables[0].Rows)
                    {

                        if ((Convert.ToString(dr["itemcode"]) == null) || (Convert.ToString(dr["itemcode"]) == ""))
                        {

                        }
                        else
                        {
                            dbQry3 = string.Format("Select tblproductmaster.itemcode,productname,productdesc,tblProductPrices.Effdate as Effdate,CategoryId,block,rol,Model from tblproductmaster inner join tblProductPrices on tblproductmaster.itemcode = tblProductPrices.itemcode Where tblproductmaster.itemcode='{0}' and tblProductPrices.PriceName = '{1}' ", Convert.ToString(dr["itemcode"]), pricelist);
                            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQry3);
                            if (dsOld != null)
                            {
                                if (dsOld.Tables.Count > 0)
                                {
                                    Model = Convert.ToString(dsOld.Tables[0].Rows[0]["Model"]);
                                    PrName = Convert.ToString(dsOld.Tables[0].Rows[0]["productname"]);
                                    Bnd = Convert.ToString(dsOld.Tables[0].Rows[0]["productdesc"]);
                                    Cate = Convert.ToInt32(dsOld.Tables[0].Rows[0]["CategoryId"]);
                                    blk = Convert.ToString(dsOld.Tables[0].Rows[0]["block"]);
                                    rl = Convert.ToDouble(dsOld.Tables[0].Rows[0]["rol"]);
                                    mrpdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["Effdate"]);
                                    //dpdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["dpeffdate"]);
                                    //nlcdat = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["nlceffdate"]);
                                    //oldmrp = Convert.ToDouble(dsOld.Tables[0].Rows[0]["rate"]);
                                    //oldnlc = Convert.ToDouble(dsOld.Tables[0].Rows[0]["nlc"]);
                                    //olddp = Convert.ToDouble(dsOld.Tables[0].Rows[0]["dealerrate"]);
                                    //NLCEffDate = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["nlceffdate"]);
                                    //DPEffDate = Convert.ToDateTime(dsOld.Tables[0].Rows[0]["dpeffdate"]);
                                }
                            }

                            DateTime EffDate = Convert.ToDateTime(dr["EFFECTIVEDate"]);


                            if (mrpdat == EffDate)
                            {
                                mrpprevdat = EffDate;
                            }
                            else
                            {
                                mrpprevdat = EffDate.AddDays(-1);
                            }

                            dbQry = string.Format("UPDATE tblProductPrices SET EffDate='{0}',Price={1},Discount={2},Priceid={3} where itemcode = '{4}' and PriceName = '{5}' ", //Jolo Barcode
                            Convert.ToDateTime(dr["EFFECTIVEDate"]).ToString("yyyy-MM-dd"), Convert.ToInt32(dr["Price"]), Convert.ToInt32(dr["Discount"]), type, Convert.ToString(dr["itemcode"]), pricelist); //Jolo Barcode

                            manager.ExecuteDataSet(CommandType.Text, dbQry);

                            if ((mrpdat == EffDate))
                            {
                            }
                            else
                            {
                                dbQry2 = string.Format("INSERT INTO tblProductPricehistory VALUES('{0}','{1}', '{2}',{3},'{4}',{5},'{6}','{7}','{8}','{9}',{10},{11},{12},'{13}')",
                                    Convert.ToString(dr["itemcode"]), PrName, Model, Cate, Bnd, rl, EffDate.ToString("yyyy-MM-dd"), mrpdat.ToString("yyyy-MM-dd"), mrpprevdat.ToString("yyyy-MM-dd"), pricelist, Convert.ToInt32(dr["Price"]), Convert.ToInt32(dr["Discount"]), type, Username);
                                manager.ExecuteDataSet(CommandType.Text, dbQry2);
                            }
                        }
                    }
                }
            }

            sAuditStr = "Products updated. Record Details :  User :" + Username + " DateTime: " + DateTime.Now.ToString();
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Update", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListProductPriceHistory(string connection, string ItemCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        //txtSearch = "%" + txtSearch + "%";

        dbQry = string.Format("select A.PriceName,A.ItemCode,A.Price,A.Discount,A.EffDate, A.PriceId as id,UserName from tblProductPriceHistory as A where A.ItemCode = '" + ItemCode + "' order by A.PriceName,A.EffDate desc ");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListBrandsProducts(string connection, string method)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        string obsolute = string.Empty;
        string dbQry2 = string.Empty;
        DataSet dsd = new DataSet();
        try
        {
            manager.Open();

            dbQry2 = "SELECT KeyValue From tblSettings WHERE keyname='OBSOLUTE'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry2);

            if (dsd.Tables[0].Rows.Count > 0)
                obsolute = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (method == "Add")
            {
                if (obsolute == "YES")
                {
                    dbQry = "select BrandId, BrandName from tblBrand where IsActive = 'YES' Order By BrandName ";
                }
                else
                {
                    dbQry = "select BrandId, BrandName from tblBrand Order By BrandName ";
                }
            }
            else
            {
                dbQry = "select BrandId, BrandName from tblBrand Order By BrandName ";
            }



            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public bool CheckIfCustomerCategoryUsed(string LedgerCategory)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();
            dbQry = "SELECT Count(*) FROM tblLedger Where LedgerCategory ='" + LedgerCategory + "' ";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    #region Permission Methods

    public DataSet GetPermissionSummary(string userName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        int empNo = GetUserInfoByName(userName).EmpNo;

        dbQry = string.Format(@"SELECT a.PermissionId, a.EmployeeNo, e.EmpFirstName as EmployeeName, FORMAT(a.StartTime, 'Short Time')+' - '+FORMAT(a.EndTime, 'Short Time') as TimeRange, a.DateApplied, a.Reason, a.Status, a.Approver, e1.EmpFirstName as ApproverName, a.ApproverComments, a.EmailContact, a.PhoneContact 
                                FROM (tblEmployeePermissions a                                 
                                INNER JOIN tblEmployee e on a.EmployeeNo = e.EmpNo)
                                INNER JOIN tblEmployee e1 on a.Approver = e1.EmpNo
                                WHERE a.EmployeeNo ={0}", empNo);

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataTable GetPermissionDetailsById(int permissionId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        dbQry = string.Format(@"SELECT a.EmployeeNo,e1.EmpFirstName as EmployeeName, a.StartTime, a.EndTime, a.DateApplied, a.Reason,a.Status, a.Approver,e.EmpFirstName as ApproverName, a.ApproverComments, a.EmailContact, a.PhoneContact 
                                FROM (tblEmployeePermissions a                                 
                                INNER JOIN tblEmployee e ON a.Approver = e.EmpNo)
                                INNER JOIN tblEmployee e1 ON a.EmployeeNo = e1.EmpNo
                                WHERE a.PermissionId ={0}", permissionId.ToString());

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables.Count > 0)
                return ds.Tables[0];
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataTable GetPermissionInfoById(string connection, Int32 leaveId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            dbQry = string.Format(@"SELECT PermissionID,EmployeeNo,StartDate,StartDateSession,EndDate,EndDateSession,TotalDays,DateApplied, 
                                        LeaveTypeID,Reason,Status,Approver,ApproverComments,EmailContact,PhoneContanct
                                    FROM tblEmployeePermissions WHERE PermissionID={0}", leaveId);

            DataSet ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables.Count > 0)
                return ds.Tables[0];
            else
                return new DataTable();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();

        }
    }

    public DataSet GetPermissionRequestsSummary(string userName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        int empNo = GetUserInfoByName(userName).EmpNo;

        dbQry = string.Format(@"SELECT a.PermissionID, a.EmployeeNo,e1.EmpFirstName as EmployeeName,FORMAT(a.StartTime, 'Short Time')+' - '+FORMAT(a.EndTime, 'Short Time') as TimeRange, a.DateApplied, a.Reason,a.Status, a.Approver,e.EmpFirstName as ApproverName, a.ApproverComments, a.EmailContact, a.PhoneContact 
                                FROM (tblEmployeePermissions a                                 
                                INNER JOIN tblEmployee e ON a.Approver = e.EmpNo)
                                INNER JOIN tblEmployee e1 ON a.EmployeeNo = e1.EmpNo
                                WHERE a.Approver ={0}", empNo);

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public int ApplyPermission(string EmpNo, DateTime StartTime, DateTime EndTime, DateTime DateApplied
                                , string Reason, string Approver, string EmailContact, string PhoneContact)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        string dbQry = string.Empty;

        try
        {
            //double totalPermissionDays = CalculateTotalPermissionDays(StartDate, StartDateSession, EndDate, EndDateSession);


            EmpNo = GetUserInfoByName(EmpNo).EmpNo.ToString();
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            dbQry = string.Format(@"INSERT INTO tblEmployeePermissions (EmployeeNo,StartTime,EndTime, DateApplied, 
                                        Reason,Status,Approver,ApproverComments,EmailContact,PhoneContact)
                                        VALUES ({0},'{1}','{2}','{3}','{4}','{5}',{6}, '{7}','{8}',{9})"
                                        , EmpNo, StartTime, EndTime, DateApplied, Reason
                                        , "Submitted", Approver, "", EmailContact, PhoneContact);

            int resultId = manager.ExecuteNonQuery(CommandType.Text, dbQry);
            return resultId;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public int UpdatePermission(string PermissionId, string EmployeeNo, DateTime StartTime, DateTime EndTime, DateTime DateApplied, string Reason, string Approver, string EmailContact, string PhoneContact)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        string dbQry = string.Empty;

        try
        {
            //double totalLeaveDays = CalculateTotalLeaveDays(StartDate, StartDateSession, EndDate, EndDateSession);
            EmployeeNo = GetUserInfoByName(EmployeeNo).EmpNo.ToString();
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            dbQry = string.Format(@"UPDATE tblEmployeePermissions SET EmployeeNo={0},StartTime='{1}', EndTime='{2}', DateApplied='{3}',
                                                Reason='{4}',Approver={5},EmailContact='{6}',PhoneContact='{7}' WHERE PermissionID={8}"
                                        , EmployeeNo, StartTime, EndTime, DateApplied, Reason
                                        , Approver, EmailContact, PhoneContact, PermissionId);

            int resultId = manager.ExecuteNonQuery(CommandType.Text, dbQry);
            return resultId;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public int UpdatePermissionStatus(string PermissionId, string status, string approverComments)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            dbQry = string.Format(@"UPDATE tblEmployeePermissions SET Status='{0}', ApproverComments='{1}' WHERE PermissionID={2}"
                                         , status, approverComments, PermissionId);

            int resultId = manager.ExecuteNonQuery(CommandType.Text, dbQry);
            return resultId;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public int DeletePermission(string permissionId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            dbQry = string.Format(@"DELETE FROM tblEmployeePermissions WHERE PermissionId={0}"
                                         , permissionId);

            int resultId = manager.ExecuteNonQuery(CommandType.Text, dbQry);
            return resultId;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    private double CalculateTotalPermissionInMonth(DateTime StartDate, string StartDateSession, DateTime EndDate, string EndDateSession)
    {
        double totalLeaveDays = 0;
        int dateDiffDays = new DateTimeHelper.DateDifference(StartDate, EndDate).Days;
        if (dateDiffDays.Equals(0))
        {
            if (StartDateSession.Equals("FN") && EndDateSession.Equals("AN"))
            {
                totalLeaveDays = 1.0;
            }
            else if (StartDateSession.Equals("FN") && EndDateSession.Equals("FN"))
            {
                totalLeaveDays = 0.5;
            }
            else if (StartDateSession.Equals("AN") && EndDateSession.Equals("AN"))
            {
                totalLeaveDays = 0.5;
            }
        }
        else
        {
            if (StartDateSession.Equals("FN") && EndDateSession.Equals("AN"))
            {
                totalLeaveDays = dateDiffDays + 1;
            }
            else if (StartDateSession.Equals("FN") && EndDateSession.Equals("FN"))
            {
                totalLeaveDays = dateDiffDays + 0.5;
            }
            else if (StartDateSession.Equals("AN") && EndDateSession.Equals("AN"))
            {
                totalLeaveDays = dateDiffDays + 0.5;
            }
            else if (StartDateSession.Equals("AN") && EndDateSession.Equals("FN"))
            {
                totalLeaveDays = dateDiffDays;
            }
        }
        return totalLeaveDays;
    }

    public bool IsPermissionValid(string EmpNo, DateTime applyMonth)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        string dbQry = string.Empty;

        try
        {
            EmpNo = GetUserInfoByName(EmpNo).EmpNo.ToString();

            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object totPermission = manager.ExecuteScalar(CommandType.Text, "SELECT Monthly_Permission_Count FROM tblHRAdminSettings");

            dbQry = string.Format("SELECT Count(*) FROM tblEmployeePermissions WHERE EmployeeNo ={0} AND Month(DateApplied) = {1}", EmpNo, applyMonth.Month);

            object actualPermission = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (totPermission.ToString() != string.Empty)
            {
                if (int.Parse(totPermission.ToString()) <= int.Parse(actualPermission.ToString()))
                {
                    throw new Exception("Maximum Permission count per month is " + totPermission.ToString());
                }
            }

            return true;

            //int resultId = manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //return resultId;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

        return false;
    }

    public bool IsPermissionHourValid(string EmpNo, int hour)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object totPermissionHr = manager.ExecuteScalar(CommandType.Text, "SELECT Daily_Permission_Thresold FROM tblHRAdminSettings");

            //object actualPermissionHr = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblEmployeePermissions WHERE Month(DateApplied) = " + applyMonth.Month);

            if (totPermissionHr.ToString() != string.Empty)
            {
                if (int.Parse(totPermissionHr.ToString()) < hour)
                {
                    throw new Exception("Maximum Permission hour allowed per day is " + totPermissionHr.ToString());
                }
            }

            return true;

            //int resultId = manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //return resultId;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }

        return false;
    }

    public DataTable ListPermissionTypes(string connection)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);

        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            dbQry = string.Format(@"SELECT ID as LeaveTypeId, LeaveTypeName FROM tblLeaveTypes WHERE IsActive=true");

            DataSet ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables.Count > 0)
                return ds.Tables[0];
            else
                return new DataTable();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();

        }
    }

    #endregion

    #region Employee Pay Mapping

    public DataSet GetPayCompForEmpManage(string SearchTxt)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        SearchTxt = "%" + SearchTxt + "%";

        if (SearchTxt != "")
        {
            dbQry = "SELECT PayComponentID, PayComponentName, Description from tblPayComponents WHERE PayComponentType_Id =1 AND PayComponentName LIKE '" + SearchTxt + "'";
        }
        else
        {
            dbQry = "SELECT PayComponentID, PayComponentName, Description from tblPayComponents WHERE PayComponentType_Id =1";
        }
        try
        {
            //object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblPayComponents");

            //if (exists.ToString() != string.Empty)
            //{
            //    if (int.TryParse(exists.ToString()) > 0)
            //    {
            //        throw new Exception("No Pay Components Found ");
            //    }
            //}

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void InsertEmpPayComp(int EmpId, int payCompId, DateTime frmDate, int amtDeclared)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string delQuery = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblPayComponentEmployeeMapping Where PayComponent_ID =" + payCompId + "");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    delQuery = string.Format("DELETE FROM tblPayComponentEmployeeMapping WHERE PayComponent_ID = {0} AND EmpNo = {1}", payCompId, EmpId);

                    manager.ExecuteNonQuery(CommandType.Text, delQuery);

                    manager.CommitTransaction();

                    dbQry = string.Format("INSERT INTO tblPayComponentEmployeeMapping(PayComponent_ID, EmpNo, EffectiveDate, DeclaredAmount) VALUES({0}, {1}, '{2}', {3})",
                    payCompId, EmpId, frmDate, amtDeclared);

                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    manager.CommitTransaction();
                }
                else
                {
                    dbQry = string.Format("INSERT INTO tblPayComponentEmployeeMapping(PayComponent_ID, EmpNo, EffectiveDate, DeclaredAmount) VALUES({0}, {1}, '{2}', {3})",
                    payCompId, EmpId, frmDate, amtDeclared);

                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    manager.CommitTransaction();
                }
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void DeleteEmpPayComp(int EmpId, int pay_ID)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblPayComponentEmployeeMapping Where EmpNo =" + EmpId + " AND PayComponent_ID = " + pay_ID);

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {

                    dbQry = string.Format("Delete From tblPayComponentEmployeeMapping WHERE EmpNo = {0} AND PayComponent_ID = {1} ", EmpId, pay_ID);

                    manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    manager.CommitTransaction();
                }
            }
            else
            {
                throw new Exception("Pay Component Not Exists");
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetEmpPayComp(int EmpId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        dbQry = "SELECT PayComponent_ID, EmpNo, PayComponentName, Description, EffectiveDate, DeclaredAmount from tblPayComponentEmployeeMapping A Inner Join tblPayComponents B on A.PayComponent_ID = B.PayComponentID where A.EmpNo = " + EmpId;

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    #endregion


    //public DataSet GetUsersTaskList1(string connection, string txtSearch, string dropDown, string Username, string branchcode)
    //{
    //    DBManager manager = new DBManager(DataProvider.SqlServer);
    //    manager.ConnectionString = CreateConnectionString(connection);
    //    DataSet ds = new DataSet();
    //    StringBuilder dbQry = new StringBuilder();


    //    if (dropDown == "TaskDate")
    //        txtSearch = txtSearch;
    //    else
    //        txtSearch = "%" + txtSearch + "%";

    //    string dbQry2 = string.Empty;

    //    string dbQry3 = string.Empty;
    //    DataSet dsd = new DataSet();

    //    try
    //    {
    //        int managerid = 0;


    //        manager.Open();

    //        dbQry3 = "SELECT * From tblEmployee inner join tblUserInfo on tblUserInfo.Empno = tblEmployee.empno WHERE tblUserinfo.Username='" + Username + "'";
    //        dsd = manager.ExecuteDataSet(CommandType.Text, dbQry3);

    //        if (dsd.Tables[0].Rows.Count > 0)
    //            managerid = Convert.ToInt32(dsd.Tables[0].Rows[0]["ManagerId"].ToString());

    //        dbQry2 = "Select recon_date from last_recon";
    //        object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);
    //        if (managerid == 0)
    //        {
    //            if ((retVal != null) && (retVal != DBNull.Value))
    //            {
    //                //dbQry.Append("SELECT A.Task_Id,A.Task_Code,A.Task_Name,A.Task_Date,A.Expected_Start_Date,A.Expected_End_Date,A.Actual_Start_Date,A.Actual_End_Date,A.Owner,A.Task_Type,A.IsActive,A.Task_Description,tblEmployee.empfirstname,A.Dependency_Task,A.Project_Code, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName ,(Select Count (*) from tblTasks where A.Task_Id<=Task_Id) As Row ");
    //                //dbQry.Append(" FROM ((tblTasks As A INNER JOIN  tblEmployee ON A.Owner = tblEmployee.empno) inner join tblProjects ON A.Project_Code = tblProjects.Project_Id) inner join tbluserinfo on tbluserinfo.empno = tblEmployee.managerid Where A.Task_Date > " + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + " and tbluserinfo.username = '" + Username + "' ");

    //                //dbQry.Append("SELECT tblTasks.Task_Id,tblTasks.Task_Code,tblTasks.Task_Name,tblTasks.Task_Date,tblTasks.Expected_Start_Date,tblTasks.Expected_End_Date,tblTasks.Actual_Start_Date,tblTasks.Actual_End_Date,tblTasks.Owner,tblTasks.Task_Type,tblTasks.IsActive,tblTasks.Task_Description,tblEmployee.empfirstname,tblTasks.Dependency_Task,tblTasks.Project_Code, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName  ");
    //                //dbQry.Append(" FROM ((tblTasks INNER JOIN  tblEmployee ON tblTasks.Owner = tblEmployee.empno) inner join tblProjects ON tblTasks.Project_Code = tblProjects.Project_Id) inner join tbluserinfo on tbluserinfo.empno = tblEmployee.managerid Where tblTasks.Task_Date > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# and tbluserinfo.username = '" + Username + "' ");
    //                dbQry.Append(" WITH EmpCTE(empno, empFirstName, ManagerID) AS (SELECT empno, empFirstName, ManagerID FROM [tblEmployee] WHERE ManagerID = " + managerid + " UNION ALL ");
    //                dbQry.Append(" SELECT E.empno, E.empFirstName, E.ManagerID FROM [tblEmployee] AS E JOIN EmpCTE AS M ON E.ManagerID = M.empno) SELECT * FROM EmpCTE inner join  tblTasks AS A on A.Owner= EmpCTE.empno  ");
    //            }
    //            else
    //            {
    //                //dbQry.Append("SELECT A.Task_Id,A.Task_Code,A.Task_Name,A.Task_Date,A.Expected_Start_Date,A.Expected_End_Date,A.Actual_Start_Date,A.Actual_End_Date,A.Owner,A.Task_Type,A.IsActive,A.Task_Description,tblEmployee.empfirstname,A.Dependency_Task,A.Project_Code, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName ,(Select Count (*) from tblTasks where A.Task_Id<=Task_Id) As Row ");
    //                //dbQry.Append("FROM ((tblTasks As A INNER JOIN  tblEmployee ON A.Owner = tblEmployee.empno) inner join tblProjects ON A.Project_Code = tblProjects.Project_Id) inner join tbluserinfo on tbluserinfo.empno = tblEmployee.managerid Where 1=1  and tbluserinfo.username = '" + Username + "' ");
    //                //dbQry.Append("SELECT tblTasks.Task_Id,tblTasks.Task_Code,tblTasks.Task_Name,tblTasks.Task_Date,tblTasks.Expected_Start_Date,tblTasks.Expected_End_Date,tblTasks.Actual_Start_Date,tblTasks.Actual_End_Date,tblTasks.Owner,tblTasks.Task_Type,tblTasks.IsActive,tblTasks.Task_Description,tblEmployee.empfirstname,tblTasks.Dependency_Task,tblTasks.Project_Code, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName ");
    //                //dbQry.Append(" FROM ((tblTasks INNER JOIN  tblEmployee ON tblTasks.Owner = tblEmployee.empno) inner join tblProjects ON tblTasks.Project_Code = tblProjects.Project_Id) inner join tbluserinfo on tbluserinfo.empno = tblEmployee.managerid Where 1=1  and tbluserinfo.username = '" + Username + "' ");
    //                dbQry.Append(" WITH EmpCTE(empno, empFirstName, ManagerID) AS (SELECT empno, empFirstName, ManagerID FROM [tblEmployee] WHERE ManagerID = " + managerid + " UNION ALL ");
    //                dbQry.Append(" SELECT E.empno, E.empFirstName, E.ManagerID FROM [tblEmployee] AS E JOIN EmpCTE AS M ON E.ManagerID = M.empno) SELECT * FROM EmpCTE inner join  tblTasks AS A on A.Owner= EmpCTE.empno  ");
    //            }
    //        }
    //        else
    //        {
    //            if ((retVal != null) && (retVal != DBNull.Value))
    //            {
    //                //dbQry.Append("SELECT A.Task_Id,A.Task_Code,A.Task_Name,A.Task_Date,A.Expected_Start_Date,A.Expected_End_Date,A.Actual_Start_Date,A.Actual_End_Date,A.Owner,A.Task_Type,A.IsActive,A.Task_Description,tblEmployee.empfirstname,A.Dependency_Task,A.Project_Code, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName ,(Select Count (*) from tblTasks where A.Task_Id>=Task_Id) As Row  ");
    //                //dbQry.Append(" FROM ((tblTasks As A INNER JOIN  tblEmployee ON A.Owner = tblEmployee.empno) inner join tblProjects ON A.Project_Code = tblProjects.Project_Id) inner join tbluserinfo on tbluserinfo.empno = tblEmployee.empno Where A.Task_Date > " + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + " and tbluserinfo.username = '" + Username + "' ");
    //                //dbQry.Append("SELECT tblTasks.Task_Id,tblTasks.Task_Code,tblTasks.Task_Name,tblTasks.Task_Date,tblTasks.Expected_Start_Date,tblTasks.Expected_End_Date,tblTasks.Actual_Start_Date,tblTasks.Actual_End_Date,tblTasks.Owner,tblTasks.Task_Type,tblTasks.IsActive,tblTasks.Task_Description,tblEmployee.empfirstname,tblTasks.Dependency_Task,tblTasks.Project_Code, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName  ");
    //                //dbQry.Append(" FROM ((tblTasks INNER JOIN  tblEmployee ON tblTasks.Owner = tblEmployee.empno) inner join tblProjects ON tblTasks.Project_Code = tblProjects.Project_Id) inner join tbluserinfo on tbluserinfo.empno = tblEmployee.empno Where tblTasks.Task_Date > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# and tbluserinfo.username = '" + Username + "' ");
    //                dbQry.Append(" WITH EmpCTE(empno, empFirstName, ManagerID) AS (SELECT empno, empFirstName, ManagerID FROM [tblEmployee] WHERE ManagerID = " + managerid + " UNION ALL ");
    //                dbQry.Append(" SELECT E.empno, E.empFirstName, E.ManagerID FROM [tblEmployee] AS E JOIN EmpCTE AS M ON E.ManagerID = M.empno) SELECT * FROM EmpCTE inner join  tblTasks AS A on A.Owner= EmpCTE.empno  ");
    //            }
    //            else
    //            {
    //                //dbQry.Append("SELECT A.Task_Id,A.Task_Code,A.Task_Name,A.Task_Date,A.Expected_Start_Date,A.Expected_End_Date,A.Actual_Start_Date,A.Actual_End_Date,A.Owner,A.Task_Type,A.IsActive,A.Task_Description,tblEmployee.empfirstname,A.Dependency_Task,A.Project_Code, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName ,(Select Count (*) from tblTasks where A.Task_Id>=Task_Id) As Row ");
    //                //dbQry.Append(" FROM ((tblTasks As A INNER JOIN  tblEmployee ON A.Owner = tblEmployee.empno) inner join tblProjects ON A.Project_Code = tblProjects.Project_Id) inner join tbluserinfo on tbluserinfo.empno = tblEmployee.empno Where 1=1  and tbluserinfo.username = '" + Username + "' ");
    //                //dbQry.Append("SELECT tblTasks.Task_Id,tblTasks.Task_Code,tblTasks.Task_Name,tblTasks.Task_Date,tblTasks.Expected_Start_Date,tblTasks.Expected_End_Date,tblTasks.Actual_Start_Date,tblTasks.Actual_End_Date,tblTasks.Owner,tblTasks.Task_Type,tblTasks.IsActive,tblTasks.Task_Description,tblEmployee.empfirstname,tblTasks.Dependency_Task,tblTasks.Project_Code, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName ");
    //                //dbQry.Append(" FROM ((tblTasks INNER JOIN  tblEmployee ON tblTasks.Owner = tblEmployee.empno) inner join tblProjects ON tblTasks.Project_Code = tblProjects.Project_Id) inner join tbluserinfo on tbluserinfo.empno = tblEmployee.empno Where 1=1  and tbluserinfo.username = '" + Username + "' ");
    //                dbQry.Append(" WITH EmpCTE(empno, empFirstName, ManagerID) AS (SELECT empno, empFirstName, ManagerID FROM [tblEmployee] WHERE ManagerID = " + managerid + " UNION ALL ");
    //                dbQry.Append(" SELECT E.empno, E.empFirstName, E.ManagerID FROM [tblEmployee] AS E JOIN EmpCTE AS M ON E.ManagerID = M.empno) SELECT * FROM EmpCTE inner join  tblTasks AS A on A.Owner= EmpCTE.empno  ");
    //            }

    //        }

    //        if (txtSearch == null || txtSearch == "")
    //        {
    //            dbQry.AppendFormat(" AND 1=1 ");
    //        }
    //        else
    //        {
    //            if (dropDown == "TaskCode" && txtSearch != null)
    //            {
    //                dbQry.AppendFormat(" AND A.Task_Id like '{0}' ", txtSearch);
    //            }
    //            else if (dropDown == "TaskDate" && txtSearch != null)
    //            {
    //                dbQry.AppendFormat(" AND A.Task_Date = '{0}' ", Convert.ToDateTime(txtSearch).ToString("yyyy-MM-dd"));
    //            }
    //            else if (dropDown == "ProjectCode" && txtSearch != null)
    //            {
    //                dbQry.AppendFormat(" AND tblProjects.Project_Code like '{0}' ", txtSearch);
    //            }
    //            else if (dropDown == "ProjectName" && txtSearch != null)
    //            {
    //                dbQry.AppendFormat(" AND tblProjects.Project_Name like '{0}' ", txtSearch);
    //            }
    //            else if (dropDown == "TaskName" && txtSearch != null)
    //            {
    //                dbQry.AppendFormat(" AND A.Task_Name like '{0}' ", txtSearch);
    //            }
    //            else if (dropDown == "Owner" && txtSearch != null)
    //            {
    //                dbQry.AppendFormat(" AND tblEmployee.empfirstname like '{0}' ", txtSearch);
    //            }
    //            else if (dropDown == "0" && txtSearch != "%%")
    //            {
    //                dbQry.AppendFormat(" AND 1=1 ");
    //            }
    //            else
    //            {
    //               // dbQry.AppendFormat(" AND 1=1 ");
    //                if (branchcode != "All")
    //                {
    //                    dbQry.AppendFormat(" AND 1=1 AND A.BranchCode = '" + branchcode + "'");
    //                }
    //                else
    //                {
    //                    dbQry.AppendFormat(" AND 1=1 ");
    //                }
    //            }
    //        }

    //        dbQry.Append(" ORDER BY A.Owner desc ");

    //        ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

    //        if (ds.Tables[0].Rows.Count > 0)
    //            return ds;
    //        else
    //            return null;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        if (manager != null)
    //            manager.Dispose();
    //    }
    //}

    public DataSet GetUsersTaskList(string connection, string txtSearch, string dropDown, string Username, string branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();


        if (dropDown == "TaskDate")
            txtSearch = txtSearch;
        else
            txtSearch = "%" + txtSearch + "%";

        string dbQry2 = string.Empty;

        string dbQry3 = string.Empty;
        DataSet dsd = new DataSet();

        try
        {
            int managerid = 0;


            manager.Open();

            dbQry3 = "SELECT * From tblEmployee inner join tblUserInfo on tblUserInfo.Empno = tblEmployee.empno WHERE tblUserinfo.Username='" + Username + "'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry3);

            if (dsd.Tables[0].Rows.Count > 0)
                managerid = Convert.ToInt32(dsd.Tables[0].Rows[0]["ManagerId"].ToString());

            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);
            if (managerid == 0)
            {
                if ((retVal != null) && (retVal != DBNull.Value))
                {
                    dbQry.Append("SELECT A.Task_Id,A.Task_Code,A.Task_Name,A.Task_Date,A.Expected_Start_Date,A.Expected_End_Date,A.Actual_Start_Date,A.Actual_End_Date,A.Owner,A.Task_Type,A.IsActive,A.Task_Description,tblEmployee.empfirstname,A.Dependency_Task,A.Project_Code, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName ,(Select Count (*) from tblTasks where A.Task_Id<=Task_Id) As Row,A.BranchCode ");
                    dbQry.Append(" FROM ((tblTasks As A INNER JOIN  tblEmployee ON A.Owner = tblEmployee.empno) inner join tblProjects ON A.Project_Code = tblProjects.Project_Id) inner join tbluserinfo on tbluserinfo.empno = tblEmployee.managerid Where A.Task_Date > " + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + " and tbluserinfo.username = '" + Username + "' ");
                    //dbQry.Append("SELECT tblTasks.Task_Id,tblTasks.Task_Code,tblTasks.Task_Name,tblTasks.Task_Date,tblTasks.Expected_Start_Date,tblTasks.Expected_End_Date,tblTasks.Actual_Start_Date,tblTasks.Actual_End_Date,tblTasks.Owner,tblTasks.Task_Type,tblTasks.IsActive,tblTasks.Task_Description,tblEmployee.empfirstname,tblTasks.Dependency_Task,tblTasks.Project_Code, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName  ");
                    //dbQry.Append(" FROM ((tblTasks INNER JOIN  tblEmployee ON tblTasks.Owner = tblEmployee.empno) inner join tblProjects ON tblTasks.Project_Code = tblProjects.Project_Id) inner join tbluserinfo on tbluserinfo.empno = tblEmployee.managerid Where tblTasks.Task_Date > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# and tbluserinfo.username = '" + Username + "' ");
                }
                else
                {
                    dbQry.Append("SELECT A.Task_Id,A.Task_Code,A.Task_Name,A.Task_Date,A.Expected_Start_Date,A.Expected_End_Date,A.Actual_Start_Date,A.Actual_End_Date,A.Owner,A.Task_Type,A.IsActive,A.Task_Description,tblEmployee.empfirstname,A.Dependency_Task,A.Project_Code, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName ,(Select Count (*) from tblTasks where A.Task_Id<=Task_Id) As Row,A.BranchCode ");
                    dbQry.Append("FROM ((tblTasks As A INNER JOIN  tblEmployee ON A.Owner = tblEmployee.empno) inner join tblProjects ON A.Project_Code = tblProjects.Project_Id) inner join tbluserinfo on tbluserinfo.empno = tblEmployee.managerid Where 1=1  and tbluserinfo.username = '" + Username + "' ");
                    //dbQry.Append("SELECT tblTasks.Task_Id,tblTasks.Task_Code,tblTasks.Task_Name,tblTasks.Task_Date,tblTasks.Expected_Start_Date,tblTasks.Expected_End_Date,tblTasks.Actual_Start_Date,tblTasks.Actual_End_Date,tblTasks.Owner,tblTasks.Task_Type,tblTasks.IsActive,tblTasks.Task_Description,tblEmployee.empfirstname,tblTasks.Dependency_Task,tblTasks.Project_Code, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName ");
                    //dbQry.Append(" FROM ((tblTasks INNER JOIN  tblEmployee ON tblTasks.Owner = tblEmployee.empno) inner join tblProjects ON tblTasks.Project_Code = tblProjects.Project_Id) inner join tbluserinfo on tbluserinfo.empno = tblEmployee.managerid Where 1=1  and tbluserinfo.username = '" + Username + "' ");
                }
            }
            else
            {
                if ((retVal != null) && (retVal != DBNull.Value))
                {
                    dbQry.Append("SELECT A.Task_Id,A.Task_Code,A.Task_Name,A.Task_Date,A.Expected_Start_Date,A.Expected_End_Date,A.Actual_Start_Date,A.Actual_End_Date,A.Owner,A.Task_Type,A.IsActive,A.Task_Description,tblEmployee.empfirstname,A.Dependency_Task,A.Project_Code, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName ,(Select Count (*) from tblTasks where A.Task_Id>=Task_Id) As Row,A.BranchCode  ");
                    dbQry.Append(" FROM ((tblTasks As A INNER JOIN  tblEmployee ON A.Owner = tblEmployee.empno) inner join tblProjects ON A.Project_Code = tblProjects.Project_Id) inner join tbluserinfo on tbluserinfo.empno = tblEmployee.empno Where A.Task_Date > " + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + " and tbluserinfo.username = '" + Username + "' ");
                    //dbQry.Append("SELECT tblTasks.Task_Id,tblTasks.Task_Code,tblTasks.Task_Name,tblTasks.Task_Date,tblTasks.Expected_Start_Date,tblTasks.Expected_End_Date,tblTasks.Actual_Start_Date,tblTasks.Actual_End_Date,tblTasks.Owner,tblTasks.Task_Type,tblTasks.IsActive,tblTasks.Task_Description,tblEmployee.empfirstname,tblTasks.Dependency_Task,tblTasks.Project_Code, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName  ");
                    //dbQry.Append(" FROM ((tblTasks INNER JOIN  tblEmployee ON tblTasks.Owner = tblEmployee.empno) inner join tblProjects ON tblTasks.Project_Code = tblProjects.Project_Id) inner join tbluserinfo on tbluserinfo.empno = tblEmployee.empno Where tblTasks.Task_Date > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# and tbluserinfo.username = '" + Username + "' ");
                }
                else
                {
                    dbQry.Append("SELECT A.Task_Id,A.Task_Code,A.Task_Name,A.Task_Date,A.Expected_Start_Date,A.Expected_End_Date,A.Actual_Start_Date,A.Actual_End_Date,A.Owner,A.Task_Type,A.IsActive,A.Task_Description,tblEmployee.empfirstname,A.Dependency_Task,A.Project_Code, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName ,(Select Count (*) from tblTasks where A.Task_Id>=Task_Id) As Row,A.BranchCode ");
                    dbQry.Append(" FROM ((tblTasks As A INNER JOIN  tblEmployee ON A.Owner = tblEmployee.empno) inner join tblProjects ON A.Project_Code = tblProjects.Project_Id) inner join tbluserinfo on tbluserinfo.empno = tblEmployee.empno Where 1=1  and tbluserinfo.username = '" + Username + "' ");
                    //dbQry.Append("SELECT tblTasks.Task_Id,tblTasks.Task_Code,tblTasks.Task_Name,tblTasks.Task_Date,tblTasks.Expected_Start_Date,tblTasks.Expected_End_Date,tblTasks.Actual_Start_Date,tblTasks.Actual_End_Date,tblTasks.Owner,tblTasks.Task_Type,tblTasks.IsActive,tblTasks.Task_Description,tblEmployee.empfirstname,tblTasks.Dependency_Task,tblTasks.Project_Code, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName ");
                    //dbQry.Append(" FROM ((tblTasks INNER JOIN  tblEmployee ON tblTasks.Owner = tblEmployee.empno) inner join tblProjects ON tblTasks.Project_Code = tblProjects.Project_Id) inner join tbluserinfo on tbluserinfo.empno = tblEmployee.empno Where 1=1  and tbluserinfo.username = '" + Username + "' ");
                }

            }

            if (txtSearch == null || txtSearch == "")
            {
                dbQry.AppendFormat(" AND 1=1 ");
            }
            else
            {
                if (dropDown == "TaskCode" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND A.Task_Id like '{0}' ", txtSearch);
                }
                else if (dropDown == "TaskDate" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND A.Task_Date = '{0}' ", Convert.ToDateTime(txtSearch).ToString("yyyy-MM-dd"));
                }
                else if (dropDown == "ProjectCode" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblProjects.Project_Code like '{0}' ", txtSearch);
                }
                else if (dropDown == "ProjectName" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblProjects.Project_Name like '{0}' ", txtSearch);
                }
                else if (dropDown == "TaskName" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND A.Task_Name like '{0}' ", txtSearch);
                }
                else if (dropDown == "Owner" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblEmployee.empfirstname like '{0}' ", txtSearch);
                }
                else if (dropDown == "0" && txtSearch != "%%")
                {
                    dbQry.AppendFormat(" AND 1=1 ");
                }
                else
                {
                    if (branchcode != "All")
                    {
                        dbQry.AppendFormat(" AND 1=1 AND A.BranchCode = '" + branchcode + "'");
                    }
                    else
                    {
                        dbQry.AppendFormat(" AND 1=1 ");
                    }
                }
            }

            dbQry.Append(" ORDER BY A.Task_Id desc ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public DataSet GetUserProjectList(string connection, string txtSearch, string dropDown, string UserName, string branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();


        if (dropDown == "ProjectDate" || dropDown == "ProjectID")
            txtSearch = txtSearch;
        else
            txtSearch = "%" + txtSearch + "%";

        string dbQry2 = string.Empty;

        string dbQry3 = string.Empty;
        DataSet dsd = new DataSet();

        try
        {
            int managerid = 0;


            manager.Open();

            dbQry3 = "SELECT * From tblEmployee inner join tblUserInfo on tblUserInfo.Empno = tblEmployee.empno WHERE tblUserinfo.Username='" + UserName + "'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry3);

            if (dsd.Tables[0].Rows.Count > 0)
                managerid = Convert.ToInt32(dsd.Tables[0].Rows[0]["ManagerId"].ToString());

            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                // dbQry.Append("SELECT tblProjects.Project_Id,tblProjects.Project_Code,tblProjects.Project_Date,tblProjects.Expected_Start_Date,tblProjects.Expected_End_Date,tblProjects.Project_Manager_Id,tblProjects.Project_Name,tblProjects.Expected_Effort_Days,tblProjects.Project_Status,tblProjects.Project_Description,tblEmployee.empfirstname ");
                //  dbQry.Append("SELECT A.Project_Id,A.Project_Code,A.Project_Date,A.Expected_Start_Date,A.Expected_End_Date,A.Project_Manager_Id,A.Project_Name,A.Expected_Effort_Days,A.Project_Status,A.Project_Description,tblEmployee.empfirstname,(Select Count (*) from tblProjects where A.Project_Id<=Project_Id) As Row ");
                //dbQry.Append(" FROM tblProjects INNER JOIN  tblEmployee ON tblProjects.Project_Manager_Id = tblEmployee.empno Where tblProjects.Project_Date > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# ");
                //dbQry.Append(" FROM (tblProjects Inner Join tblUserInfo On  tblProjects.Project_Manager_Id= tblUserInfo.Empno) Inner join tblEmployee on tblProjects.Project_Manager_Id=tblEmployee.Empno Where tblProjects.Project_Date > #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# and tbluserinfo.username = '" + UserName + "' ");

                //dbQry.Append(" FROM (tblProjects As A Inner Join tblUserInfo On  A.Project_Manager_Id= tblUserInfo.Empno) Inner join tblEmployee on A.Project_Manager_Id=tblEmployee.Empno Where   tbluserinfo.username = '" + UserName + "' ");
                dbQry.Append(" WITH EmpCTE(empno, empFirstName, ManagerID) AS (SELECT empno, empFirstName, ManagerID FROM [tblEmployee] WHERE ManagerID = " + managerid + " UNION ALL ");
                dbQry.Append(" SELECT E.empno, E.empFirstName, E.ManagerID FROM [tblEmployee] AS E JOIN EmpCTE AS M ON E.ManagerID = M.empno) SELECT * FROM EmpCTE inner join  tblProjects AS A on A.Project_Manager_Id= EmpCTE.empno  ");
            }

            else
            {
                dbQry.Append("SELECT A.Project_Id,A.Project_Code,A.Project_Date,A.Expected_Start_Date,A.Expected_End_Date,A.Project_Manager_Id,A.Project_Name,A.Expected_Effort_Days,A.Project_Status,A.Project_Description,tblEmployee.empfirstname,A.BranchCode,(Select Count (*) from tblProjects where A.Project_Id<=Project_Id) As Row ");
                // dbQry.Append("SELECT tblProjects.Project_Id,tblProjects.Project_Code,tblProjects.Project_Date,tblProjects.Expected_Start_Date,tblProjects.Expected_End_Date,tblProjects.Project_Manager_Id,tblProjects.Project_Name,tblProjects.Expected_Effort_Days,tblProjects.Project_Status,tblProjects.Project_Description,tblEmployee.empfirstname ");
                //dbQry.Append(" FROM tblProjects INNER JOIN  tblEmployee ON tblProjects.Project_Manager_Id = tblEmployee.empno Where 1=1 ");
                dbQry.Append(" FROM (tblProjects As A Inner Join tblUserInfo On  A.Project_Manager_Id= tblUserInfo.Empno) Inner join tblEmployee on A.Project_Manager_Id=tblEmployee.Empno Where 1=1 ");
            }

            if (txtSearch == null || txtSearch == "")
            {
                dbQry.AppendFormat(" AND 1=1 ");
            }
            else
            {
                if (dropDown == "ProjectID" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND A.Project_Id = {0} ", txtSearch);
                }
                else if (dropDown == "ProjectCode" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND A.Project_Code like '{0}' ", txtSearch);
                }
                else if (dropDown == "ProjectDate" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND A.Project_Date = '{0}' ", Convert.ToDateTime(txtSearch).ToString("yyyy-MM-dd"));
                }
                else if (dropDown == "ProjectName" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND A.Project_Name like '{0}' ", txtSearch);
                }
                else if (dropDown == "ProjectManager" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND EmpCTE.empfirstname like '{0}' ", txtSearch);
                }
                else if (dropDown == "ProjectStatus" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND A.Project_Status like '{0}' ", txtSearch);
                }
                else if (dropDown == "0" && txtSearch != "%%")
                {
                    dbQry.AppendFormat(" AND 1=1 ");
                }
                else
                {
                    if (branchcode != "All")
                    {
                        dbQry.AppendFormat(" AND 1=1 AND A.BranchCode = '" + branchcode + "'");
                    }
                    else
                    {
                        dbQry.AppendFormat(" AND 1=1 ");
                    }
                }
            }

            dbQry.Append(" Order By A.Project_Id desc ");



            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }
    public DataSet GetUserTaskList(string connection, string txtSearch, string dropDown, string Username, string branchcode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();


        if (dropDown == "TaskDate")
            txtSearch = txtSearch;
        else
            txtSearch = "%" + txtSearch + "%";

        string dbQry2 = string.Empty;

        string dbQry3 = string.Empty;
        DataSet dsd = new DataSet();

        try
        {
            int managerid = 0;


            manager.Open();

            dbQry3 = "SELECT * From tblEmployee inner join tblUserInfo on tblUserInfo.Empno = tblEmployee.empno WHERE tblUserinfo.Username='" + Username + "'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQry3);

            if (dsd.Tables[0].Rows.Count > 0)
                managerid = Convert.ToInt32(dsd.Tables[0].Rows[0]["ManagerId"].ToString());

            dbQry2 = "Select recon_date from last_recon";
            object retVal = manager.ExecuteScalar(CommandType.Text, dbQry2);

            if ((retVal != null) && (retVal != DBNull.Value))
            {
                dbQry.Append(" SELECT A.Task_Id,A.Task_Code,A.Task_Name,A.Task_Date,A.Expected_Start_Date,A.Expected_End_Date,A.Actual_Start_Date,A.Actual_End_Date,A.Owner,A.Task_Type,A.IsActive,A.Task_Description,tblEmployee.empfirstname,A.Dependency_Task,A.Project_Code, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName,(Select Count (*) from tblTasks where A.Task_Id<=Task_Id) As Row,A.BranchCode ");
                dbQry.Append(" FROM ((tblTasks As A INNER JOIN  tblEmployee ON A.Owner = tblEmployee.empno) inner join tblProjects ON A.Project_Code = tblProjects.Project_Id) inner join tblUserInfo on tblEmployee.ManagerID = tblUserInfo.empno Where A.Task_Date  >  " + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + " and tbluserinfo.username = '" + Username + "' ");
                //dbQry.Append("SELECT tblTasks.Task_Id,tblTasks.Task_Code,tblTasks.Task_Name,tblTasks.Task_Date,tblTasks.Expected_Start_Date,tblTasks.Expected_End_Date,tblTasks.Actual_Start_Date,tblTasks.Actual_End_Date,tblTasks.Owner,tblTasks.Task_Type,tblTasks.IsActive,tblTasks.Task_Description,tblEmployee.empfirstname,tblTasks.Dependency_Task,tblTasks.Project_Code, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName  ");
                //dbQry.Append("  FROM ((tblTasks INNER JOIN  tblEmployee ON tblTasks.Owner = tblEmployee.empno) inner join tblProjects ON tblTasks.Project_Code = tblProjects.Project_Id) inner join tblUserInfo on tblEmployee.ManagerID = tblUserInfo.empno Where tblTasks.Task_Date >  #" + DateTime.Parse(retVal.ToString()).ToString("MM/dd/yyyy") + "# and tbluserinfo.username = '" + Username + "' ");
            }
            else
            {
                dbQry.Append(" SELECT A.Task_Id,A.Task_Code,A.Task_Name,A.Task_Date,A.Expected_Start_Date,A.Expected_End_Date,A.Actual_Start_Date,A.Actual_End_Date,A.Owner,A.Task_Type,A.IsActive,A.Task_Description,tblEmployee.empfirstname,A.Dependency_Task,A.Project_Code, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName,(Select Count (*) from tblTasks where A.Task_Id<=Task_Id) As Row,A.BranchCode ");
                dbQry.Append(" FROM ((tblTasks As A INNER JOIN  tblEmployee ON A.Owner = tblEmployee.empno) inner join tblProjects ON A.Project_Code = tblProjects.Project_Id) inner join tblUserInfo on tblEmployee.ManagerID = tblUserInfo.empno Where 1=1 ");
                //dbQry.Append("SELECT tblTasks.Task_Id,tblTasks.Task_Code,tblTasks.Task_Name,tblTasks.Task_Date,tblTasks.Expected_Start_Date,tblTasks.Expected_End_Date,tblTasks.Actual_Start_Date,tblTasks.Actual_End_Date,tblTasks.Owner,tblTasks.Task_Type,tblTasks.IsActive,tblTasks.Task_Description,tblEmployee.empfirstname,tblTasks.Dependency_Task,tblTasks.Project_Code, tblProjects.Project_Code as ProjectCode, tblProjects.Project_Name as ProjectName ");
                //dbQry.Append("  FROM ((tblTasks INNER JOIN  tblEmployee ON tblTasks.Owner = tblEmployee.empno) inner join tblProjects ON tblTasks.Project_Code = tblProjects.Project_Id) inner join tblUserInfo on tblEmployee.ManagerID = tblUserInfo.empno Where 1=1 ");
            }

            if (txtSearch == null || txtSearch == "")
            {
                dbQry.AppendFormat(" AND 1=1 ");
            }
            else
            {
                if (dropDown == "TaskCode" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND A.Task_Code like '{0}' ", txtSearch);
                }
                else if (dropDown == "TaskDate" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND Format([A.Task_Date], 'dd/mm/yyyy') = '{0}' ", Convert.ToDateTime(txtSearch).ToShortDateString());
                }
                else if (dropDown == "ProjectCode" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblProjects.Project_Code like '{0}' ", txtSearch);
                }
                else if (dropDown == "ProjectName" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblProjects.Project_Name like '{0}' ", txtSearch);
                }
                else if (dropDown == "TaskName" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND A.Task_Name like '{0}' ", txtSearch);
                }
                else if (dropDown == "Owner" && txtSearch != null)
                {
                    dbQry.AppendFormat(" AND tblEmployee.empfirstname like '{0}' ", txtSearch);
                }
                else if (dropDown == "0" && txtSearch != "%%")
                {
                    dbQry.AppendFormat(" AND 1=1 ");
                }
                else
                {
                    if (branchcode != "All")
                    {
                        dbQry.AppendFormat(" AND 1=1 AND A.BranchCode = '" + branchcode + "'");
                    }
                    else
                    {
                        dbQry.AppendFormat(" AND 1=1 ");
                    }
                }
            }

            dbQry.Append(" ORDER BY A.Task_Id desc ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public bool CheckTaskUpdateUsed(int Task_Id)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int qty = 0;
        string dbQry = string.Empty;
        try
        {
            manager.Open();

            dbQry = "SELECT Count(*) FROM tblTaskUpdates Where Task_id =" + Task_Id.ToString();

            object objServiceLedger = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (objServiceLedger != null && objServiceLedger != DBNull.Value)
            {
                if (objServiceLedger.ToString() != "")
                    qty = qty + (int)objServiceLedger;
                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetPriceListForName(string connection, string PriceName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select * from tblPriceList where PriceName = '" + PriceName + "' ";
            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public bool CheckIfPriceNameDuplicate(string connection, string PriceName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int Totalqty = 0;
        int qty = 0;
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            dbQry = "SELECT Count(*) FROM tblPriceList Where PriceName ='" + PriceName + "'";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool CheckIfItemCodeDuplicatePriceList1(string ItemCode, string PriceName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int Totalqty = 0;
        int qty = 0;
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            dbQry = "SELECT Count(*) FROM tblProductPrices Where ItemCode ='" + ItemCode + "' and PriceName = '" + PriceName + "' ";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public bool CheckPriceListUsed(string PriceName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int Totalqty = 0;
        int qty = 0;
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            dbQry = "SELECT Count(*) FROM tblProductPrices Where PriceName = '" + PriceName + "' ";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetProjectManagementReport(string connection, int incharge, int empno, int pro_Id, string flag, int status, int taskid, int deptask, string isactive, string cond)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();

        string dbQry2 = string.Empty;

        string dbQry3 = string.Empty;
        DataSet dsd = new DataSet();

        try
        {
            int managerid = 0;


            manager.Open();

            // cond = "tblEmployee.ManagerID" + incharge + " and tblEmployee.empno " + empno + " and tblProjects.Project_Id " + pro_Id + " and tblTaskUpdates.Blocked_Flag '" + flag + "'and tblTaskUpdates.Task_Status" + status + " and tblTasks.Task_Id " + taskid + " and tbltasks.Dependency_Task " + deptask + " and tbltasks.IsActive'" + isactive + "' ";
            dbQry.Append("SELECT tblProjects.Project_Name as ProjectName, tblEmployee.empfirstname,tblProjects.Project_Date,tblProjects.Expected_Start_Date,tblProjects.Project_Status,tblProjects.Expected_End_Date,tblProjects.Project_Id,tblProjects.BranchCode,tblProjects.Project_Code as ProjectCode ");





            dbQry.Append("   FROM tblProjects  inner join tblEmployee on tblProjects.Project_Manager_Id = tblEmployee.empno ");



            // dbQry.Append("  FROM ((((tblTasks As A INNER JOIN  tblEmployee ON A.Owner = tblEmployee.empno) inner join tblProjects ON A.Project_Code = tblProjects.Project_Id) inner join tblUserInfo on tblEmployee.ManagerID = tblUserInfo.empno) Inner join tblTaskUpdates on A.task_Id=tblTaskUpdates.Task_Id) Inner join tblTaskStatus on tblTaskStatus.Task_Status_Id=tblTaskUpdates.Task_Status ");


            dbQry.Append(" Where " + cond + " ORDER BY tblProjects.Project_Id ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public DataSet GettaskforProjectNamereport(string connection, int Project_Id, string Isactive, int type, string getCondfortask)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        //dbQry = "Select empno,empFirstName From tblEmployee Order By empFirstName";


        //if (Isactive == "Y" && type == 0)
        //{

        dbQry.Append("SELECT tblTasks.Task_Name ,tblTasks.Expected_Start_Date,tblTasks.Expected_End_Date,tblEmployee.empfirstname AS ownername,tblTaskTypes.Task_Type_Name as taskname,tblTasks.IsActive,tblTasks.Task_id,tblTasks.Task_Type,tblProjects.Project_Name ");

        dbQry.Append("  from ((tblTasks Inner Join tblProjects On tblProjects.Project_Id = tblTasks.Project_Code) Inner join tblEmployee on tblEmployee.empno = tblTasks.Owner) Inner join tblTaskTypes on tblTaskTypes.Task_Type_Id = tblTasks.Task_Type ");

        dbQry.Append(" Where tblProjects.Project_id= " + Project_Id + "  " + getCondfortask + " ");
        //}
        //else
        //{
        //    dbQry.Append("Select tblTasks.Task_Id,tblTasks.Task_Name,tblProjects.Unit_Of_Measure,tblTasks.Expected_Start_Date,tblTasks.Expected_End_Date,tblTasks.IsActive,tblTasks.Task_Date,tblEmployee.empfirstname as Ownername,tblTaskTypes.Task_Type_Name as TaskName,tblTaskStatus.Task_status_Name as TaskStatusName ");

        //    dbQry.Append("  FROM (((((tblTasks  INNER JOIN  tblEmployee ON tblTasks.Owner = tblEmployee.empno) inner join tblProjects ON tblTasks.Project_Code = tblProjects.Project_Id) inner join tblUserInfo on tblEmployee.ManagerID = tblUserInfo.empno) Inner join tblTaskUpdates on tblTasks.task_Id=tblTaskUpdates.Task_Id) Inner join tblTaskStatus on tblTaskStatus.Task_Status_Id=tblTaskUpdates.Task_Status) Inner join tblTaskTypes on tblTaskTypes.Task_Type_Id = tblTasks.Task_Type ");
        //    dbQry.Append(" Where tblProjects.Project_Id = " + Project_Id + " ");
        //    // dbQry.Append(" FROM ((tblTasks Inner Join tblProjects On tblProjects.Project_Id = tblTasks.Project_Code) Inner join tblEmployee on tblEmployee.empno = tblTasks.Owner) Inner join tblTaskTypes on tblTaskTypes.Task_Type_Id = tblTasks.Task_Type ");
        //}

        // where tbltasks.Project_code=4 and tblTasks.IsActive='Y' and tblTaskTypes.Task_Type_Id=8
        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public DataSet GettaskupdatehistoryfortaskNamereport(string connection, int tasksid, string flag, int type, string condtaskupdate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        //dbQry = "Select empno,empFirstName From tblEmployee Order By empFirstName";


        //if (Isactive == "Y" && type == 0)
        //{

        dbQry.Append("SELECT tblTaskUpdatesHistory.Actual_Start_Date,tblTaskUpdatesHistory.Actual_End_Date,tblTaskUpdatesHistory.Per_of_Completion,tblTaskStatus.Task_Status_Name as Taskstatusname,tblTaskUpdatesHistory.Effort_Remaining,tblTaskUpdatesHistory.Effort_Spend_Last_Update,tblTaskUpdatesHistory.Blocked_Flag,tblTaskUpdatesHistory.Blocking_Reason,tblTaskUpdatesHistory.Task_id,tblTasks.Task_Name ,tblTasks.Expected_Start_Date,tblTasks.Expected_End_Date,tblTasks.IsActive,tblTasks.Task_Type,tblTaskUpdatesHistory.Task_Update_Id,tblTaskUpdatesHistory.Task_Update_Date ");

        dbQry.Append("  from (tblTaskUpdatesHistory Inner join tblTasks on tblTasks.Task_Id=tblTaskUpdatesHistory.Task_id) Inner join tbltaskStatus on tblTaskstatus.Task_status_Id=tblTaskUpdatesHistory.Task_status ");

        dbQry.Append(" Where tblTasks.Task_id=" + tasksid + "  " + condtaskupdate + " ");
        //}
        //else
        //{
        //    dbQry.Append("Select tblTasks.Task_Id,tblTasks.Task_Name,tblProjects.Unit_Of_Measure,tblTasks.Expected_Start_Date,tblTasks.Expected_End_Date,tblTasks.IsActive,tblTasks.Task_Date,tblEmployee.empfirstname as Ownername,tblTaskTypes.Task_Type_Name as TaskName,tblTaskStatus.Task_status_Name as TaskStatusName ");

        //    dbQry.Append("  FROM (((((tblTasks  INNER JOIN  tblEmployee ON tblTasks.Owner = tblEmployee.empno) inner join tblProjects ON tblTasks.Project_Code = tblProjects.Project_Id) inner join tblUserInfo on tblEmployee.ManagerID = tblUserInfo.empno) Inner join tblTaskUpdates on tblTasks.task_Id=tblTaskUpdates.Task_Id) Inner join tblTaskStatus on tblTaskStatus.Task_Status_Id=tblTaskUpdates.Task_Status) Inner join tblTaskTypes on tblTaskTypes.Task_Type_Id = tblTasks.Task_Type ");
        //    dbQry.Append(" Where tblProjects.Project_Id = " + Project_Id + " ");
        //    // dbQry.Append(" FROM ((tblTasks Inner Join tblProjects On tblProjects.Project_Id = tblTasks.Project_Code) Inner join tblEmployee on tblEmployee.empno = tblTasks.Owner) Inner join tblTaskTypes on tblTaskTypes.Task_Type_Id = tblTasks.Task_Type ");
        //}

        // where tbltasks.Project_code=4 and tblTasks.IsActive='Y' and tblTaskTypes.Task_Type_Id=8
        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public DataSet ListScreens(string connection)
    {

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select * from tblScreens Order by ScreenNo Asc";
            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetScreenForScreenId(string connection, int id)
    {
        if (connection == null)
        {
            throw new Exception("Connection Expired");
        }

        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select * from tblScreens where sno = " + id + " Order by ScreenNo Asc";
            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void InsertScreenConfig(string connection, int screenno, int screenid, string screenname, string smscontent, string emailsubject, string emailcontent, DataSet dsttN, string usernam, DataSet dsttNN)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;

        string sAuditStr = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("INSERT INTO tblScreenMaster(screenno,screenid,screenname,emailsubject,smscontent,emailcontent) VALUES({0},{1},'{2}','{3}','{4}','{5}')",
                screenno, screenid, screenname, emailsubject, smscontent, emailcontent);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int Id = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(ID) FROM tblScreenMaster"));

            if (dsttN != null)
            {
                if (dsttN.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsttN.Tables[0].Rows)
                    {
                        dbQry = string.Format("INSERT INTO tblScreenConfig(Id,Name1,NameId,MobileNo,EmailId,Mobile,Email,Type,ScreenType) VALUES({0},'{1}',{2},'{3}','{4}','{5}','{6}',{7},{8})",
                            Id, Convert.ToString(dr["Name"]), Convert.ToInt32(dr["NameId"]), Convert.ToString(dr["MobileNo"]), Convert.ToString(dr["EmailId"]), Convert.ToBoolean(dr["Mobile"]), Convert.ToBoolean(dr["Email"]), Convert.ToInt32(dr["Type"]), Convert.ToInt32(dr["ScreenType"]));

                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }
                }
            }


            if (dsttNN != null)
            {
                if (dsttNN.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsttNN.Tables[0].Rows)
                    {
                        dbQry = string.Format("INSERT INTO tblScreenConfig(Id,Name1,NameId,MobileNo,EmailId,Mobile,Email,Type,ScreenType) VALUES({0},'{1}',{2},'{3}','{4}','{5}','{6}',{7},{8})",
                            Id, Convert.ToString(dr["Name"]), Convert.ToInt32(dr["NameId"]), "", "", Convert.ToBoolean(dr["Mobile"]), Convert.ToBoolean(dr["Email"]), Convert.ToInt32(dr["Type"]), Convert.ToInt32(dr["ScreenType"]));

                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }
                }
            }

            sAuditStr = "Screen Master For : " + screenname + " added. Record Details :  User :" + usernam;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet GetScreenForId(string connection, int id)
    {


        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select * from tblScreenMaster where id = " + id + " Order by ScreenNo Asc";
            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet GetConfigSettingsForId(string connection, int id, int screentype)
    {


        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select A.Id,A.Name1,A.NameId,A.MobileNo,A.EmailId,A.Mobile,A.Email,A.Type, (Select count(*) from tblScreenConfig where A.SId<=SId and screentype =" + screentype + ") as RowNumber from tblScreenConfig as A where A.id = " + id + " and A.screentype =" + screentype + "  order by a.sid desc";
            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void UpdateScreenConfig(string connection, int screenno, int screenid, string screenname, string smscontent, string emailsubject, string emailcontent, DataSet dsttN, string usernam, int Id, DataSet dsttNN)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;

        string sAuditStr = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            //dbQry = string.Format("INSERT INTO tblScreenMaster(screenno,screenid,screenname,emailsubject,smscontent,emailcontent) VALUES({0},{1},'{2}','{3}','{4}','{5}')",
            //    screenno, screenid, screenname, emailsubject, smscontent, emailcontent);

            dbQry = string.Format("Update tblScreenMaster Set ScreenNo = {0}, screenid = {1}, ScreenName = '{2}', emailsubject = '{3}', smscontent = '{4}', emailcontent = '{5}' Where Id = {6}", screenno, screenid, screenname, emailsubject, smscontent, emailcontent, Id);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblScreenConfig Where Id = {0} ", Id);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            if (dsttN != null)
            {
                if (dsttN.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsttN.Tables[0].Rows)
                    {
                        dbQry = string.Format("INSERT INTO tblScreenConfig(Id,Name1,NameId,MobileNo,EmailId,Mobile,Email,Type,ScreenType) VALUES({0},'{1}',{2},'{3}','{4}','{5}','{6}',{7},{8})",
                            Id, Convert.ToString(dr["Name"]), Convert.ToInt32(dr["NameId"]), Convert.ToString(dr["MobileNo"]), Convert.ToString(dr["EmailId"]), Convert.ToBoolean(dr["Mobile"]), Convert.ToBoolean(dr["Email"]), Convert.ToInt32(dr["Type"]), Convert.ToInt32(dr["ScreenType"]));

                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }
                }
            }

            if (dsttNN != null)
            {
                if (dsttNN.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsttNN.Tables[0].Rows)
                    {
                        dbQry = string.Format("INSERT INTO tblScreenConfig(Id,Name1,NameId,MobileNo,EmailId,Mobile,Email,Type,ScreenType) VALUES({0},'{1}',{2},'{3}','{4}','{5}','{6}',{7},{8})",
                            Id, Convert.ToString(dr["Name"]), Convert.ToInt32(dr["NameId"]), "", "", Convert.ToBoolean(dr["Mobile"]), Convert.ToBoolean(dr["Email"]), Convert.ToInt32(dr["Type"]), Convert.ToInt32(dr["ScreenType"]));

                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }
                }
            }

            sAuditStr = "Screen Master For : " + screenname + " got edited. Record Details :  User :" + usernam;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListExecutiveEmpNo(string connection, int empno)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select * From tblEmployee Where empno=" + empno;

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public void DeleteScreenConfig(string connection, int Id, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string Bank = string.Empty;
        string AccountNo = string.Empty;
        string FromChequeNo = string.Empty;
        string ToChequeNo = string.Empty;

        string description = string.Empty;
        string logdescription = string.Empty;
        string Logsave = string.Empty;
        DataSet dsd = new DataSet();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;
            manager.BeginTransaction();

            dbQry = string.Format("Delete From tblScreenMaster Where Id = {0}", Id);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            dbQry = string.Format("Delete From tblScreenConfig Where Id = {0}", Id);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Screen Master For : " + Id + " deleted. Record Details :  User :" + Username;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Delete", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }


    public bool CheckIfScreenDuplicate(string Screen)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int Totalqty = 0;
        int qty = 0;
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            dbQry = "SELECT Count(*) FROM tblScreenMaster Where ScreenName ='" + Screen + "'";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListBranchInfo(string connection, string txtSearch, string dropDown)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        txtSearch = "%" + txtSearch + "%";

        if (dropDown == "BranchName")
        {
            dbQry = "select A.BranchId,A.BranchName,A.Branchcode,A.Branchaddress1,A.Branchaddress2,A.Branchaddress3,A.BranchLocation,A.IsActive,A.Branchcode, (Select count(*) from tblBranch where A.BranchId>=BranchId) as Row from tblBranch as A Where A.BranchName like '" + txtSearch + "' Order By A.BranchId";
        }
        else if (dropDown == "BranchCode")
        {
            dbQry = "select A.BranchId,A.BranchName,A.Branchcode,A.Branchaddress1,A.Branchaddress2,A.Branchaddress3,A.BranchLocation,A.IsActive,A.Branchcode, (Select count(*) from tblBranch where A.BranchId>=BranchId) as Row from tblBranch as A Where A.Branchcode like '" + txtSearch + "' Order By A.BranchId";
        }
        else
        {
            dbQry = string.Format("select A.BranchId,A.BranchName,A.Branchcode,A.Branchaddress1,A.Branchaddress2,A.Branchaddress3,A.BranchLocation,A.IsActive,A.Branchcode, (Select count(*) from tblBranch where A.BranchId>=BranchId) as Row from tblBranch as A Order By A.BranchId");
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void InsertBranch(string connection, string Branchcode, string BranchName, string BranchAddress1, string BranchAddress2, string BranchAddress3, string BranchLocation, string IsActive, string Username, DataSet dstest, DataSet dst)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string dbQry2 = string.Empty;

        string sAuditStr = string.Empty;
        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("INSERT INTO tblBranch(Branchcode,BranchName,BranchAddress1,BranchAddress2,BranchAddress3,BranchLocation,IsActive) VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}')",
                Branchcode, BranchName, BranchAddress1, BranchAddress2, BranchAddress3, BranchLocation, IsActive);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int BranchID = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(BranchID) FROM tblBranch"));




            //dbQry = string.Format("SET IDENTITY_INSERT tblLedger ON");
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);

            if (dstest != null)
            {
                if (dstest.Tables.Count > 0)
                {
                    foreach (DataRow dr in dstest.Tables[0].Rows)
                    {
                        int LedgerID = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(LedgerID) FROM tblLedger"));

                        dbQry = string.Format("INSERT INTO tblLedger(LedgerID,LedgerName, AliasName,GroupID,OpenBalanceDR,OpenBalanceCR,Debit,Credit,ContactName,Add1,Add2,Add3,Phone,BelongsTo,LedgerCategory,ExecutiveIncharge,TinNumber,Mobile,CreditLimit, CreditDays,Inttrans,Paymentmade,dc,ChequeName,unuse, EmailId,ModeofContact,BranchCode,ExpenseID) VALUES({0},'{1}','{2}',{3},{4},{5},{6},{7},'{8}','{9}','{10}','{11}','{12}',{13},'{14}',{15},'{16}','{17}',{18},{19},'{20}','{21}','{22}','{23}','{24}','{25}',{26},'{27}',{28})",
                            LedgerID + 1, Convert.ToString(dr["LedgerName"]), Convert.ToString(dr["AliasName"]), Convert.ToInt32(dr["GroupID"]), 0, 0, 0, 0, Convert.ToString(dr["ContactName"]), Convert.ToString(dr["Add1"]), Convert.ToString(dr["Add2"]), Convert.ToString(dr["Add3"]), "", 0, "", 0, 0, "", 0, 0, Convert.ToString(dr["Inttrans"]), "NO", "NO", Convert.ToString(dr["LedgerName"]), "YES", "", 3, Convert.ToString(dr["BranchCode"]),0);

                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        sAuditStr = "Ledger : " + Convert.ToString(dr["LedgerName"]) + " added. Record Details :  User :" + Username + " AliasName = " + Convert.ToString(dr["AliasName"]) + " GroupID= " + Convert.ToInt32(dr["GroupID"]);
                        dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }
                }
            }

            //dbQry = string.Format("SET IDENTITY_INSERT tblLedger OFF");
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);



            if (dst != null)
            {
                if (dst.Tables.Count > 0)
                {
                    foreach (DataRow dr in dst.Tables[0].Rows)
                    {
                        dbQry = string.Format("INSERT INTO tblProductStock(Branchcode,BranchName,Stock,CategoryID,Model,ItemCode,ProductName,ProductDesc) VALUES('{0}','{1}',{2},{3},'{4}','{5}','{6}','{7}')",
                            Convert.ToString(dr["Branchcode"]), Convert.ToString(dr["BranchName"]), Convert.ToDouble(dr["Stock"]), Convert.ToInt32(dr["CategoryID"]), Convert.ToString(dr["Model"]), Convert.ToString(dr["ItemCode"]), Convert.ToString(dr["ProductName"]), Convert.ToString(dr["ProductDesc"]));

                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }
                }
            }



            sAuditStr = "Branch : " + BranchName + " added. Record Details :  User :" + Username;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);


            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void UpdateBranch(string connection, int BranchID, string Branchcode, string BranchName, string BranchAddress1, string BranchAddress2, string BranchAddress3, string BranchLocation, string IsActive, string Username)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        string sAuditStr = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            dbQry = string.Format("Update tblBranch SET Branchcode='{0}',BranchName='{1}',BranchAddress1='{2}' ,BranchAddress2='{3}',BranchAddress3='{4}',BranchLocation='{5}',IsActive='{6}' WHERE BranchId={7}", Branchcode, BranchName, BranchAddress1, BranchAddress2, BranchAddress3, BranchLocation, IsActive, BranchID);
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Branch : " + BranchName + " updated. Record Details :  User :" + Username;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit And Update", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet GetBranchForId(string connection, int BranchId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            dbQry = "select * from tblBranch where BranchId = " + BranchId;
            manager.Open();

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public bool CheckIfBranchDuplicate(string connection, string BranchName)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        int Totalqty = 0;
        int qty = 0;
        string dbQry = string.Empty;

        try
        {
            manager.Open();
            dbQry = "SELECT Count(*) FROM tblBranch Where BranchName ='" + BranchName + "'";

            object qtyObj = manager.ExecuteScalar(CommandType.Text, dbQry);

            if (qtyObj != null && qtyObj != DBNull.Value)
            {
                qty = (int)qtyObj;

                if (qty > 0)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public DataSet ListBranch(string connection, string User)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;


        dbQry = string.Format("select A.BranchId,A.BranchName,A.Branchcode,A.Branchaddress1,A.Branchaddress2,A.Branchaddress3,A.BranchLocation,A.IsActive,A.Branchcode from tblBranch as A Order By A.BranchId");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }


    public DataSet ListProductStocks(string connection, string ItemCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;
        //txtSearch = "%" + txtSearch + "%";

        dbQry = string.Format("select A.BranchName,A.Branchcode,A.ItemCode,A.Stock, A.Id, (Select count(*) from tblProductStock where A.Id>=Id and ItemCode = '" + ItemCode + "') as Row  from tblProductStock as A where A.ItemCode = '" + ItemCode + "' Order By A.Id");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }
    }

    public void InsertExpenseInfo(string connection, string LedgerName, string AliasName, int GroupID, double OpenBalanceDR, double OpenBalanceCR, double OpenBalance, string DRORCR, string ContactName, string Add1, string Add2, string Add3, string Phone, string LedgerCategory, int ExecutiveIncharge, string TinNumber, string Mobile, string Inttrans, string Paymentmade, string dc, string ChequeName, string Username, string unuse, string EmailId, int ModeofContact, string OpDueDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();

        string dbQry = string.Empty;
        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        DataSet dsdt = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;
        string sAuditStr = string.Empty;

        //string dbLdId = string.Empty;
        //DataSet dsLdId = new DataSet();


        //DateTime sBilldate;
        //string[] sDate;
        //string delim = "/";
        //char[] delimA = delim.ToCharArray();

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblExpenseMaster Where ExpenseHead='" + LedgerName + "'");

            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Ledger Exists");
                }
            }


            //sDate = OpDueDate.Trim().Split(delimA);


            //sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));





            // int LedgerID;

            //dbLdId = "SELECT MAX(LedgerID) as LedgerID FROM tblLedger";
            //dsLdId = manager.ExecuteDataSet(CommandType.Text, dbLdId.ToString());
            //if (dsLdId.Tables[0].Rows.Count > 0)
            //    LedgerID = Convert.ToInt32(dsLdId.Tables[0].Rows[0]["LedgerID"].ToString());




            dbQ = "SELECT KeyValue From tblSettings WHERE keyName='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();



            dbQry = string.Format("INSERT INTO tblExpenseMaster(ExpenseHead, GroupID,AliasName,IsActive) VALUES('{0}','{1}','{2}','{3}')",
                          LedgerName, 8, AliasName, "YES");

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            int ExpID = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(ID) FROM tblExpenseMaster"));

            //dbQry = string.Format("SET IDENTITY_INSERT [tblLedger] ON");
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);


            dbQ = "SELECT * From tblBranch";
            dsdt = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsdt != null)
            {
                if (dsdt.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsdt.Tables[0].Rows)
                    {
                        int LedgerID = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(LedgerID) FROM tblLedger"));

                        if (Logsave == "YES")
                        {
                            string value1 = string.Empty;
                            string value2 = string.Empty;
                            string value3 = string.Empty;

                            int middlePos = 0;


                            logdescription = string.Format("INSERT INTO tblLedger(LedgerID,LedgerName, AliasName,GroupID,OpenBalanceDR,OpenBalanceCR,Debit,Credit,ContactName,Add1,Add2,Add3,Phone,BelongsTo,LedgerCategory,ExecutiveIncharge,TinNumber,Mobile,Inttrans,Paymentmade,dc,BranchCode,ExpenseID) VALUES({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22})",
                            LedgerID + 1, LedgerName + " - " + Convert.ToString(dr["Branchcode"]), AliasName + " - " + Convert.ToString(dr["Branchcode"]), GroupID, 0, 0, 0, 0, ContactName, Add1, Add2, Add3, Phone, 0, LedgerCategory, ExecutiveIncharge, TinNumber, Mobile, Inttrans, Paymentmade, dc, Convert.ToString(dr["Branchcode"]), ExpID);
                            logdescription = logdescription.Trim();
                            if (logdescription.Length > 255)
                            {
                                value1 = logdescription.Substring(0, 255);

                                middlePos = logdescription.Length - (value1.Length);
                                if (middlePos > 0)
                                    value2 = logdescription.Substring(255, middlePos);
                                else
                                    value2 = "";

                                middlePos = logdescription.Length - (value1.Length + value2.Length);
                                if (middlePos > 0)
                                    value3 = logdescription.Substring(510, middlePos);
                                else
                                    value3 = "";
                            }
                            else
                            {
                                value1 = logdescription;
                                value2 = "";
                                value3 = "";
                            }

                            description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}')",
                                 DateTime.Now.ToString("yyyy-MM-dd"), value1, "", "", value2, value3, "InsertLedgerInfo");
                            manager.ExecuteNonQuery(CommandType.Text, description);
                        }



                        dbQry = string.Format("INSERT INTO tblLedger(LedgerID,LedgerName, AliasName,GroupID,OpenBalanceDR,OpenBalanceCR,Debit,Credit,ContactName,Add1,Add2,Add3,Phone,BelongsTo,LedgerCategory,ExecutiveIncharge,TinNumber,Mobile,Inttrans,Paymentmade,dc,ChequeName,unuse, EmailId, ModeofContact,OpDueDate,BranchCode,ExpenseID) VALUES({0},'{1}','{2}',{3},{4},{5},{6},{7},'{8}','{9}','{10}','{11}','{12}',{13},'{14}',{15},'{16}','{17}','{18}','{19}','{20}','{21}','{22}','{23}',{24},'{25}','{26}',{27})",
                            LedgerID + 1, LedgerName + " - " + Convert.ToString(dr["Branchcode"]), AliasName + " - " + Convert.ToString(dr["Branchcode"]), 8, 0, 0, 0, 0, ContactName, Add1, Add2, Add3, 0, 0, 0, 0, 0, 0, "NO", "NO", "NO", LedgerName, "YES", EmailId, 3, OpDueDate, Convert.ToString(dr["Branchcode"]),ExpID);

                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                        sAuditStr = "Ledger : " + LedgerName + " - " + Convert.ToString(dr["Branchcode"]) + " added. Record Details :  User :" + Username + " AliasName = " + AliasName + " - " + Convert.ToString(dr["Branchcode"]) + " GroupID= " + GroupID + " ,LedgerCategory = " + LedgerCategory + " ,Mobile=" + Mobile + " Phone :" + Phone;
                        dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Add New", DateTime.Now.ToString("yyyy-MM-dd"));
                        manager.ExecuteNonQuery(CommandType.Text, dbQry);
                    }
                }
            }

            //dbQry = string.Format("SET IDENTITY_INSERT [tblLedger] OFF");
            //manager.ExecuteNonQuery(CommandType.Text, dbQry);



          


            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public void UpdateExpenseInfo(string connection, int LedgerID, string LedgerName, string AliasName, double OpenBalance, string DRORCR, int GroupID, double OpenBalanceDR, double OpenBalanceCR, string ContactName, string Add1, string Add2, string Add3, string Phone, string LedgerCategory, int ExecutiveIncharge, string TinNumber, string Mobile, string Inttrans, string Paymentmade, string dc, string ChequeName, string Username, string unuse, string EmailId, int ModeofContact, string OpDueDate)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        //DateTime sBilldate;
        //string[] sDate;
        //string delim = "/";
        //char[] delimA = delim.ToCharArray();

        string sAuditStr = string.Empty;
        int oldLedgerID = 0;
        string oldLedgerName = string.Empty;
        string oldmobile = string.Empty;
        string oldphone = string.Empty;
        DataSet dsOld = new DataSet();

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

          //  object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblLedger Where LedgerName='" + LedgerName + "' And LedgerID <> " + LedgerID.ToString() + "");
            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblExpenseMaster Where ExpenseHead='" + LedgerName + "'");
            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Ledger Exists");
                }
            }

            //sDate = OpDueDate.Trim().Split(delimA);


            //sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));


            dbQ = string.Format("Select LedgerName,LedgerID,phone,mobile from tblledger Where LedgerID={0}", LedgerID);
            dsOld = manager.ExecuteDataSet(CommandType.Text, dbQ);
            if (dsOld != null)
            {
                if (dsOld.Tables.Count > 0)
                {
                    oldLedgerID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["LedgerID"]);
                    oldLedgerName = Convert.ToString(dsOld.Tables[0].Rows[0]["LedgerName"]);
                    oldphone = Convert.ToString(dsOld.Tables[0].Rows[0]["phone"]);
                    oldmobile = Convert.ToString(dsOld.Tables[0].Rows[0]["mobile"]);
                }

            }

            dbQ = "SELECT KeyValue From tblSettings WHERE keyName='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();

            if (Logsave == "YES")
            {
                string value1 = string.Empty;
                string value2 = string.Empty;
                string value3 = string.Empty;

                int middlePos = 0;
                logdescription = string.Format("Update tblLedger SET LedgerName={0}, AliasName={1}, GroupID={2},OpenBalanceDR={3},ContactName={4},Add1={5}, Add2={6}, Add3={7}, Phone={8}, OpenBalanceCR= {9},LedgerCategory={11},ExecutiveInCharge = {12},TinNumber={13},Mobile={14}, Inttrans={15}, Paymentmade={16}, dc={17} WHERE LedgerID={10}", LedgerName, AliasName, GroupID, OpenBalanceDR, ContactName, Add1, Add2, Add3, Phone, OpenBalanceCR, LedgerID, LedgerCategory, ExecutiveIncharge, TinNumber, Mobile, Inttrans, Paymentmade, dc);
                logdescription = logdescription.Trim();

                if (logdescription.Length > 255)
                {
                    value1 = logdescription.Substring(0, 255);
                    middlePos = logdescription.Length - value1.Length;
                    if (middlePos > 0)
                        value2 = logdescription.Substring(255, middlePos);
                    else
                        value2 = "";

                    //middlePos = logdescription.Length - (value1.Length + value2.Length);
                    //if (middlePos > 0)
                    //    value3 = logdescription.Substring(510, middlePos);
                    //else
                    value3 = "";
                }
                else
                {
                    value1 = logdescription;
                    value2 = "";
                    value3 = "";
                }

                description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}')",
                     DateTime.Now.ToString("yyyy-MM-dd"), value1, "", "", value2, value3, "UpdateLedgerInfo");
                manager.ExecuteNonQuery(CommandType.Text, description);
            }

            dbQry = string.Format("Update tblLedger SET LedgerName='{0}', AliasName='{1}', GroupID={2},OpenBalanceDR={3},ContactName='{4}',Add1='{5}', Add2='{6}', Add3='{7}', Phone='{8}', OpenBalanceCR= {9},LedgerCategory='{11}',ExecutiveInCharge = {12},TinNumber='{13}',Mobile='{14}', Inttrans='{15}', Paymentmade='{16}', dc='{17}',ChequeName='{18}', unuse='{19}',EmailId='{20}',ModeofContact={21},OpDueDate='{22}' WHERE LedgerID={10}", LedgerName, AliasName, GroupID, OpenBalanceDR, ContactName, Add1, Add2, Add3, Phone, OpenBalanceCR, LedgerID, LedgerCategory, ExecutiveIncharge, TinNumber, Mobile, Inttrans, Paymentmade, dc, ChequeName, unuse, EmailId, ModeofContact, OpDueDate);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            sAuditStr = "Ledger ID : " + oldLedgerID + " got edited. Record Details :  User :" + Username + " Ledger : " + oldLedgerName + " GroupID= " + GroupID + " ,Mobile=" + oldmobile + " Phone :" + oldphone;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit And Update", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }




    public void UpdateExpenseInformation(string connection, int ID, string Expensehead, string AliasName, int GroupID, string Username, string IsActive)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        string dbQ = string.Empty;
        DataSet dsd = new DataSet();
        DataSet dsdt = new DataSet();
        string logdescription = string.Empty;
        string description = string.Empty;
        string Logsave = string.Empty;

        //DateTime sBilldate;
        //string[] sDate;
        //string delim = "/";
        //char[] delimA = delim.ToCharArray();

        string sAuditStr = string.Empty;
        int oldLedgerID = 0;
        string oldLedgerName = string.Empty;
        string oldmobile = string.Empty;
        string oldphone = string.Empty;
        DataSet dsOld = new DataSet();

        try
        {
            manager.Open();
            manager.ProviderType = DataProvider.SqlServer;

            manager.BeginTransaction();

            //  object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblLedger Where LedgerName='" + LedgerName + "' And LedgerID <> " + LedgerID.ToString() + "");
            object exists = manager.ExecuteScalar(CommandType.Text, "SELECT Count(*) FROM tblExpenseMaster Where ExpenseHead='" + Expensehead + "'");
            if (exists.ToString() != string.Empty)
            {
                if (int.Parse(exists.ToString()) > 0)
                {
                    throw new Exception("Ledger Exists");
                }
            }

            //sDate = OpDueDate.Trim().Split(delimA);


            dbQry = string.Format("Update tblExpenseMaster SET Expensehead='{0}', AliasName='{1}', IsActive='{2}' where ID={3}", Expensehead, AliasName, IsActive, ID);

            manager.ExecuteNonQuery(CommandType.Text, dbQry);
            //sBilldate = new DateTime(Convert.ToInt32(sDate[2].ToString()), Convert.ToInt32(sDate[1].ToString()), Convert.ToInt32(sDate[0].ToString()));


            //dbQ = string.Format("Select LedgerName,LedgerID,phone,mobile from tblledger Where LedgerID={0}", LedgerID);
            //dsOld = manager.ExecuteDataSet(CommandType.Text, dbQ);
            //if (dsOld != null)
            //{
            //    if (dsOld.Tables.Count > 0)
            //    {
            //        oldLedgerID = Convert.ToInt32(dsOld.Tables[0].Rows[0]["LedgerID"]);
            //        oldLedgerName = Convert.ToString(dsOld.Tables[0].Rows[0]["LedgerName"]);
            //        oldphone = Convert.ToString(dsOld.Tables[0].Rows[0]["phone"]);
            //        oldmobile = Convert.ToString(dsOld.Tables[0].Rows[0]["mobile"]);
            //    }

            //}

            dbQ = "SELECT KeyValue From tblSettings WHERE keyName='SAVELOG'";
            dsd = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsd.Tables[0].Rows.Count > 0)
                Logsave = dsd.Tables[0].Rows[0]["KeyValue"].ToString();




             dbQ = "SELECT * From tblledger where ExpenseID="+ ID;
            dsdt = manager.ExecuteDataSet(CommandType.Text, dbQ.ToString());
            if (dsdt != null)
            {
                if (dsdt.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsdt.Tables[0].Rows)
                    {
                       //string  ExpID = Convert.ToInt32(manager.ExecuteScalar(CommandType.Text, "SELECT MAX(ID) FROM tblExpenseMaster"));
                        string branchcode = Convert.ToString(dr["Branchcode"]);

                        if (Logsave == "YES")
                        {
                            string value1 = string.Empty;
                            string value2 = string.Empty;
                            string value3 = string.Empty;

                            int middlePos = 0;
                            logdescription = string.Format("Update tblLedger SET LedgerName='{0}', AliasName='{1}',unuse='{2}' WHERE ExpenseID={3} And BranchCode={4}", Expensehead + " - " + branchcode, AliasName, IsActive, ID, branchcode);
                            logdescription = logdescription.Trim();

                            if (logdescription.Length > 255)
                            {
                                value1 = logdescription.Substring(0, 255);
                                middlePos = logdescription.Length - value1.Length;
                                if (middlePos > 0)
                                    value2 = logdescription.Substring(255, middlePos);
                                else
                                    value2 = "";

                                //middlePos = logdescription.Length - (value1.Length + value2.Length);
                                //if (middlePos > 0)
                                //    value3 = logdescription.Substring(510, middlePos);
                                //else
                                value3 = "";
                            }
                            else
                            {
                                value1 = logdescription;
                                value2 = "";
                                value3 = "";
                            }

                            description = string.Format("INSERT INTO tblLog(LogDate,LogDescription,LogUsername,LogKey,LogDescription1,LogDescription2,LogMethod) VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}')",
                                 DateTime.Now.ToString("yyyy-MM-dd"), value1, "", "", value2, value3, "UpdateLedgerInfo");
                            manager.ExecuteNonQuery(CommandType.Text, description);
                        }


                        dbQry = string.Format("Update tblLedger SET LedgerName='{0}', AliasName='{1}',unuse='{2}' WHERE ExpenseID={3} And BranchCode='{4}'", Expensehead + " - " + branchcode, AliasName + " - " + branchcode, IsActive, ID, branchcode);

                        manager.ExecuteNonQuery(CommandType.Text, dbQry);

                    }
                }
            }

            sAuditStr = "Expense ID : " + ID + " got edited. Record Details :  User :" + Username + " Expense : " + Expensehead + " GroupID= " + 8;
            dbQry = string.Format("INSERT INTO  tblAudit(Description,Command,auditdate) VALUES('{0}','{1}','{2}')", sAuditStr, "Edit And Update", DateTime.Now.ToString("yyyy-MM-dd"));
            manager.ExecuteNonQuery(CommandType.Text, dbQry);

            manager.CommitTransaction();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }


    public int getCashACLedgerId(string connection, string BranchCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();

            string check = "Cash A/c - " + BranchCode;
            dbQry.Append("SELECT ledgerid From tblLedger WHERE LedgerName = '" + check + "' ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return Convert.ToInt32(ds.Tables[0].Rows[0]["ledgerid"]);
            else
                return 0;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public int getSalesACLedgerId(string connection, string BranchCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();

            string check = "Sales A/c - " + BranchCode;
            dbQry.Append("SELECT ledgerid From tblLedger WHERE LedgerName = '" + check + "' ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return Convert.ToInt32(ds.Tables[0].Rows[0]["ledgerid"]);
            else
                return 0;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public int getPurchaseACLedgerId(string connection, string BranchCode)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);// +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();

            string check = "Purchase A/c - " + BranchCode;
            dbQry.Append("SELECT ledgerid From tblLedger WHERE LedgerName = '" + check + "' ");

            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return Convert.ToInt32(ds.Tables[0].Rows[0]["ledgerid"]);
            else
                return 0;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListLedgerForGroupIsActive(string GroupID, string Branch)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            if ((GroupID == "1") || (GroupID == "8"))
            {
                dbQry = "select LedgerID,LedgerName From tblLedger Where GroupID = " + GroupID + " and BranchCode='" + Branch + "' and tblLedger.Unuse = 'YES' Order By LedgerName";
            }
            else
            {
                dbQry = "select LedgerID,LedgerName From tblLedger Where GroupID = " + GroupID + " and tblLedger.Unuse = 'YES' Order By LedgerName";
            }

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }


    public DataSet ListLedgerForGroup(string GroupID, string Branch)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(this.ConnectionString);// System.Configuration.ConfigurationManager.ConnectionStrings[connection].ConnectionString;

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            if ((GroupID == "1") || (GroupID == "8"))
            {
                dbQry = "select LedgerID,LedgerName From tblLedger Where GroupID = " + GroupID + " and BranchCode='" + Branch + "'  Order By LedgerName";
            }
            else
            {
                dbQry = "select LedgerID,LedgerName From tblLedger Where GroupID = " + GroupID + " Order By LedgerName";
            }

            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet ListSundryDebitorsIsActive(string connection, string Branch)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}','{2}','{3}','{4}') OR tblGroups.HeadingID IN (11) Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors", "Bank Accounts", "Cash in Hand", "InCome");
            dbQry = string.Format("select LedgerId, LedgerName, Mobile from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where GroupName = 'Sundry Debtors' and tblLedger.Unuse = 'YES' and Branchcode='" + Branch + "' ORDER By LedgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListSundryDebitors(string connection, string Branch)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}','{2}','{3}','{4}') OR tblGroups.HeadingID IN (11) Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors", "Bank Accounts", "Cash in Hand", "InCome");
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where GroupName = 'Sundry Debtors' and Branchcode='" + Branch + "' ORDER By LedgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet ListSundryDebtors(string connection, string Branch)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        if (connection.IndexOf("Provider=Microsoft.Jet.OLEDB.4.0;") > -1)
            manager.ConnectionString = CreateConnectionString(connection);
        else
            manager.ConnectionString = CreateConnectionString(connection);

        DataSet ds = new DataSet();
        string dbQry = string.Empty;

        try
        {
            //dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName IN ('{0}','{1}') Order By LedgerName Asc ", "Sundry Debtors", "Sundry Creditors");
            dbQry = string.Format("select LedgerId, LedgerName from tblLedger inner join tblGroups on tblGroups.GroupID = tblLedger.GroupID Where tblGroups.GroupName='Sundry Debtors' and Branchcode='" + Branch + "' Order By ledgerName");
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            manager.Dispose();
        }

    }

    public DataSet Getproductspecifacation(string connection, string ProductId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        //dbQry = "Select empno,empFirstName From tblEmployee Order By empFirstName";
        dbQry.Append(" select tblFormula.FormulaID,tblFormula.FormulaName from tblFormula ");
        dbQry.Append("  where FormulaName= '" + ProductId + "' ");

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

    public DataSet Loadproduct(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = " SELECT FormulaName FROM tblFormula Group By FormulaName ";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
            manager.Dispose();
        }
    }

    public DataSet Getproductlistspecification(string connection, string ProductId)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection); // +sPath; //System.Configuration.ConfigurationManager.ConnectionStrings["ACCSYS"].ToString();
        DataSet ds = new DataSet();
        StringBuilder dbQry = new StringBuilder();
        //dbQry = "Select empno,empFirstName From tblEmployee Order By empFirstName";
        if (ProductId == "---All---")
        {
            dbQry.Append(" SELECT tblFormula.FormulaID, tblFormula.FormulaName,tblFormula.ItemCode, tblFormula.Unit_Of_Measure, tblFormula.InOut, tblFormula.Qty, tblProductStock.ProductName, tblProductStock.ProductDesc, tblProductStock.Model,tblProductStock.Stock,tblProductStock.BranchCode FROM tblFormula INNER JOIN tblProductStock ON tblFormula.ItemCode = tblProductStock.ItemCode  ");
        }
        else
        {
            dbQry.Append(" SELECT tblFormula.FormulaID, tblFormula.FormulaName,tblFormula.ItemCode, tblFormula.Unit_Of_Measure, tblFormula.InOut, tblFormula.Qty, tblProductStock.ProductName, tblProductStock.ProductDesc, tblProductStock.Model,tblProductStock.Stock,tblProductStock.BranchCode FROM tblFormula INNER JOIN tblProductStock ON tblFormula.ItemCode = tblProductStock.ItemCode  ");
            dbQry.Append("  where tblFormula.FormulaName= '" + ProductId + "' ");
        }

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry.ToString());

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }
    

    public DataSet GetYearEndOutStandingReport(string connection, string master, string sLedger)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        manager.ConnectionString = CreateConnectionString(connection);
        //DataSet ds = new DataSet();

        DataSet dsParentQry = new DataSet();
        string sLedgerName = string.Empty, sConStr = string.Empty, sAliasName = string.Empty, sQry = string.Empty;
        string sLedgerId = string.Empty;

        string sLedgerPhone = string.Empty;

        StringBuilder dbQry = new StringBuilder();
        string dbQry2 = string.Empty;

        try
        {
            manager.Open();
                      
            //dbQry2 = "select * from tblproductstock where stock > 0 order by itemcode";
        
            dbQry2 = "SELECT tblLedger.LedgerID,tblLedger.LedgerName,tblLedger.phone,tblLedger.AliasName, (IIF((tblLedger.OpenBalanceDR is null),0,tblLedger.OpenBalanceDR)+ IIF((debittable.debitamount is null),0,debittable.debitamount)) - (IIF((tblLedger.OpenBalanceCR is null),0,tblLedger.OpenBalanceCR)+ IIF((credittable.creditamount is null),0,credittable.creditamount)) as balance FROM (tblLedger   left  join (SELECT DebtorID,sum(Amount) as debitamount FROM tblDayBook WHERE DebtorID > 0 group by DebtorID) debittable  on tblLedger.LedgerID=debittable.DebtorID) left join (SELECT CreditorID,sum(Amount) as creditamount FROM tblDayBook WHERE CreditorID > 0 group by CreditorID) credittable on tblLedger.LedgerID= credittable.CreditorID where GroupID in (1,2,3,14,16,4,19) ORDER BY tblLedger.LedgerName";

            dsParentQry = manager.ExecuteDataSet(CommandType.Text, dbQry2.ToString());



            Decimal temp_balance = 0;
        DataSet ds;
        DataTable dt;
        DataRow drNew;
        DataColumn dc;
        ds = new DataSet();
        dt = new DataTable();
        dc = new DataColumn("LedgerName");
        dt.Columns.Add(dc);
        dc = new DataColumn("LedgerID");
        dt.Columns.Add(dc);
        dc = new DataColumn("Phone");
        dt.Columns.Add(dc);
        dc = new DataColumn("AliasName");
        dt.Columns.Add(dc);
        dc = new DataColumn("Debit");
        dt.Columns.Add(dc);
        dc = new DataColumn("Credit");
        dt.Columns.Add(dc);
        ds.Tables.Add(dt);
      
            if (dsParentQry.Tables[0].Rows.Count == 0)
            {
                drNew = dt.NewRow();
                drNew["LedgerName"] = string.Empty;
                drNew["AliasName"] = string.Empty;
                drNew["LedgerID"] = string.Empty;
                drNew["Phone"] = string.Empty;
                drNew["Debit"] = "0.00";
                drNew["Credit"] = "0.00";
                ds.Tables[0].Rows.Add(drNew);
            }
            else
            {
                foreach (DataRow drParentQry in dsParentQry.Tables[0].Rows)
                {
                    if (drParentQry["LedgerName"] != null)
                        sLedgerName = drParentQry["LedgerName"].ToString();
                    if (drParentQry["AliasName"] != null)
                        sAliasName = drParentQry["AliasName"].ToString();
                    if (drParentQry["LedgerID"] != null)
                        sLedgerId = drParentQry["LedgerID"].ToString();
                    if (drParentQry["Phone"] != null)
                        sLedgerPhone = drParentQry["Phone"].ToString();
                    if ((drParentQry["balance"] != null) && (drParentQry["balance"].ToString() != ""))
                        temp_balance = decimal.Parse(drParentQry["balance"].ToString(), System.Globalization.NumberStyles.Float);
                    else
                        temp_balance = 0;
                    if (temp_balance > 0)
                    {
                        drNew = dt.NewRow();
                        drNew["LedgerName"] = sLedgerName;
                        drNew["AliasName"] = sAliasName;
                        drNew["LedgerID"] = sLedgerId;
                        drNew["Phone"] = sLedgerPhone;
                        drNew["Debit"] = temp_balance;
                        drNew["Credit"] = "0.00";
                        ds.Tables[0].Rows.Add(drNew);
                    }
                    else
                    {
                        drNew = dt.NewRow();
                        drNew["LedgerName"] = sLedgerName;
                        drNew["AliasName"] = sAliasName;
                        drNew["LedgerID"] = sLedgerId;
                        drNew["Phone"] = sLedgerPhone;
                        drNew["Debit"] = "0.00";
                        drNew["Credit"] = Math.Abs(temp_balance).ToString(); /* convert the negative to positive */
                        ds.Tables[0].Rows.Add(drNew);
                    }
                }
            }


            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    public DataSet ListYear(string connection)
    {
        DBManager manager = new DBManager(DataProvider.SqlServer);
        //manager.ConnectionString = CreateConnectionString(this.ConnectionString);
        manager.ConnectionString = CreateConnectionString(connection);
        string dbQry = string.Empty;
        DataSet ds = new DataSet();
        dbQry = "Select * From tblYearmaster Order By YearName";

        try
        {
            manager.Open();
            ds = manager.ExecuteDataSet(CommandType.Text, dbQry);

            if (ds.Tables[0].Rows.Count > 0)
                return ds;
            else
                return null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            if (manager != null)
                manager.Dispose();
        }
    }

}
